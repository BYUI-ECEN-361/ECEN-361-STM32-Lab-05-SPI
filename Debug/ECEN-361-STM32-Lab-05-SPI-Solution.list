
ECEN-361-STM32-Lab-05-SPI-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f00  08007f00  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000867c  2000006c  08007f74  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200086e8  08007f74  000286e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e442  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ef6  00000000  00000000  0003e521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000145d  00000000  00000000  00043e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029796  00000000  00000000  000452ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da83  00000000  00000000  0006ea43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010140d  00000000  00000000  0008c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007600  00000000  00000000  0018d8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00194ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dcc 	.word	0x08007dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007dcc 	.word	0x08007dcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f947 	bl	8001830 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f936 	bl	8001830 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f92b 	bl	8001830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f925 	bl	8001830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f91f 	bl	8001830 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 f90c 	bl	8001830 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 f907 	bl	8001830 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000008c 	.word	0x2000008c

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 f8e2 	bl	8001830 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 f8bc 	bl	8001830 <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	08007e54 	.word	0x08007e54

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000088 	.word	0x20000088

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fd4a 	bl	80011cc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f83e 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f95c 	bl	80009f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000740:	f000 f92a 	bl	8000998 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000744:	f000 f902 	bl	800094c <MX_TIM17_Init>
  MX_SPI2_Init();
 8000748:	f000 f8c6 	bl	80008d8 <MX_SPI2_Init>
  MX_SPI1_Init();
 800074c:	f000 f886 	bl	800085c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0x6c>)
 8000752:	f002 fdff 	bl	8003354 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 8000756:	f7ff ff69 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 800075a:	f7ff ff55 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f001 f862 	bl	8001830 <HAL_GPIO_WritePin>
  printf("\033\143");
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <main+0x70>)
 800076e:	f006 fc55 	bl	800701c <iprintf>
  printf("Welcome to ECEN-361 Lab-05\n\r\n\r");
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <main+0x74>)
 8000774:	f006 fc52 	bl	800701c <iprintf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f003 fe28 	bl	80043cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <main+0x78>)
 800077e:	2100      	movs	r1, #0
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <main+0x7c>)
 8000782:	f003 fe6d 	bl	8004460 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <main+0x80>)
 800078a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
   osThreadNew(D2_Task, NULL, &defaultTask_attributes);
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <main+0x78>)
 800078e:	2100      	movs	r1, #0
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <main+0x84>)
 8000792:	f003 fe65 	bl	8004460 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000796:	f003 fe3d 	bl	8004414 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x6a>
 800079c:	20000158 	.word	0x20000158
 80007a0:	08007df0 	.word	0x08007df0
 80007a4:	08007df4 	.word	0x08007df4
 80007a8:	08007e58 	.word	0x08007e58
 80007ac:	08000bdd 	.word	0x08000bdd
 80007b0:	2000022c 	.word	0x2000022c
 80007b4:	08000b9d 	.word	0x08000b9d

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b096      	sub	sp, #88	; 0x58
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2244      	movs	r2, #68	; 0x44
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 fc7d 	bl	80070c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007de:	f001 f867 	bl	80018b0 <HAL_PWREx_ControlVoltageScaling>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007e8:	f000 fa18 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000806:	230a      	movs	r3, #10
 8000808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f89e 	bl	800195c <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000826:	f000 f9f9 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2303      	movs	r3, #3
 8000830:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2104      	movs	r1, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fc66 	bl	8002114 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084e:	f000 f9e5 	bl	8000c1c <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3758      	adds	r7, #88	; 0x58
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_SPI1_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000876:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800087a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x74>)
 800088a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008bc:	f002 fb3c 	bl	8002f38 <HAL_SPI_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f9a9 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000090 	.word	0x20000090
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_SPI2_Init+0x6c>)
 80008de:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <MX_SPI2_Init+0x70>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_SPI2_Init+0x6c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI2_Init+0x6c>)
 80008ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI2_Init+0x6c>)
 80008f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_SPI2_Init+0x6c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI2_Init+0x6c>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI2_Init+0x6c>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI2_Init+0x6c>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI2_Init+0x6c>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_SPI2_Init+0x6c>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI2_Init+0x6c>)
 800091e:	2207      	movs	r2, #7
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_SPI2_Init+0x6c>)
 8000924:	2200      	movs	r2, #0
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI2_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_SPI2_Init+0x6c>)
 8000930:	f002 fb02 	bl	8002f38 <HAL_SPI_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800093a:	f000 f96f 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000f4 	.word	0x200000f4
 8000948:	40003800 	.word	0x40003800

0800094c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_TIM17_Init+0x44>)
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <MX_TIM17_Init+0x48>)
 8000954:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_TIM17_Init+0x44>)
 8000958:	f240 321f 	movw	r2, #799	; 0x31f
 800095c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_TIM17_Init+0x44>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_TIM17_Init+0x44>)
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_TIM17_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_TIM17_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_TIM17_Init+0x44>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_TIM17_Init+0x44>)
 800097e:	f002 fc92 	bl	80032a6 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000988:	f000 f948 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000158 	.word	0x20000158
 8000994:	40014800 	.word	0x40014800

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	f002 ff0c 	bl	80037f8 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f919 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001a4 	.word	0x200001a4
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b60      	ldr	r3, [pc, #384]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a5f      	ldr	r2, [pc, #380]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b5d      	ldr	r3, [pc, #372]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a59      	ldr	r2, [pc, #356]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b57      	ldr	r3, [pc, #348]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b54      	ldr	r3, [pc, #336]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a53      	ldr	r2, [pc, #332]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a4d      	ldr	r2, [pc, #308]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b4b      	ldr	r3, [pc, #300]	; (8000b90 <MX_GPIO_Init+0x198>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 feda 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4844      	ldr	r0, [pc, #272]	; (8000b94 <MX_GPIO_Init+0x19c>)
 8000a82:	f000 fed5 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x19c>)
 8000a8c:	f000 fed0 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	483c      	ldr	r0, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x1a0>)
 8000aa8:	f000 fd18 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4836      	ldr	r0, [pc, #216]	; (8000b98 <MX_GPIO_Init+0x1a0>)
 8000ac0:	f000 fd0c 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f000 fcff 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f000 fcf2 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000afc:	2311      	movs	r3, #17
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 fce3 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b16:	2301      	movs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	; (8000b94 <MX_GPIO_Init+0x19c>)
 8000b2a:	f000 fcd7 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000b2e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fcc7 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_GPIO_Init+0x19c>)
 8000b66:	f000 fcb9 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b6e:	2311      	movs	r3, #17
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_GPIO_Init+0x19c>)
 8000b82:	f000 fcab 	bl	80014dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	48000800 	.word	0x48000800

08000b9c <D2_Task>:



/************  Task-Creation-Part-B *****************/
void D2_Task(void *argument)
	{ while(true)
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
		{ HAL_GPIO_TogglePin(LED_D2_GPIO_Port,LED_D2_Pin);
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fe59 	bl	8001860 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb2:	f000 fb4b 	bl	800124c <HAL_Delay>
		{ HAL_GPIO_TogglePin(LED_D2_GPIO_Port,LED_D2_Pin);
 8000bb6:	e7f5      	b.n	8000ba4 <D2_Task+0x8>

08000bb8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000bc0:	1d39      	adds	r1, r7, #4
 8000bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <__io_putchar+0x20>)
 8000bca:	f002 fe63 	bl	8003894 <HAL_UART_Transmit>

  return ch;
 8000bce:	687b      	ldr	r3, [r7, #4]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001a4 	.word	0x200001a4

08000bdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f003 fccd 	bl	8004584 <osDelay>
 8000bea:	e7fb      	b.n	8000be4 <StartDefaultTask+0x8>

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000bfc:	f7ff fd66 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000c0a:	f000 faff 	bl	800120c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000158 	.word	0x20000158

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210f      	movs	r1, #15
 8000c62:	f06f 0001 	mvn.w	r0, #1
 8000c66:	f000 fbcd 	bl	8001404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a41      	ldr	r2, [pc, #260]	; (8000d9c <HAL_SPI_MspInit+0x124>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d129      	bne.n	8000cee <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c9a:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a3a      	ldr	r2, [pc, #232]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f000 fbf8 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cec:	e051      	b.n	8000d92 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <HAL_SPI_MspInit+0x12c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d14c      	bne.n	8000d92 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6593      	str	r3, [r2, #88]	; 0x58
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_SPI_MspInit+0x128>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d40:	2308      	movs	r3, #8
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d50:	2305      	movs	r3, #5
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4813      	ldr	r0, [pc, #76]	; (8000da8 <HAL_SPI_MspInit+0x130>)
 8000d5c:	f000 fbbe 	bl	80014dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d72:	2305      	movs	r3, #5
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <HAL_SPI_MspInit+0x134>)
 8000d7e:	f000 fbad 	bl	80014dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2105      	movs	r1, #5
 8000d86:	2024      	movs	r0, #36	; 0x24
 8000d88:	f000 fb3c 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d8c:	2024      	movs	r0, #36	; 0x24
 8000d8e:	f000 fb55 	bl	800143c <HAL_NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40013000 	.word	0x40013000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40003800 	.word	0x40003800
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000400 	.word	0x48000400

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_TIM_Base_MspInit+0x44>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d113      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_Base_MspInit+0x48>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_TIM_Base_MspInit+0x48>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0x48>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	201a      	movs	r0, #26
 8000de0:	f000 fb10 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000de4:	201a      	movs	r0, #26
 8000de6:	f000 fb29 	bl	800143c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40014800 	.word	0x40014800
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ac      	sub	sp, #176	; 0xb0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2288      	movs	r2, #136	; 0x88
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f006 f952 	bl	80070c6 <memset>
  if(huart->Instance==USART2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <HAL_UART_MspInit+0xb0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d13b      	bne.n	8000ea4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fbc1 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e44:	f7ff feea 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	6593      	str	r3, [r2, #88]	; 0x58
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f000 fb1c 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b0      	adds	r7, #176	; 0xb0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_InitTick+0xe0>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a33      	ldr	r2, [pc, #204]	; (8000f94 <HAL_InitTick+0xe0>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_InitTick+0xe0>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eda:	f107 0210 	add.w	r2, r7, #16
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fad9 	bl	800249c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ef4:	f001 faa6 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8000ef8:	6378      	str	r0, [r7, #52]	; 0x34
 8000efa:	e004      	b.n	8000f06 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000efc:	f001 faa2 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8000f00:	4603      	mov	r3, r0
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f08:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_InitTick+0xe4>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9b      	lsrs	r3, r3, #18
 8000f10:	3b01      	subs	r3, #1
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f22:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f28:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000f3c:	4817      	ldr	r0, [pc, #92]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f3e:	f002 f9b2 	bl	80032a6 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d11b      	bne.n	8000f88 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <HAL_InitTick+0xe8>)
 8000f52:	f002 f9ff 	bl	8003354 <HAL_TIM_Base_Start_IT>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d111      	bne.n	8000f88 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f64:	201c      	movs	r0, #28
 8000f66:	f000 fa69 	bl	800143c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d808      	bhi.n	8000f82 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	201c      	movs	r0, #28
 8000f76:	f000 fa45 	bl	8001404 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_InitTick+0xec>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e002      	b.n	8000f88 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	20000230 	.word	0x20000230
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000fd6:	f002 fa2d 	bl	8003434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000158 	.word	0x20000158

08000fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM2_IRQHandler+0x10>)
 8000fea:	f002 fa23 	bl	8003434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000230 	.word	0x20000230

08000ff8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <SPI2_IRQHandler+0x10>)
 8000ffe:	f002 f83f 	bl	8003080 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000f4 	.word	0x200000f4

0800100c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800101e:	f3af 8000 	nop.w
 8001022:	4601      	mov	r1, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf0      	blt.n	800101e <_read+0x12>
  }

  return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fda9 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
  }
  return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
  return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f006 f87a 	bl	8007210 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20018000 	.word	0x20018000
 8001148:	00000400 	.word	0x00000400
 800114c:	2000027c 	.word	0x2000027c
 8001150:	200086e8 	.word	0x200086e8

08001154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff ffea 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f006 f839 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fac1 	bl	8000730 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011bc:	08007f08 	.word	0x08007f08
  ldr r2, =_sbss
 80011c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011c4:	200086e8 	.word	0x200086e8

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_Init+0x3c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_Init+0x3c>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 f903 	bl	80013ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e8:	200f      	movs	r0, #15
 80011ea:	f7ff fe63 	bl	8000eb4 <HAL_InitTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	e001      	b.n	80011fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fa:	f7ff fd15 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	20000280 	.word	0x20000280

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000280 	.word	0x20000280

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff4c 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001416:	f7ff ff61 	bl	80012dc <__NVIC_GetPriorityGrouping>
 800141a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f7ff ffb1 	bl	8001388 <NVIC_EncodePriority>
 8001426:	4602      	mov	r2, r0
 8001428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff80 	bl	8001334 <__NVIC_SetPriority>
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff54 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d005      	beq.n	800147c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2204      	movs	r2, #4
 8001474:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e029      	b.n	80014d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020e 	bic.w	r2, r2, #14
 800148a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 021c 	and.w	r2, r3, #28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
    }
  }
  return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e17f      	b.n	80017ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8171 	beq.w	80017e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d005      	beq.n	800151c <HAL_GPIO_Init+0x40>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d130      	bne.n	800157e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001552:	2201      	movs	r2, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 0201 	and.w	r2, r3, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b03      	cmp	r3, #3
 8001588:	d118      	bne.n	80015bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001590:	2201      	movs	r2, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	f003 0201 	and.w	r2, r3, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d017      	beq.n	80015f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80ac 	beq.w	80017e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_GPIO_Init+0x330>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_GPIO_Init+0x330>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	; 0x60
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_GPIO_Init+0x330>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <HAL_GPIO_Init+0x334>)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x242>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_GPIO_Init+0x338>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x23e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_GPIO_Init+0x33c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x23a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4d      	ldr	r2, [pc, #308]	; (800181c <HAL_GPIO_Init+0x340>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x236>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_GPIO_Init+0x344>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x232>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4b      	ldr	r2, [pc, #300]	; (8001824 <HAL_GPIO_Init+0x348>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x22e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <HAL_GPIO_Init+0x34c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x22a>
 8001702:	2306      	movs	r3, #6
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001706:	2307      	movs	r3, #7
 8001708:	e00a      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800170a:	2305      	movs	r3, #5
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800170e:	2304      	movs	r3, #4
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800171e:	2300      	movs	r3, #0
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <HAL_GPIO_Init+0x334>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_GPIO_Init+0x350>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_GPIO_Init+0x350>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_GPIO_Init+0x350>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <HAL_GPIO_Init+0x350>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_GPIO_Init+0x350>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_GPIO_Init+0x350>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_GPIO_Init+0x350>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_GPIO_Init+0x350>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f ae78 	bne.w	80014ec <HAL_GPIO_Init+0x10>
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	48000400 	.word	0x48000400
 8001818:	48000800 	.word	0x48000800
 800181c:	48000c00 	.word	0x48000c00
 8001820:	48001000 	.word	0x48001000
 8001824:	48001400 	.word	0x48001400
 8001828:	48001800 	.word	0x48001800
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184c:	e002      	b.n	8001854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43d9      	mvns	r1, r3
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	400b      	ands	r3, r1
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_PWREx_GetVoltageRange+0x18>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40007000 	.word	0x40007000

080018b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018be:	d130      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018cc:	d038      	beq.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2232      	movs	r2, #50	; 0x32
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f4:	e002      	b.n	80018fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001908:	d102      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x60>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f2      	bne.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191c:	d110      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e00f      	b.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	d007      	beq.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000
 8001954:	20000000 	.word	0x20000000
 8001958:	431bde83 	.word	0x431bde83

0800195c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e3ca      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196e:	4b97      	ldr	r3, [pc, #604]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001978:	4b94      	ldr	r3, [pc, #592]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80e4 	beq.w	8001b58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4a>
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	f040 808b 	bne.w	8001ab4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 8087 	bne.w	8001ab4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a6:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e3a2      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_RCC_OscConfig+0x7c>
 80019ce:	4b7f      	ldr	r3, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d6:	e005      	b.n	80019e4 <HAL_RCC_OscConfig+0x88>
 80019d8:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d223      	bcs.n	8001a30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fd87 	bl	8002500 <RCC_SetFlashLatencyFromMSIRange>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e383      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fc:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b70      	ldr	r3, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	496d      	ldr	r1, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1a:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	4968      	ldr	r1, [pc, #416]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
 8001a2e:	e025      	b.n	8001a7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4960      	ldr	r1, [pc, #384]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	495b      	ldr	r1, [pc, #364]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fd47 	bl	8002500 <RCC_SetFlashLatencyFromMSIRange>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e343      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a7c:	f000 fc4a 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b52      	ldr	r3, [pc, #328]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	4950      	ldr	r1, [pc, #320]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a9c:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fa07 	bl	8000eb4 <HAL_InitTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d052      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	e327      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d032      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a42      	ldr	r2, [pc, #264]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fbb4 	bl	8001234 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fbb0 	bl	8001234 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e310      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4931      	ldr	r1, [pc, #196]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	492c      	ldr	r1, [pc, #176]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e01a      	b.n	8001b58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fb81 	bl	8001234 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b36:	f7ff fb7d 	bl	8001234 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e2dd      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x1da>
 8001b54:	e000      	b.n	8001b58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d074      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x21a>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d10e      	bne.n	8001b8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d064      	beq.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d160      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e2ba      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e026      	b.n	8001bf4 <HAL_RCC_OscConfig+0x298>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bae:	d115      	bne.n	8001bdc <HAL_RCC_OscConfig+0x280>
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a02      	ldr	r2, [pc, #8]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e014      	b.n	8001bf4 <HAL_RCC_OscConfig+0x298>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08007e7c 	.word	0x08007e7c
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	4ba0      	ldr	r3, [pc, #640]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a9f      	ldr	r2, [pc, #636]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a9c      	ldr	r2, [pc, #624]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fb1a 	bl	8001234 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fb16 	bl	8001234 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e276      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2a8>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fb06 	bl	8001234 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fb02 	bl	8001234 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e262      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3e:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2d0>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d060      	beq.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_OscConfig+0x310>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d116      	bne.n	8001c9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c6c:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x328>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e23f      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	4973      	ldr	r1, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c98:	e040      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d023      	beq.n	8001cea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff fac1 	bl	8001234 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fabd 	bl	8001234 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e21d      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc8:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	495f      	ldr	r1, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e018      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fa9d 	bl	8001234 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fa99 	bl	8001234 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1f9      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d03c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fa78 	bl	8001234 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fa74 	bl	8001234 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1d4      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ef      	beq.n	8001d48 <HAL_RCC_OscConfig+0x3ec>
 8001d68:	e01b      	b.n	8001da2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	4a3b      	ldr	r2, [pc, #236]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fa5b 	bl	8001234 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff fa57 	bl	8001234 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1b7      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ef      	bne.n	8001d82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a6 	beq.w	8001efc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10d      	bne.n	8001ddc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6593      	str	r3, [r2, #88]	; 0x58
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d118      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fa1e 	bl	8001234 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfc:	f7ff fa1a 	bl	8001234 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e17a      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4d8>
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e32:	e029      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d115      	bne.n	8001e68 <HAL_RCC_OscConfig+0x50c>
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	4b9c      	ldr	r3, [pc, #624]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a9b      	ldr	r2, [pc, #620]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e78:	4b98      	ldr	r3, [pc, #608]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	4a97      	ldr	r2, [pc, #604]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff f9d0 	bl	8001234 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff f9cc 	bl	8001234 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e12a      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	4b8b      	ldr	r3, [pc, #556]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ed      	beq.n	8001e98 <HAL_RCC_OscConfig+0x53c>
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f9b9 	bl	8001234 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff f9b5 	bl	8001234 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e113      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001edc:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ed      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b7a      	ldr	r3, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a79      	ldr	r2, [pc, #484]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80fe 	beq.w	8002102 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	f040 80d0 	bne.w	80020b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f10:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d130      	bne.n	8001f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d127      	bne.n	8001f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f50:	2a07      	cmp	r2, #7
 8001f52:	bf14      	ite	ne
 8001f54:	2201      	movne	r2, #1
 8001f56:	2200      	moveq	r2, #0
 8001f58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d113      	bne.n	8001f86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d06e      	beq.n	8002064 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	d069      	beq.n	8002060 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0ad      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb4:	f7ff f93e 	bl	8001234 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff f93a 	bl	8001234 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e09a      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_RCC_OscConfig+0x784>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fea:	3a01      	subs	r2, #1
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ff4:	0212      	lsls	r2, r2, #8
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ffc:	0852      	lsrs	r2, r2, #1
 8001ffe:	3a01      	subs	r2, #1
 8002000:	0552      	lsls	r2, r2, #21
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002008:	0852      	lsrs	r2, r2, #1
 800200a:	3a01      	subs	r2, #1
 800200c:	0652      	lsls	r2, r2, #25
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002014:	0912      	lsrs	r2, r2, #4
 8002016:	0452      	lsls	r2, r2, #17
 8002018:	430a      	orrs	r2, r1
 800201a:	4930      	ldr	r1, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002036:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002038:	f7ff f8fc 	bl	8001234 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff f8f8 	bl	8001234 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e058      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205e:	e050      	b.n	8002102 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e04f      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d148      	bne.n	8002102 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a16      	ldr	r2, [pc, #88]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002086:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002088:	f7ff f8d4 	bl	8001234 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f8d0 	bl	8001234 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e030      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x734>
 80020ae:	e028      	b.n	8002102 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d023      	beq.n	80020fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_RCC_OscConfig+0x780>)
 80020bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff f8b7 	bl	8001234 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	e00c      	b.n	80020e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7ff f8b3 	bl	8001234 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d905      	bls.n	80020e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e013      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_OscConfig+0x7b0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ec      	bne.n	80020ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_OscConfig+0x7b0>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4905      	ldr	r1, [pc, #20]	; (800210c <HAL_RCC_OscConfig+0x7b0>)
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_OscConfig+0x7b4>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
 80020fc:	e001      	b.n	8002102 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	feeefffc 	.word	0xfeeefffc

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0e7      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b75      	ldr	r3, [pc, #468]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4970      	ldr	r1, [pc, #448]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cf      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d010      	beq.n	8002186 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002170:	429a      	cmp	r2, r3
 8002172:	d908      	bls.n	8002186 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002174:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4960      	ldr	r1, [pc, #384]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d04c      	beq.n	800222c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b5a      	ldr	r3, [pc, #360]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d121      	bne.n	80021ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0a6      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	4b54      	ldr	r3, [pc, #336]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e09a      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	4b4e      	ldr	r3, [pc, #312]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e08e      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021da:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e086      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4943      	ldr	r1, [pc, #268]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fc:	f7ff f81a 	bl	8001234 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff f816 	bl	8001234 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e06e      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002244:	429a      	cmp	r2, r3
 8002246:	d208      	bcs.n	800225a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	492b      	ldr	r1, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d210      	bcs.n	800228a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 0207 	bic.w	r2, r3, #7
 8002270:	4923      	ldr	r1, [pc, #140]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_RCC_ClockConfig+0x1ec>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e036      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4918      	ldr	r1, [pc, #96]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4910      	ldr	r1, [pc, #64]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c8:	f000 f824 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	490b      	ldr	r1, [pc, #44]	; (8002308 <HAL_RCC_ClockConfig+0x1f4>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80022e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1fc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fde1 	bl	8000eb4 <HAL_InitTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80022f6:	7afb      	ldrb	r3, [r7, #11]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	08007e7c 	.word	0x08007e7c
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x34>
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d121      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d11e      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d107      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 8002356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e005      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002370:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10d      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002384:	e00a      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d102      	bne.n	8002392 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_RCC_GetSysClockFreq+0x110>)
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	e004      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d101      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCC_GetSysClockFreq+0x114>)
 800239a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d134      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0xa6>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d003      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xac>
 80023b8:	e005      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_RCC_GetSysClockFreq+0x110>)
 80023bc:	617b      	str	r3, [r7, #20]
      break;
 80023be:	e005      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_GetSysClockFreq+0x114>)
 80023c2:	617b      	str	r3, [r7, #20]
      break;
 80023c4:	e002      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	617b      	str	r3, [r7, #20]
      break;
 80023ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	3301      	adds	r3, #1
 80023d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	fb03 f202 	mul.w	r2, r3, r2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	0e5b      	lsrs	r3, r3, #25
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	3301      	adds	r3, #1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800240c:	69bb      	ldr	r3, [r7, #24]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	08007e94 	.word	0x08007e94
 8002424:	00f42400 	.word	0x00f42400
 8002428:	007a1200 	.word	0x007a1200

0800242c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <HAL_RCC_GetPCLK1Freq+0x28>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	08007e8c 	.word	0x08007e8c

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002474:	f7ff ffda 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0adb      	lsrs	r3, r3, #11
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4904      	ldr	r1, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	08007e8c 	.word	0x08007e8c

0800249c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	220f      	movs	r2, #15
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCC_GetClockConfig+0x60>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0207 	and.w	r2, r3, #7
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40022000 	.word	0x40022000

08002500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002518:	f7ff f9bc 	bl	8001894 <HAL_PWREx_GetVoltageRange>
 800251c:	6178      	str	r0, [r7, #20]
 800251e:	e014      	b.n	800254a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	; 0x58
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002538:	f7ff f9ac 	bl	8001894 <HAL_PWREx_GetVoltageRange>
 800253c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002550:	d10b      	bne.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d919      	bls.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2ba0      	cmp	r3, #160	; 0xa0
 800255c:	d902      	bls.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800255e:	2302      	movs	r3, #2
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e013      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002564:	2301      	movs	r3, #1
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e010      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d902      	bls.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002570:	2303      	movs	r3, #3
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e00a      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d102      	bne.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e004      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d101      	bne.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 0207 	bic.w	r2, r3, #7
 8002594:	4909      	ldr	r1, [pc, #36]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40022000 	.word	0x40022000

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d041      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025e4:	d02a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025ea:	d824      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025f0:	d008      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025f6:	d81e      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002600:	d010      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002602:	e018      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002604:	4b86      	ldr	r3, [pc, #536]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a85      	ldr	r2, [pc, #532]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002610:	e015      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fabb 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002622:	e00c      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3320      	adds	r3, #32
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fba6 	bl	8002d7c <RCCEx_PLLSAI2_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002634:	e003      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	74fb      	strb	r3, [r7, #19]
      break;
 800263a:	e000      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800263c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002652:	4973      	ldr	r1, [pc, #460]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800265a:	e001      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d041      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002674:	d02a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800267a:	d824      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800267c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002680:	d008      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002686:	d81e      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d010      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002692:	e018      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002694:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a61      	ldr	r2, [pc, #388]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a0:	e015      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fa73 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b2:	e00c      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3320      	adds	r3, #32
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fb5e 	bl	8002d7c <RCCEx_PLLSAI2_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c4:	e003      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	74fb      	strb	r3, [r7, #19]
      break;
 80026ca:	e000      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e2:	494f      	ldr	r1, [pc, #316]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ea:	e001      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a0 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a40      	ldr	r2, [pc, #256]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002730:	2301      	movs	r3, #1
 8002732:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002740:	f7fe fd78 	bl	8001234 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002746:	e009      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002748:	f7fe fd74 	bl	8001234 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	74fb      	strb	r3, [r7, #19]
        break;
 800275a:	e005      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ef      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d15c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002778:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	d019      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002796:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a20      	ldr	r2, [pc, #128]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fd33 	bl	8001234 <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d0:	e00b      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fd2f 	bl	8001234 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d902      	bls.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	74fb      	strb	r3, [r7, #19]
            break;
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ec      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280e:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002816:	e009      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282c:	7c7b      	ldrb	r3, [r7, #17]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b9e      	ldr	r3, [pc, #632]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a9d      	ldr	r2, [pc, #628]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284a:	4b98      	ldr	r3, [pc, #608]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 0203 	bic.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	4994      	ldr	r1, [pc, #592]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286c:	4b8f      	ldr	r3, [pc, #572]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 020c 	bic.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	498c      	ldr	r1, [pc, #560]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800288e:	4b87      	ldr	r3, [pc, #540]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4983      	ldr	r1, [pc, #524]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b0:	4b7e      	ldr	r3, [pc, #504]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	497b      	ldr	r1, [pc, #492]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	4972      	ldr	r1, [pc, #456]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f4:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	496a      	ldr	r1, [pc, #424]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002916:	4b65      	ldr	r3, [pc, #404]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	4961      	ldr	r1, [pc, #388]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002938:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	4959      	ldr	r1, [pc, #356]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295a:	4b54      	ldr	r3, [pc, #336]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	4950      	ldr	r1, [pc, #320]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800297c:	4b4b      	ldr	r3, [pc, #300]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	4948      	ldr	r1, [pc, #288]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	493f      	ldr	r1, [pc, #252]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d028      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d106      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a31      	ldr	r2, [pc, #196]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
 80029ec:	e011      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3304      	adds	r3, #4
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f8c8 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	491f      	ldr	r1, [pc, #124]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a3c:	d106      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a48:	60d3      	str	r3, [r2, #12]
 8002a4a:	e011      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f899 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02b      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa6:	60d3      	str	r3, [r2, #12]
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f867 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02f      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aee:	4928      	ldr	r1, [pc, #160]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f844 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	74bb      	strb	r3, [r7, #18]
 8002b1a:	e011      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3320      	adds	r3, #32
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f925 	bl	8002d7c <RCCEx_PLLSAI2_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5a:	490d      	ldr	r1, [pc, #52]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7e:	4904      	ldr	r1, [pc, #16]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b86:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba2:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bae:	4b72      	ldr	r3, [pc, #456]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0203 	and.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d047      	beq.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e044      	b.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d018      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x86>
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d825      	bhi.n	8002c38 <RCCEx_PLLSAI1_Config+0xa4>
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <RCCEx_PLLSAI1_Config+0x62>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d009      	beq.n	8002c08 <RCCEx_PLLSAI1_Config+0x74>
 8002bf4:	e020      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d11d      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e01a      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c08:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e013      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c36:	e006      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e004      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	430b      	orrs	r3, r1
 8002c64:	4944      	ldr	r1, [pc, #272]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d17d      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fada 	bl	8001234 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c84:	f7fe fad6 	bl	8001234 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
        break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ef      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d160      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	0912      	lsrs	r2, r2, #4
 8002cc8:	0452      	lsls	r2, r2, #17
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	492a      	ldr	r1, [pc, #168]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	610b      	str	r3, [r1, #16]
 8002cd2:	e027      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d112      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6892      	ldr	r2, [r2, #8]
 8002cea:	0211      	lsls	r1, r2, #8
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6912      	ldr	r2, [r2, #16]
 8002cf0:	0852      	lsrs	r2, r2, #1
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0552      	lsls	r2, r2, #21
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	491f      	ldr	r1, [pc, #124]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	610b      	str	r3, [r1, #16]
 8002cfe:	e011      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	0211      	lsls	r1, r2, #8
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6952      	ldr	r2, [r2, #20]
 8002d16:	0852      	lsrs	r2, r2, #1
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	0652      	lsls	r2, r2, #25
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	4916      	ldr	r1, [pc, #88]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fa80 	bl	8001234 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d36:	e009      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d38:	f7fe fa7c 	bl	8001234 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	73fb      	strb	r3, [r7, #15]
          break;
 8002d4a:	e005      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ef      	beq.n	8002d38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d018      	beq.n	8002dc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0203 	and.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d10d      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
       ||
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d047      	beq.n	8002e52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e044      	b.n	8002e52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d018      	beq.n	8002e02 <RCCEx_PLLSAI2_Config+0x86>
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d825      	bhi.n	8002e20 <RCCEx_PLLSAI2_Config+0xa4>
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d002      	beq.n	8002dde <RCCEx_PLLSAI2_Config+0x62>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d009      	beq.n	8002df0 <RCCEx_PLLSAI2_Config+0x74>
 8002ddc:	e020      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dde:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11d      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e01a      	b.n	8002e26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e013      	b.n	8002e2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e1e:	e006      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e004      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	4939      	ldr	r1, [pc, #228]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d167      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a35      	ldr	r2, [pc, #212]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe f9e6 	bl	8001234 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e6a:	e009      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e6c:	f7fe f9e2 	bl	8001234 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e7e:	e005      	b.n	8002e8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e80:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ef      	bne.n	8002e6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d14a      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6892      	ldr	r2, [r2, #8]
 8002ea8:	0211      	lsls	r1, r2, #8
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	0912      	lsrs	r2, r2, #4
 8002eb0:	0452      	lsls	r2, r2, #17
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	491f      	ldr	r1, [pc, #124]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	614b      	str	r3, [r1, #20]
 8002eba:	e011      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6912      	ldr	r2, [r2, #16]
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0652      	lsls	r2, r2, #25
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	4916      	ldr	r1, [pc, #88]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe f9a2 	bl	8001234 <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef2:	e009      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ef4:	f7fe f99e 	bl	8001234 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d902      	bls.n	8002f08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	73fb      	strb	r3, [r7, #15]
          break;
 8002f06:	e005      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ef      	beq.n	8002ef4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e095      	b.n	8003076 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5a:	d009      	beq.n	8002f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
 8002f62:	e005      	b.n	8002f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fe74 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb0:	d902      	bls.n	8002fb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e002      	b.n	8002fbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fc6:	d007      	beq.n	8002fd8 <HAL_SPI_Init+0xa0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fd0:	d002      	beq.n	8002fd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	ea42 0103 	orr.w	r1, r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	f003 0204 	and.w	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003054:	ea42 0103 	orr.w	r1, r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
    return;
 80030be:	e0ce      	b.n	800325e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_SPI_IRQHandler+0x5e>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
    return;
 80030dc:	e0bf      	b.n	800325e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_SPI_IRQHandler+0x7e>
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80b0 	beq.w	800325e <HAL_SPI_IRQHandler+0x1de>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80aa 	beq.w	800325e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b03      	cmp	r3, #3
 800311e:	d011      	beq.n	8003144 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	e00b      	b.n	800315c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
        return;
 800315a:	e080      	b.n	800325e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d014      	beq.n	8003190 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d04f      	beq.n	800325c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HAL_SPI_IRQHandler+0x168>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d034      	beq.n	8003252 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0203 	bic.w	r2, r2, #3
 80031f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d011      	beq.n	8003224 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_SPI_IRQHandler+0x1e4>)
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe f923 	bl	8001458 <HAL_DMA_Abort_IT>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_SPI_IRQHandler+0x1e4>)
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe f90d 	bl	8001458 <HAL_DMA_Abort_IT>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003250:	e003      	b.n	800325a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f808 	bl	8003268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003258:	e000      	b.n	800325c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800325a:	bf00      	nop
    return;
 800325c:	bf00      	nop
  }
}
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	0800327d 	.word	0x0800327d

08003268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff ffe5 	bl	8003268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e049      	b.n	800334c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fd6f 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f000 f9cf 	bl	8003688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d001      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e04f      	b.n	800340c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a23      	ldr	r2, [pc, #140]	; (8003418 <HAL_TIM_Base_Start_IT+0xc4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01d      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x76>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d018      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x76>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <HAL_TIM_Base_Start_IT+0xc8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x76>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_TIM_Base_Start_IT+0xcc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x76>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_TIM_Base_Start_IT+0xd0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x76>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_TIM_Base_Start_IT+0xd4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_TIM_Base_Start_IT+0x76>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_TIM_Base_Start_IT+0xd8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d115      	bne.n	80033f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_TIM_Base_Start_IT+0xdc>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d015      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0xb4>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d011      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f4:	e008      	b.n	8003408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e000      	b.n	800340a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40013400 	.word	0x40013400
 800342c:	40014000 	.word	0x40014000
 8003430:	00010007 	.word	0x00010007

08003434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d020      	beq.n	8003498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0202 	mvn.w	r2, #2
 8003468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8e4 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8d6 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8e7 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d020      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0204 	mvn.w	r2, #4
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8be 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8b0 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8c1 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d020      	beq.n	8003530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01b      	beq.n	8003530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0208 	mvn.w	r2, #8
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f898 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f88a 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f89b 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d020      	beq.n	800357c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01b      	beq.n	800357c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f872 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f864 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f875 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0201 	mvn.w	r2, #1
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fb26 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f906 	bl	80037d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8fe 	bl	80037e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f834 	bl	8003674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0220 	mvn.w	r2, #32
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8c6 	bl	80037bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a40      	ldr	r2, [pc, #256]	; (800379c <TIM_Base_SetConfig+0x114>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a6:	d00f      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3d      	ldr	r2, [pc, #244]	; (80037a0 <TIM_Base_SetConfig+0x118>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <TIM_Base_SetConfig+0x11c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <TIM_Base_SetConfig+0x120>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <TIM_Base_SetConfig+0x124>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2f      	ldr	r2, [pc, #188]	; (800379c <TIM_Base_SetConfig+0x114>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01f      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <TIM_Base_SetConfig+0x118>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <TIM_Base_SetConfig+0x11c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <TIM_Base_SetConfig+0x120>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a29      	ldr	r2, [pc, #164]	; (80037ac <TIM_Base_SetConfig+0x124>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a28      	ldr	r2, [pc, #160]	; (80037b0 <TIM_Base_SetConfig+0x128>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <TIM_Base_SetConfig+0x12c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0x9a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <TIM_Base_SetConfig+0x130>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <TIM_Base_SetConfig+0x114>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00f      	beq.n	8003780 <TIM_Base_SetConfig+0xf8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <TIM_Base_SetConfig+0x124>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_Base_SetConfig+0xf8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <TIM_Base_SetConfig+0x128>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <TIM_Base_SetConfig+0xf8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <TIM_Base_SetConfig+0x12c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0xf8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a0f      	ldr	r2, [pc, #60]	; (80037b8 <TIM_Base_SetConfig+0x130>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d103      	bne.n	8003788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	615a      	str	r2, [r3, #20]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	40013400 	.word	0x40013400
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800

080037bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e040      	b.n	800388c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd faee 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fb6a 	bl	8003f18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8af 	bl	80039a8 <UART_SetConfig>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e01b      	b.n	800388c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fbe9 	bl	800405c <UART_CheckIdleState>
 800388a:	4603      	mov	r3, r0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d178      	bne.n	800399e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_UART_Transmit+0x24>
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e071      	b.n	80039a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2221      	movs	r2, #33	; 0x21
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ca:	f7fd fcb3 	bl	8001234 <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d108      	bne.n	80038fc <HAL_UART_Transmit+0x68>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e003      	b.n	8003904 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003904:	e030      	b.n	8003968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fc4b 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e03c      	b.n	80039a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003938:	b292      	uxth	r2, r2
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	3302      	adds	r3, #2
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e008      	b.n	8003956 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	b292      	uxth	r2, r2
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1c8      	bne.n	8003906 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2200      	movs	r2, #0
 800397c:	2140      	movs	r1, #64	; 0x40
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fc14 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e005      	b.n	80039a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b08a      	sub	sp, #40	; 0x28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4ba4      	ldr	r3, [pc, #656]	; (8003c68 <UART_SetConfig+0x2c0>)
 80039d8:	4013      	ands	r3, r2
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a99      	ldr	r2, [pc, #612]	; (8003c6c <UART_SetConfig+0x2c4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a10:	4313      	orrs	r3, r2
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a90      	ldr	r2, [pc, #576]	; (8003c70 <UART_SetConfig+0x2c8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d126      	bne.n	8003a80 <UART_SetConfig+0xd8>
 8003a32:	4b90      	ldr	r3, [pc, #576]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d81b      	bhi.n	8003a78 <UART_SetConfig+0xd0>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <UART_SetConfig+0xa0>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a71 	.word	0x08003a71
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e116      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e112      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e10e      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003a70:	2308      	movs	r3, #8
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e10a      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e106      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7c      	ldr	r2, [pc, #496]	; (8003c78 <UART_SetConfig+0x2d0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d138      	bne.n	8003afc <UART_SetConfig+0x154>
 8003a8a:	4b7a      	ldr	r3, [pc, #488]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d82d      	bhi.n	8003af4 <UART_SetConfig+0x14c>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0xf8>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003af5 	.word	0x08003af5
 8003aa8:	08003af5 	.word	0x08003af5
 8003aac:	08003af5 	.word	0x08003af5
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003af5 	.word	0x08003af5
 8003ab8:	08003af5 	.word	0x08003af5
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003add 	.word	0x08003add
 8003ac4:	08003af5 	.word	0x08003af5
 8003ac8:	08003af5 	.word	0x08003af5
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e0d8      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003adc:	2302      	movs	r3, #2
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e0d4      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e0d0      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003aec:	2308      	movs	r3, #8
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e0cc      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003af4:	2310      	movs	r3, #16
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e0c8      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5e      	ldr	r2, [pc, #376]	; (8003c7c <UART_SetConfig+0x2d4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d125      	bne.n	8003b52 <UART_SetConfig+0x1aa>
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d016      	beq.n	8003b42 <UART_SetConfig+0x19a>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d818      	bhi.n	8003b4a <UART_SetConfig+0x1a2>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d00a      	beq.n	8003b32 <UART_SetConfig+0x18a>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d814      	bhi.n	8003b4a <UART_SetConfig+0x1a2>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <UART_SetConfig+0x182>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d008      	beq.n	8003b3a <UART_SetConfig+0x192>
 8003b28:	e00f      	b.n	8003b4a <UART_SetConfig+0x1a2>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b30:	e0ad      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b32:	2302      	movs	r3, #2
 8003b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b38:	e0a9      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b40:	e0a5      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b42:	2308      	movs	r3, #8
 8003b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b48:	e0a1      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b50:	e09d      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <UART_SetConfig+0x2d8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d125      	bne.n	8003ba8 <UART_SetConfig+0x200>
 8003b5c:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b66:	2bc0      	cmp	r3, #192	; 0xc0
 8003b68:	d016      	beq.n	8003b98 <UART_SetConfig+0x1f0>
 8003b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b6c:	d818      	bhi.n	8003ba0 <UART_SetConfig+0x1f8>
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d00a      	beq.n	8003b88 <UART_SetConfig+0x1e0>
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d814      	bhi.n	8003ba0 <UART_SetConfig+0x1f8>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <UART_SetConfig+0x1d8>
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d008      	beq.n	8003b90 <UART_SetConfig+0x1e8>
 8003b7e:	e00f      	b.n	8003ba0 <UART_SetConfig+0x1f8>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e082      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e07e      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b90:	2304      	movs	r3, #4
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	e07a      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003b98:	2308      	movs	r3, #8
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9e:	e076      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e072      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <UART_SetConfig+0x2dc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d12a      	bne.n	8003c08 <UART_SetConfig+0x260>
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc0:	d01a      	beq.n	8003bf8 <UART_SetConfig+0x250>
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc6:	d81b      	bhi.n	8003c00 <UART_SetConfig+0x258>
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bcc:	d00c      	beq.n	8003be8 <UART_SetConfig+0x240>
 8003bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd2:	d815      	bhi.n	8003c00 <UART_SetConfig+0x258>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <UART_SetConfig+0x238>
 8003bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bdc:	d008      	beq.n	8003bf0 <UART_SetConfig+0x248>
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x258>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e052      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003be8:	2302      	movs	r3, #2
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bee:	e04e      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf6:	e04a      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfe:	e046      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c00:	2310      	movs	r3, #16
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e042      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <UART_SetConfig+0x2c4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d13a      	bne.n	8003c88 <UART_SetConfig+0x2e0>
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <UART_SetConfig+0x2cc>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c20:	d01a      	beq.n	8003c58 <UART_SetConfig+0x2b0>
 8003c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c26:	d81b      	bhi.n	8003c60 <UART_SetConfig+0x2b8>
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2c:	d00c      	beq.n	8003c48 <UART_SetConfig+0x2a0>
 8003c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c32:	d815      	bhi.n	8003c60 <UART_SetConfig+0x2b8>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <UART_SetConfig+0x298>
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d008      	beq.n	8003c50 <UART_SetConfig+0x2a8>
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x2b8>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e022      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4e:	e01e      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c56:	e01a      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e016      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e012      	b.n	8003c8e <UART_SetConfig+0x2e6>
 8003c68:	efff69f3 	.word	0xefff69f3
 8003c6c:	40008000 	.word	0x40008000
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40004400 	.word	0x40004400
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	40005000 	.word	0x40005000
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a9f      	ldr	r2, [pc, #636]	; (8003f10 <UART_SetConfig+0x568>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d17a      	bne.n	8003d8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d824      	bhi.n	8003cea <UART_SetConfig+0x342>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x300>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003cdb 	.word	0x08003cdb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003ceb 	.word	0x08003ceb
 8003cc8:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fbba 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <UART_SetConfig+0x56c>)
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe fb1b 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8003cde:	61f8      	str	r0, [r7, #28]
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80fb 	beq.w	8003ef4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d305      	bcc.n	8003d1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d903      	bls.n	8003d22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d20:	e0e8      	b.n	8003ef4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2200      	movs	r2, #0
 8003d26:	461c      	mov	r4, r3
 8003d28:	4615      	mov	r5, r2
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	022b      	lsls	r3, r5, #8
 8003d34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d38:	0222      	lsls	r2, r4, #8
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6849      	ldr	r1, [r1, #4]
 8003d3e:	0849      	lsrs	r1, r1, #1
 8003d40:	2000      	movs	r0, #0
 8003d42:	4688      	mov	r8, r1
 8003d44:	4681      	mov	r9, r0
 8003d46:	eb12 0a08 	adds.w	sl, r2, r8
 8003d4a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d5c:	4650      	mov	r0, sl
 8003d5e:	4659      	mov	r1, fp
 8003d60:	f7fc fa86 	bl	8000270 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d308      	bcc.n	8003d86 <UART_SetConfig+0x3de>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7a:	d204      	bcs.n	8003d86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	60da      	str	r2, [r3, #12]
 8003d84:	e0b6      	b.n	8003ef4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d8c:	e0b2      	b.n	8003ef4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d96:	d15e      	bne.n	8003e56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d828      	bhi.n	8003df2 <UART_SetConfig+0x44a>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x400>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003ddd 	.word	0x08003ddd
 8003db4:	08003df3 	.word	0x08003df3
 8003db8:	08003de3 	.word	0x08003de3
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003df3 	.word	0x08003df3
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fb3a 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	61f8      	str	r0, [r7, #28]
        break;
 8003dd2:	e014      	b.n	8003dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7fe fb4c 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	61f8      	str	r0, [r7, #28]
        break;
 8003dda:	e010      	b.n	8003dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ddc:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <UART_SetConfig+0x56c>)
 8003dde:	61fb      	str	r3, [r7, #28]
        break;
 8003de0:	e00d      	b.n	8003dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de2:	f7fe fa97 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8003de6:	61f8      	str	r0, [r7, #28]
        break;
 8003de8:	e009      	b.n	8003dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dee:	61fb      	str	r3, [r7, #28]
        break;
 8003df0:	e005      	b.n	8003dfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d077      	beq.n	8003ef4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005a      	lsls	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	441a      	add	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d916      	bls.n	8003e4e <UART_SetConfig+0x4a6>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e26:	d212      	bcs.n	8003e4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f023 030f 	bic.w	r3, r3, #15
 8003e30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	8afb      	ldrh	r3, [r7, #22]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	8afa      	ldrh	r2, [r7, #22]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	e052      	b.n	8003ef4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e54:	e04e      	b.n	8003ef4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d827      	bhi.n	8003eae <UART_SetConfig+0x506>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0x4bc>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003eaf 	.word	0x08003eaf
 8003e74:	08003e9f 	.word	0x08003e9f
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003eaf 	.word	0x08003eaf
 8003e80:	08003eaf 	.word	0x08003eaf
 8003e84:	08003ea7 	.word	0x08003ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7fe fadc 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	61f8      	str	r0, [r7, #28]
        break;
 8003e8e:	e014      	b.n	8003eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7fe faee 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8003e94:	61f8      	str	r0, [r7, #28]
        break;
 8003e96:	e010      	b.n	8003eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e98:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <UART_SetConfig+0x56c>)
 8003e9a:	61fb      	str	r3, [r7, #28]
        break;
 8003e9c:	e00d      	b.n	8003eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9e:	f7fe fa39 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8003ea2:	61f8      	str	r0, [r7, #28]
        break;
 8003ea4:	e009      	b.n	8003eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	61fb      	str	r3, [r7, #28]
        break;
 8003eac:	e005      	b.n	8003eba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	085a      	lsrs	r2, r3, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	441a      	add	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	d909      	bls.n	8003eee <UART_SetConfig+0x546>
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d205      	bcs.n	8003eee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	e002      	b.n	8003ef4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3728      	adds	r7, #40	; 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40008000 	.word	0x40008000
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01a      	beq.n	800402e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d10a      	bne.n	800402e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b098      	sub	sp, #96	; 0x60
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800406c:	f7fd f8e2 	bl	8001234 <HAL_GetTick>
 8004070:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b08      	cmp	r3, #8
 800407e:	d12e      	bne.n	80040de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	2200      	movs	r2, #0
 800408a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f88c 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d021      	beq.n	80040de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ae:	653b      	str	r3, [r7, #80]	; 0x50
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e6      	bne.n	800409a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e062      	b.n	80041a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d149      	bne.n	8004180 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f856 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d03c      	beq.n	8004180 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	623b      	str	r3, [r7, #32]
   return(result);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004124:	633b      	str	r3, [r7, #48]	; 0x30
 8004126:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e6      	bne.n	8004106 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60fb      	str	r3, [r7, #12]
   return(result);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004158:	61fa      	str	r2, [r7, #28]
 800415a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e011      	b.n	80041a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3758      	adds	r7, #88	; 0x58
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	e049      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d045      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fd f835 	bl	8001234 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e048      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d031      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d110      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2208      	movs	r2, #8
 8004202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f838 	bl	800427a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2208      	movs	r2, #8
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e029      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422c:	d111      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f81e 	bl	800427a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00f      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0a6      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427a:	b480      	push	{r7}
 800427c:	b095      	sub	sp, #84	; 0x54
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a0:	643b      	str	r3, [r7, #64]	; 0x40
 80042a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d118      	bne.n	8004322 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6979      	ldr	r1, [r7, #20]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	613b      	str	r3, [r7, #16]
   return(result);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e6      	bne.n	80042f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004336:	bf00      	nop
 8004338:	3754      	adds	r7, #84	; 0x54
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <__NVIC_SetPriority>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	; (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <SysTick_Handler+0x1c>)
 800439e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043a0:	f001 fd28 	bl	8005df4 <xTaskGetSchedulerState>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043aa:	f002 fb0d 	bl	80069c8 <xPortSysTickHandler>
  }
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000e010 	.word	0xe000e010

080043b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043bc:	2100      	movs	r1, #0
 80043be:	f06f 0004 	mvn.w	r0, #4
 80043c2:	f7ff ffbf 	bl	8004344 <__NVIC_SetPriority>
#endif
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d2:	f3ef 8305 	mrs	r3, IPSR
 80043d6:	603b      	str	r3, [r7, #0]
  return(result);
 80043d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043de:	f06f 0305 	mvn.w	r3, #5
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	e00c      	b.n	8004400 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <osKernelInitialize+0x44>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d105      	bne.n	80043fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <osKernelInitialize+0x44>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	607b      	str	r3, [r7, #4]
 80043f8:	e002      	b.n	8004400 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004400:	687b      	ldr	r3, [r7, #4]
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000284 	.word	0x20000284

08004414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441a:	f3ef 8305 	mrs	r3, IPSR
 800441e:	603b      	str	r3, [r7, #0]
  return(result);
 8004420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004426:	f06f 0305 	mvn.w	r3, #5
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	e010      	b.n	8004450 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <osKernelStart+0x48>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d109      	bne.n	800444a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004436:	f7ff ffbf 	bl	80043b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <osKernelStart+0x48>)
 800443c:	2202      	movs	r2, #2
 800443e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004440:	f001 f87c 	bl	800553c <vTaskStartScheduler>
      stat = osOK;
 8004444:	2300      	movs	r3, #0
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e002      	b.n	8004450 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004450:	687b      	ldr	r3, [r7, #4]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000284 	.word	0x20000284

08004460 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b08e      	sub	sp, #56	; 0x38
 8004464:	af04      	add	r7, sp, #16
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004470:	f3ef 8305 	mrs	r3, IPSR
 8004474:	617b      	str	r3, [r7, #20]
  return(result);
 8004476:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004478:	2b00      	cmp	r3, #0
 800447a:	d17e      	bne.n	800457a <osThreadNew+0x11a>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d07b      	beq.n	800457a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004486:	2318      	movs	r3, #24
 8004488:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d045      	beq.n	8004526 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <osThreadNew+0x48>
        name = attr->name;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <osThreadNew+0x6e>
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b38      	cmp	r3, #56	; 0x38
 80044c0:	d805      	bhi.n	80044ce <osThreadNew+0x6e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <osThreadNew+0x72>
        return (NULL);
 80044ce:	2300      	movs	r3, #0
 80044d0:	e054      	b.n	800457c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00e      	beq.n	8004508 <osThreadNew+0xa8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2ba7      	cmp	r3, #167	; 0xa7
 80044f0:	d90a      	bls.n	8004508 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <osThreadNew+0xa8>
        mem = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e010      	b.n	800452a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10c      	bne.n	800452a <osThreadNew+0xca>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d108      	bne.n	800452a <osThreadNew+0xca>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <osThreadNew+0xca>
          mem = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	e001      	b.n	800452a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d110      	bne.n	8004552 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004538:	9202      	str	r2, [sp, #8]
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6a3a      	ldr	r2, [r7, #32]
 8004544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fe0c 	bl	8005164 <xTaskCreateStatic>
 800454c:	4603      	mov	r3, r0
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	e013      	b.n	800457a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d110      	bne.n	800457a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	b29a      	uxth	r2, r3
 800455c:	f107 0310 	add.w	r3, r7, #16
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fe57 	bl	800521e <xTaskCreate>
 8004570:	4603      	mov	r3, r0
 8004572:	2b01      	cmp	r3, #1
 8004574:	d001      	beq.n	800457a <osThreadNew+0x11a>
            hTask = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800457a:	693b      	ldr	r3, [r7, #16]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3728      	adds	r7, #40	; 0x28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458c:	f3ef 8305 	mrs	r3, IPSR
 8004590:	60bb      	str	r3, [r7, #8]
  return(result);
 8004592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <osDelay+0x1c>
    stat = osErrorISR;
 8004598:	f06f 0305 	mvn.w	r3, #5
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e007      	b.n	80045b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 ff92 	bl	80054d4 <vTaskDelay>
    }
  }

  return (stat);
 80045b0:	68fb      	ldr	r3, [r7, #12]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80045cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a06      	ldr	r2, [pc, #24]	; (80045ec <vApplicationGetIdleTaskMemory+0x30>)
 80045d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000288 	.word	0x20000288
 80045ec:	20000330 	.word	0x20000330

080045f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a07      	ldr	r2, [pc, #28]	; (800461c <vApplicationGetTimerTaskMemory+0x2c>)
 8004600:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a06      	ldr	r2, [pc, #24]	; (8004620 <vApplicationGetTimerTaskMemory+0x30>)
 8004606:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800460e:	601a      	str	r2, [r3, #0]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	20000530 	.word	0x20000530
 8004620:	200005d8 	.word	0x200005d8

08004624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f103 0208 	add.w	r2, r3, #8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f103 0208 	add.w	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f103 0208 	add.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d103      	bne.n	80046e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e00c      	b.n	8004700 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3308      	adds	r3, #8
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e002      	b.n	80046f4 <vListInsert+0x2e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d2f6      	bcs.n	80046ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	601a      	str	r2, [r3, #0]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6892      	ldr	r2, [r2, #8]
 800474e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6852      	ldr	r2, [r2, #4]
 8004758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d103      	bne.n	800476c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1e5a      	subs	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047b6:	f002 f875 	bl	80068a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	441a      	add	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	3b01      	subs	r3, #1
 80047e8:	68f9      	ldr	r1, [r7, #12]
 80047ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d114      	bne.n	8004836 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01a      	beq.n	800484a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3310      	adds	r3, #16
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f929 	bl	8005a70 <xTaskRemoveFromEventList>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d012      	beq.n	800484a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <xQueueGenericReset+0xcc>)
 8004826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	e009      	b.n	800484a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3310      	adds	r3, #16
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fef2 	bl	8004624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3324      	adds	r3, #36	; 0x24
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff feed 	bl	8004624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800484a:	f002 f85b 	bl	8006904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08e      	sub	sp, #56	; 0x38
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <xQueueGenericCreateStatic+0x52>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <xQueueGenericCreateStatic+0x56>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <xQueueGenericCreateStatic+0x58>
 80048b2:	2300      	movs	r3, #0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	623b      	str	r3, [r7, #32]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <xQueueGenericCreateStatic+0x7e>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <xQueueGenericCreateStatic+0x82>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueGenericCreateStatic+0x84>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	61fb      	str	r3, [r7, #28]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048fa:	2350      	movs	r3, #80	; 0x50
 80048fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b50      	cmp	r3, #80	; 0x50
 8004902:	d00a      	beq.n	800491a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61bb      	str	r3, [r7, #24]
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800491a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800492e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f805 	bl	800494c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004944:	4618      	mov	r0, r3
 8004946:	3730      	adds	r7, #48	; 0x30
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e002      	b.n	800496e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800497a:	2101      	movs	r1, #1
 800497c:	69b8      	ldr	r0, [r7, #24]
 800497e:	f7ff ff05 	bl	800478c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	; 0x38
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049a2:	2300      	movs	r3, #0
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericSend+0x32>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <xQueueGenericSend+0x40>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <xQueueGenericSend+0x44>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <xQueueGenericSend+0x46>
 80049d8:	2300      	movs	r3, #0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <xQueueGenericSend+0x60>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d103      	bne.n	8004a02 <xQueueGenericSend+0x6e>
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <xQueueGenericSend+0x72>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <xQueueGenericSend+0x74>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a22:	f001 f9e7 	bl	8005df4 <xTaskGetSchedulerState>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xQueueGenericSend+0x9e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <xQueueGenericSend+0xa2>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueGenericSend+0xa4>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	61fb      	str	r3, [r7, #28]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a52:	f001 ff27 	bl	80068a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <xQueueGenericSend+0xd4>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d129      	bne.n	8004abc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6e:	f000 fa0b 	bl	8004e88 <prvCopyDataToQueue>
 8004a72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	3324      	adds	r3, #36	; 0x24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fff5 	bl	8005a70 <xTaskRemoveFromEventList>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a8c:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <xQueueGenericSend+0x1f8>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	e00a      	b.n	8004ab4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004aa4:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <xQueueGenericSend+0x1f8>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ab4:	f001 ff26 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e063      	b.n	8004b84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ac2:	f001 ff1f 	bl	8006904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e05c      	b.n	8004b84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 f82f 	bl	8005b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ade:	f001 ff11 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ae2:	f000 fd9b 	bl	800561c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ae6:	f001 fedd 	bl	80068a4 <vPortEnterCritical>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d103      	bne.n	8004b00 <xQueueGenericSend+0x16c>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d103      	bne.n	8004b16 <xQueueGenericSend+0x182>
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b16:	f001 fef5 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b1a:	1d3a      	adds	r2, r7, #4
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f81e 	bl	8005b64 <xTaskCheckForTimeOut>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d124      	bne.n	8004b78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b30:	f000 faa2 	bl	8005078 <prvIsQueueFull>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d018      	beq.n	8004b6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	3310      	adds	r3, #16
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 ff44 	bl	80059d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b4a:	f000 fa2d 	bl	8004fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b4e:	f000 fd73 	bl	8005638 <xTaskResumeAll>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f af7c 	bne.w	8004a52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <xQueueGenericSend+0x1f8>)
 8004b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	e772      	b.n	8004a52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6e:	f000 fa1b 	bl	8004fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b72:	f000 fd61 	bl	8005638 <xTaskResumeAll>
 8004b76:	e76c      	b.n	8004a52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7a:	f000 fa15 	bl	8004fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b7e:	f000 fd5b 	bl	8005638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3738      	adds	r7, #56	; 0x38
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b090      	sub	sp, #64	; 0x40
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <xQueueGenericSendFromISR+0x3c>
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <xQueueGenericSendFromISR+0x40>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <xQueueGenericSendFromISR+0x42>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSendFromISR+0x6a>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSendFromISR+0x6e>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSendFromISR+0x70>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c1a:	f001 ff25 	bl	8006a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fa      	str	r2, [r7, #28]
 8004c34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <xQueueGenericSendFromISR+0xbc>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d12f      	bne.n	8004cac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c62:	f000 f911 	bl	8004e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d112      	bne.n	8004c96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d016      	beq.n	8004ca6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	3324      	adds	r3, #36	; 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fef7 	bl	8005a70 <xTaskRemoveFromEventList>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e007      	b.n	8004ca6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	b25a      	sxtb	r2, r3
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004caa:	e001      	b.n	8004cb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3740      	adds	r7, #64	; 0x40
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	; 0x30
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <xQueueReceive+0x30>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	623b      	str	r3, [r7, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <xQueueReceive+0x3e>
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueReceive+0x42>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueReceive+0x44>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xQueueReceive+0x5e>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	61fb      	str	r3, [r7, #28]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d26:	f001 f865 	bl	8005df4 <xTaskGetSchedulerState>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <xQueueReceive+0x6e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <xQueueReceive+0x72>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueReceive+0x74>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueReceive+0x8e>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61bb      	str	r3, [r7, #24]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d56:	f001 fda5 	bl	80068a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01f      	beq.n	8004da6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d6a:	f000 f8f7 	bl	8004f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00f      	beq.n	8004d9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	3310      	adds	r3, #16
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fe74 	bl	8005a70 <xTaskRemoveFromEventList>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <xQueueReceive+0x1bc>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d9e:	f001 fdb1 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e069      	b.n	8004e7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dac:	f001 fdaa 	bl	8006904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e062      	b.n	8004e7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dba:	f107 0310 	add.w	r3, r7, #16
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 feba 	bl	8005b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dc8:	f001 fd9c 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dcc:	f000 fc26 	bl	800561c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dd0:	f001 fd68 	bl	80068a4 <vPortEnterCritical>
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d103      	bne.n	8004dea <xQueueReceive+0x122>
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d103      	bne.n	8004e00 <xQueueReceive+0x138>
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e00:	f001 fd80 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e04:	1d3a      	adds	r2, r7, #4
 8004e06:	f107 0310 	add.w	r3, r7, #16
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fea9 	bl	8005b64 <xTaskCheckForTimeOut>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d123      	bne.n	8004e60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1a:	f000 f917 	bl	800504c <prvIsQueueEmpty>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d017      	beq.n	8004e54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fdcf 	bl	80059d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e34:	f000 f8b8 	bl	8004fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e38:	f000 fbfe 	bl	8005638 <xTaskResumeAll>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d189      	bne.n	8004d56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <xQueueReceive+0x1bc>)
 8004e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	e780      	b.n	8004d56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e56:	f000 f8a7 	bl	8004fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e5a:	f000 fbed 	bl	8005638 <xTaskResumeAll>
 8004e5e:	e77a      	b.n	8004d56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e62:	f000 f8a1 	bl	8004fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e66:	f000 fbe7 	bl	8005638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6c:	f000 f8ee 	bl	800504c <prvIsQueueEmpty>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f43f af6f 	beq.w	8004d56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3730      	adds	r7, #48	; 0x30
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d14d      	bne.n	8004f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 ffbc 	bl	8005e30 <xTaskPriorityDisinherit>
 8004eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	e043      	b.n	8004f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d119      	bne.n	8004efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6858      	ldr	r0, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	f002 f9c8 	bl	8007268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d32b      	bcc.n	8004f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e026      	b.n	8004f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68d8      	ldr	r0, [r3, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	461a      	mov	r2, r3
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	f002 f9ae 	bl	8007268 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	425b      	negs	r3, r3
 8004f16:	441a      	add	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d207      	bcs.n	8004f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	425b      	negs	r3, r3
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d105      	bne.n	8004f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d303      	bcc.n	8004f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f002 f964 	bl	8007268 <memcpy>
	}
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fb0:	f001 fc78 	bl	80068a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fbc:	e011      	b.n	8004fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d012      	beq.n	8004fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fd50 	bl	8005a70 <xTaskRemoveFromEventList>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fd6:	f000 fe27 	bl	8005c28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dce9      	bgt.n	8004fbe <prvUnlockQueue+0x16>
 8004fea:	e000      	b.n	8004fee <prvUnlockQueue+0x46>
					break;
 8004fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ff6:	f001 fc85 	bl	8006904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ffa:	f001 fc53 	bl	80068a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005006:	e011      	b.n	800502c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d012      	beq.n	8005036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3310      	adds	r3, #16
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fd2b 	bl	8005a70 <xTaskRemoveFromEventList>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005020:	f000 fe02 	bl	8005c28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	3b01      	subs	r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800502c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dce9      	bgt.n	8005008 <prvUnlockQueue+0x60>
 8005034:	e000      	b.n	8005038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005040:	f001 fc60 	bl	8006904 <vPortExitCritical>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005054:	f001 fc26 	bl	80068a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e001      	b.n	800506a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800506a:	f001 fc4b 	bl	8006904 <vPortExitCritical>

	return xReturn;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005080:	f001 fc10 	bl	80068a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	429a      	cmp	r2, r3
 800508e:	d102      	bne.n	8005096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e001      	b.n	800509a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800509a:	f001 fc33 	bl	8006904 <vPortExitCritical>

	return xReturn;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e014      	b.n	80050e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050b8:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <vQueueAddToRegistry+0x50>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <vQueueAddToRegistry+0x50>)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <vQueueAddToRegistry+0x50>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050da:	e006      	b.n	80050ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d9e7      	bls.n	80050b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	200009d8 	.word	0x200009d8

080050fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800510c:	f001 fbca 	bl	80068a4 <vPortEnterCritical>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005116:	b25b      	sxtb	r3, r3
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d103      	bne.n	8005126 <vQueueWaitForMessageRestricted+0x2a>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800512c:	b25b      	sxtb	r3, r3
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d103      	bne.n	800513c <vQueueWaitForMessageRestricted+0x40>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800513c:	f001 fbe2 	bl	8006904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fc61 	bl	8005a18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f7ff ff26 	bl	8004fa8 <prvUnlockQueue>
	}
 800515c:	bf00      	nop
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af04      	add	r7, sp, #16
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	623b      	str	r3, [r7, #32]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xTaskCreateStatic+0x46>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	61fb      	str	r3, [r7, #28]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051aa:	23a8      	movs	r3, #168	; 0xa8
 80051ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2ba8      	cmp	r3, #168	; 0xa8
 80051b2:	d00a      	beq.n	80051ca <xTaskCreateStatic+0x66>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	61bb      	str	r3, [r7, #24]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01e      	beq.n	8005210 <xTaskCreateStatic+0xac>
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051ea:	2300      	movs	r3, #0
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	f107 0314 	add.w	r3, r7, #20
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f850 	bl	80052a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800520a:	f000 f8f3 	bl	80053f4 <prvAddNewTaskToReadyList>
 800520e:	e001      	b.n	8005214 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005214:	697b      	ldr	r3, [r7, #20]
	}
 8005216:	4618      	mov	r0, r3
 8005218:	3728      	adds	r7, #40	; 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08c      	sub	sp, #48	; 0x30
 8005222:	af04      	add	r7, sp, #16
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4618      	mov	r0, r3
 8005234:	f001 fc58 	bl	8006ae8 <pvPortMalloc>
 8005238:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005240:	20a8      	movs	r0, #168	; 0xa8
 8005242:	f001 fc51 	bl	8006ae8 <pvPortMalloc>
 8005246:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
 8005254:	e005      	b.n	8005262 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f001 fd12 	bl	8006c80 <vPortFree>
 800525c:	e001      	b.n	8005262 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	2300      	movs	r3, #0
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	9302      	str	r3, [sp, #8]
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f80e 	bl	80052a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800528c:	69f8      	ldr	r0, [r7, #28]
 800528e:	f000 f8b1 	bl	80053f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e002      	b.n	800529e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800529e:	69bb      	ldr	r3, [r7, #24]
	}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	461a      	mov	r2, r3
 80052c0:	21a5      	movs	r1, #165	; 0xa5
 80052c2:	f001 ff00 	bl	80070c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052d0:	3b01      	subs	r3, #1
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <prvInitialiseNewTask+0x58>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	617b      	str	r3, [r7, #20]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01f      	beq.n	8005346 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	e012      	b.n	8005332 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	7819      	ldrb	r1, [r3, #0]
 8005314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	3334      	adds	r3, #52	; 0x34
 800531c:	460a      	mov	r2, r1
 800531e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d9e9      	bls.n	800530c <prvInitialiseNewTask+0x64>
 8005338:	e000      	b.n	800533c <prvInitialiseNewTask+0x94>
			{
				break;
 800533a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005344:	e003      	b.n	800534e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	2b37      	cmp	r3, #55	; 0x37
 8005352:	d901      	bls.n	8005358 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005354:	2337      	movs	r3, #55	; 0x37
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005362:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	2200      	movs	r2, #0
 8005368:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	3304      	adds	r3, #4
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff f978 	bl	8004664 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	3318      	adds	r3, #24
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff f973 	bl	8004664 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005392:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	3354      	adds	r3, #84	; 0x54
 80053a8:	224c      	movs	r2, #76	; 0x4c
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fe8a 	bl	80070c6 <memset>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <prvInitialiseNewTask+0x140>)
 80053b6:	659a      	str	r2, [r3, #88]	; 0x58
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	4a0c      	ldr	r2, [pc, #48]	; (80053ec <prvInitialiseNewTask+0x144>)
 80053bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <prvInitialiseNewTask+0x148>)
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	69b8      	ldr	r0, [r7, #24]
 80053ca:	f001 f941 	bl	8006650 <pxPortInitialiseStack>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e0:	bf00      	nop
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	2000859c 	.word	0x2000859c
 80053ec:	20008604 	.word	0x20008604
 80053f0:	2000866c 	.word	0x2000866c

080053f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053fc:	f001 fa52 	bl	80068a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005400:	4b2d      	ldr	r3, [pc, #180]	; (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a2c      	ldr	r2, [pc, #176]	; (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 8005408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800540a:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005412:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005418:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d110      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005420:	f000 fc26 	bl	8005c70 <prvInitialiseTaskLists>
 8005424:	e00d      	b.n	8005442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005426:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <prvAddNewTaskToReadyList+0xcc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800542e:	4b23      	ldr	r3, [pc, #140]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	429a      	cmp	r2, r3
 800543a:	d802      	bhi.n	8005442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800543c:	4a1f      	ldr	r2, [pc, #124]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 800544a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800544c:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <prvAddNewTaskToReadyList+0xd4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d903      	bls.n	8005468 <prvAddNewTaskToReadyList+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <prvAddNewTaskToReadyList+0xd4>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <prvAddNewTaskToReadyList+0xd8>)
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7ff f8fd 	bl	800467e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005484:	f001 fa3e 	bl	8006904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005488:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <prvAddNewTaskToReadyList+0xcc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	429a      	cmp	r2, r3
 800549c:	d207      	bcs.n	80054ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <prvAddNewTaskToReadyList+0xdc>)
 80054a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000eec 	.word	0x20000eec
 80054bc:	20000a18 	.word	0x20000a18
 80054c0:	20000ef8 	.word	0x20000ef8
 80054c4:	20000f08 	.word	0x20000f08
 80054c8:	20000ef4 	.word	0x20000ef4
 80054cc:	20000a1c 	.word	0x20000a1c
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <vTaskDelay+0x60>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <vTaskDelay+0x30>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60bb      	str	r3, [r7, #8]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005504:	f000 f88a 	bl	800561c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005508:	2100      	movs	r1, #0
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fcfe 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005510:	f000 f892 	bl	8005638 <xTaskResumeAll>
 8005514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <vTaskDelay+0x64>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000f14 	.word	0x20000f14
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800554a:	463a      	mov	r2, r7
 800554c:	1d39      	adds	r1, r7, #4
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff f832 	bl	80045bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	9202      	str	r2, [sp, #8]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2300      	movs	r3, #0
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	460a      	mov	r2, r1
 800556a:	4924      	ldr	r1, [pc, #144]	; (80055fc <vTaskStartScheduler+0xc0>)
 800556c:	4824      	ldr	r0, [pc, #144]	; (8005600 <vTaskStartScheduler+0xc4>)
 800556e:	f7ff fdf9 	bl	8005164 <xTaskCreateStatic>
 8005572:	4603      	mov	r3, r0
 8005574:	4a23      	ldr	r2, [pc, #140]	; (8005604 <vTaskStartScheduler+0xc8>)
 8005576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005578:	4b22      	ldr	r3, [pc, #136]	; (8005604 <vTaskStartScheduler+0xc8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e001      	b.n	800558a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005590:	f000 fd10 	bl	8005fb4 <xTimerCreateTimerTask>
 8005594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d11b      	bne.n	80055d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
}
 80055ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055b0:	4b15      	ldr	r3, [pc, #84]	; (8005608 <vTaskStartScheduler+0xcc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3354      	adds	r3, #84	; 0x54
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <vTaskStartScheduler+0xd0>)
 80055b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <vTaskStartScheduler+0xd4>)
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295
 80055c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <vTaskStartScheduler+0xd8>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <vTaskStartScheduler+0xdc>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ce:	f001 f8c7 	bl	8006760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055d2:	e00e      	b.n	80055f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d10a      	bne.n	80055f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vTaskStartScheduler+0xb4>
}
 80055f2:	bf00      	nop
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08007e3c 	.word	0x08007e3c
 8005600:	08005c41 	.word	0x08005c41
 8005604:	20000f10 	.word	0x20000f10
 8005608:	20000a18 	.word	0x20000a18
 800560c:	20000068 	.word	0x20000068
 8005610:	20000f0c 	.word	0x20000f0c
 8005614:	20000ef8 	.word	0x20000ef8
 8005618:	20000ef0 	.word	0x20000ef0

0800561c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <vTaskSuspendAll+0x18>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a03      	ldr	r2, [pc, #12]	; (8005634 <vTaskSuspendAll+0x18>)
 8005628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000f14 	.word	0x20000f14

08005638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005646:	4b42      	ldr	r3, [pc, #264]	; (8005750 <xTaskResumeAll+0x118>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <xTaskResumeAll+0x2c>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	603b      	str	r3, [r7, #0]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005664:	f001 f91e 	bl	80068a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005668:	4b39      	ldr	r3, [pc, #228]	; (8005750 <xTaskResumeAll+0x118>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	4a38      	ldr	r2, [pc, #224]	; (8005750 <xTaskResumeAll+0x118>)
 8005670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005672:	4b37      	ldr	r3, [pc, #220]	; (8005750 <xTaskResumeAll+0x118>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d162      	bne.n	8005740 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800567a:	4b36      	ldr	r3, [pc, #216]	; (8005754 <xTaskResumeAll+0x11c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d05e      	beq.n	8005740 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005682:	e02f      	b.n	80056e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005684:	4b34      	ldr	r3, [pc, #208]	; (8005758 <xTaskResumeAll+0x120>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3318      	adds	r3, #24
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff f851 	bl	8004738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3304      	adds	r3, #4
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff f84c 	bl	8004738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4b2d      	ldr	r3, [pc, #180]	; (800575c <xTaskResumeAll+0x124>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d903      	bls.n	80056b4 <xTaskResumeAll+0x7c>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4a2a      	ldr	r2, [pc, #168]	; (800575c <xTaskResumeAll+0x124>)
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <xTaskResumeAll+0x128>)
 80056c2:	441a      	add	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f7fe ffd7 	bl	800467e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d4:	4b23      	ldr	r3, [pc, #140]	; (8005764 <xTaskResumeAll+0x12c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <xTaskResumeAll+0x130>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <xTaskResumeAll+0x120>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1cb      	bne.n	8005684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056f2:	f000 fb5f 	bl	8005db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <xTaskResumeAll+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005702:	f000 f847 	bl	8005794 <xTaskIncrementTick>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <xTaskResumeAll+0x130>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3b01      	subs	r3, #1
 8005716:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f1      	bne.n	8005702 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <xTaskResumeAll+0x134>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005724:	4b10      	ldr	r3, [pc, #64]	; (8005768 <xTaskResumeAll+0x130>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <xTaskResumeAll+0x138>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005740:	f001 f8e0 	bl	8006904 <vPortExitCritical>

	return xAlreadyYielded;
 8005744:	68bb      	ldr	r3, [r7, #8]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000f14 	.word	0x20000f14
 8005754:	20000eec 	.word	0x20000eec
 8005758:	20000eac 	.word	0x20000eac
 800575c:	20000ef4 	.word	0x20000ef4
 8005760:	20000a1c 	.word	0x20000a1c
 8005764:	20000a18 	.word	0x20000a18
 8005768:	20000f00 	.word	0x20000f00
 800576c:	20000efc 	.word	0x20000efc
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <xTaskGetTickCount+0x1c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005780:	687b      	ldr	r3, [r7, #4]
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20000ef0 	.word	0x20000ef0

08005794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579e:	4b4f      	ldr	r3, [pc, #316]	; (80058dc <xTaskIncrementTick+0x148>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 808f 	bne.w	80058c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057a8:	4b4d      	ldr	r3, [pc, #308]	; (80058e0 <xTaskIncrementTick+0x14c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057b0:	4a4b      	ldr	r2, [pc, #300]	; (80058e0 <xTaskIncrementTick+0x14c>)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d120      	bne.n	80057fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057bc:	4b49      	ldr	r3, [pc, #292]	; (80058e4 <xTaskIncrementTick+0x150>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <xTaskIncrementTick+0x48>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	603b      	str	r3, [r7, #0]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <xTaskIncrementTick+0x46>
 80057dc:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <xTaskIncrementTick+0x150>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <xTaskIncrementTick+0x154>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a3f      	ldr	r2, [pc, #252]	; (80058e4 <xTaskIncrementTick+0x150>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4a3f      	ldr	r2, [pc, #252]	; (80058e8 <xTaskIncrementTick+0x154>)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <xTaskIncrementTick+0x158>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a3d      	ldr	r2, [pc, #244]	; (80058ec <xTaskIncrementTick+0x158>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	f000 fadb 	bl	8005db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057fe:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <xTaskIncrementTick+0x15c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	429a      	cmp	r2, r3
 8005806:	d349      	bcc.n	800589c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005808:	4b36      	ldr	r3, [pc, #216]	; (80058e4 <xTaskIncrementTick+0x150>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005812:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <xTaskIncrementTick+0x15c>)
 8005814:	f04f 32ff 	mov.w	r2, #4294967295
 8005818:	601a      	str	r2, [r3, #0]
					break;
 800581a:	e03f      	b.n	800589c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800581c:	4b31      	ldr	r3, [pc, #196]	; (80058e4 <xTaskIncrementTick+0x150>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d203      	bcs.n	800583c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005834:	4a2e      	ldr	r2, [pc, #184]	; (80058f0 <xTaskIncrementTick+0x15c>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800583a:	e02f      	b.n	800589c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	3304      	adds	r3, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe ff79 	bl	8004738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3318      	adds	r3, #24
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe ff70 	bl	8004738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <xTaskIncrementTick+0x160>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d903      	bls.n	800586c <xTaskIncrementTick+0xd8>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <xTaskIncrementTick+0x160>)
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <xTaskIncrementTick+0x164>)
 800587a:	441a      	add	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fe fefb 	bl	800467e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <xTaskIncrementTick+0x168>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	429a      	cmp	r2, r3
 8005894:	d3b8      	bcc.n	8005808 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800589a:	e7b5      	b.n	8005808 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800589c:	4b17      	ldr	r3, [pc, #92]	; (80058fc <xTaskIncrementTick+0x168>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	4915      	ldr	r1, [pc, #84]	; (80058f8 <xTaskIncrementTick+0x164>)
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d901      	bls.n	80058b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <xTaskIncrementTick+0x16c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058c0:	2301      	movs	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e004      	b.n	80058d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <xTaskIncrementTick+0x170>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <xTaskIncrementTick+0x170>)
 80058ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058d0:	697b      	ldr	r3, [r7, #20]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000f14 	.word	0x20000f14
 80058e0:	20000ef0 	.word	0x20000ef0
 80058e4:	20000ea4 	.word	0x20000ea4
 80058e8:	20000ea8 	.word	0x20000ea8
 80058ec:	20000f04 	.word	0x20000f04
 80058f0:	20000f0c 	.word	0x20000f0c
 80058f4:	20000ef4 	.word	0x20000ef4
 80058f8:	20000a1c 	.word	0x20000a1c
 80058fc:	20000a18 	.word	0x20000a18
 8005900:	20000f00 	.word	0x20000f00
 8005904:	20000efc 	.word	0x20000efc

08005908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800590e:	4b2a      	ldr	r3, [pc, #168]	; (80059b8 <vTaskSwitchContext+0xb0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005916:	4b29      	ldr	r3, [pc, #164]	; (80059bc <vTaskSwitchContext+0xb4>)
 8005918:	2201      	movs	r2, #1
 800591a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800591c:	e046      	b.n	80059ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800591e:	4b27      	ldr	r3, [pc, #156]	; (80059bc <vTaskSwitchContext+0xb4>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <vTaskSwitchContext+0xb8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e010      	b.n	800594e <vTaskSwitchContext+0x46>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <vTaskSwitchContext+0x40>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	607b      	str	r3, [r7, #4]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <vTaskSwitchContext+0x3e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3b01      	subs	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	491d      	ldr	r1, [pc, #116]	; (80059c4 <vTaskSwitchContext+0xbc>)
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0e4      	beq.n	800592c <vTaskSwitchContext+0x24>
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <vTaskSwitchContext+0xbc>)
 800596e:	4413      	add	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	3308      	adds	r3, #8
 8005984:	429a      	cmp	r2, r3
 8005986:	d104      	bne.n	8005992 <vTaskSwitchContext+0x8a>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a0b      	ldr	r2, [pc, #44]	; (80059c8 <vTaskSwitchContext+0xc0>)
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <vTaskSwitchContext+0xb8>)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <vTaskSwitchContext+0xc0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3354      	adds	r3, #84	; 0x54
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <vTaskSwitchContext+0xc4>)
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	20000f14 	.word	0x20000f14
 80059bc:	20000f00 	.word	0x20000f00
 80059c0:	20000ef4 	.word	0x20000ef4
 80059c4:	20000a1c 	.word	0x20000a1c
 80059c8:	20000a18 	.word	0x20000a18
 80059cc:	20000068 	.word	0x20000068

080059d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <vTaskPlaceOnEventList+0x44>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3318      	adds	r3, #24
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fe fe61 	bl	80046c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a04:	2101      	movs	r1, #1
 8005a06:	6838      	ldr	r0, [r7, #0]
 8005a08:	f000 fa80 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000a18 	.word	0x20000a18

08005a18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	617b      	str	r3, [r7, #20]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <vTaskPlaceOnEventListRestricted+0x54>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3318      	adds	r3, #24
 8005a46:	4619      	mov	r1, r3
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7fe fe18 	bl	800467e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	f000 fa55 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
	}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000a18 	.word	0x20000a18

08005a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60fb      	str	r3, [r7, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fe49 	bl	8004738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <xTaskRemoveFromEventList+0xb0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fe40 	bl	8004738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <xTaskRemoveFromEventList+0xb4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d903      	bls.n	8005acc <xTaskRemoveFromEventList+0x5c>
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <xTaskRemoveFromEventList+0xb4>)
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <xTaskRemoveFromEventList+0xb8>)
 8005ada:	441a      	add	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f7fe fdcb 	bl	800467e <vListInsertEnd>
 8005ae8:	e005      	b.n	8005af6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3318      	adds	r3, #24
 8005aee:	4619      	mov	r1, r3
 8005af0:	480e      	ldr	r0, [pc, #56]	; (8005b2c <xTaskRemoveFromEventList+0xbc>)
 8005af2:	f7fe fdc4 	bl	800467e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <xTaskRemoveFromEventList+0xc0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d905      	bls.n	8005b10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <xTaskRemoveFromEventList+0xc4>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e001      	b.n	8005b14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b14:	697b      	ldr	r3, [r7, #20]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000f14 	.word	0x20000f14
 8005b24:	20000ef4 	.word	0x20000ef4
 8005b28:	20000a1c 	.word	0x20000a1c
 8005b2c:	20000eac 	.word	0x20000eac
 8005b30:	20000a18 	.word	0x20000a18
 8005b34:	20000f00 	.word	0x20000f00

08005b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <vTaskInternalSetTimeOutState+0x24>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <vTaskInternalSetTimeOutState+0x28>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	605a      	str	r2, [r3, #4]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20000f04 	.word	0x20000f04
 8005b60:	20000ef0 	.word	0x20000ef0

08005b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ba6:	f000 fe7d 	bl	80068a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <xTaskCheckForTimeOut+0xbc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d102      	bne.n	8005bca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e023      	b.n	8005c12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <xTaskCheckForTimeOut+0xc0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d007      	beq.n	8005be6 <xTaskCheckForTimeOut+0x82>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d302      	bcc.n	8005be6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e015      	b.n	8005c12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d20b      	bcs.n	8005c08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ff9b 	bl	8005b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e004      	b.n	8005c12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c12:	f000 fe77 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8005c16:	69fb      	ldr	r3, [r7, #28]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000ef0 	.word	0x20000ef0
 8005c24:	20000f04 	.word	0x20000f04

08005c28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <vTaskMissedYield+0x14>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	bf00      	nop
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000f00 	.word	0x20000f00

08005c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c48:	f000 f852 	bl	8005cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <prvIdleTask+0x28>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d9f9      	bls.n	8005c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <prvIdleTask+0x2c>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c64:	e7f0      	b.n	8005c48 <prvIdleTask+0x8>
 8005c66:	bf00      	nop
 8005c68:	20000a1c 	.word	0x20000a1c
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	e00c      	b.n	8005c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <prvInitialiseTaskLists+0x60>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fcca 	bl	8004624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3301      	adds	r3, #1
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b37      	cmp	r3, #55	; 0x37
 8005c9a:	d9ef      	bls.n	8005c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c9c:	480d      	ldr	r0, [pc, #52]	; (8005cd4 <prvInitialiseTaskLists+0x64>)
 8005c9e:	f7fe fcc1 	bl	8004624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ca2:	480d      	ldr	r0, [pc, #52]	; (8005cd8 <prvInitialiseTaskLists+0x68>)
 8005ca4:	f7fe fcbe 	bl	8004624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ca8:	480c      	ldr	r0, [pc, #48]	; (8005cdc <prvInitialiseTaskLists+0x6c>)
 8005caa:	f7fe fcbb 	bl	8004624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cae:	480c      	ldr	r0, [pc, #48]	; (8005ce0 <prvInitialiseTaskLists+0x70>)
 8005cb0:	f7fe fcb8 	bl	8004624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cb4:	480b      	ldr	r0, [pc, #44]	; (8005ce4 <prvInitialiseTaskLists+0x74>)
 8005cb6:	f7fe fcb5 	bl	8004624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <prvInitialiseTaskLists+0x78>)
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <prvInitialiseTaskLists+0x64>)
 8005cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <prvInitialiseTaskLists+0x7c>)
 8005cc2:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <prvInitialiseTaskLists+0x68>)
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000a1c 	.word	0x20000a1c
 8005cd4:	20000e7c 	.word	0x20000e7c
 8005cd8:	20000e90 	.word	0x20000e90
 8005cdc:	20000eac 	.word	0x20000eac
 8005ce0:	20000ec0 	.word	0x20000ec0
 8005ce4:	20000ed8 	.word	0x20000ed8
 8005ce8:	20000ea4 	.word	0x20000ea4
 8005cec:	20000ea8 	.word	0x20000ea8

08005cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf6:	e019      	b.n	8005d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cf8:	f000 fdd4 	bl	80068a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <prvCheckTasksWaitingTermination+0x50>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fd15 	bl	8004738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <prvCheckTasksWaitingTermination+0x54>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	4a0b      	ldr	r2, [pc, #44]	; (8005d44 <prvCheckTasksWaitingTermination+0x54>)
 8005d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <prvCheckTasksWaitingTermination+0x58>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	4a0a      	ldr	r2, [pc, #40]	; (8005d48 <prvCheckTasksWaitingTermination+0x58>)
 8005d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d22:	f000 fdef 	bl	8006904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f810 	bl	8005d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <prvCheckTasksWaitingTermination+0x58>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e1      	bne.n	8005cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000ec0 	.word	0x20000ec0
 8005d44:	20000eec 	.word	0x20000eec
 8005d48:	20000ed4 	.word	0x20000ed4

08005d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3354      	adds	r3, #84	; 0x54
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f9cd 	bl	80070f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d108      	bne.n	8005d7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 ff87 	bl	8006c80 <vPortFree>
				vPortFree( pxTCB );
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 ff84 	bl	8006c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d78:	e018      	b.n	8005dac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d103      	bne.n	8005d8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 ff7b 	bl	8006c80 <vPortFree>
	}
 8005d8a:	e00f      	b.n	8005dac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d00a      	beq.n	8005dac <prvDeleteTCB+0x60>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <prvDeleteTCB+0x5e>
	}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <prvResetNextTaskUnblockTime+0x38>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dcc:	e008      	b.n	8005de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvResetNextTaskUnblockTime+0x38>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dde:	6013      	str	r3, [r2, #0]
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	20000ea4 	.word	0x20000ea4
 8005df0:	20000f0c 	.word	0x20000f0c

08005df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <xTaskGetSchedulerState+0x34>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e02:	2301      	movs	r3, #1
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	e008      	b.n	8005e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <xTaskGetSchedulerState+0x38>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e10:	2302      	movs	r3, #2
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e001      	b.n	8005e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e1a:	687b      	ldr	r3, [r7, #4]
	}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000ef8 	.word	0x20000ef8
 8005e2c:	20000f14 	.word	0x20000f14

08005e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d056      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <xTaskPriorityDisinherit+0xd0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60fb      	str	r3, [r7, #12]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60bb      	str	r3, [r7, #8]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d02c      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d128      	bne.n	8005ef4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fc46 	bl	8004738 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <xTaskPriorityDisinherit+0xd4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <xTaskPriorityDisinherit+0xa4>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <xTaskPriorityDisinherit+0xd4>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <xTaskPriorityDisinherit+0xd8>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fbc7 	bl	800467e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000a18 	.word	0x20000a18
 8005f04:	20000ef4 	.word	0x20000ef4
 8005f08:	20000a1c 	.word	0x20000a1c

08005f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f16:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1c:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fc08 	bl	8004738 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d10a      	bne.n	8005f46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4819      	ldr	r0, [pc, #100]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f40:	f7fe fb9d 	bl	800467e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f44:	e026      	b.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d209      	bcs.n	8005f72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fbab 	bl	80046c6 <vListInsert>
}
 8005f70:	e010      	b.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f72:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fba1 	bl	80046c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d202      	bcs.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f8e:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000ef0 	.word	0x20000ef0
 8005fa0:	20000a18 	.word	0x20000a18
 8005fa4:	20000ed8 	.word	0x20000ed8
 8005fa8:	20000ea8 	.word	0x20000ea8
 8005fac:	20000ea4 	.word	0x20000ea4
 8005fb0:	20000f0c 	.word	0x20000f0c

08005fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fbe:	f000 fb07 	bl	80065d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <xTimerCreateTimerTask+0x80>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d021      	beq.n	800600e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fd2:	1d3a      	adds	r2, r7, #4
 8005fd4:	f107 0108 	add.w	r1, r7, #8
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fb07 	bl	80045f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	2302      	movs	r3, #2
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	4910      	ldr	r1, [pc, #64]	; (8006038 <xTimerCreateTimerTask+0x84>)
 8005ff6:	4811      	ldr	r0, [pc, #68]	; (800603c <xTimerCreateTimerTask+0x88>)
 8005ff8:	f7ff f8b4 	bl	8005164 <xTaskCreateStatic>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <xTimerCreateTimerTask+0x8c>)
 8006000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <xTimerCreateTimerTask+0x8c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800600a:	2301      	movs	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	613b      	str	r3, [r7, #16]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000f48 	.word	0x20000f48
 8006038:	08007e44 	.word	0x08007e44
 800603c:	08006179 	.word	0x08006179
 8006040:	20000f4c 	.word	0x20000f4c

08006044 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	; 0x28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xTimerGenericCommand+0x2e>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	623b      	str	r3, [r7, #32]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <xTimerGenericCommand+0x98>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d02a      	beq.n	80060d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b05      	cmp	r3, #5
 800608a:	dc18      	bgt.n	80060be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800608c:	f7ff feb2 	bl	8005df4 <xTaskGetSchedulerState>
 8006090:	4603      	mov	r3, r0
 8006092:	2b02      	cmp	r3, #2
 8006094:	d109      	bne.n	80060aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <xTimerGenericCommand+0x98>)
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f107 0110 	add.w	r1, r7, #16
 800609e:	2300      	movs	r3, #0
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	f7fe fc77 	bl	8004994 <xQueueGenericSend>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24
 80060a8:	e012      	b.n	80060d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <xTimerGenericCommand+0x98>)
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	f107 0110 	add.w	r1, r7, #16
 80060b2:	2300      	movs	r3, #0
 80060b4:	2200      	movs	r2, #0
 80060b6:	f7fe fc6d 	bl	8004994 <xQueueGenericSend>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24
 80060bc:	e008      	b.n	80060d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <xTimerGenericCommand+0x98>)
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f107 0110 	add.w	r1, r7, #16
 80060c6:	2300      	movs	r3, #0
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	f7fe fd61 	bl	8004b90 <xQueueGenericSendFromISR>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000f48 	.word	0x20000f48

080060e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <prvProcessExpiredTimer+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fb1d 	bl	8004738 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d022      	beq.n	8006152 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	18d1      	adds	r1, r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	6978      	ldr	r0, [r7, #20]
 800611a:	f000 f8d1 	bl	80062c0 <prvInsertTimerInActiveList>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01f      	beq.n	8006164 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006124:	2300      	movs	r3, #0
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2300      	movs	r3, #0
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	2100      	movs	r1, #0
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	f7ff ff88 	bl	8006044 <xTimerGenericCommand>
 8006134:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d113      	bne.n	8006164 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	b2da      	uxtb	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	6978      	ldr	r0, [r7, #20]
 800616a:	4798      	blx	r3
}
 800616c:	bf00      	nop
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000f40 	.word	0x20000f40

08006178 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f857 	bl	8006238 <prvGetNextExpireTime>
 800618a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f803 	bl	800619c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006196:	f000 f8d5 	bl	8006344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800619a:	e7f1      	b.n	8006180 <prvTimerTask+0x8>

0800619c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061a6:	f7ff fa39 	bl	800561c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061aa:	f107 0308 	add.w	r3, r7, #8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 f866 	bl	8006280 <prvSampleTimeNow>
 80061b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d130      	bne.n	800621e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <prvProcessTimerOrBlockTask+0x3c>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d806      	bhi.n	80061d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061ca:	f7ff fa35 	bl	8005638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff85 	bl	80060e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061d6:	e024      	b.n	8006222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <prvProcessTimerOrBlockTask+0x90>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <prvProcessTimerOrBlockTask+0x50>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <prvProcessTimerOrBlockTask+0x52>
 80061ec:	2300      	movs	r3, #0
 80061ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061f0:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <prvProcessTimerOrBlockTask+0x94>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f7fe ff7d 	bl	80050fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006202:	f7ff fa19 	bl	8005638 <xTaskResumeAll>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <prvProcessTimerOrBlockTask+0x98>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
}
 800621c:	e001      	b.n	8006222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800621e:	f7ff fa0b 	bl	8005638 <xTaskResumeAll>
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000f44 	.word	0x20000f44
 8006230:	20000f48 	.word	0x20000f48
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <prvGetNextExpireTime+0x44>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <prvGetNextExpireTime+0x16>
 800624a:	2201      	movs	r2, #1
 800624c:	e000      	b.n	8006250 <prvGetNextExpireTime+0x18>
 800624e:	2200      	movs	r2, #0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvGetNextExpireTime+0x44>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e001      	b.n	800626c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000f40 	.word	0x20000f40

08006280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006288:	f7ff fa74 	bl	8005774 <xTaskGetTickCount>
 800628c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <prvSampleTimeNow+0x3c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	429a      	cmp	r2, r3
 8006296:	d205      	bcs.n	80062a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006298:	f000 f936 	bl	8006508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e002      	b.n	80062aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062aa:	4a04      	ldr	r2, [pc, #16]	; (80062bc <prvSampleTimeNow+0x3c>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062b0:	68fb      	ldr	r3, [r7, #12]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000f50 	.word	0x20000f50

080062c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d812      	bhi.n	800630c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e01b      	b.n	8006332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <prvInsertTimerInActiveList+0x7c>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7fe f9de 	bl	80046c6 <vListInsert>
 800630a:	e012      	b.n	8006332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d206      	bcs.n	8006322 <prvInsertTimerInActiveList+0x62>
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e007      	b.n	8006332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <prvInsertTimerInActiveList+0x80>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3304      	adds	r3, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7fe f9ca 	bl	80046c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006332:	697b      	ldr	r3, [r7, #20]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000f44 	.word	0x20000f44
 8006340:	20000f40 	.word	0x20000f40

08006344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08e      	sub	sp, #56	; 0x38
 8006348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800634a:	e0ca      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	da18      	bge.n	8006384 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	3304      	adds	r3, #4
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	61fb      	str	r3, [r7, #28]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637a:	6850      	ldr	r0, [r2, #4]
 800637c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637e:	6892      	ldr	r2, [r2, #8]
 8006380:	4611      	mov	r1, r2
 8006382:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f2c0 80ab 	blt.w	80064e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	3304      	adds	r3, #4
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe f9cb 	bl	8004738 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063a2:	463b      	mov	r3, r7
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff6b 	bl	8006280 <prvSampleTimeNow>
 80063aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	f200 8096 	bhi.w	80064e0 <prvProcessReceivedCommands+0x19c>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <prvProcessReceivedCommands+0x78>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063e5 	.word	0x080063e5
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	08006459 	.word	0x08006459
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	080064b7 	.word	0x080064b7
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063e5 	.word	0x080063e5
 80063dc:	08006459 	.word	0x08006459
 80063e0:	0800646d 	.word	0x0800646d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	18d1      	adds	r1, r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006404:	f7ff ff5c 	bl	80062c0 <prvInsertTimerInActiveList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d069      	beq.n	80064e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05e      	beq.n	80064e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	441a      	add	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	2100      	movs	r1, #0
 8006434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006436:	f7ff fe05 	bl	8006044 <xTimerGenericCommand>
 800643a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d14f      	bne.n	80064e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	61bb      	str	r3, [r7, #24]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800646a:	e03a      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	617b      	str	r3, [r7, #20]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	18d1      	adds	r1, r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b0:	f7ff ff06 	bl	80062c0 <prvInsertTimerInActiveList>
					break;
 80064b4:	e015      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c6:	f000 fbdb 	bl	8006c80 <vPortFree>
 80064ca:	e00a      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064de:	e000      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80064e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <prvProcessReceivedCommands+0x1c0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1d39      	adds	r1, r7, #4
 80064e8:	2200      	movs	r2, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fbec 	bl	8004cc8 <xQueueReceive>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f47f af2a 	bne.w	800634c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000f48 	.word	0x20000f48

08006508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800650e:	e048      	b.n	80065a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006510:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651a:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe f905 	bl	8004738 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02e      	beq.n	80065a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d90e      	bls.n	8006574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe f8aa 	bl	80046c6 <vListInsert>
 8006572:	e016      	b.n	80065a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006574:	2300      	movs	r3, #0
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	2300      	movs	r3, #0
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fd60 	bl	8006044 <xTimerGenericCommand>
 8006584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	603b      	str	r3, [r7, #0]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1b1      	bne.n	8006510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <prvSwitchTimerLists+0xc4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 80065b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ba:	4a04      	ldr	r2, [pc, #16]	; (80065cc <prvSwitchTimerLists+0xc4>)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	6013      	str	r3, [r2, #0]
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000f40 	.word	0x20000f40
 80065cc:	20000f44 	.word	0x20000f44

080065d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065d6:	f000 f965 	bl	80068a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d120      	bne.n	8006624 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065e2:	4814      	ldr	r0, [pc, #80]	; (8006634 <prvCheckForValidListAndQueue+0x64>)
 80065e4:	f7fe f81e 	bl	8004624 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065e8:	4813      	ldr	r0, [pc, #76]	; (8006638 <prvCheckForValidListAndQueue+0x68>)
 80065ea:	f7fe f81b 	bl	8004624 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <prvCheckForValidListAndQueue+0x6c>)
 80065f0:	4a10      	ldr	r2, [pc, #64]	; (8006634 <prvCheckForValidListAndQueue+0x64>)
 80065f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <prvCheckForValidListAndQueue+0x70>)
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <prvCheckForValidListAndQueue+0x68>)
 80065f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <prvCheckForValidListAndQueue+0x74>)
 8006600:	4a11      	ldr	r2, [pc, #68]	; (8006648 <prvCheckForValidListAndQueue+0x78>)
 8006602:	2110      	movs	r1, #16
 8006604:	200a      	movs	r0, #10
 8006606:	f7fe f929 	bl	800485c <xQueueGenericCreateStatic>
 800660a:	4603      	mov	r3, r0
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 800660e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	490b      	ldr	r1, [pc, #44]	; (800664c <prvCheckForValidListAndQueue+0x7c>)
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fd42 	bl	80050a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006624:	f000 f96e 	bl	8006904 <vPortExitCritical>
}
 8006628:	bf00      	nop
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000f48 	.word	0x20000f48
 8006634:	20000f18 	.word	0x20000f18
 8006638:	20000f2c 	.word	0x20000f2c
 800663c:	20000f40 	.word	0x20000f40
 8006640:	20000f44 	.word	0x20000f44
 8006644:	20000ff4 	.word	0x20000ff4
 8006648:	20000f54 	.word	0x20000f54
 800664c:	08007e4c 	.word	0x08007e4c

08006650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b04      	subs	r3, #4
 8006660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3b04      	subs	r3, #4
 800666e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f023 0201 	bic.w	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3b04      	subs	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006680:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <pxPortInitialiseStack+0x64>)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3b14      	subs	r3, #20
 800668a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f06f 0202 	mvn.w	r2, #2
 800669e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b20      	subs	r3, #32
 80066a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066a6:	68fb      	ldr	r3, [r7, #12]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	080066b9 	.word	0x080066b9

080066b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <prvTaskExitError+0x54>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d00a      	beq.n	80066e2 <prvTaskExitError+0x2a>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <prvTaskExitError+0x28>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
}
 80066f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066f6:	bf00      	nop
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0fc      	beq.n	80066f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	2000000c 	.word	0x2000000c

08006710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <pxCurrentTCBConst2>)
 8006712:	6819      	ldr	r1, [r3, #0]
 8006714:	6808      	ldr	r0, [r1, #0]
 8006716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	f380 8809 	msr	PSP, r0
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8811 	msr	BASEPRI, r0
 800672a:	4770      	bx	lr
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst2>:
 8006730:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop

08006738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006738:	4808      	ldr	r0, [pc, #32]	; (800675c <prvPortStartFirstTask+0x24>)
 800673a:	6800      	ldr	r0, [r0, #0]
 800673c:	6800      	ldr	r0, [r0, #0]
 800673e:	f380 8808 	msr	MSP, r0
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8814 	msr	CONTROL, r0
 800674a:	b662      	cpsie	i
 800674c:	b661      	cpsie	f
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	df00      	svc	0
 8006758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800675a:	bf00      	nop
 800675c:	e000ed08 	.word	0xe000ed08

08006760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006766:	4b46      	ldr	r3, [pc, #280]	; (8006880 <xPortStartScheduler+0x120>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a46      	ldr	r2, [pc, #280]	; (8006884 <xPortStartScheduler+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10a      	bne.n	8006786 <xPortStartScheduler+0x26>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006786:	4b3e      	ldr	r3, [pc, #248]	; (8006880 <xPortStartScheduler+0x120>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3f      	ldr	r2, [pc, #252]	; (8006888 <xPortStartScheduler+0x128>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10a      	bne.n	80067a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <xPortStartScheduler+0x12c>)
 80067a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b31      	ldr	r3, [pc, #196]	; (8006890 <xPortStartScheduler+0x130>)
 80067cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <xPortStartScheduler+0x134>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d4:	e009      	b.n	80067ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067d6:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <xPortStartScheduler+0x134>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a2d      	ldr	r2, [pc, #180]	; (8006894 <xPortStartScheduler+0x134>)
 80067de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d0ef      	beq.n	80067d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067f6:	4b27      	ldr	r3, [pc, #156]	; (8006894 <xPortStartScheduler+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1c3 0307 	rsb	r3, r3, #7
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00a      	beq.n	8006818 <xPortStartScheduler+0xb8>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60bb      	str	r3, [r7, #8]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006818:	4b1e      	ldr	r3, [pc, #120]	; (8006894 <xPortStartScheduler+0x134>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <xPortStartScheduler+0x134>)
 8006820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006822:	4b1c      	ldr	r3, [pc, #112]	; (8006894 <xPortStartScheduler+0x134>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <xPortStartScheduler+0x134>)
 800682c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <xPortStartScheduler+0x138>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <xPortStartScheduler+0x138>)
 800683c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <xPortStartScheduler+0x138>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a14      	ldr	r2, [pc, #80]	; (8006898 <xPortStartScheduler+0x138>)
 8006848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800684c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800684e:	f000 f8dd 	bl	8006a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <xPortStartScheduler+0x13c>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006858:	f000 f8fc 	bl	8006a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <xPortStartScheduler+0x140>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <xPortStartScheduler+0x140>)
 8006862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006868:	f7ff ff66 	bl	8006738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800686c:	f7ff f84c 	bl	8005908 <vTaskSwitchContext>
	prvTaskExitError();
 8006870:	f7ff ff22 	bl	80066b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	e000ed00 	.word	0xe000ed00
 8006884:	410fc271 	.word	0x410fc271
 8006888:	410fc270 	.word	0x410fc270
 800688c:	e000e400 	.word	0xe000e400
 8006890:	20001044 	.word	0x20001044
 8006894:	20001048 	.word	0x20001048
 8006898:	e000ed20 	.word	0xe000ed20
 800689c:	2000000c 	.word	0x2000000c
 80068a0:	e000ef34 	.word	0xe000ef34

080068a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	607b      	str	r3, [r7, #4]
}
 80068bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <vPortEnterCritical+0x58>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <vPortEnterCritical+0x58>)
 80068c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068c8:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <vPortEnterCritical+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10f      	bne.n	80068f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <vPortEnterCritical+0x5c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	603b      	str	r3, [r7, #0]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vPortEnterCritical+0x4a>
	}
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	2000000c 	.word	0x2000000c
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <vPortExitCritical+0x50>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <vPortExitCritical+0x24>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	607b      	str	r3, [r7, #4]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <vPortExitCritical+0x50>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <vPortExitCritical+0x50>)
 8006930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <vPortExitCritical+0x50>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <vPortExitCritical+0x42>
 800693a:	2300      	movs	r3, #0
 800693c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f383 8811 	msr	BASEPRI, r3
}
 8006944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000000c 	.word	0x2000000c
	...

08006960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006960:	f3ef 8009 	mrs	r0, PSP
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <pxCurrentTCBConst>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f01e 0f10 	tst.w	lr, #16
 8006970:	bf08      	it	eq
 8006972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006984:	f380 8811 	msr	BASEPRI, r0
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f7fe ffba 	bl	8005908 <vTaskSwitchContext>
 8006994:	f04f 0000 	mov.w	r0, #0
 8006998:	f380 8811 	msr	BASEPRI, r0
 800699c:	bc09      	pop	{r0, r3}
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	6808      	ldr	r0, [r1, #0]
 80069a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a6:	f01e 0f10 	tst.w	lr, #16
 80069aa:	bf08      	it	eq
 80069ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069b0:	f380 8809 	msr	PSP, r0
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	f3af 8000 	nop.w

080069c0 <pxCurrentTCBConst>:
 80069c0:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069e2:	f7fe fed7 	bl	8005794 <xTaskIncrementTick>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <xPortSysTickHandler+0x40>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f383 8811 	msr	BASEPRI, r3
}
 80069fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <vPortSetupTimerInterrupt+0x34>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <vPortSetupTimerInterrupt+0x38>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <vPortSetupTimerInterrupt+0x3c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <vPortSetupTimerInterrupt+0x40>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <vPortSetupTimerInterrupt+0x44>)
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <vPortSetupTimerInterrupt+0x34>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	e000e010 	.word	0xe000e010
 8006a44:	e000e018 	.word	0xe000e018
 8006a48:	20000000 	.word	0x20000000
 8006a4c:	10624dd3 	.word	0x10624dd3
 8006a50:	e000e014 	.word	0xe000e014

08006a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a64 <vPortEnableVFP+0x10>
 8006a58:	6801      	ldr	r1, [r0, #0]
 8006a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a5e:	6001      	str	r1, [r0, #0]
 8006a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a62:	bf00      	nop
 8006a64:	e000ed88 	.word	0xe000ed88

08006a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a6e:	f3ef 8305 	mrs	r3, IPSR
 8006a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d914      	bls.n	8006aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a7a:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <vPortValidateInterruptPriority+0x70>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a84:	4b15      	ldr	r3, [pc, #84]	; (8006adc <vPortValidateInterruptPriority+0x74>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	7afa      	ldrb	r2, [r7, #11]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d20a      	bcs.n	8006aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <vPortValidateInterruptPriority+0x78>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <vPortValidateInterruptPriority+0x7c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d90a      	bls.n	8006aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	603b      	str	r3, [r7, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <vPortValidateInterruptPriority+0x60>
	}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	e000e3f0 	.word	0xe000e3f0
 8006adc:	20001044 	.word	0x20001044
 8006ae0:	e000ed0c 	.word	0xe000ed0c
 8006ae4:	20001048 	.word	0x20001048

08006ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006af4:	f7fe fd92 	bl	800561c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006af8:	4b5b      	ldr	r3, [pc, #364]	; (8006c68 <pvPortMalloc+0x180>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b00:	f000 f920 	bl	8006d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b04:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <pvPortMalloc+0x184>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8093 	bne.w	8006c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01d      	beq.n	8006b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b18:	2208      	movs	r2, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d014      	beq.n	8006b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <pvPortMalloc+0x6c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	617b      	str	r3, [r7, #20]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06e      	beq.n	8006c38 <pvPortMalloc+0x150>
 8006b5a:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <pvPortMalloc+0x188>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d869      	bhi.n	8006c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b64:	4b43      	ldr	r3, [pc, #268]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b6e:	e004      	b.n	8006b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <pvPortMalloc+0xa4>
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f1      	bne.n	8006b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b8c:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <pvPortMalloc+0x180>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d050      	beq.n	8006c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d91f      	bls.n	8006bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	613b      	str	r3, [r7, #16]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bf2:	69b8      	ldr	r0, [r7, #24]
 8006bf4:	f000 f908 	bl	8006e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <pvPortMalloc+0x188>)
 8006c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <pvPortMalloc+0x188>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <pvPortMalloc+0x190>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d203      	bcs.n	8006c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <pvPortMalloc+0x188>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <pvPortMalloc+0x190>)
 8006c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <pvPortMalloc+0x184>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x194>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <pvPortMalloc+0x194>)
 8006c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c38:	f7fe fcfe 	bl	8005638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <pvPortMalloc+0x174>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60fb      	str	r3, [r7, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <pvPortMalloc+0x172>
	return pvReturn;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20008584 	.word	0x20008584
 8006c6c:	20008598 	.word	0x20008598
 8006c70:	20008588 	.word	0x20008588
 8006c74:	2000857c 	.word	0x2000857c
 8006c78:	2000858c 	.word	0x2000858c
 8006c7c:	20008590 	.word	0x20008590

08006c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04d      	beq.n	8006d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c92:	2308      	movs	r3, #8
 8006c94:	425b      	negs	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vPortFree+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <vPortFree+0x44>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <vPortFree+0x62>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <vPortFree+0xb8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01e      	beq.n	8006d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11a      	bne.n	8006d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <vPortFree+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d08:	f7fe fc88 	bl	800561c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <vPortFree+0xbc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <vPortFree+0xbc>)
 8006d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f000 f874 	bl	8006e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <vPortFree+0xc0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <vPortFree+0xc0>)
 8006d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d2a:	f7fe fc85 	bl	8005638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20008598 	.word	0x20008598
 8006d3c:	20008588 	.word	0x20008588
 8006d40:	20008594 	.word	0x20008594

08006d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d4a:	f247 5330 	movw	r3, #30000	; 0x7530
 8006d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <prvHeapInit+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <prvHeapInit+0xac>)
 8006d74:	4413      	add	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <prvHeapInit+0xb0>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <prvHeapInit+0xb0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d90:	2208      	movs	r2, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <prvHeapInit+0xb4>)
 8006da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvHeapInit+0xb4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvHeapInit+0xb4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvHeapInit+0xb4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvHeapInit+0xb8>)
 8006dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <prvHeapInit+0xbc>)
 8006dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <prvHeapInit+0xc0>)
 8006dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	2000104c 	.word	0x2000104c
 8006df4:	2000857c 	.word	0x2000857c
 8006df8:	20008584 	.word	0x20008584
 8006dfc:	2000858c 	.word	0x2000858c
 8006e00:	20008588 	.word	0x20008588
 8006e04:	20008598 	.word	0x20008598

08006e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <prvInsertBlockIntoFreeList+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e002      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x14>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d8f7      	bhi.n	8006e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d108      	bne.n	8006e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d118      	bne.n	8006e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d00d      	beq.n	8006e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e008      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e003      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d002      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	2000857c 	.word	0x2000857c
 8006eb8:	20008584 	.word	0x20008584

08006ebc <std>:
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eca:	6083      	str	r3, [r0, #8]
 8006ecc:	8181      	strh	r1, [r0, #12]
 8006ece:	6643      	str	r3, [r0, #100]	; 0x64
 8006ed0:	81c2      	strh	r2, [r0, #14]
 8006ed2:	6183      	str	r3, [r0, #24]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	305c      	adds	r0, #92	; 0x5c
 8006eda:	f000 f8f4 	bl	80070c6 <memset>
 8006ede:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <std+0x38>)
 8006ee0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <std+0x3c>)
 8006ee4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <std+0x40>)
 8006ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <std+0x44>)
 8006eec:	6224      	str	r4, [r4, #32]
 8006eee:	6323      	str	r3, [r4, #48]	; 0x30
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	08007041 	.word	0x08007041
 8006ef8:	08007063 	.word	0x08007063
 8006efc:	0800709b 	.word	0x0800709b
 8006f00:	080070bf 	.word	0x080070bf

08006f04 <stdio_exit_handler>:
 8006f04:	4a02      	ldr	r2, [pc, #8]	; (8006f10 <stdio_exit_handler+0xc>)
 8006f06:	4903      	ldr	r1, [pc, #12]	; (8006f14 <stdio_exit_handler+0x10>)
 8006f08:	4803      	ldr	r0, [pc, #12]	; (8006f18 <stdio_exit_handler+0x14>)
 8006f0a:	f000 b869 	b.w	8006fe0 <_fwalk_sglue>
 8006f0e:	bf00      	nop
 8006f10:	20000010 	.word	0x20000010
 8006f14:	08007b29 	.word	0x08007b29
 8006f18:	2000001c 	.word	0x2000001c

08006f1c <cleanup_stdio>:
 8006f1c:	6841      	ldr	r1, [r0, #4]
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <cleanup_stdio+0x34>)
 8006f20:	4299      	cmp	r1, r3
 8006f22:	b510      	push	{r4, lr}
 8006f24:	4604      	mov	r4, r0
 8006f26:	d001      	beq.n	8006f2c <cleanup_stdio+0x10>
 8006f28:	f000 fdfe 	bl	8007b28 <_fflush_r>
 8006f2c:	68a1      	ldr	r1, [r4, #8]
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <cleanup_stdio+0x38>)
 8006f30:	4299      	cmp	r1, r3
 8006f32:	d002      	beq.n	8006f3a <cleanup_stdio+0x1e>
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fdf7 	bl	8007b28 <_fflush_r>
 8006f3a:	68e1      	ldr	r1, [r4, #12]
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <cleanup_stdio+0x3c>)
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	d004      	beq.n	8006f4c <cleanup_stdio+0x30>
 8006f42:	4620      	mov	r0, r4
 8006f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f48:	f000 bdee 	b.w	8007b28 <_fflush_r>
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	bf00      	nop
 8006f50:	2000859c 	.word	0x2000859c
 8006f54:	20008604 	.word	0x20008604
 8006f58:	2000866c 	.word	0x2000866c

08006f5c <global_stdio_init.part.0>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <global_stdio_init.part.0+0x30>)
 8006f60:	4c0b      	ldr	r4, [pc, #44]	; (8006f90 <global_stdio_init.part.0+0x34>)
 8006f62:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <global_stdio_init.part.0+0x38>)
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	4620      	mov	r0, r4
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2104      	movs	r1, #4
 8006f6c:	f7ff ffa6 	bl	8006ebc <std>
 8006f70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f74:	2201      	movs	r2, #1
 8006f76:	2109      	movs	r1, #9
 8006f78:	f7ff ffa0 	bl	8006ebc <std>
 8006f7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f80:	2202      	movs	r2, #2
 8006f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f86:	2112      	movs	r1, #18
 8006f88:	f7ff bf98 	b.w	8006ebc <std>
 8006f8c:	200086d4 	.word	0x200086d4
 8006f90:	2000859c 	.word	0x2000859c
 8006f94:	08006f05 	.word	0x08006f05

08006f98 <__sfp_lock_acquire>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__sfp_lock_acquire+0x8>)
 8006f9a:	f000 b963 	b.w	8007264 <__retarget_lock_acquire_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	200086dd 	.word	0x200086dd

08006fa4 <__sfp_lock_release>:
 8006fa4:	4801      	ldr	r0, [pc, #4]	; (8006fac <__sfp_lock_release+0x8>)
 8006fa6:	f000 b95e 	b.w	8007266 <__retarget_lock_release_recursive>
 8006faa:	bf00      	nop
 8006fac:	200086dd 	.word	0x200086dd

08006fb0 <__sinit>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	f7ff fff0 	bl	8006f98 <__sfp_lock_acquire>
 8006fb8:	6a23      	ldr	r3, [r4, #32]
 8006fba:	b11b      	cbz	r3, 8006fc4 <__sinit+0x14>
 8006fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc0:	f7ff bff0 	b.w	8006fa4 <__sfp_lock_release>
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <__sinit+0x28>)
 8006fc6:	6223      	str	r3, [r4, #32]
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <__sinit+0x2c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1f5      	bne.n	8006fbc <__sinit+0xc>
 8006fd0:	f7ff ffc4 	bl	8006f5c <global_stdio_init.part.0>
 8006fd4:	e7f2      	b.n	8006fbc <__sinit+0xc>
 8006fd6:	bf00      	nop
 8006fd8:	08006f1d 	.word	0x08006f1d
 8006fdc:	200086d4 	.word	0x200086d4

08006fe0 <_fwalk_sglue>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	4688      	mov	r8, r1
 8006fe8:	4614      	mov	r4, r2
 8006fea:	2600      	movs	r6, #0
 8006fec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff4:	d505      	bpl.n	8007002 <_fwalk_sglue+0x22>
 8006ff6:	6824      	ldr	r4, [r4, #0]
 8006ff8:	2c00      	cmp	r4, #0
 8006ffa:	d1f7      	bne.n	8006fec <_fwalk_sglue+0xc>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d907      	bls.n	8007018 <_fwalk_sglue+0x38>
 8007008:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800700c:	3301      	adds	r3, #1
 800700e:	d003      	beq.n	8007018 <_fwalk_sglue+0x38>
 8007010:	4629      	mov	r1, r5
 8007012:	4638      	mov	r0, r7
 8007014:	47c0      	blx	r8
 8007016:	4306      	orrs	r6, r0
 8007018:	3568      	adds	r5, #104	; 0x68
 800701a:	e7e9      	b.n	8006ff0 <_fwalk_sglue+0x10>

0800701c <iprintf>:
 800701c:	b40f      	push	{r0, r1, r2, r3}
 800701e:	b507      	push	{r0, r1, r2, lr}
 8007020:	4906      	ldr	r1, [pc, #24]	; (800703c <iprintf+0x20>)
 8007022:	ab04      	add	r3, sp, #16
 8007024:	6808      	ldr	r0, [r1, #0]
 8007026:	f853 2b04 	ldr.w	r2, [r3], #4
 800702a:	6881      	ldr	r1, [r0, #8]
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	f000 fa4b 	bl	80074c8 <_vfiprintf_r>
 8007032:	b003      	add	sp, #12
 8007034:	f85d eb04 	ldr.w	lr, [sp], #4
 8007038:	b004      	add	sp, #16
 800703a:	4770      	bx	lr
 800703c:	20000068 	.word	0x20000068

08007040 <__sread>:
 8007040:	b510      	push	{r4, lr}
 8007042:	460c      	mov	r4, r1
 8007044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007048:	f000 f8be 	bl	80071c8 <_read_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	bfab      	itete	ge
 8007050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007052:	89a3      	ldrhlt	r3, [r4, #12]
 8007054:	181b      	addge	r3, r3, r0
 8007056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800705a:	bfac      	ite	ge
 800705c:	6563      	strge	r3, [r4, #84]	; 0x54
 800705e:	81a3      	strhlt	r3, [r4, #12]
 8007060:	bd10      	pop	{r4, pc}

08007062 <__swrite>:
 8007062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	461f      	mov	r7, r3
 8007068:	898b      	ldrh	r3, [r1, #12]
 800706a:	05db      	lsls	r3, r3, #23
 800706c:	4605      	mov	r5, r0
 800706e:	460c      	mov	r4, r1
 8007070:	4616      	mov	r6, r2
 8007072:	d505      	bpl.n	8007080 <__swrite+0x1e>
 8007074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007078:	2302      	movs	r3, #2
 800707a:	2200      	movs	r2, #0
 800707c:	f000 f892 	bl	80071a4 <_lseek_r>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	4632      	mov	r2, r6
 800708e:	463b      	mov	r3, r7
 8007090:	4628      	mov	r0, r5
 8007092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007096:	f000 b8a9 	b.w	80071ec <_write_r>

0800709a <__sseek>:
 800709a:	b510      	push	{r4, lr}
 800709c:	460c      	mov	r4, r1
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 f87f 	bl	80071a4 <_lseek_r>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	bf15      	itete	ne
 80070ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070b6:	81a3      	strheq	r3, [r4, #12]
 80070b8:	bf18      	it	ne
 80070ba:	81a3      	strhne	r3, [r4, #12]
 80070bc:	bd10      	pop	{r4, pc}

080070be <__sclose>:
 80070be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c2:	f000 b809 	b.w	80070d8 <_close_r>

080070c6 <memset>:
 80070c6:	4402      	add	r2, r0
 80070c8:	4603      	mov	r3, r0
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d100      	bne.n	80070d0 <memset+0xa>
 80070ce:	4770      	bx	lr
 80070d0:	f803 1b01 	strb.w	r1, [r3], #1
 80070d4:	e7f9      	b.n	80070ca <memset+0x4>
	...

080070d8 <_close_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d06      	ldr	r5, [pc, #24]	; (80070f4 <_close_r+0x1c>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7f9 ffcb 	bl	800107e <_close>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_close_r+0x1a>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_close_r+0x1a>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	200086d8 	.word	0x200086d8

080070f8 <_reclaim_reent>:
 80070f8:	4b29      	ldr	r3, [pc, #164]	; (80071a0 <_reclaim_reent+0xa8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4283      	cmp	r3, r0
 80070fe:	b570      	push	{r4, r5, r6, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	d04b      	beq.n	800719c <_reclaim_reent+0xa4>
 8007104:	69c3      	ldr	r3, [r0, #28]
 8007106:	b143      	cbz	r3, 800711a <_reclaim_reent+0x22>
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d144      	bne.n	8007198 <_reclaim_reent+0xa0>
 800710e:	69e3      	ldr	r3, [r4, #28]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	b111      	cbz	r1, 800711a <_reclaim_reent+0x22>
 8007114:	4620      	mov	r0, r4
 8007116:	f000 f8b5 	bl	8007284 <_free_r>
 800711a:	6961      	ldr	r1, [r4, #20]
 800711c:	b111      	cbz	r1, 8007124 <_reclaim_reent+0x2c>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f8b0 	bl	8007284 <_free_r>
 8007124:	69e1      	ldr	r1, [r4, #28]
 8007126:	b111      	cbz	r1, 800712e <_reclaim_reent+0x36>
 8007128:	4620      	mov	r0, r4
 800712a:	f000 f8ab 	bl	8007284 <_free_r>
 800712e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007130:	b111      	cbz	r1, 8007138 <_reclaim_reent+0x40>
 8007132:	4620      	mov	r0, r4
 8007134:	f000 f8a6 	bl	8007284 <_free_r>
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713a:	b111      	cbz	r1, 8007142 <_reclaim_reent+0x4a>
 800713c:	4620      	mov	r0, r4
 800713e:	f000 f8a1 	bl	8007284 <_free_r>
 8007142:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007144:	b111      	cbz	r1, 800714c <_reclaim_reent+0x54>
 8007146:	4620      	mov	r0, r4
 8007148:	f000 f89c 	bl	8007284 <_free_r>
 800714c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800714e:	b111      	cbz	r1, 8007156 <_reclaim_reent+0x5e>
 8007150:	4620      	mov	r0, r4
 8007152:	f000 f897 	bl	8007284 <_free_r>
 8007156:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007158:	b111      	cbz	r1, 8007160 <_reclaim_reent+0x68>
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f892 	bl	8007284 <_free_r>
 8007160:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007162:	b111      	cbz	r1, 800716a <_reclaim_reent+0x72>
 8007164:	4620      	mov	r0, r4
 8007166:	f000 f88d 	bl	8007284 <_free_r>
 800716a:	6a23      	ldr	r3, [r4, #32]
 800716c:	b1b3      	cbz	r3, 800719c <_reclaim_reent+0xa4>
 800716e:	4620      	mov	r0, r4
 8007170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007174:	4718      	bx	r3
 8007176:	5949      	ldr	r1, [r1, r5]
 8007178:	b941      	cbnz	r1, 800718c <_reclaim_reent+0x94>
 800717a:	3504      	adds	r5, #4
 800717c:	69e3      	ldr	r3, [r4, #28]
 800717e:	2d80      	cmp	r5, #128	; 0x80
 8007180:	68d9      	ldr	r1, [r3, #12]
 8007182:	d1f8      	bne.n	8007176 <_reclaim_reent+0x7e>
 8007184:	4620      	mov	r0, r4
 8007186:	f000 f87d 	bl	8007284 <_free_r>
 800718a:	e7c0      	b.n	800710e <_reclaim_reent+0x16>
 800718c:	680e      	ldr	r6, [r1, #0]
 800718e:	4620      	mov	r0, r4
 8007190:	f000 f878 	bl	8007284 <_free_r>
 8007194:	4631      	mov	r1, r6
 8007196:	e7ef      	b.n	8007178 <_reclaim_reent+0x80>
 8007198:	2500      	movs	r5, #0
 800719a:	e7ef      	b.n	800717c <_reclaim_reent+0x84>
 800719c:	bd70      	pop	{r4, r5, r6, pc}
 800719e:	bf00      	nop
 80071a0:	20000068 	.word	0x20000068

080071a4 <_lseek_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d07      	ldr	r5, [pc, #28]	; (80071c4 <_lseek_r+0x20>)
 80071a8:	4604      	mov	r4, r0
 80071aa:	4608      	mov	r0, r1
 80071ac:	4611      	mov	r1, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	602a      	str	r2, [r5, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f7f9 ff8a 	bl	80010cc <_lseek>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_lseek_r+0x1e>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_lseek_r+0x1e>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	200086d8 	.word	0x200086d8

080071c8 <_read_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	; (80071e8 <_read_r+0x20>)
 80071cc:	4604      	mov	r4, r0
 80071ce:	4608      	mov	r0, r1
 80071d0:	4611      	mov	r1, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7f9 ff18 	bl	800100c <_read>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_read_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_read_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	200086d8 	.word	0x200086d8

080071ec <_write_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	; (800720c <_write_r+0x20>)
 80071f0:	4604      	mov	r4, r0
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7f9 ff23 	bl	8001046 <_write>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_write_r+0x1e>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_write_r+0x1e>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	200086d8 	.word	0x200086d8

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	; (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000068 	.word	0x20000068

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	; (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	; (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	; (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	; (8007260 <__libc_init_array+0x44>)
 8007230:	f000 fdcc 	bl	8007dcc <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007f00 	.word	0x08007f00
 8007258:	08007f00 	.word	0x08007f00
 800725c:	08007f00 	.word	0x08007f00
 8007260:	08007f04 	.word	0x08007f04

08007264 <__retarget_lock_acquire_recursive>:
 8007264:	4770      	bx	lr

08007266 <__retarget_lock_release_recursive>:
 8007266:	4770      	bx	lr

08007268 <memcpy>:
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007270:	d100      	bne.n	8007274 <memcpy+0xc>
 8007272:	4770      	bx	lr
 8007274:	b510      	push	{r4, lr}
 8007276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727e:	4291      	cmp	r1, r2
 8007280:	d1f9      	bne.n	8007276 <memcpy+0xe>
 8007282:	bd10      	pop	{r4, pc}

08007284 <_free_r>:
 8007284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007286:	2900      	cmp	r1, #0
 8007288:	d044      	beq.n	8007314 <_free_r+0x90>
 800728a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800728e:	9001      	str	r0, [sp, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f1a1 0404 	sub.w	r4, r1, #4
 8007296:	bfb8      	it	lt
 8007298:	18e4      	addlt	r4, r4, r3
 800729a:	f000 f8df 	bl	800745c <__malloc_lock>
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <_free_r+0x94>)
 80072a0:	9801      	ldr	r0, [sp, #4]
 80072a2:	6813      	ldr	r3, [r2, #0]
 80072a4:	b933      	cbnz	r3, 80072b4 <_free_r+0x30>
 80072a6:	6063      	str	r3, [r4, #4]
 80072a8:	6014      	str	r4, [r2, #0]
 80072aa:	b003      	add	sp, #12
 80072ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072b0:	f000 b8da 	b.w	8007468 <__malloc_unlock>
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d908      	bls.n	80072ca <_free_r+0x46>
 80072b8:	6825      	ldr	r5, [r4, #0]
 80072ba:	1961      	adds	r1, r4, r5
 80072bc:	428b      	cmp	r3, r1
 80072be:	bf01      	itttt	eq
 80072c0:	6819      	ldreq	r1, [r3, #0]
 80072c2:	685b      	ldreq	r3, [r3, #4]
 80072c4:	1949      	addeq	r1, r1, r5
 80072c6:	6021      	streq	r1, [r4, #0]
 80072c8:	e7ed      	b.n	80072a6 <_free_r+0x22>
 80072ca:	461a      	mov	r2, r3
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	b10b      	cbz	r3, 80072d4 <_free_r+0x50>
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d9fa      	bls.n	80072ca <_free_r+0x46>
 80072d4:	6811      	ldr	r1, [r2, #0]
 80072d6:	1855      	adds	r5, r2, r1
 80072d8:	42a5      	cmp	r5, r4
 80072da:	d10b      	bne.n	80072f4 <_free_r+0x70>
 80072dc:	6824      	ldr	r4, [r4, #0]
 80072de:	4421      	add	r1, r4
 80072e0:	1854      	adds	r4, r2, r1
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	d1e0      	bne.n	80072aa <_free_r+0x26>
 80072e8:	681c      	ldr	r4, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	6053      	str	r3, [r2, #4]
 80072ee:	440c      	add	r4, r1
 80072f0:	6014      	str	r4, [r2, #0]
 80072f2:	e7da      	b.n	80072aa <_free_r+0x26>
 80072f4:	d902      	bls.n	80072fc <_free_r+0x78>
 80072f6:	230c      	movs	r3, #12
 80072f8:	6003      	str	r3, [r0, #0]
 80072fa:	e7d6      	b.n	80072aa <_free_r+0x26>
 80072fc:	6825      	ldr	r5, [r4, #0]
 80072fe:	1961      	adds	r1, r4, r5
 8007300:	428b      	cmp	r3, r1
 8007302:	bf04      	itt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	bf04      	itt	eq
 800730c:	1949      	addeq	r1, r1, r5
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	6054      	str	r4, [r2, #4]
 8007312:	e7ca      	b.n	80072aa <_free_r+0x26>
 8007314:	b003      	add	sp, #12
 8007316:	bd30      	pop	{r4, r5, pc}
 8007318:	200086e0 	.word	0x200086e0

0800731c <sbrk_aligned>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	4e0e      	ldr	r6, [pc, #56]	; (8007358 <sbrk_aligned+0x3c>)
 8007320:	460c      	mov	r4, r1
 8007322:	6831      	ldr	r1, [r6, #0]
 8007324:	4605      	mov	r5, r0
 8007326:	b911      	cbnz	r1, 800732e <sbrk_aligned+0x12>
 8007328:	f000 fcbc 	bl	8007ca4 <_sbrk_r>
 800732c:	6030      	str	r0, [r6, #0]
 800732e:	4621      	mov	r1, r4
 8007330:	4628      	mov	r0, r5
 8007332:	f000 fcb7 	bl	8007ca4 <_sbrk_r>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	d00a      	beq.n	8007350 <sbrk_aligned+0x34>
 800733a:	1cc4      	adds	r4, r0, #3
 800733c:	f024 0403 	bic.w	r4, r4, #3
 8007340:	42a0      	cmp	r0, r4
 8007342:	d007      	beq.n	8007354 <sbrk_aligned+0x38>
 8007344:	1a21      	subs	r1, r4, r0
 8007346:	4628      	mov	r0, r5
 8007348:	f000 fcac 	bl	8007ca4 <_sbrk_r>
 800734c:	3001      	adds	r0, #1
 800734e:	d101      	bne.n	8007354 <sbrk_aligned+0x38>
 8007350:	f04f 34ff 	mov.w	r4, #4294967295
 8007354:	4620      	mov	r0, r4
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	200086e4 	.word	0x200086e4

0800735c <_malloc_r>:
 800735c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007360:	1ccd      	adds	r5, r1, #3
 8007362:	f025 0503 	bic.w	r5, r5, #3
 8007366:	3508      	adds	r5, #8
 8007368:	2d0c      	cmp	r5, #12
 800736a:	bf38      	it	cc
 800736c:	250c      	movcc	r5, #12
 800736e:	2d00      	cmp	r5, #0
 8007370:	4607      	mov	r7, r0
 8007372:	db01      	blt.n	8007378 <_malloc_r+0x1c>
 8007374:	42a9      	cmp	r1, r5
 8007376:	d905      	bls.n	8007384 <_malloc_r+0x28>
 8007378:	230c      	movs	r3, #12
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	2600      	movs	r6, #0
 800737e:	4630      	mov	r0, r6
 8007380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007384:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007458 <_malloc_r+0xfc>
 8007388:	f000 f868 	bl	800745c <__malloc_lock>
 800738c:	f8d8 3000 	ldr.w	r3, [r8]
 8007390:	461c      	mov	r4, r3
 8007392:	bb5c      	cbnz	r4, 80073ec <_malloc_r+0x90>
 8007394:	4629      	mov	r1, r5
 8007396:	4638      	mov	r0, r7
 8007398:	f7ff ffc0 	bl	800731c <sbrk_aligned>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	4604      	mov	r4, r0
 80073a0:	d155      	bne.n	800744e <_malloc_r+0xf2>
 80073a2:	f8d8 4000 	ldr.w	r4, [r8]
 80073a6:	4626      	mov	r6, r4
 80073a8:	2e00      	cmp	r6, #0
 80073aa:	d145      	bne.n	8007438 <_malloc_r+0xdc>
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d048      	beq.n	8007442 <_malloc_r+0xe6>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	4631      	mov	r1, r6
 80073b4:	4638      	mov	r0, r7
 80073b6:	eb04 0903 	add.w	r9, r4, r3
 80073ba:	f000 fc73 	bl	8007ca4 <_sbrk_r>
 80073be:	4581      	cmp	r9, r0
 80073c0:	d13f      	bne.n	8007442 <_malloc_r+0xe6>
 80073c2:	6821      	ldr	r1, [r4, #0]
 80073c4:	1a6d      	subs	r5, r5, r1
 80073c6:	4629      	mov	r1, r5
 80073c8:	4638      	mov	r0, r7
 80073ca:	f7ff ffa7 	bl	800731c <sbrk_aligned>
 80073ce:	3001      	adds	r0, #1
 80073d0:	d037      	beq.n	8007442 <_malloc_r+0xe6>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	442b      	add	r3, r5
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	f8d8 3000 	ldr.w	r3, [r8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d038      	beq.n	8007452 <_malloc_r+0xf6>
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	42a2      	cmp	r2, r4
 80073e4:	d12b      	bne.n	800743e <_malloc_r+0xe2>
 80073e6:	2200      	movs	r2, #0
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	e00f      	b.n	800740c <_malloc_r+0xb0>
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	1b52      	subs	r2, r2, r5
 80073f0:	d41f      	bmi.n	8007432 <_malloc_r+0xd6>
 80073f2:	2a0b      	cmp	r2, #11
 80073f4:	d917      	bls.n	8007426 <_malloc_r+0xca>
 80073f6:	1961      	adds	r1, r4, r5
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	6025      	str	r5, [r4, #0]
 80073fc:	bf18      	it	ne
 80073fe:	6059      	strne	r1, [r3, #4]
 8007400:	6863      	ldr	r3, [r4, #4]
 8007402:	bf08      	it	eq
 8007404:	f8c8 1000 	streq.w	r1, [r8]
 8007408:	5162      	str	r2, [r4, r5]
 800740a:	604b      	str	r3, [r1, #4]
 800740c:	4638      	mov	r0, r7
 800740e:	f104 060b 	add.w	r6, r4, #11
 8007412:	f000 f829 	bl	8007468 <__malloc_unlock>
 8007416:	f026 0607 	bic.w	r6, r6, #7
 800741a:	1d23      	adds	r3, r4, #4
 800741c:	1af2      	subs	r2, r6, r3
 800741e:	d0ae      	beq.n	800737e <_malloc_r+0x22>
 8007420:	1b9b      	subs	r3, r3, r6
 8007422:	50a3      	str	r3, [r4, r2]
 8007424:	e7ab      	b.n	800737e <_malloc_r+0x22>
 8007426:	42a3      	cmp	r3, r4
 8007428:	6862      	ldr	r2, [r4, #4]
 800742a:	d1dd      	bne.n	80073e8 <_malloc_r+0x8c>
 800742c:	f8c8 2000 	str.w	r2, [r8]
 8007430:	e7ec      	b.n	800740c <_malloc_r+0xb0>
 8007432:	4623      	mov	r3, r4
 8007434:	6864      	ldr	r4, [r4, #4]
 8007436:	e7ac      	b.n	8007392 <_malloc_r+0x36>
 8007438:	4634      	mov	r4, r6
 800743a:	6876      	ldr	r6, [r6, #4]
 800743c:	e7b4      	b.n	80073a8 <_malloc_r+0x4c>
 800743e:	4613      	mov	r3, r2
 8007440:	e7cc      	b.n	80073dc <_malloc_r+0x80>
 8007442:	230c      	movs	r3, #12
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4638      	mov	r0, r7
 8007448:	f000 f80e 	bl	8007468 <__malloc_unlock>
 800744c:	e797      	b.n	800737e <_malloc_r+0x22>
 800744e:	6025      	str	r5, [r4, #0]
 8007450:	e7dc      	b.n	800740c <_malloc_r+0xb0>
 8007452:	605b      	str	r3, [r3, #4]
 8007454:	deff      	udf	#255	; 0xff
 8007456:	bf00      	nop
 8007458:	200086e0 	.word	0x200086e0

0800745c <__malloc_lock>:
 800745c:	4801      	ldr	r0, [pc, #4]	; (8007464 <__malloc_lock+0x8>)
 800745e:	f7ff bf01 	b.w	8007264 <__retarget_lock_acquire_recursive>
 8007462:	bf00      	nop
 8007464:	200086dc 	.word	0x200086dc

08007468 <__malloc_unlock>:
 8007468:	4801      	ldr	r0, [pc, #4]	; (8007470 <__malloc_unlock+0x8>)
 800746a:	f7ff befc 	b.w	8007266 <__retarget_lock_release_recursive>
 800746e:	bf00      	nop
 8007470:	200086dc 	.word	0x200086dc

08007474 <__sfputc_r>:
 8007474:	6893      	ldr	r3, [r2, #8]
 8007476:	3b01      	subs	r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	b410      	push	{r4}
 800747c:	6093      	str	r3, [r2, #8]
 800747e:	da08      	bge.n	8007492 <__sfputc_r+0x1e>
 8007480:	6994      	ldr	r4, [r2, #24]
 8007482:	42a3      	cmp	r3, r4
 8007484:	db01      	blt.n	800748a <__sfputc_r+0x16>
 8007486:	290a      	cmp	r1, #10
 8007488:	d103      	bne.n	8007492 <__sfputc_r+0x1e>
 800748a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800748e:	f000 bb73 	b.w	8007b78 <__swbuf_r>
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	1c58      	adds	r0, r3, #1
 8007496:	6010      	str	r0, [r2, #0]
 8007498:	7019      	strb	r1, [r3, #0]
 800749a:	4608      	mov	r0, r1
 800749c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <__sfputs_r>:
 80074a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a4:	4606      	mov	r6, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	18d5      	adds	r5, r2, r3
 80074ac:	42ac      	cmp	r4, r5
 80074ae:	d101      	bne.n	80074b4 <__sfputs_r+0x12>
 80074b0:	2000      	movs	r0, #0
 80074b2:	e007      	b.n	80074c4 <__sfputs_r+0x22>
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	463a      	mov	r2, r7
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7ff ffda 	bl	8007474 <__sfputc_r>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d1f3      	bne.n	80074ac <__sfputs_r+0xa>
 80074c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074c8 <_vfiprintf_r>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	460d      	mov	r5, r1
 80074ce:	b09d      	sub	sp, #116	; 0x74
 80074d0:	4614      	mov	r4, r2
 80074d2:	4698      	mov	r8, r3
 80074d4:	4606      	mov	r6, r0
 80074d6:	b118      	cbz	r0, 80074e0 <_vfiprintf_r+0x18>
 80074d8:	6a03      	ldr	r3, [r0, #32]
 80074da:	b90b      	cbnz	r3, 80074e0 <_vfiprintf_r+0x18>
 80074dc:	f7ff fd68 	bl	8006fb0 <__sinit>
 80074e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074e2:	07d9      	lsls	r1, r3, #31
 80074e4:	d405      	bmi.n	80074f2 <_vfiprintf_r+0x2a>
 80074e6:	89ab      	ldrh	r3, [r5, #12]
 80074e8:	059a      	lsls	r2, r3, #22
 80074ea:	d402      	bmi.n	80074f2 <_vfiprintf_r+0x2a>
 80074ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ee:	f7ff feb9 	bl	8007264 <__retarget_lock_acquire_recursive>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	071b      	lsls	r3, r3, #28
 80074f6:	d501      	bpl.n	80074fc <_vfiprintf_r+0x34>
 80074f8:	692b      	ldr	r3, [r5, #16]
 80074fa:	b99b      	cbnz	r3, 8007524 <_vfiprintf_r+0x5c>
 80074fc:	4629      	mov	r1, r5
 80074fe:	4630      	mov	r0, r6
 8007500:	f000 fb78 	bl	8007bf4 <__swsetup_r>
 8007504:	b170      	cbz	r0, 8007524 <_vfiprintf_r+0x5c>
 8007506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007508:	07dc      	lsls	r4, r3, #31
 800750a:	d504      	bpl.n	8007516 <_vfiprintf_r+0x4e>
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	b01d      	add	sp, #116	; 0x74
 8007512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	0598      	lsls	r0, r3, #22
 800751a:	d4f7      	bmi.n	800750c <_vfiprintf_r+0x44>
 800751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751e:	f7ff fea2 	bl	8007266 <__retarget_lock_release_recursive>
 8007522:	e7f3      	b.n	800750c <_vfiprintf_r+0x44>
 8007524:	2300      	movs	r3, #0
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	2320      	movs	r3, #32
 800752a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007532:	2330      	movs	r3, #48	; 0x30
 8007534:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076e8 <_vfiprintf_r+0x220>
 8007538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753c:	f04f 0901 	mov.w	r9, #1
 8007540:	4623      	mov	r3, r4
 8007542:	469a      	mov	sl, r3
 8007544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007548:	b10a      	cbz	r2, 800754e <_vfiprintf_r+0x86>
 800754a:	2a25      	cmp	r2, #37	; 0x25
 800754c:	d1f9      	bne.n	8007542 <_vfiprintf_r+0x7a>
 800754e:	ebba 0b04 	subs.w	fp, sl, r4
 8007552:	d00b      	beq.n	800756c <_vfiprintf_r+0xa4>
 8007554:	465b      	mov	r3, fp
 8007556:	4622      	mov	r2, r4
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ffa1 	bl	80074a2 <__sfputs_r>
 8007560:	3001      	adds	r0, #1
 8007562:	f000 80a9 	beq.w	80076b8 <_vfiprintf_r+0x1f0>
 8007566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007568:	445a      	add	r2, fp
 800756a:	9209      	str	r2, [sp, #36]	; 0x24
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80a1 	beq.w	80076b8 <_vfiprintf_r+0x1f0>
 8007576:	2300      	movs	r3, #0
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007580:	f10a 0a01 	add.w	sl, sl, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	9307      	str	r3, [sp, #28]
 8007588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800758c:	931a      	str	r3, [sp, #104]	; 0x68
 800758e:	4654      	mov	r4, sl
 8007590:	2205      	movs	r2, #5
 8007592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007596:	4854      	ldr	r0, [pc, #336]	; (80076e8 <_vfiprintf_r+0x220>)
 8007598:	f7f8 fe1a 	bl	80001d0 <memchr>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	b9d8      	cbnz	r0, 80075d8 <_vfiprintf_r+0x110>
 80075a0:	06d1      	lsls	r1, r2, #27
 80075a2:	bf44      	itt	mi
 80075a4:	2320      	movmi	r3, #32
 80075a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075aa:	0713      	lsls	r3, r2, #28
 80075ac:	bf44      	itt	mi
 80075ae:	232b      	movmi	r3, #43	; 0x2b
 80075b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b4:	f89a 3000 	ldrb.w	r3, [sl]
 80075b8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ba:	d015      	beq.n	80075e8 <_vfiprintf_r+0x120>
 80075bc:	9a07      	ldr	r2, [sp, #28]
 80075be:	4654      	mov	r4, sl
 80075c0:	2000      	movs	r0, #0
 80075c2:	f04f 0c0a 	mov.w	ip, #10
 80075c6:	4621      	mov	r1, r4
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	; 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94d      	bls.n	800766e <_vfiprintf_r+0x1a6>
 80075d2:	b1b0      	cbz	r0, 8007602 <_vfiprintf_r+0x13a>
 80075d4:	9207      	str	r2, [sp, #28]
 80075d6:	e014      	b.n	8007602 <_vfiprintf_r+0x13a>
 80075d8:	eba0 0308 	sub.w	r3, r0, r8
 80075dc:	fa09 f303 	lsl.w	r3, r9, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	46a2      	mov	sl, r4
 80075e6:	e7d2      	b.n	800758e <_vfiprintf_r+0xc6>
 80075e8:	9b03      	ldr	r3, [sp, #12]
 80075ea:	1d19      	adds	r1, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfbb      	ittet	lt
 80075f4:	425b      	neglt	r3, r3
 80075f6:	f042 0202 	orrlt.w	r2, r2, #2
 80075fa:	9307      	strge	r3, [sp, #28]
 80075fc:	9307      	strlt	r3, [sp, #28]
 80075fe:	bfb8      	it	lt
 8007600:	9204      	strlt	r2, [sp, #16]
 8007602:	7823      	ldrb	r3, [r4, #0]
 8007604:	2b2e      	cmp	r3, #46	; 0x2e
 8007606:	d10c      	bne.n	8007622 <_vfiprintf_r+0x15a>
 8007608:	7863      	ldrb	r3, [r4, #1]
 800760a:	2b2a      	cmp	r3, #42	; 0x2a
 800760c:	d134      	bne.n	8007678 <_vfiprintf_r+0x1b0>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	9203      	str	r2, [sp, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfb8      	it	lt
 800761a:	f04f 33ff 	movlt.w	r3, #4294967295
 800761e:	3402      	adds	r4, #2
 8007620:	9305      	str	r3, [sp, #20]
 8007622:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80076f8 <_vfiprintf_r+0x230>
 8007626:	7821      	ldrb	r1, [r4, #0]
 8007628:	2203      	movs	r2, #3
 800762a:	4650      	mov	r0, sl
 800762c:	f7f8 fdd0 	bl	80001d0 <memchr>
 8007630:	b138      	cbz	r0, 8007642 <_vfiprintf_r+0x17a>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	eba0 000a 	sub.w	r0, r0, sl
 8007638:	2240      	movs	r2, #64	; 0x40
 800763a:	4082      	lsls	r2, r0
 800763c:	4313      	orrs	r3, r2
 800763e:	3401      	adds	r4, #1
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007646:	4829      	ldr	r0, [pc, #164]	; (80076ec <_vfiprintf_r+0x224>)
 8007648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764c:	2206      	movs	r2, #6
 800764e:	f7f8 fdbf 	bl	80001d0 <memchr>
 8007652:	2800      	cmp	r0, #0
 8007654:	d03f      	beq.n	80076d6 <_vfiprintf_r+0x20e>
 8007656:	4b26      	ldr	r3, [pc, #152]	; (80076f0 <_vfiprintf_r+0x228>)
 8007658:	bb1b      	cbnz	r3, 80076a2 <_vfiprintf_r+0x1da>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	3308      	adds	r3, #8
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007668:	443b      	add	r3, r7
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	e768      	b.n	8007540 <_vfiprintf_r+0x78>
 800766e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007672:	460c      	mov	r4, r1
 8007674:	2001      	movs	r0, #1
 8007676:	e7a6      	b.n	80075c6 <_vfiprintf_r+0xfe>
 8007678:	2300      	movs	r3, #0
 800767a:	3401      	adds	r4, #1
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	4619      	mov	r1, r3
 8007680:	f04f 0c0a 	mov.w	ip, #10
 8007684:	4620      	mov	r0, r4
 8007686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768a:	3a30      	subs	r2, #48	; 0x30
 800768c:	2a09      	cmp	r2, #9
 800768e:	d903      	bls.n	8007698 <_vfiprintf_r+0x1d0>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0c6      	beq.n	8007622 <_vfiprintf_r+0x15a>
 8007694:	9105      	str	r1, [sp, #20]
 8007696:	e7c4      	b.n	8007622 <_vfiprintf_r+0x15a>
 8007698:	fb0c 2101 	mla	r1, ip, r1, r2
 800769c:	4604      	mov	r4, r0
 800769e:	2301      	movs	r3, #1
 80076a0:	e7f0      	b.n	8007684 <_vfiprintf_r+0x1bc>
 80076a2:	ab03      	add	r3, sp, #12
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	462a      	mov	r2, r5
 80076a8:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <_vfiprintf_r+0x22c>)
 80076aa:	a904      	add	r1, sp, #16
 80076ac:	4630      	mov	r0, r6
 80076ae:	f3af 8000 	nop.w
 80076b2:	4607      	mov	r7, r0
 80076b4:	1c78      	adds	r0, r7, #1
 80076b6:	d1d6      	bne.n	8007666 <_vfiprintf_r+0x19e>
 80076b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d405      	bmi.n	80076ca <_vfiprintf_r+0x202>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	059a      	lsls	r2, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_vfiprintf_r+0x202>
 80076c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c6:	f7ff fdce 	bl	8007266 <__retarget_lock_release_recursive>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	065b      	lsls	r3, r3, #25
 80076ce:	f53f af1d 	bmi.w	800750c <_vfiprintf_r+0x44>
 80076d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d4:	e71c      	b.n	8007510 <_vfiprintf_r+0x48>
 80076d6:	ab03      	add	r3, sp, #12
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	462a      	mov	r2, r5
 80076dc:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <_vfiprintf_r+0x22c>)
 80076de:	a904      	add	r1, sp, #16
 80076e0:	4630      	mov	r0, r6
 80076e2:	f000 f879 	bl	80077d8 <_printf_i>
 80076e6:	e7e4      	b.n	80076b2 <_vfiprintf_r+0x1ea>
 80076e8:	08007ec4 	.word	0x08007ec4
 80076ec:	08007ece 	.word	0x08007ece
 80076f0:	00000000 	.word	0x00000000
 80076f4:	080074a3 	.word	0x080074a3
 80076f8:	08007eca 	.word	0x08007eca

080076fc <_printf_common>:
 80076fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007700:	4616      	mov	r6, r2
 8007702:	4699      	mov	r9, r3
 8007704:	688a      	ldr	r2, [r1, #8]
 8007706:	690b      	ldr	r3, [r1, #16]
 8007708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800770c:	4293      	cmp	r3, r2
 800770e:	bfb8      	it	lt
 8007710:	4613      	movlt	r3, r2
 8007712:	6033      	str	r3, [r6, #0]
 8007714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007718:	4607      	mov	r7, r0
 800771a:	460c      	mov	r4, r1
 800771c:	b10a      	cbz	r2, 8007722 <_printf_common+0x26>
 800771e:	3301      	adds	r3, #1
 8007720:	6033      	str	r3, [r6, #0]
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	0699      	lsls	r1, r3, #26
 8007726:	bf42      	ittt	mi
 8007728:	6833      	ldrmi	r3, [r6, #0]
 800772a:	3302      	addmi	r3, #2
 800772c:	6033      	strmi	r3, [r6, #0]
 800772e:	6825      	ldr	r5, [r4, #0]
 8007730:	f015 0506 	ands.w	r5, r5, #6
 8007734:	d106      	bne.n	8007744 <_printf_common+0x48>
 8007736:	f104 0a19 	add.w	sl, r4, #25
 800773a:	68e3      	ldr	r3, [r4, #12]
 800773c:	6832      	ldr	r2, [r6, #0]
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	42ab      	cmp	r3, r5
 8007742:	dc26      	bgt.n	8007792 <_printf_common+0x96>
 8007744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007748:	1e13      	subs	r3, r2, #0
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	bf18      	it	ne
 800774e:	2301      	movne	r3, #1
 8007750:	0692      	lsls	r2, r2, #26
 8007752:	d42b      	bmi.n	80077ac <_printf_common+0xb0>
 8007754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007758:	4649      	mov	r1, r9
 800775a:	4638      	mov	r0, r7
 800775c:	47c0      	blx	r8
 800775e:	3001      	adds	r0, #1
 8007760:	d01e      	beq.n	80077a0 <_printf_common+0xa4>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	6922      	ldr	r2, [r4, #16]
 8007766:	f003 0306 	and.w	r3, r3, #6
 800776a:	2b04      	cmp	r3, #4
 800776c:	bf02      	ittt	eq
 800776e:	68e5      	ldreq	r5, [r4, #12]
 8007770:	6833      	ldreq	r3, [r6, #0]
 8007772:	1aed      	subeq	r5, r5, r3
 8007774:	68a3      	ldr	r3, [r4, #8]
 8007776:	bf0c      	ite	eq
 8007778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800777c:	2500      	movne	r5, #0
 800777e:	4293      	cmp	r3, r2
 8007780:	bfc4      	itt	gt
 8007782:	1a9b      	subgt	r3, r3, r2
 8007784:	18ed      	addgt	r5, r5, r3
 8007786:	2600      	movs	r6, #0
 8007788:	341a      	adds	r4, #26
 800778a:	42b5      	cmp	r5, r6
 800778c:	d11a      	bne.n	80077c4 <_printf_common+0xc8>
 800778e:	2000      	movs	r0, #0
 8007790:	e008      	b.n	80077a4 <_printf_common+0xa8>
 8007792:	2301      	movs	r3, #1
 8007794:	4652      	mov	r2, sl
 8007796:	4649      	mov	r1, r9
 8007798:	4638      	mov	r0, r7
 800779a:	47c0      	blx	r8
 800779c:	3001      	adds	r0, #1
 800779e:	d103      	bne.n	80077a8 <_printf_common+0xac>
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	3501      	adds	r5, #1
 80077aa:	e7c6      	b.n	800773a <_printf_common+0x3e>
 80077ac:	18e1      	adds	r1, r4, r3
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	2030      	movs	r0, #48	; 0x30
 80077b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b6:	4422      	add	r2, r4
 80077b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077c0:	3302      	adds	r3, #2
 80077c2:	e7c7      	b.n	8007754 <_printf_common+0x58>
 80077c4:	2301      	movs	r3, #1
 80077c6:	4622      	mov	r2, r4
 80077c8:	4649      	mov	r1, r9
 80077ca:	4638      	mov	r0, r7
 80077cc:	47c0      	blx	r8
 80077ce:	3001      	adds	r0, #1
 80077d0:	d0e6      	beq.n	80077a0 <_printf_common+0xa4>
 80077d2:	3601      	adds	r6, #1
 80077d4:	e7d9      	b.n	800778a <_printf_common+0x8e>
	...

080077d8 <_printf_i>:
 80077d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	7e0f      	ldrb	r7, [r1, #24]
 80077de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077e0:	2f78      	cmp	r7, #120	; 0x78
 80077e2:	4691      	mov	r9, r2
 80077e4:	4680      	mov	r8, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	469a      	mov	sl, r3
 80077ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ee:	d807      	bhi.n	8007800 <_printf_i+0x28>
 80077f0:	2f62      	cmp	r7, #98	; 0x62
 80077f2:	d80a      	bhi.n	800780a <_printf_i+0x32>
 80077f4:	2f00      	cmp	r7, #0
 80077f6:	f000 80d4 	beq.w	80079a2 <_printf_i+0x1ca>
 80077fa:	2f58      	cmp	r7, #88	; 0x58
 80077fc:	f000 80c0 	beq.w	8007980 <_printf_i+0x1a8>
 8007800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007808:	e03a      	b.n	8007880 <_printf_i+0xa8>
 800780a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800780e:	2b15      	cmp	r3, #21
 8007810:	d8f6      	bhi.n	8007800 <_printf_i+0x28>
 8007812:	a101      	add	r1, pc, #4	; (adr r1, 8007818 <_printf_i+0x40>)
 8007814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007818:	08007871 	.word	0x08007871
 800781c:	08007885 	.word	0x08007885
 8007820:	08007801 	.word	0x08007801
 8007824:	08007801 	.word	0x08007801
 8007828:	08007801 	.word	0x08007801
 800782c:	08007801 	.word	0x08007801
 8007830:	08007885 	.word	0x08007885
 8007834:	08007801 	.word	0x08007801
 8007838:	08007801 	.word	0x08007801
 800783c:	08007801 	.word	0x08007801
 8007840:	08007801 	.word	0x08007801
 8007844:	08007989 	.word	0x08007989
 8007848:	080078b1 	.word	0x080078b1
 800784c:	08007943 	.word	0x08007943
 8007850:	08007801 	.word	0x08007801
 8007854:	08007801 	.word	0x08007801
 8007858:	080079ab 	.word	0x080079ab
 800785c:	08007801 	.word	0x08007801
 8007860:	080078b1 	.word	0x080078b1
 8007864:	08007801 	.word	0x08007801
 8007868:	08007801 	.word	0x08007801
 800786c:	0800794b 	.word	0x0800794b
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	1d1a      	adds	r2, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	602a      	str	r2, [r5, #0]
 8007878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800787c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007880:	2301      	movs	r3, #1
 8007882:	e09f      	b.n	80079c4 <_printf_i+0x1ec>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	682b      	ldr	r3, [r5, #0]
 8007888:	0607      	lsls	r7, r0, #24
 800788a:	f103 0104 	add.w	r1, r3, #4
 800788e:	6029      	str	r1, [r5, #0]
 8007890:	d501      	bpl.n	8007896 <_printf_i+0xbe>
 8007892:	681e      	ldr	r6, [r3, #0]
 8007894:	e003      	b.n	800789e <_printf_i+0xc6>
 8007896:	0646      	lsls	r6, r0, #25
 8007898:	d5fb      	bpl.n	8007892 <_printf_i+0xba>
 800789a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800789e:	2e00      	cmp	r6, #0
 80078a0:	da03      	bge.n	80078aa <_printf_i+0xd2>
 80078a2:	232d      	movs	r3, #45	; 0x2d
 80078a4:	4276      	negs	r6, r6
 80078a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078aa:	485a      	ldr	r0, [pc, #360]	; (8007a14 <_printf_i+0x23c>)
 80078ac:	230a      	movs	r3, #10
 80078ae:	e012      	b.n	80078d6 <_printf_i+0xfe>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	1d19      	adds	r1, r3, #4
 80078b6:	6029      	str	r1, [r5, #0]
 80078b8:	0605      	lsls	r5, r0, #24
 80078ba:	d501      	bpl.n	80078c0 <_printf_i+0xe8>
 80078bc:	681e      	ldr	r6, [r3, #0]
 80078be:	e002      	b.n	80078c6 <_printf_i+0xee>
 80078c0:	0641      	lsls	r1, r0, #25
 80078c2:	d5fb      	bpl.n	80078bc <_printf_i+0xe4>
 80078c4:	881e      	ldrh	r6, [r3, #0]
 80078c6:	4853      	ldr	r0, [pc, #332]	; (8007a14 <_printf_i+0x23c>)
 80078c8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ca:	bf0c      	ite	eq
 80078cc:	2308      	moveq	r3, #8
 80078ce:	230a      	movne	r3, #10
 80078d0:	2100      	movs	r1, #0
 80078d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078d6:	6865      	ldr	r5, [r4, #4]
 80078d8:	60a5      	str	r5, [r4, #8]
 80078da:	2d00      	cmp	r5, #0
 80078dc:	bfa2      	ittt	ge
 80078de:	6821      	ldrge	r1, [r4, #0]
 80078e0:	f021 0104 	bicge.w	r1, r1, #4
 80078e4:	6021      	strge	r1, [r4, #0]
 80078e6:	b90e      	cbnz	r6, 80078ec <_printf_i+0x114>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d04b      	beq.n	8007984 <_printf_i+0x1ac>
 80078ec:	4615      	mov	r5, r2
 80078ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80078f2:	fb03 6711 	mls	r7, r3, r1, r6
 80078f6:	5dc7      	ldrb	r7, [r0, r7]
 80078f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078fc:	4637      	mov	r7, r6
 80078fe:	42bb      	cmp	r3, r7
 8007900:	460e      	mov	r6, r1
 8007902:	d9f4      	bls.n	80078ee <_printf_i+0x116>
 8007904:	2b08      	cmp	r3, #8
 8007906:	d10b      	bne.n	8007920 <_printf_i+0x148>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	07de      	lsls	r6, r3, #31
 800790c:	d508      	bpl.n	8007920 <_printf_i+0x148>
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	6861      	ldr	r1, [r4, #4]
 8007912:	4299      	cmp	r1, r3
 8007914:	bfde      	ittt	le
 8007916:	2330      	movle	r3, #48	; 0x30
 8007918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800791c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007920:	1b52      	subs	r2, r2, r5
 8007922:	6122      	str	r2, [r4, #16]
 8007924:	f8cd a000 	str.w	sl, [sp]
 8007928:	464b      	mov	r3, r9
 800792a:	aa03      	add	r2, sp, #12
 800792c:	4621      	mov	r1, r4
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fee4 	bl	80076fc <_printf_common>
 8007934:	3001      	adds	r0, #1
 8007936:	d14a      	bne.n	80079ce <_printf_i+0x1f6>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	b004      	add	sp, #16
 800793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	f043 0320 	orr.w	r3, r3, #32
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	4833      	ldr	r0, [pc, #204]	; (8007a18 <_printf_i+0x240>)
 800794c:	2778      	movs	r7, #120	; 0x78
 800794e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	6829      	ldr	r1, [r5, #0]
 8007956:	061f      	lsls	r7, r3, #24
 8007958:	f851 6b04 	ldr.w	r6, [r1], #4
 800795c:	d402      	bmi.n	8007964 <_printf_i+0x18c>
 800795e:	065f      	lsls	r7, r3, #25
 8007960:	bf48      	it	mi
 8007962:	b2b6      	uxthmi	r6, r6
 8007964:	07df      	lsls	r7, r3, #31
 8007966:	bf48      	it	mi
 8007968:	f043 0320 	orrmi.w	r3, r3, #32
 800796c:	6029      	str	r1, [r5, #0]
 800796e:	bf48      	it	mi
 8007970:	6023      	strmi	r3, [r4, #0]
 8007972:	b91e      	cbnz	r6, 800797c <_printf_i+0x1a4>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	f023 0320 	bic.w	r3, r3, #32
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	2310      	movs	r3, #16
 800797e:	e7a7      	b.n	80078d0 <_printf_i+0xf8>
 8007980:	4824      	ldr	r0, [pc, #144]	; (8007a14 <_printf_i+0x23c>)
 8007982:	e7e4      	b.n	800794e <_printf_i+0x176>
 8007984:	4615      	mov	r5, r2
 8007986:	e7bd      	b.n	8007904 <_printf_i+0x12c>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	6826      	ldr	r6, [r4, #0]
 800798c:	6961      	ldr	r1, [r4, #20]
 800798e:	1d18      	adds	r0, r3, #4
 8007990:	6028      	str	r0, [r5, #0]
 8007992:	0635      	lsls	r5, r6, #24
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	d501      	bpl.n	800799c <_printf_i+0x1c4>
 8007998:	6019      	str	r1, [r3, #0]
 800799a:	e002      	b.n	80079a2 <_printf_i+0x1ca>
 800799c:	0670      	lsls	r0, r6, #25
 800799e:	d5fb      	bpl.n	8007998 <_printf_i+0x1c0>
 80079a0:	8019      	strh	r1, [r3, #0]
 80079a2:	2300      	movs	r3, #0
 80079a4:	6123      	str	r3, [r4, #16]
 80079a6:	4615      	mov	r5, r2
 80079a8:	e7bc      	b.n	8007924 <_printf_i+0x14c>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	1d1a      	adds	r2, r3, #4
 80079ae:	602a      	str	r2, [r5, #0]
 80079b0:	681d      	ldr	r5, [r3, #0]
 80079b2:	6862      	ldr	r2, [r4, #4]
 80079b4:	2100      	movs	r1, #0
 80079b6:	4628      	mov	r0, r5
 80079b8:	f7f8 fc0a 	bl	80001d0 <memchr>
 80079bc:	b108      	cbz	r0, 80079c2 <_printf_i+0x1ea>
 80079be:	1b40      	subs	r0, r0, r5
 80079c0:	6060      	str	r0, [r4, #4]
 80079c2:	6863      	ldr	r3, [r4, #4]
 80079c4:	6123      	str	r3, [r4, #16]
 80079c6:	2300      	movs	r3, #0
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079cc:	e7aa      	b.n	8007924 <_printf_i+0x14c>
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	462a      	mov	r2, r5
 80079d2:	4649      	mov	r1, r9
 80079d4:	4640      	mov	r0, r8
 80079d6:	47d0      	blx	sl
 80079d8:	3001      	adds	r0, #1
 80079da:	d0ad      	beq.n	8007938 <_printf_i+0x160>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	079b      	lsls	r3, r3, #30
 80079e0:	d413      	bmi.n	8007a0a <_printf_i+0x232>
 80079e2:	68e0      	ldr	r0, [r4, #12]
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	4298      	cmp	r0, r3
 80079e8:	bfb8      	it	lt
 80079ea:	4618      	movlt	r0, r3
 80079ec:	e7a6      	b.n	800793c <_printf_i+0x164>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4632      	mov	r2, r6
 80079f2:	4649      	mov	r1, r9
 80079f4:	4640      	mov	r0, r8
 80079f6:	47d0      	blx	sl
 80079f8:	3001      	adds	r0, #1
 80079fa:	d09d      	beq.n	8007938 <_printf_i+0x160>
 80079fc:	3501      	adds	r5, #1
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	9903      	ldr	r1, [sp, #12]
 8007a02:	1a5b      	subs	r3, r3, r1
 8007a04:	42ab      	cmp	r3, r5
 8007a06:	dcf2      	bgt.n	80079ee <_printf_i+0x216>
 8007a08:	e7eb      	b.n	80079e2 <_printf_i+0x20a>
 8007a0a:	2500      	movs	r5, #0
 8007a0c:	f104 0619 	add.w	r6, r4, #25
 8007a10:	e7f5      	b.n	80079fe <_printf_i+0x226>
 8007a12:	bf00      	nop
 8007a14:	08007ed5 	.word	0x08007ed5
 8007a18:	08007ee6 	.word	0x08007ee6

08007a1c <__sflush_r>:
 8007a1c:	898a      	ldrh	r2, [r1, #12]
 8007a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a22:	4605      	mov	r5, r0
 8007a24:	0710      	lsls	r0, r2, #28
 8007a26:	460c      	mov	r4, r1
 8007a28:	d458      	bmi.n	8007adc <__sflush_r+0xc0>
 8007a2a:	684b      	ldr	r3, [r1, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dc05      	bgt.n	8007a3c <__sflush_r+0x20>
 8007a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dc02      	bgt.n	8007a3c <__sflush_r+0x20>
 8007a36:	2000      	movs	r0, #0
 8007a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d0f9      	beq.n	8007a36 <__sflush_r+0x1a>
 8007a42:	2300      	movs	r3, #0
 8007a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a48:	682f      	ldr	r7, [r5, #0]
 8007a4a:	6a21      	ldr	r1, [r4, #32]
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	d032      	beq.n	8007ab6 <__sflush_r+0x9a>
 8007a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	075a      	lsls	r2, r3, #29
 8007a56:	d505      	bpl.n	8007a64 <__sflush_r+0x48>
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	1ac0      	subs	r0, r0, r3
 8007a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a5e:	b10b      	cbz	r3, 8007a64 <__sflush_r+0x48>
 8007a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a62:	1ac0      	subs	r0, r0, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	4602      	mov	r2, r0
 8007a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6a:	6a21      	ldr	r1, [r4, #32]
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b0      	blx	r6
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	d106      	bne.n	8007a84 <__sflush_r+0x68>
 8007a76:	6829      	ldr	r1, [r5, #0]
 8007a78:	291d      	cmp	r1, #29
 8007a7a:	d82b      	bhi.n	8007ad4 <__sflush_r+0xb8>
 8007a7c:	4a29      	ldr	r2, [pc, #164]	; (8007b24 <__sflush_r+0x108>)
 8007a7e:	410a      	asrs	r2, r1
 8007a80:	07d6      	lsls	r6, r2, #31
 8007a82:	d427      	bmi.n	8007ad4 <__sflush_r+0xb8>
 8007a84:	2200      	movs	r2, #0
 8007a86:	6062      	str	r2, [r4, #4]
 8007a88:	04d9      	lsls	r1, r3, #19
 8007a8a:	6922      	ldr	r2, [r4, #16]
 8007a8c:	6022      	str	r2, [r4, #0]
 8007a8e:	d504      	bpl.n	8007a9a <__sflush_r+0x7e>
 8007a90:	1c42      	adds	r2, r0, #1
 8007a92:	d101      	bne.n	8007a98 <__sflush_r+0x7c>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b903      	cbnz	r3, 8007a9a <__sflush_r+0x7e>
 8007a98:	6560      	str	r0, [r4, #84]	; 0x54
 8007a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a9c:	602f      	str	r7, [r5, #0]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	d0c9      	beq.n	8007a36 <__sflush_r+0x1a>
 8007aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	d002      	beq.n	8007ab0 <__sflush_r+0x94>
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f7ff fbea 	bl	8007284 <_free_r>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ab4:	e7c0      	b.n	8007a38 <__sflush_r+0x1c>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b0      	blx	r6
 8007abc:	1c41      	adds	r1, r0, #1
 8007abe:	d1c8      	bne.n	8007a52 <__sflush_r+0x36>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0c5      	beq.n	8007a52 <__sflush_r+0x36>
 8007ac6:	2b1d      	cmp	r3, #29
 8007ac8:	d001      	beq.n	8007ace <__sflush_r+0xb2>
 8007aca:	2b16      	cmp	r3, #22
 8007acc:	d101      	bne.n	8007ad2 <__sflush_r+0xb6>
 8007ace:	602f      	str	r7, [r5, #0]
 8007ad0:	e7b1      	b.n	8007a36 <__sflush_r+0x1a>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	e7ad      	b.n	8007a38 <__sflush_r+0x1c>
 8007adc:	690f      	ldr	r7, [r1, #16]
 8007ade:	2f00      	cmp	r7, #0
 8007ae0:	d0a9      	beq.n	8007a36 <__sflush_r+0x1a>
 8007ae2:	0793      	lsls	r3, r2, #30
 8007ae4:	680e      	ldr	r6, [r1, #0]
 8007ae6:	bf08      	it	eq
 8007ae8:	694b      	ldreq	r3, [r1, #20]
 8007aea:	600f      	str	r7, [r1, #0]
 8007aec:	bf18      	it	ne
 8007aee:	2300      	movne	r3, #0
 8007af0:	eba6 0807 	sub.w	r8, r6, r7
 8007af4:	608b      	str	r3, [r1, #8]
 8007af6:	f1b8 0f00 	cmp.w	r8, #0
 8007afa:	dd9c      	ble.n	8007a36 <__sflush_r+0x1a>
 8007afc:	6a21      	ldr	r1, [r4, #32]
 8007afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b00:	4643      	mov	r3, r8
 8007b02:	463a      	mov	r2, r7
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b0      	blx	r6
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dc06      	bgt.n	8007b1a <__sflush_r+0xfe>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	e78e      	b.n	8007a38 <__sflush_r+0x1c>
 8007b1a:	4407      	add	r7, r0
 8007b1c:	eba8 0800 	sub.w	r8, r8, r0
 8007b20:	e7e9      	b.n	8007af6 <__sflush_r+0xda>
 8007b22:	bf00      	nop
 8007b24:	dfbffffe 	.word	0xdfbffffe

08007b28 <_fflush_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	690b      	ldr	r3, [r1, #16]
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	b913      	cbnz	r3, 8007b38 <_fflush_r+0x10>
 8007b32:	2500      	movs	r5, #0
 8007b34:	4628      	mov	r0, r5
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	b118      	cbz	r0, 8007b42 <_fflush_r+0x1a>
 8007b3a:	6a03      	ldr	r3, [r0, #32]
 8007b3c:	b90b      	cbnz	r3, 8007b42 <_fflush_r+0x1a>
 8007b3e:	f7ff fa37 	bl	8006fb0 <__sinit>
 8007b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0f3      	beq.n	8007b32 <_fflush_r+0xa>
 8007b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b4c:	07d0      	lsls	r0, r2, #31
 8007b4e:	d404      	bmi.n	8007b5a <_fflush_r+0x32>
 8007b50:	0599      	lsls	r1, r3, #22
 8007b52:	d402      	bmi.n	8007b5a <_fflush_r+0x32>
 8007b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b56:	f7ff fb85 	bl	8007264 <__retarget_lock_acquire_recursive>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	f7ff ff5d 	bl	8007a1c <__sflush_r>
 8007b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b64:	07da      	lsls	r2, r3, #31
 8007b66:	4605      	mov	r5, r0
 8007b68:	d4e4      	bmi.n	8007b34 <_fflush_r+0xc>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	059b      	lsls	r3, r3, #22
 8007b6e:	d4e1      	bmi.n	8007b34 <_fflush_r+0xc>
 8007b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b72:	f7ff fb78 	bl	8007266 <__retarget_lock_release_recursive>
 8007b76:	e7dd      	b.n	8007b34 <_fflush_r+0xc>

08007b78 <__swbuf_r>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	4605      	mov	r5, r0
 8007b80:	b118      	cbz	r0, 8007b8a <__swbuf_r+0x12>
 8007b82:	6a03      	ldr	r3, [r0, #32]
 8007b84:	b90b      	cbnz	r3, 8007b8a <__swbuf_r+0x12>
 8007b86:	f7ff fa13 	bl	8006fb0 <__sinit>
 8007b8a:	69a3      	ldr	r3, [r4, #24]
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	071a      	lsls	r2, r3, #28
 8007b92:	d525      	bpl.n	8007be0 <__swbuf_r+0x68>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	b31b      	cbz	r3, 8007be0 <__swbuf_r+0x68>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	6922      	ldr	r2, [r4, #16]
 8007b9c:	1a98      	subs	r0, r3, r2
 8007b9e:	6963      	ldr	r3, [r4, #20]
 8007ba0:	b2f6      	uxtb	r6, r6
 8007ba2:	4283      	cmp	r3, r0
 8007ba4:	4637      	mov	r7, r6
 8007ba6:	dc04      	bgt.n	8007bb2 <__swbuf_r+0x3a>
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff ffbc 	bl	8007b28 <_fflush_r>
 8007bb0:	b9e0      	cbnz	r0, 8007bec <__swbuf_r+0x74>
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	6022      	str	r2, [r4, #0]
 8007bbe:	701e      	strb	r6, [r3, #0]
 8007bc0:	6962      	ldr	r2, [r4, #20]
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d004      	beq.n	8007bd2 <__swbuf_r+0x5a>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	07db      	lsls	r3, r3, #31
 8007bcc:	d506      	bpl.n	8007bdc <__swbuf_r+0x64>
 8007bce:	2e0a      	cmp	r6, #10
 8007bd0:	d104      	bne.n	8007bdc <__swbuf_r+0x64>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7ff ffa7 	bl	8007b28 <_fflush_r>
 8007bda:	b938      	cbnz	r0, 8007bec <__swbuf_r+0x74>
 8007bdc:	4638      	mov	r0, r7
 8007bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f806 	bl	8007bf4 <__swsetup_r>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0d5      	beq.n	8007b98 <__swbuf_r+0x20>
 8007bec:	f04f 37ff 	mov.w	r7, #4294967295
 8007bf0:	e7f4      	b.n	8007bdc <__swbuf_r+0x64>
	...

08007bf4 <__swsetup_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4b2a      	ldr	r3, [pc, #168]	; (8007ca0 <__swsetup_r+0xac>)
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	b118      	cbz	r0, 8007c08 <__swsetup_r+0x14>
 8007c00:	6a03      	ldr	r3, [r0, #32]
 8007c02:	b90b      	cbnz	r3, 8007c08 <__swsetup_r+0x14>
 8007c04:	f7ff f9d4 	bl	8006fb0 <__sinit>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c0e:	0718      	lsls	r0, r3, #28
 8007c10:	d422      	bmi.n	8007c58 <__swsetup_r+0x64>
 8007c12:	06d9      	lsls	r1, r3, #27
 8007c14:	d407      	bmi.n	8007c26 <__swsetup_r+0x32>
 8007c16:	2309      	movs	r3, #9
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295
 8007c24:	e034      	b.n	8007c90 <__swsetup_r+0x9c>
 8007c26:	0758      	lsls	r0, r3, #29
 8007c28:	d512      	bpl.n	8007c50 <__swsetup_r+0x5c>
 8007c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2c:	b141      	cbz	r1, 8007c40 <__swsetup_r+0x4c>
 8007c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d002      	beq.n	8007c3c <__swsetup_r+0x48>
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7ff fb24 	bl	8007284 <_free_r>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	6363      	str	r3, [r4, #52]	; 0x34
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c46:	81a3      	strh	r3, [r4, #12]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6063      	str	r3, [r4, #4]
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	6023      	str	r3, [r4, #0]
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f043 0308 	orr.w	r3, r3, #8
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	6923      	ldr	r3, [r4, #16]
 8007c5a:	b94b      	cbnz	r3, 8007c70 <__swsetup_r+0x7c>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c66:	d003      	beq.n	8007c70 <__swsetup_r+0x7c>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 f850 	bl	8007d10 <__smakebuf_r>
 8007c70:	89a0      	ldrh	r0, [r4, #12]
 8007c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c76:	f010 0301 	ands.w	r3, r0, #1
 8007c7a:	d00a      	beq.n	8007c92 <__swsetup_r+0x9e>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60a3      	str	r3, [r4, #8]
 8007c80:	6963      	ldr	r3, [r4, #20]
 8007c82:	425b      	negs	r3, r3
 8007c84:	61a3      	str	r3, [r4, #24]
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	b943      	cbnz	r3, 8007c9c <__swsetup_r+0xa8>
 8007c8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c8e:	d1c4      	bne.n	8007c1a <__swsetup_r+0x26>
 8007c90:	bd38      	pop	{r3, r4, r5, pc}
 8007c92:	0781      	lsls	r1, r0, #30
 8007c94:	bf58      	it	pl
 8007c96:	6963      	ldrpl	r3, [r4, #20]
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	e7f4      	b.n	8007c86 <__swsetup_r+0x92>
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e7f7      	b.n	8007c90 <__swsetup_r+0x9c>
 8007ca0:	20000068 	.word	0x20000068

08007ca4 <_sbrk_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d06      	ldr	r5, [pc, #24]	; (8007cc0 <_sbrk_r+0x1c>)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7f9 fa1a 	bl	80010e8 <_sbrk>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_sbrk_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_sbrk_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200086d8 	.word	0x200086d8

08007cc4 <__swhatbuf_r>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	b096      	sub	sp, #88	; 0x58
 8007cd0:	4615      	mov	r5, r2
 8007cd2:	461e      	mov	r6, r3
 8007cd4:	da0d      	bge.n	8007cf2 <__swhatbuf_r+0x2e>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cdc:	f04f 0100 	mov.w	r1, #0
 8007ce0:	bf0c      	ite	eq
 8007ce2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ce6:	2340      	movne	r3, #64	; 0x40
 8007ce8:	2000      	movs	r0, #0
 8007cea:	6031      	str	r1, [r6, #0]
 8007cec:	602b      	str	r3, [r5, #0]
 8007cee:	b016      	add	sp, #88	; 0x58
 8007cf0:	bd70      	pop	{r4, r5, r6, pc}
 8007cf2:	466a      	mov	r2, sp
 8007cf4:	f000 f848 	bl	8007d88 <_fstat_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	dbec      	blt.n	8007cd6 <__swhatbuf_r+0x12>
 8007cfc:	9901      	ldr	r1, [sp, #4]
 8007cfe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d06:	4259      	negs	r1, r3
 8007d08:	4159      	adcs	r1, r3
 8007d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0e:	e7eb      	b.n	8007ce8 <__swhatbuf_r+0x24>

08007d10 <__smakebuf_r>:
 8007d10:	898b      	ldrh	r3, [r1, #12]
 8007d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d14:	079d      	lsls	r5, r3, #30
 8007d16:	4606      	mov	r6, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	d507      	bpl.n	8007d2c <__smakebuf_r+0x1c>
 8007d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	6123      	str	r3, [r4, #16]
 8007d24:	2301      	movs	r3, #1
 8007d26:	6163      	str	r3, [r4, #20]
 8007d28:	b002      	add	sp, #8
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	ab01      	add	r3, sp, #4
 8007d2e:	466a      	mov	r2, sp
 8007d30:	f7ff ffc8 	bl	8007cc4 <__swhatbuf_r>
 8007d34:	9900      	ldr	r1, [sp, #0]
 8007d36:	4605      	mov	r5, r0
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7ff fb0f 	bl	800735c <_malloc_r>
 8007d3e:	b948      	cbnz	r0, 8007d54 <__smakebuf_r+0x44>
 8007d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d44:	059a      	lsls	r2, r3, #22
 8007d46:	d4ef      	bmi.n	8007d28 <__smakebuf_r+0x18>
 8007d48:	f023 0303 	bic.w	r3, r3, #3
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	e7e3      	b.n	8007d1c <__smakebuf_r+0xc>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	6020      	str	r0, [r4, #0]
 8007d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	6163      	str	r3, [r4, #20]
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	6120      	str	r0, [r4, #16]
 8007d66:	b15b      	cbz	r3, 8007d80 <__smakebuf_r+0x70>
 8007d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 f81d 	bl	8007dac <_isatty_r>
 8007d72:	b128      	cbz	r0, 8007d80 <__smakebuf_r+0x70>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f023 0303 	bic.w	r3, r3, #3
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	431d      	orrs	r5, r3
 8007d84:	81a5      	strh	r5, [r4, #12]
 8007d86:	e7cf      	b.n	8007d28 <__smakebuf_r+0x18>

08007d88 <_fstat_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d07      	ldr	r5, [pc, #28]	; (8007da8 <_fstat_r+0x20>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	f7f9 f97e 	bl	8001096 <_fstat>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d102      	bne.n	8007da4 <_fstat_r+0x1c>
 8007d9e:	682b      	ldr	r3, [r5, #0]
 8007da0:	b103      	cbz	r3, 8007da4 <_fstat_r+0x1c>
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	bd38      	pop	{r3, r4, r5, pc}
 8007da6:	bf00      	nop
 8007da8:	200086d8 	.word	0x200086d8

08007dac <_isatty_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4d06      	ldr	r5, [pc, #24]	; (8007dc8 <_isatty_r+0x1c>)
 8007db0:	2300      	movs	r3, #0
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	f7f9 f97d 	bl	80010b6 <_isatty>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_isatty_r+0x1a>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_isatty_r+0x1a>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	200086d8 	.word	0x200086d8

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr
