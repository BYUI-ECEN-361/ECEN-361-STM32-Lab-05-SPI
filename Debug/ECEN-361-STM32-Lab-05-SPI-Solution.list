
ECEN-361-STM32-Lab-05-SPI-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009158  08009158  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009160  08009160  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e04  2000006c  080091d4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  080091d4  00021e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e442  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ef6  00000000  00000000  0003e521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000145d  00000000  00000000  00043e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029796  00000000  00000000  000452ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da84  00000000  00000000  0006ea43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010140c  00000000  00000000  0008c4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007600  00000000  00000000  0018d8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00194ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800902c 	.word	0x0800902c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800902c 	.word	0x0800902c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fa4b 	bl	8001a38 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fa3a 	bl	8001a38 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fa2f 	bl	8001a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fa29 	bl	8001a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fa23 	bl	8001a38 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 fa10 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 fa0b 	bl	8001a38 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000008c 	.word	0x2000008c

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 f9e6 	bl	8001a38 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 f9c0 	bl	8001a38 <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	080090b4 	.word	0x080090b4

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000088 	.word	0x20000088

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fe36 	bl	80013a4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f846 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f964 	bl	8000a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000740:	f000 f932 	bl	80009a8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000744:	f000 f90a 	bl	800095c <MX_TIM17_Init>
  MX_SPI2_Init();
 8000748:	f000 f8ce 	bl	80008e8 <MX_SPI2_Init>
  MX_SPI1_Init();
 800074c:	f000 f88e 	bl	800086c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <main+0x78>)
 8000752:	f003 fd4b 	bl	80041ec <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 8000756:	f7ff ff69 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 800075a:	f7ff ff55 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f001 f966 	bl	8001a38 <HAL_GPIO_WritePin>
  printf("\033\143");
 800076c:	480f      	ldr	r0, [pc, #60]	; (80007ac <main+0x7c>)
 800076e:	f007 fd85 	bl	800827c <iprintf>
  printf("Welcome to ECEN-361 Lab-05\n\r\n\r");
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <main+0x80>)
 8000774:	f007 fd82 	bl	800827c <iprintf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f004 ff58 	bl	800562c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <main+0x84>)
 800077e:	2100      	movs	r1, #0
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <main+0x88>)
 8000782:	f004 ff9d 	bl	80056c0 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <main+0x8c>)
 800078a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
   osThreadNew(Read_and_Transmit_Task, NULL, &defaultTask_attributes);
 800078c:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <main+0x84>)
 800078e:	2100      	movs	r1, #0
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <main+0x90>)
 8000792:	f004 ff95 	bl	80056c0 <osThreadNew>
   osThreadNew(Receive_and_Print_Task, NULL, &defaultTask_attributes);
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <main+0x84>)
 8000798:	2100      	movs	r1, #0
 800079a:	480a      	ldr	r0, [pc, #40]	; (80007c4 <main+0x94>)
 800079c:	f004 ff90 	bl	80056c0 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a0:	f004 ff68 	bl	8005674 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x74>
 80007a6:	bf00      	nop
 80007a8:	20000158 	.word	0x20000158
 80007ac:	08009050 	.word	0x08009050
 80007b0:	08009054 	.word	0x08009054
 80007b4:	080090b8 	.word	0x080090b8
 80007b8:	08000d7d 	.word	0x08000d7d
 80007bc:	2000022c 	.word	0x2000022c
 80007c0:	08000bad 	.word	0x08000bad
 80007c4:	08000cf1 	.word	0x08000cf1

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2244      	movs	r2, #68	; 0x44
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fda5 	bl	8008326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ee:	f001 f949 	bl	8001a84 <HAL_PWREx_ControlVoltageScaling>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f8:	f000 fafc 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081a:	2307      	movs	r3, #7
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f980 	bl	8001b30 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000836:	f000 fadd 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	2104      	movs	r1, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fd48 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085e:	f000 fac9 	bl	8000df4 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3758      	adds	r7, #88	; 0x58
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_SPI1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_SPI1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_SPI1_Init+0x74>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI1_Init+0x74>)
 8000886:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800088a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI1_Init+0x74>)
 800089a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_SPI1_Init+0x74>)
 80008cc:	f002 fc1e 	bl	800310c <HAL_SPI_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fa8d 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000090 	.word	0x20000090
 80008e4:	40013000 	.word	0x40013000

080008e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_SPI2_Init+0x6c>)
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <MX_SPI2_Init+0x70>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI2_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI2_Init+0x6c>)
 80008fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000902:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000906:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI2_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_SPI2_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI2_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000930:	2207      	movs	r2, #7
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI2_Init+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI2_Init+0x6c>)
 8000942:	f002 fbe3 	bl	800310c <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 800094c:	f000 fa52 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000f4 	.word	0x200000f4
 8000958:	40003800 	.word	0x40003800

0800095c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <MX_TIM17_Init+0x48>)
 8000964:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000968:	f240 321f 	movw	r2, #799	; 0x31f
 800096c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_TIM17_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_TIM17_Init+0x44>)
 800098e:	f003 fbd5 	bl	800413c <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000998:	f000 fa2c 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000158 	.word	0x20000158
 80009a4:	40014800 	.word	0x40014800

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART2_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ec:	f003 fe50 	bl	8004690 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f9fd 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001a4 	.word	0x200001a4
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b60      	ldr	r3, [pc, #384]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a5f      	ldr	r2, [pc, #380]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a59      	ldr	r2, [pc, #356]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b57      	ldr	r3, [pc, #348]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a53      	ldr	r2, [pc, #332]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <MX_GPIO_Init+0x198>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 ffd6 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2120      	movs	r1, #32
 8000a90:	4844      	ldr	r0, [pc, #272]	; (8000ba4 <MX_GPIO_Init+0x19c>)
 8000a92:	f000 ffd1 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	4842      	ldr	r0, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x19c>)
 8000a9c:	f000 ffcc 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	483c      	ldr	r0, [pc, #240]	; (8000ba8 <MX_GPIO_Init+0x1a0>)
 8000ab8:	f000 fdfc 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4836      	ldr	r0, [pc, #216]	; (8000ba8 <MX_GPIO_Init+0x1a0>)
 8000ad0:	f000 fdf0 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f000 fde3 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000aee:	2312      	movs	r3, #18
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f000 fdd6 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000b08:	2340      	movs	r3, #64	; 0x40
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b0c:	2311      	movs	r3, #17
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f000 fdc7 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <MX_GPIO_Init+0x19c>)
 8000b3a:	f000 fdbb 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000b3e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 fdab 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <MX_GPIO_Init+0x19c>)
 8000b76:	f000 fd9d 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b7e:	2311      	movs	r3, #17
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_GPIO_Init+0x19c>)
 8000b92:	f000 fd8f 	bl	80016b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000800 	.word	0x48000800

08000bac <Read_and_Transmit_Task>:
		}
	}


void Read_and_Transmit_Task()
	{
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b0ce      	sub	sp, #312	; 0x138
 8000bb0:	af00      	add	r7, sp, #0
	uint8_t receive_byte;
	uint8_t receive_buffer[BUFFER_SIZE] = {0};
 8000bb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	22fb      	movs	r2, #251	; 0xfb
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 fbae 	bl	8008326 <memset>
	uint8_t *receive_buffer_ptr = receive_buffer;
 8000bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint8_t bytes_in =0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000bd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bdc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000be0:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <Read_and_Transmit_Task+0x130>)
 8000be2:	461c      	mov	r4, r3
 8000be4:	4615      	mov	r5, r2
 8000be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bee:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000bf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bfa:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <Read_and_Transmit_Task+0x134>)
 8000bfc:	461c      	mov	r4, r3
 8000bfe:	4613      	mov	r3, r2
 8000c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c02:	c407      	stmia	r4!, {r0, r1, r2}
 8000c04:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint8_t *sndmsg_ptr = sndmsg;
 8000c0e:	463b      	mov	r3, r7
 8000c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	while(true)
		{
		bytes_in = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		receive_byte = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	2217      	movs	r2, #23
 8000c26:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000c2a:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <Read_and_Transmit_Task+0x138>)
 8000c2c:	f003 fd7e 	bl	800472c <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000c30:	e021      	b.n	8000c76 <Read_and_Transmit_Task+0xca>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 fbf6 	bl	8001424 <HAL_Delay>
 8000c38:	f207 1127 	addw	r1, r7, #295	; 0x127
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4828      	ldr	r0, [pc, #160]	; (8000ce4 <Read_and_Transmit_Task+0x138>)
 8000c42:	f003 fdfd 	bl	8004840 <HAL_UART_Receive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f2      	bne.n	8000c32 <Read_and_Transmit_Task+0x86>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			receive_buffer[bytes_in++] = receive_byte;
 8000c4c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	f887 2137 	strb.w	r2, [r7, #311]	; 0x137
 8000c56:	461a      	mov	r2, r3
 8000c58:	f897 1127 	ldrb.w	r1, [r7, #295]	; 0x127
 8000c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c64:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart2, &receive_byte , 1, HAL_MAX_DELAY);
 8000c66:	f207 1127 	addw	r1, r7, #295	; 0x127
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2201      	movs	r2, #1
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <Read_and_Transmit_Task+0x138>)
 8000c72:	f003 fd5b 	bl	800472c <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000c7a:	2b0d      	cmp	r3, #13
 8000c7c:	d1dc      	bne.n	8000c38 <Read_and_Transmit_Task+0x8c>
		}

		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	220d      	movs	r2, #13
 8000c84:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8000c88:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <Read_and_Transmit_Task+0x138>)
 8000c8a:	f003 fd4f 	bl	800472c <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, BUFFER_SIZE, HAL_MAX_DELAY);
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <Read_and_Transmit_Task+0x13c>)
 8000c96:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <Read_and_Transmit_Task+0x138>)
 8000c98:	f003 fd48 	bl	800472c <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)

	    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f000 fec7 	bl	8001a38 <HAL_GPIO_WritePin>
	    osDelay(5); // wait a bit before transmitting so the process can start the read
 8000caa:	2005      	movs	r0, #5
 8000cac:	f004 fd9a 	bl	80057e4 <osDelay>
		HAL_SPI_Transmit(&hspi1, receive_buffer_ptr, bytes_in , HAL_MAX_DELAY);
 8000cb0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <Read_and_Transmit_Task+0x140>)
 8000cc0:	f002 fac7 	bl	8003252 <HAL_SPI_Transmit>
	    osDelay(5); // wait a bit before transmitting so the process can start the read
 8000cc4:	2005      	movs	r0, #5
 8000cc6:	f004 fd8d 	bl	80057e4 <osDelay>
	    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f000 feb0 	bl	8001a38 <HAL_GPIO_WritePin>
		bytes_in = 0;
 8000cd8:	e79c      	b.n	8000c14 <Read_and_Transmit_Task+0x68>
 8000cda:	bf00      	nop
 8000cdc:	08009074 	.word	0x08009074
 8000ce0:	0800908c 	.word	0x0800908c
 8000ce4:	200001a4 	.word	0x200001a4
 8000ce8:	20000230 	.word	0x20000230
 8000cec:	20000090 	.word	0x20000090

08000cf0 <Receive_and_Print_Task>:
		}
	}

void Receive_and_Print_Task()
	{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0c2      	sub	sp, #264	; 0x108
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t receive_buffer[BUFFER_SIZE] = {0};
 8000cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	3304      	adds	r3, #4
 8000d04:	22fb      	movs	r2, #251	; 0xfb
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f007 fb0c 	bl	8008326 <memset>
	uint8_t *receive_buffer_ptr = receive_buffer;
 8000d0e:	463b      	mov	r3, r7
 8000d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t receive_byte = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	uint8_t bytes_in = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

	while(true)
		{
		// Wait until the peripheral select line goes low: NSS
		// SPI3_NSS is: PA15
		nss = HAL_GPIO_ReadPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 8000d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f000 fe6e 	bl	8001a08 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		while (nss == 0)
 8000d32:	e007      	b.n	8000d44 <Receive_and_Print_Task+0x54>
			{
			HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
 8000d34:	22ff      	movs	r2, #255	; 0xff
 8000d36:	4906      	ldr	r1, [pc, #24]	; (8000d50 <Receive_and_Print_Task+0x60>)
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <Receive_and_Print_Task+0x64>)
 8000d3a:	f002 fbff 	bl	800353c <HAL_SPI_Receive_IT>
			// receive_buffer[bytes_in++] = receive_byte;
			// nss = HAL_GPIO_ReadPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
			// HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
			bytes_in=0;  //reset to get the next line
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		while (nss == 0)
 8000d44:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f3      	beq.n	8000d34 <Receive_and_Print_Task+0x44>
		nss = HAL_GPIO_ReadPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 8000d4c:	e7e8      	b.n	8000d20 <Receive_and_Print_Task+0x30>
 8000d4e:	bf00      	nop
 8000d50:	20000230 	.word	0x20000230
 8000d54:	200000f4 	.word	0x200000f4

08000d58 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d60:	1d39      	adds	r1, r7, #4
 8000d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d66:	2201      	movs	r2, #1
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <__io_putchar+0x20>)
 8000d6a:	f003 fcdf 	bl	800472c <HAL_UART_Transmit>

  return ch;
 8000d6e:	687b      	ldr	r3, [r7, #4]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200001a4 	.word	0x200001a4

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f004 fd2d 	bl	80057e4 <osDelay>
 8000d8a:	e7fb      	b.n	8000d84 <StartDefaultTask+0x8>

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000d9c:	f7ff fc96 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da8:	d101      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_IncTick();
 8000daa:	f000 fb1b 	bl	80013e4 <HAL_IncTick>
		}



  /* USER CODE BEGIN Callback 1 */
	}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000158 	.word	0x20000158

08000dbc <HAL_SPI_RxCpltCallback>:

  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
  {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
      // printf("here");
	  if (hspi == &hspi2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_SPI_RxCpltCallback+0x2c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d109      	bne.n	8000de0 <HAL_SPI_RxCpltCallback+0x24>
	  {
      HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	4907      	ldr	r1, [pc, #28]	; (8000dec <HAL_SPI_RxCpltCallback+0x30>)
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_RxCpltCallback+0x2c>)
 8000dd2:	f002 fbb3 	bl	800353c <HAL_SPI_Receive_IT>
      HAL_UART_Transmit_IT(&huart2, RX_Buffer, BUFFER_SIZE);
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <HAL_SPI_RxCpltCallback+0x30>)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_SPI_RxCpltCallback+0x34>)
 8000ddc:	f003 fdfa 	bl	80049d4 <HAL_UART_Transmit_IT>
	  }

  /* USER CODE END Callback 1 */
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000f4 	.word	0x200000f4
 8000dec:	20000230 	.word	0x20000230
 8000df0:	200001a4 	.word	0x200001a4

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6613      	str	r3, [r2, #96]	; 0x60
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	210f      	movs	r1, #15
 8000e3a:	f06f 0001 	mvn.w	r0, #1
 8000e3e:	f000 fbcd 	bl	80015dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a41      	ldr	r2, [pc, #260]	; (8000f74 <HAL_SPI_MspInit+0x124>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d129      	bne.n	8000ec6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f000 fbf8 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ec4:	e051      	b.n	8000f6a <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <HAL_SPI_MspInit+0x12c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d14c      	bne.n	8000f6a <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6593      	str	r3, [r2, #88]	; 0x58
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_SPI_MspInit+0x128>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4813      	ldr	r0, [pc, #76]	; (8000f80 <HAL_SPI_MspInit+0x130>)
 8000f34:	f000 fbbe 	bl	80016b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <HAL_SPI_MspInit+0x134>)
 8000f56:	f000 fbad 	bl	80016b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2024      	movs	r0, #36	; 0x24
 8000f60:	f000 fb3c 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f64:	2024      	movs	r0, #36	; 0x24
 8000f66:	f000 fb55 	bl	8001614 <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40003800 	.word	0x40003800
 8000f80:	48000800 	.word	0x48000800
 8000f84:	48000400 	.word	0x48000400

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d113      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <HAL_TIM_Base_MspInit+0x48>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_TIM_Base_MspInit+0x48>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	201a      	movs	r0, #26
 8000fb8:	f000 fb10 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000fbc:	201a      	movs	r0, #26
 8000fbe:	f000 fb29 	bl	8001614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40014800 	.word	0x40014800
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ac      	sub	sp, #176	; 0xb0
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2288      	movs	r2, #136	; 0x88
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 f996 	bl	8008326 <memset>
  if(huart->Instance==USART2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a21      	ldr	r2, [pc, #132]	; (8001084 <HAL_UART_MspInit+0xb0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d13b      	bne.n	800107c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001008:	2300      	movs	r3, #0
 800100a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fbbf 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800101c:	f7ff feea 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_UART_MspInit+0xb4>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_UART_MspInit+0xb4>)
 8001026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102a:	6593      	str	r3, [r2, #88]	; 0x58
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_UART_MspInit+0xb4>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_UART_MspInit+0xb4>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_UART_MspInit+0xb4>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_UART_MspInit+0xb4>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001050:	230c      	movs	r3, #12
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001068:	2307      	movs	r3, #7
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f000 fb1c 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	37b0      	adds	r7, #176	; 0xb0
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40004400 	.word	0x40004400
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <HAL_InitTick+0xe0>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a33      	ldr	r2, [pc, #204]	; (800116c <HAL_InitTick+0xe0>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <HAL_InitTick+0xe0>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b2:	f107 0210 	add.w	r2, r7, #16
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fad7 	bl	8002670 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010cc:	f001 faa4 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 80010d0:	6378      	str	r0, [r7, #52]	; 0x34
 80010d2:	e004      	b.n	80010de <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010d4:	f001 faa0 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 80010d8:	4603      	mov	r3, r0
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <HAL_InitTick+0xe4>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9b      	lsrs	r3, r3, #18
 80010e8:	3b01      	subs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_InitTick+0xe8>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_InitTick+0xe8>)
 80010f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010fa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_InitTick+0xe8>)
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_InitTick+0xe8>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_InitTick+0xe8>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_InitTick+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001114:	4817      	ldr	r0, [pc, #92]	; (8001174 <HAL_InitTick+0xe8>)
 8001116:	f003 f811 	bl	800413c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001124:	2b00      	cmp	r3, #0
 8001126:	d11b      	bne.n	8001160 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001128:	4812      	ldr	r0, [pc, #72]	; (8001174 <HAL_InitTick+0xe8>)
 800112a:	f003 f85f 	bl	80041ec <HAL_TIM_Base_Start_IT>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001134:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001138:	2b00      	cmp	r3, #0
 800113a:	d111      	bne.n	8001160 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800113c:	201c      	movs	r0, #28
 800113e:	f000 fa69 	bl	8001614 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d808      	bhi.n	800115a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	201c      	movs	r0, #28
 800114e:	f000 fa45 	bl	80015dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_InitTick+0xec>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e002      	b.n	8001160 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001164:	4618      	mov	r0, r3
 8001166:	3738      	adds	r7, #56	; 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	20000330 	.word	0x20000330
 8001178:	20000004 	.word	0x20000004

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80011ae:	f003 f88d 	bl	80042cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000158 	.word	0x20000158

080011bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM2_IRQHandler+0x10>)
 80011c2:	f003 f883 	bl	80042cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000330 	.word	0x20000330

080011d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <SPI2_IRQHandler+0x10>)
 80011d6:	f002 fb0d 	bl	80037f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000f4 	.word	0x200000f4

080011e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00a      	b.n	800120c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f6:	f3af 8000 	nop.w
 80011fa:	4601      	mov	r1, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf0      	blt.n	80011f6 <_read+0x12>
  }

  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e009      	b.n	8001244 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd8d 	bl	8000d58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf1      	blt.n	8001230 <_write+0x12>
  }
  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_close>:

int _close(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127e:	605a      	str	r2, [r3, #4]
  return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_isatty>:

int _isatty(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f007 f8be 	bl	8008470 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20018000 	.word	0x20018000
 8001320:	00000400 	.word	0x00000400
 8001324:	2000037c 	.word	0x2000037c
 8001328:	20001e70 	.word	0x20001e70

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff ffea 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <LoopForever+0x16>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f007 f87d 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff f9d5 	bl	8000730 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001394:	08009168 	.word	0x08009168
  ldr r2, =_sbss
 8001398:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800139c:	20001e70 	.word	0x20001e70

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_Init+0x3c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_Init+0x3c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f903 	bl	80015c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c0:	200f      	movs	r0, #15
 80013c2:	f7ff fe63 	bl	800108c <HAL_InitTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e001      	b.n	80013d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d2:	f7ff fd15 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000380 	.word	0x20000380

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000380 	.word	0x20000380

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff4c 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ee:	f7ff ff61 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 80015f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	6978      	ldr	r0, [r7, #20]
 80015fa:	f7ff ffb1 	bl	8001560 <NVIC_EncodePriority>
 80015fe:	4602      	mov	r2, r0
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff80 	bl	800150c <__NVIC_SetPriority>
}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff54 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d005      	beq.n	8001654 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2204      	movs	r2, #4
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e029      	b.n	80016a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020e 	bic.w	r2, r2, #14
 8001662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f003 021c 	and.w	r2, r3, #28
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
    }
  }
  return status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e17f      	b.n	80019c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8171 	beq.w	80019be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0201 	and.w	r2, r3, #1
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b03      	cmp	r3, #3
 8001760:	d118      	bne.n	8001794 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	6939      	ldr	r1, [r7, #16]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80ac 	beq.w	80019be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <HAL_GPIO_Init+0x330>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <HAL_GPIO_Init+0x330>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6613      	str	r3, [r2, #96]	; 0x60
 8001872:	4b5c      	ldr	r3, [pc, #368]	; (80019e4 <HAL_GPIO_Init+0x330>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800187e:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <HAL_GPIO_Init+0x334>)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018a8:	d025      	beq.n	80018f6 <HAL_GPIO_Init+0x242>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x338>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d01f      	beq.n	80018f2 <HAL_GPIO_Init+0x23e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_GPIO_Init+0x33c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d019      	beq.n	80018ee <HAL_GPIO_Init+0x23a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_GPIO_Init+0x340>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0x236>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x344>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00d      	beq.n	80018e6 <HAL_GPIO_Init+0x232>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_GPIO_Init+0x348>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d007      	beq.n	80018e2 <HAL_GPIO_Init+0x22e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_GPIO_Init+0x34c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_GPIO_Init+0x22a>
 80018da:	2306      	movs	r3, #6
 80018dc:	e00c      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018de:	2307      	movs	r3, #7
 80018e0:	e00a      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x244>
 80018f6:	2300      	movs	r3, #0
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001908:	4937      	ldr	r1, [pc, #220]	; (80019e8 <HAL_GPIO_Init+0x334>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_GPIO_Init+0x350>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800193a:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_GPIO_Init+0x350>)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_GPIO_Init+0x350>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_GPIO_Init+0x350>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_GPIO_Init+0x350>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_GPIO_Init+0x350>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_GPIO_Init+0x350>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_GPIO_Init+0x350>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f47f ae78 	bne.w	80016c4 <HAL_GPIO_Init+0x10>
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000c00 	.word	0x48000c00
 80019f8:	48001000 	.word	0x48001000
 80019fc:	48001400 	.word	0x48001400
 8001a00:	48001800 	.word	0x48001800
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e001      	b.n	8001a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40007000 	.word	0x40007000

08001a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a92:	d130      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa0:	d038      	beq.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2232      	movs	r2, #50	; 0x32
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac8:	e002      	b.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001adc:	d102      	bne.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f2      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af0:	d110      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e00f      	b.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d007      	beq.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b0c:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40007000 	.word	0x40007000
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	431bde83 	.word	0x431bde83

08001b30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e3ca      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4b97      	ldr	r3, [pc, #604]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80e4 	beq.w	8001d2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4a>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	f040 808b 	bne.w	8001c88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f040 8087 	bne.w	8001c88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e3a2      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_RCC_OscConfig+0x7c>
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001baa:	e005      	b.n	8001bb8 <HAL_RCC_OscConfig+0x88>
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d223      	bcs.n	8001c04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fd87 	bl	80026d4 <RCC_SetFlashLatencyFromMSIRange>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e383      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd0:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	496d      	ldr	r1, [pc, #436]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bee:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	4968      	ldr	r1, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
 8001c02:	e025      	b.n	8001c50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a65      	ldr	r2, [pc, #404]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4960      	ldr	r1, [pc, #384]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c22:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	495b      	ldr	r1, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fd47 	bl	80026d4 <RCC_SetFlashLatencyFromMSIRange>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e343      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c50:	f000 fc4a 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4950      	ldr	r1, [pc, #320]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <HAL_RCC_OscConfig+0x278>)
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c70:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <HAL_RCC_OscConfig+0x27c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fa09 	bl	800108c <HAL_InitTick>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d052      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	e327      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d032      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fbb6 	bl	800140c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fbb2 	bl	800140c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e310      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc2:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a36      	ldr	r2, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4931      	ldr	r1, [pc, #196]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	492c      	ldr	r1, [pc, #176]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e01a      	b.n	8001d2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fb83 	bl	800140c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fb7f 	bl	800140c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e2dd      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x1da>
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d074      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x21a>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d10e      	bne.n	8001d62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d064      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d160      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e2ba      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x24a>
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e026      	b.n	8001dc8 <HAL_RCC_OscConfig+0x298>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d82:	d115      	bne.n	8001db0 <HAL_RCC_OscConfig+0x280>
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a02      	ldr	r2, [pc, #8]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e014      	b.n	8001dc8 <HAL_RCC_OscConfig+0x298>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	080090dc 	.word	0x080090dc
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004
 8001db0:	4ba0      	ldr	r3, [pc, #640]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a9f      	ldr	r2, [pc, #636]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b9d      	ldr	r3, [pc, #628]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a9c      	ldr	r2, [pc, #624]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fb1c 	bl	800140c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fb18 	bl	800140c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e276      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2a8>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fb08 	bl	800140c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fb04 	bl	800140c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e262      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2d0>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d060      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x310>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d119      	bne.n	8001e6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d116      	bne.n	8001e6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e40:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x328>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e23f      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	4973      	ldr	r1, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	e040      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d023      	beq.n	8001ebe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e76:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff fac3 	bl	800140c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fabf 	bl	800140c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e21d      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	495f      	ldr	r1, [pc, #380]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e018      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eca:	f7ff fa9f 	bl	800140c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fa9b 	bl	800140c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e1f9      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f04:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff fa7a 	bl	800140c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fa76 	bl	800140c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1d4      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCC_OscConfig+0x3ec>
 8001f3c:	e01b      	b.n	8001f76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f44:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fa5d 	bl	800140c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff fa59 	bl	800140c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1b7      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ef      	bne.n	8001f56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80a6 	beq.w	80020d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10d      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_RCC_OscConfig+0x508>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d118      	bne.n	8001fee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_OscConfig+0x508>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x508>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fa20 	bl	800140c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7ff fa1c 	bl	800140c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e17a      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0x508>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_OscConfig+0x4d8>
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002006:	e029      	b.n	800205c <HAL_RCC_OscConfig+0x52c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d115      	bne.n	800203c <HAL_RCC_OscConfig+0x50c>
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_RCC_OscConfig+0x504>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002030:	e014      	b.n	800205c <HAL_RCC_OscConfig+0x52c>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	4b9c      	ldr	r3, [pc, #624]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	4a9b      	ldr	r2, [pc, #620]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204c:	4b98      	ldr	r3, [pc, #608]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a97      	ldr	r2, [pc, #604]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d016      	beq.n	8002092 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f9d2 	bl	800140c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f9ce 	bl	800140c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e12a      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	4b8b      	ldr	r3, [pc, #556]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ed      	beq.n	800206c <HAL_RCC_OscConfig+0x53c>
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7ff f9bb 	bl	800140c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff f9b7 	bl	800140c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e113      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b0:	4b7f      	ldr	r3, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1ed      	bne.n	800209a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a79      	ldr	r2, [pc, #484]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80fe 	beq.w	80022d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	2b02      	cmp	r3, #2
 80020e0:	f040 80d0 	bne.w	8002284 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020e4:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d130      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	3b01      	subs	r3, #1
 8002104:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d127      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d11f      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002124:	2a07      	cmp	r2, #7
 8002126:	bf14      	ite	ne
 8002128:	2201      	movne	r2, #1
 800212a:	2200      	moveq	r2, #0
 800212c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800212e:	4293      	cmp	r3, r2
 8002130:	d113      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d109      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d06e      	beq.n	8002238 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d069      	beq.n	8002234 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0ad      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002188:	f7ff f940 	bl	800140c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f93c 	bl	800140c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e09a      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCC_OscConfig+0x784>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021be:	3a01      	subs	r2, #1
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021c8:	0212      	lsls	r2, r2, #8
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021d0:	0852      	lsrs	r2, r2, #1
 80021d2:	3a01      	subs	r2, #1
 80021d4:	0552      	lsls	r2, r2, #21
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021dc:	0852      	lsrs	r2, r2, #1
 80021de:	3a01      	subs	r2, #1
 80021e0:	0652      	lsls	r2, r2, #25
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e8:	0912      	lsrs	r2, r2, #4
 80021ea:	0452      	lsls	r2, r2, #17
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4930      	ldr	r1, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800220c:	f7ff f8fe 	bl	800140c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f8fa 	bl	800140c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e058      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002232:	e050      	b.n	80022d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e04f      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d148      	bne.n	80022d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800225c:	f7ff f8d6 	bl	800140c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f8d2 	bl	800140c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e030      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x734>
 8002282:	e028      	b.n	80022d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d023      	beq.n	80022d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_RCC_OscConfig+0x780>)
 8002290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f8b9 	bl	800140c <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800229c:	e00c      	b.n	80022b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff f8b5 	bl	800140c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d905      	bls.n	80022b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x7b0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ec      	bne.n	800229e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x7b0>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4905      	ldr	r1, [pc, #20]	; (80022e0 <HAL_RCC_OscConfig+0x7b0>)
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x7b4>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
 80022d0:	e001      	b.n	80022d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	feeefffc 	.word	0xfeeefffc

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0e7      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0207 	bic.w	r2, r3, #7
 8002312:	4970      	ldr	r1, [pc, #448]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cf      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4960      	ldr	r1, [pc, #384]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0a6      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e09a      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239e:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08e      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ae:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e086      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4943      	ldr	r1, [pc, #268]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7ff f81c 	bl	800140c <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff f818 	bl	800140c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e06e      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d010      	beq.n	800242e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002418:	429a      	cmp	r2, r3
 800241a:	d208      	bcs.n	800242e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	492b      	ldr	r1, [pc, #172]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d210      	bcs.n	800245e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 0207 	bic.w	r2, r3, #7
 8002444:	4923      	ldr	r1, [pc, #140]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e036      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4918      	ldr	r1, [pc, #96]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4910      	ldr	r1, [pc, #64]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249c:	f000 f824 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	490b      	ldr	r1, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x1f4>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1fc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fde3 	bl	800108c <HAL_InitTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024ca:	7afb      	ldrb	r3, [r7, #11]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	080090dc 	.word	0x080090dc
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d121      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d11e      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800251c:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002528:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d102      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e004      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d101      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 800256e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d134      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0xa6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
 800258c:	e005      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	3301      	adds	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	0e5b      	lsrs	r3, r3, #25
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	3301      	adds	r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025e0:	69bb      	ldr	r3, [r7, #24]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	080090f4 	.word	0x080090f4
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	080090ec 	.word	0x080090ec

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002648:	f7ff ffda 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCC_GetPCLK2Freq+0x28>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	080090ec 	.word	0x080090ec

08002670 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	220f      	movs	r2, #15
 800267e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetClockConfig+0x60>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0207 	and.w	r2, r3, #7
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40022000 	.word	0x40022000

080026d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026ec:	f7ff f9bc 	bl	8001a68 <HAL_PWREx_GetVoltageRange>
 80026f0:	6178      	str	r0, [r7, #20]
 80026f2:	e014      	b.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a24      	ldr	r2, [pc, #144]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800270c:	f7ff f9ac 	bl	8001a68 <HAL_PWREx_GetVoltageRange>
 8002710:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002724:	d10b      	bne.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d919      	bls.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2ba0      	cmp	r3, #160	; 0xa0
 8002730:	d902      	bls.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e013      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002738:	2301      	movs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	e010      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d902      	bls.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002744:	2303      	movs	r3, #3
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	e00a      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d102      	bne.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002750:	2302      	movs	r3, #2
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e004      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b70      	cmp	r3, #112	; 0x70
 800275a:	d101      	bne.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 0207 	bic.w	r2, r3, #7
 8002768:	4909      	ldr	r1, [pc, #36]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800279c:	2300      	movs	r3, #0
 800279e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027a0:	2300      	movs	r3, #0
 80027a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d041      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027b8:	d02a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027be:	d824      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ca:	d81e      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d4:	d010      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027d6:	e018      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027d8:	4b86      	ldr	r3, [pc, #536]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a85      	ldr	r2, [pc, #532]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e015      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fabb 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f6:	e00c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3320      	adds	r3, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fba6 	bl	8002f50 <RCCEx_PLLSAI2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	74fb      	strb	r3, [r7, #19]
      break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002818:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002826:	4973      	ldr	r1, [pc, #460]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800282e:	e001      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d041      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002848:	d02a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800284a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800284e:	d824      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002854:	d008      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800285a:	d81e      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d010      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002866:	e018      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002868:	4b62      	ldr	r3, [pc, #392]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a61      	ldr	r2, [pc, #388]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002874:	e015      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fa73 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002886:	e00c      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3320      	adds	r3, #32
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fb5e 	bl	8002f50 <RCCEx_PLLSAI2_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002898:	e003      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	74fb      	strb	r3, [r7, #19]
      break;
 800289e:	e000      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028a8:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b6:	494f      	ldr	r1, [pc, #316]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028be:	e001      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a0 	beq.w	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a40      	ldr	r2, [pc, #256]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
 80028f8:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002914:	f7fe fd7a 	bl	800140c <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800291a:	e009      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe fd76 	bl	800140c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d902      	bls.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	74fb      	strb	r3, [r7, #19]
        break;
 800292e:	e005      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d15c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01f      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	d019      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800296c:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fd35 	bl	800140c <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a4:	e00b      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fd31 	bl	800140c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d902      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	74fb      	strb	r3, [r7, #19]
            break;
 80029bc:	e006      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ec      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e2:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ea:	e009      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
 80029f0:	e006      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a00:	7c7b      	ldrb	r3, [r7, #17]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b9e      	ldr	r3, [pc, #632]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a9d      	ldr	r2, [pc, #628]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1e:	4b98      	ldr	r3, [pc, #608]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	4994      	ldr	r1, [pc, #592]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a40:	4b8f      	ldr	r3, [pc, #572]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 020c 	bic.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	498c      	ldr	r1, [pc, #560]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a62:	4b87      	ldr	r3, [pc, #540]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	4983      	ldr	r1, [pc, #524]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a84:	4b7e      	ldr	r3, [pc, #504]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	497b      	ldr	r1, [pc, #492]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	4972      	ldr	r1, [pc, #456]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac8:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	496a      	ldr	r1, [pc, #424]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	4961      	ldr	r1, [pc, #388]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b0c:	4b5c      	ldr	r3, [pc, #368]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	4959      	ldr	r1, [pc, #356]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2e:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	4950      	ldr	r1, [pc, #320]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b50:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	4948      	ldr	r1, [pc, #288]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	493f      	ldr	r1, [pc, #252]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d028      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba2:	4937      	ldr	r1, [pc, #220]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb4:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bbe:	60d3      	str	r3, [r2, #12]
 8002bc0:	e011      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f8c8 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	491f      	ldr	r1, [pc, #124]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1c:	60d3      	str	r3, [r2, #12]
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f899 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a02      	ldr	r2, [pc, #8]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f867 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc2:	4928      	ldr	r1, [pc, #160]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f844 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d014      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	74bb      	strb	r3, [r7, #18]
 8002cee:	e011      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3320      	adds	r3, #32
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f925 	bl	8002f50 <RCCEx_PLLSAI2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d20:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2e:	490d      	ldr	r1, [pc, #52]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d52:	4904      	ldr	r1, [pc, #16]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d76:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
       ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
       ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d047      	beq.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e044      	b.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d018      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0x86>
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d825      	bhi.n	8002e0c <RCCEx_PLLSAI1_Config+0xa4>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d002      	beq.n	8002dca <RCCEx_PLLSAI1_Config+0x62>
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d009      	beq.n	8002ddc <RCCEx_PLLSAI1_Config+0x74>
 8002dc8:	e020      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dca:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11d      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e01a      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e013      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfa:	4b54      	ldr	r3, [pc, #336]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0a:	e006      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e004      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	430b      	orrs	r3, r1
 8002e38:	4944      	ldr	r1, [pc, #272]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d17d      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a40      	ldr	r2, [pc, #256]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fe fadc 	bl	800140c <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e56:	e009      	b.n	8002e6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e58:	f7fe fad8 	bl	800140c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6a:	e005      	b.n	8002e78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e6c:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ef      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d160      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	0912      	lsrs	r2, r2, #4
 8002e9c:	0452      	lsls	r2, r2, #17
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	492a      	ldr	r1, [pc, #168]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
 8002ea6:	e027      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d112      	bne.n	8002ed4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6892      	ldr	r2, [r2, #8]
 8002ebe:	0211      	lsls	r1, r2, #8
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6912      	ldr	r2, [r2, #16]
 8002ec4:	0852      	lsrs	r2, r2, #1
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0552      	lsls	r2, r2, #21
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	491f      	ldr	r1, [pc, #124]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	610b      	str	r3, [r1, #16]
 8002ed2:	e011      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002edc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	0211      	lsls	r1, r2, #8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6952      	ldr	r2, [r2, #20]
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0652      	lsls	r2, r2, #25
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4916      	ldr	r1, [pc, #88]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe fa82 	bl	800140c <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0c:	f7fe fa7e 	bl	800140c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5e:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d018      	beq.n	8002f9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0203 	and.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d10d      	bne.n	8002f96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f82:	4b61      	ldr	r3, [pc, #388]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
       ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d047      	beq.n	8003026 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e044      	b.n	8003026 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d018      	beq.n	8002fd6 <RCCEx_PLLSAI2_Config+0x86>
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d825      	bhi.n	8002ff4 <RCCEx_PLLSAI2_Config+0xa4>
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d002      	beq.n	8002fb2 <RCCEx_PLLSAI2_Config+0x62>
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d009      	beq.n	8002fc4 <RCCEx_PLLSAI2_Config+0x74>
 8002fb0:	e020      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fb2:	4b55      	ldr	r3, [pc, #340]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11d      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e01a      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd4:	e013      	b.n	8002ffe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ff2:	e006      	b.n	8003002 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff8:	e004      	b.n	8003004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003002:	bf00      	nop
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	430b      	orrs	r3, r1
 8003020:	4939      	ldr	r1, [pc, #228]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d167      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a35      	ldr	r2, [pc, #212]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe f9e8 	bl	800140c <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800303e:	e009      	b.n	8003054 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003040:	f7fe f9e4 	bl	800140c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d902      	bls.n	8003054 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	73fb      	strb	r3, [r7, #15]
        break;
 8003052:	e005      	b.n	8003060 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003054:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ef      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d14a      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800306c:	4b26      	ldr	r3, [pc, #152]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	0211      	lsls	r1, r2, #8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	0912      	lsrs	r2, r2, #4
 8003084:	0452      	lsls	r2, r2, #17
 8003086:	430a      	orrs	r2, r1
 8003088:	491f      	ldr	r1, [pc, #124]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	614b      	str	r3, [r1, #20]
 800308e:	e011      	b.n	80030b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6892      	ldr	r2, [r2, #8]
 80030a0:	0211      	lsls	r1, r2, #8
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6912      	ldr	r2, [r2, #16]
 80030a6:	0852      	lsrs	r2, r2, #1
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0652      	lsls	r2, r2, #25
 80030ac:	430a      	orrs	r2, r1
 80030ae:	4916      	ldr	r1, [pc, #88]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe f9a4 	bl	800140c <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c6:	e009      	b.n	80030dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c8:	f7fe f9a0 	bl	800140c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d902      	bls.n	80030dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	73fb      	strb	r3, [r7, #15]
          break;
 80030da:	e005      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ef      	beq.n	80030c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4904      	ldr	r1, [pc, #16]	; (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e095      	b.n	800324a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d009      	beq.n	8003144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
 8003136:	e005      	b.n	8003144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fe76 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003184:	d902      	bls.n	800318c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e002      	b.n	8003192 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800318c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003190:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800319a:	d007      	beq.n	80031ac <HAL_SPI_Init+0xa0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	ea42 0103 	orr.w	r1, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	f003 0204 	and.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003228:	ea42 0103 	orr.w	r1, r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_SPI_Transmit+0x22>
 8003270:	2302      	movs	r3, #2
 8003272:	e15f      	b.n	8003534 <HAL_SPI_Transmit+0x2e2>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327c:	f7fe f8c6 	bl	800140c <HAL_GetTick>
 8003280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003296:	e148      	b.n	800352a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Transmit+0x52>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a8:	e13f      	b.n	800352a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	d10f      	bne.n	8003316 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d007      	beq.n	8003334 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800333c:	d94f      	bls.n	80033de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_Transmit+0xfa>
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d142      	bne.n	80033d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003370:	e02f      	b.n	80033d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d112      	bne.n	80033a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033a4:	e015      	b.n	80033d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a6:	f7fe f831 	bl	800140c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d803      	bhi.n	80033be <HAL_SPI_Transmit+0x16c>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d102      	bne.n	80033c4 <HAL_SPI_Transmit+0x172>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80033d0:	e0ab      	b.n	800352a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ca      	bne.n	8003372 <HAL_SPI_Transmit+0x120>
 80033dc:	e080      	b.n	80034e0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Transmit+0x19a>
 80033e6:	8afb      	ldrh	r3, [r7, #22]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d174      	bne.n	80034d6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d912      	bls.n	800341c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	1c9a      	adds	r2, r3, #2
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b02      	subs	r3, #2
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	87da      	strh	r2, [r3, #62]	; 0x3e
 800341a:	e05c      	b.n	80034d6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003442:	e048      	b.n	80034d6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d12b      	bne.n	80034aa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d912      	bls.n	8003482 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b02      	subs	r3, #2
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003480:	e029      	b.n	80034d6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a8:	e015      	b.n	80034d6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034aa:	f7fd ffaf 	bl	800140c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d803      	bhi.n	80034c2 <HAL_SPI_Transmit+0x270>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_Transmit+0x276>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80034d4:	e029      	b.n	800352a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1b1      	bne.n	8003444 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fd71 	bl	8003fcc <SPI_EndRxTxTransaction>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e003      	b.n	800352a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003532:	7ffb      	ldrb	r3, [r7, #31]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800355e:	e092      	b.n	8003686 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d110      	bne.n	800358a <HAL_SPI_Receive_IT+0x4e>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003570:	d10b      	bne.n	800358a <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2204      	movs	r2, #4
 8003576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f889 	bl	8003698 <HAL_SPI_TransmitReceive_IT>
 8003586:	4603      	mov	r3, r0
 8003588:	e07e      	b.n	8003688 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_SPI_Receive_IT+0x5a>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800359a:	e074      	b.n	8003686 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_SPI_Receive_IT+0x6e>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e06e      	b.n	8003688 <HAL_SPI_Receive_IT+0x14c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2204      	movs	r2, #4
 80035b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035f6:	d90b      	bls.n	8003610 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003606:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <HAL_SPI_Receive_IT+0x154>)
 800360c:	64da      	str	r2, [r3, #76]	; 0x4c
 800360e:	e00a      	b.n	8003626 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800361e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_SPI_Receive_IT+0x158>)
 8003624:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362e:	d10f      	bne.n	8003650 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800364e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d007      	beq.n	800366e <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003684:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	08003c95 	.word	0x08003c95
 8003694:	08003c45 	.word	0x08003c45

08003698 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036b0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b8:	7dbb      	ldrb	r3, [r7, #22]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d00d      	beq.n	80036da <HAL_SPI_TransmitReceive_IT+0x42>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_TransmitReceive_IT+0x3c>
 80036ce:	7dbb      	ldrb	r3, [r7, #22]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d002      	beq.n	80036da <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036d8:	e07d      	b.n	80037d6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_SPI_TransmitReceive_IT+0x54>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_SPI_TransmitReceive_IT+0x54>
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036f0:	e071      	b.n	80037d6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_SPI_TransmitReceive_IT+0x68>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e06b      	b.n	80037d8 <HAL_SPI_TransmitReceive_IT+0x140>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b04      	cmp	r3, #4
 8003712:	d003      	beq.n	800371c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2205      	movs	r2, #5
 8003718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	887a      	ldrh	r2, [r7, #2]
 8003732:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	887a      	ldrh	r2, [r7, #2]
 8003746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003752:	d906      	bls.n	8003762 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003758:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <HAL_SPI_TransmitReceive_IT+0x150>)
 800375e:	651a      	str	r2, [r3, #80]	; 0x50
 8003760:	e005      	b.n	800376e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_SPI_TransmitReceive_IT+0x154>)
 8003766:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <HAL_SPI_TransmitReceive_IT+0x158>)
 800376c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003776:	d802      	bhi.n	800377e <HAL_SPI_TransmitReceive_IT+0xe6>
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d908      	bls.n	8003790 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e007      	b.n	80037a0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800379e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d007      	beq.n	80037be <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80037d4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	08003b7f 	.word	0x08003b7f
 80037e8:	08003be5 	.word	0x08003be5
 80037ec:	08003a2f 	.word	0x08003a2f
 80037f0:	08003aed 	.word	0x08003aed

080037f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10e      	bne.n	8003834 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
    return;
 8003832:	e0ce      	b.n	80039d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_SPI_IRQHandler+0x5e>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
    return;
 8003850:	e0bf      	b.n	80039d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_SPI_IRQHandler+0x7e>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80b0 	beq.w	80039d2 <HAL_SPI_IRQHandler+0x1de>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80aa 	beq.w	80039d2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d023      	beq.n	80038d0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d011      	beq.n	80038b8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	e00b      	b.n	80038d0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
        return;
 80038ce:	e080      	b.n	80039d2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d014      	beq.n	8003904 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	f043 0208 	orr.w	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	2b00      	cmp	r3, #0
 800392e:	d04f      	beq.n	80039d0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800393e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_SPI_IRQHandler+0x168>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d034      	beq.n	80039c6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0203 	bic.w	r2, r2, #3
 800396a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	2b00      	cmp	r3, #0
 8003972:	d011      	beq.n	8003998 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_SPI_IRQHandler+0x1e4>)
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd fe55 	bl	8001630 <HAL_DMA_Abort_IT>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	2b00      	cmp	r3, #0
 800399e:	d016      	beq.n	80039ce <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <HAL_SPI_IRQHandler+0x1e4>)
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fe3f 	bl	8001630 <HAL_DMA_Abort_IT>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80039c4:	e003      	b.n	80039ce <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f812 	bl	80039f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039cc:	e000      	b.n	80039d0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80039ce:	bf00      	nop
    return;
 80039d0:	bf00      	nop
  }
}
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08003a05 	.word	0x08003a05

080039dc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff ffe5 	bl	80039f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d923      	bls.n	8003a8a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b02      	subs	r3, #2
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d11f      	bne.n	8003ab8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	e016      	b.n	8003ab8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f103 020c 	add.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 faba 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d912      	bls.n	8003b24 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	881a      	ldrh	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	1c9a      	adds	r2, r3, #2
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b02      	subs	r3, #2
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b22:	e012      	b.n	8003b4a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d110      	bne.n	8003b76 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b62:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa71 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	b292      	uxth	r2, r2
 8003b92:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa3e 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d110      	bne.n	8003c3c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c28:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa0e 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f103 020c 	add.w	r2, r3, #12
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa28 	bl	80040dc <SPI_CloseRx_ISR>
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa02 	bl	80040dc <SPI_CloseRx_ISR>
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cf0:	f7fd fb8c 	bl	800140c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d00:	f7fd fb84 	bl	800140c <HAL_GetTick>
 8003d04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	015b      	lsls	r3, r3, #5
 8003d0c:	0d1b      	lsrs	r3, r3, #20
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d16:	e054      	b.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d050      	beq.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d20:	f7fd fb74 	bl	800140c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d902      	bls.n	8003d36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d13d      	bne.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d4e:	d111      	bne.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d58:	d004      	beq.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d107      	bne.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d10f      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e017      	b.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d19b      	bne.n	8003d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000

08003df0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e02:	f7fd fb03 	bl	800140c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e12:	f7fd fafb 	bl	800140c <HAL_GetTick>
 8003e16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e20:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00da      	lsls	r2, r3, #3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	0d1b      	lsrs	r3, r3, #20
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e38:	e060      	b.n	8003efc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e40:	d107      	bne.n	8003e52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d050      	beq.n	8003efc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5a:	f7fd fad7 	bl	800140c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d902      	bls.n	8003e70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d13d      	bne.n	8003eec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e88:	d111      	bne.n	8003eae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e92:	d004      	beq.n	8003e9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d107      	bne.n	8003eae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d10f      	bne.n	8003ed8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e010      	b.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d196      	bne.n	8003e3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f30:	d111      	bne.n	8003f56 <SPI_EndRxTransaction+0x3a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	d004      	beq.n	8003f46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f44:	d107      	bne.n	8003f56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff febd 	bl	8003ce0 <SPI_WaitFlagStateUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e023      	b.n	8003fc4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f84:	d11d      	bne.n	8003fc2 <SPI_EndRxTransaction+0xa6>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	d004      	beq.n	8003f9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d113      	bne.n	8003fc2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff22 	bl	8003df0 <SPI_WaitFifoStateUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e000      	b.n	8003fc4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff03 	bl	8003df0 <SPI_WaitFifoStateUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e027      	b.n	8004050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fe68 	bl	8003ce0 <SPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e014      	b.n	8004050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2200      	movs	r2, #0
 800402e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fedc 	bl	8003df0 <SPI_WaitFifoStateUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e000      	b.n	8004050 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004060:	f7fd f9d4 	bl	800140c <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0220 	bic.w	r2, r2, #32
 8004074:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	2164      	movs	r1, #100	; 0x64
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ffa6 	bl	8003fcc <SPI_EndRxTxTransaction>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d107      	bne.n	80040b6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fc fe84 	bl	8000dbc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80040b4:	e00e      	b.n	80040d4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fc8c 	bl	80039dc <HAL_SPI_TxRxCpltCallback>
}
 80040c4:	e006      	b.n	80040d4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fc8e 	bl	80039f0 <HAL_SPI_ErrorCallback>
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040f2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80040f4:	f7fd f98a 	bl	800140c <HAL_GetTick>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	2164      	movs	r1, #100	; 0x64
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff0c 	bl	8003f1c <SPI_EndRxTransaction>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410e:	f043 0220 	orr.w	r2, r3, #32
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fc fe48 	bl	8000dbc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800412c:	e002      	b.n	8004134 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fc5e 	bl	80039f0 <HAL_SPI_ErrorCallback>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e049      	b.n	80041e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc ff10 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 f9d0 	bl	8004520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04f      	b.n	80042a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01d      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x76>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d018      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x76>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x76>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x76>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <HAL_TIM_Base_Start_IT+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x76>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x76>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d115      	bne.n	800428e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b06      	cmp	r3, #6
 8004272:	d015      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0xb4>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427a:	d011      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428c:	e008      	b.n	80042a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e000      	b.n	80042a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40013400 	.word	0x40013400
 80042c4:	40014000 	.word	0x40014000
 80042c8:	00010007 	.word	0x00010007

080042cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d020      	beq.n	8004330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01b      	beq.n	8004330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0202 	mvn.w	r2, #2
 8004300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8e4 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8d6 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f8e7 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0204 	mvn.w	r2, #4
 800434c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8be 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8b0 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8c1 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0208 	mvn.w	r2, #8
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2204      	movs	r2, #4
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f898 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f88a 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f89b 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0210 	mvn.w	r2, #16
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2208      	movs	r2, #8
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f872 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f864 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f875 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0201 	mvn.w	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fcaa 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f906 	bl	8004668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8fe 	bl	800467c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f834 	bl	800450c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0220 	mvn.w	r2, #32
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8c6 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a40      	ldr	r2, [pc, #256]	; (8004634 <TIM_Base_SetConfig+0x114>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453e:	d00f      	beq.n	8004560 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3d      	ldr	r2, [pc, #244]	; (8004638 <TIM_Base_SetConfig+0x118>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3c      	ldr	r2, [pc, #240]	; (800463c <TIM_Base_SetConfig+0x11c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3b      	ldr	r2, [pc, #236]	; (8004640 <TIM_Base_SetConfig+0x120>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <TIM_Base_SetConfig+0x124>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2f      	ldr	r2, [pc, #188]	; (8004634 <TIM_Base_SetConfig+0x114>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01f      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d01b      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <TIM_Base_SetConfig+0x118>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d017      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2b      	ldr	r2, [pc, #172]	; (800463c <TIM_Base_SetConfig+0x11c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2a      	ldr	r2, [pc, #168]	; (8004640 <TIM_Base_SetConfig+0x120>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a29      	ldr	r2, [pc, #164]	; (8004644 <TIM_Base_SetConfig+0x124>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a28      	ldr	r2, [pc, #160]	; (8004648 <TIM_Base_SetConfig+0x128>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a27      	ldr	r2, [pc, #156]	; (800464c <TIM_Base_SetConfig+0x12c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_Base_SetConfig+0x9a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a26      	ldr	r2, [pc, #152]	; (8004650 <TIM_Base_SetConfig+0x130>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a10      	ldr	r2, [pc, #64]	; (8004634 <TIM_Base_SetConfig+0x114>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00f      	beq.n	8004618 <TIM_Base_SetConfig+0xf8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <TIM_Base_SetConfig+0x124>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00b      	beq.n	8004618 <TIM_Base_SetConfig+0xf8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a11      	ldr	r2, [pc, #68]	; (8004648 <TIM_Base_SetConfig+0x128>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_Base_SetConfig+0xf8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a10      	ldr	r2, [pc, #64]	; (800464c <TIM_Base_SetConfig+0x12c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_Base_SetConfig+0xf8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <TIM_Base_SetConfig+0x130>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d103      	bne.n	8004620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	615a      	str	r2, [r3, #20]
}
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40013400 	.word	0x40013400
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e040      	b.n	8004724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fc8e 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fc92 	bl	8005000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f9d7 	bl	8004a90 <UART_SetConfig>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e01b      	b.n	8004724 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fd11 	bl	8005144 <UART_CheckIdleState>
 8004722:	4603      	mov	r3, r0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004740:	2b20      	cmp	r3, #32
 8004742:	d178      	bne.n	8004836 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Transmit+0x24>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e071      	b.n	8004838 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fc fe53 	bl	800140c <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d108      	bne.n	8004794 <HAL_UART_Transmit+0x68>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e003      	b.n	800479c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800479c:	e030      	b.n	8004800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2180      	movs	r1, #128	; 0x80
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fd73 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e03c      	b.n	8004838 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	b292      	uxth	r2, r2
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3302      	adds	r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e008      	b.n	80047ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	b292      	uxth	r2, r2
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1c8      	bne.n	800479e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2200      	movs	r2, #0
 8004814:	2140      	movs	r1, #64	; 0x40
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fd3c 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e005      	b.n	8004838 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	2b20      	cmp	r3, #32
 8004858:	f040 80b6 	bne.w	80049c8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_UART_Receive+0x28>
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0ae      	b.n	80049ca <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2222      	movs	r2, #34	; 0x22
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004882:	f7fc fdc3 	bl	800140c <HAL_GetTick>
 8004886:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d10e      	bne.n	80048c0 <HAL_UART_Receive+0x80>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <HAL_UART_Receive+0x76>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048b4:	e02d      	b.n	8004912 <HAL_UART_Receive+0xd2>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048be:	e028      	b.n	8004912 <HAL_UART_Receive+0xd2>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_UART_Receive+0xa4>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_UART_Receive+0x9a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	22ff      	movs	r2, #255	; 0xff
 80048d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d8:	e01b      	b.n	8004912 <HAL_UART_Receive+0xd2>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	227f      	movs	r2, #127	; 0x7f
 80048de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048e2:	e016      	b.n	8004912 <HAL_UART_Receive+0xd2>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ec:	d10d      	bne.n	800490a <HAL_UART_Receive+0xca>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_Receive+0xc0>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	227f      	movs	r2, #127	; 0x7f
 80048fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048fe:	e008      	b.n	8004912 <HAL_UART_Receive+0xd2>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	223f      	movs	r2, #63	; 0x3f
 8004904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004908:	e003      	b.n	8004912 <HAL_UART_Receive+0xd2>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004918:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004922:	d108      	bne.n	8004936 <HAL_UART_Receive+0xf6>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e003      	b.n	800493e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800493e:	e037      	b.n	80049b0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	2120      	movs	r1, #32
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fca2 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e033      	b.n	80049ca <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800496e:	b29a      	uxth	r2, r3
 8004970:	8a7b      	ldrh	r3, [r7, #18]
 8004972:	4013      	ands	r3, r2
 8004974:	b29a      	uxth	r2, r3
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	3302      	adds	r3, #2
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e00d      	b.n	800499e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004988:	b29b      	uxth	r3, r3
 800498a:	b2da      	uxtb	r2, r3
 800498c:	8a7b      	ldrh	r3, [r7, #18]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4013      	ands	r3, r2
 8004992:	b2da      	uxtb	r2, r3
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1c1      	bne.n	8004940 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b08b      	sub	sp, #44	; 0x2c
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d147      	bne.n	8004a7a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_UART_Transmit_IT+0x22>
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e040      	b.n	8004a7c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2221      	movs	r2, #33	; 0x21
 8004a22:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d107      	bne.n	8004a3e <HAL_UART_Transmit_IT+0x6a>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <HAL_UART_Transmit_IT+0xb4>)
 8004a3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a3c:	e002      	b.n	8004a44 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <HAL_UART_Transmit_IT+0xb8>)
 8004a42:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	613b      	str	r3, [r7, #16]
   return(result);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	69f9      	ldr	r1, [r7, #28]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e6      	bne.n	8004a44 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	372c      	adds	r7, #44	; 0x2c
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	080054e3 	.word	0x080054e3
 8004a8c:	0800542b 	.word	0x0800542b

08004a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a94:	b08a      	sub	sp, #40	; 0x28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4ba4      	ldr	r3, [pc, #656]	; (8004d50 <UART_SetConfig+0x2c0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a99      	ldr	r2, [pc, #612]	; (8004d54 <UART_SetConfig+0x2c4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af8:	4313      	orrs	r3, r2
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a90      	ldr	r2, [pc, #576]	; (8004d58 <UART_SetConfig+0x2c8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d126      	bne.n	8004b68 <UART_SetConfig+0xd8>
 8004b1a:	4b90      	ldr	r3, [pc, #576]	; (8004d5c <UART_SetConfig+0x2cc>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d81b      	bhi.n	8004b60 <UART_SetConfig+0xd0>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0xa0>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b59 	.word	0x08004b59
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b46:	e116      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e112      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e10e      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e10a      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e106      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7c      	ldr	r2, [pc, #496]	; (8004d60 <UART_SetConfig+0x2d0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d138      	bne.n	8004be4 <UART_SetConfig+0x154>
 8004b72:	4b7a      	ldr	r3, [pc, #488]	; (8004d5c <UART_SetConfig+0x2cc>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d82d      	bhi.n	8004bdc <UART_SetConfig+0x14c>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0xf8>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bcd 	.word	0x08004bcd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e0d8      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bca:	e0d4      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd2:	e0d0      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e0cc      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e0c8      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5e      	ldr	r2, [pc, #376]	; (8004d64 <UART_SetConfig+0x2d4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d125      	bne.n	8004c3a <UART_SetConfig+0x1aa>
 8004bee:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <UART_SetConfig+0x2cc>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d016      	beq.n	8004c2a <UART_SetConfig+0x19a>
 8004bfc:	2b30      	cmp	r3, #48	; 0x30
 8004bfe:	d818      	bhi.n	8004c32 <UART_SetConfig+0x1a2>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d00a      	beq.n	8004c1a <UART_SetConfig+0x18a>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d814      	bhi.n	8004c32 <UART_SetConfig+0x1a2>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <UART_SetConfig+0x182>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d008      	beq.n	8004c22 <UART_SetConfig+0x192>
 8004c10:	e00f      	b.n	8004c32 <UART_SetConfig+0x1a2>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c18:	e0ad      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c20:	e0a9      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c22:	2304      	movs	r3, #4
 8004c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c28:	e0a5      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c30:	e0a1      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c32:	2310      	movs	r3, #16
 8004c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c38:	e09d      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <UART_SetConfig+0x2d8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d125      	bne.n	8004c90 <UART_SetConfig+0x200>
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <UART_SetConfig+0x2cc>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c50:	d016      	beq.n	8004c80 <UART_SetConfig+0x1f0>
 8004c52:	2bc0      	cmp	r3, #192	; 0xc0
 8004c54:	d818      	bhi.n	8004c88 <UART_SetConfig+0x1f8>
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d00a      	beq.n	8004c70 <UART_SetConfig+0x1e0>
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d814      	bhi.n	8004c88 <UART_SetConfig+0x1f8>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <UART_SetConfig+0x1d8>
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d008      	beq.n	8004c78 <UART_SetConfig+0x1e8>
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x1f8>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e082      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e07e      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e07a      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e076      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e072      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a35      	ldr	r2, [pc, #212]	; (8004d6c <UART_SetConfig+0x2dc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d12a      	bne.n	8004cf0 <UART_SetConfig+0x260>
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <UART_SetConfig+0x2cc>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca8:	d01a      	beq.n	8004ce0 <UART_SetConfig+0x250>
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cae:	d81b      	bhi.n	8004ce8 <UART_SetConfig+0x258>
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb4:	d00c      	beq.n	8004cd0 <UART_SetConfig+0x240>
 8004cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cba:	d815      	bhi.n	8004ce8 <UART_SetConfig+0x258>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <UART_SetConfig+0x238>
 8004cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc4:	d008      	beq.n	8004cd8 <UART_SetConfig+0x248>
 8004cc6:	e00f      	b.n	8004ce8 <UART_SetConfig+0x258>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cce:	e052      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e04e      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e04a      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e046      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e042      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <UART_SetConfig+0x2c4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d13a      	bne.n	8004d70 <UART_SetConfig+0x2e0>
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <UART_SetConfig+0x2cc>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d08:	d01a      	beq.n	8004d40 <UART_SetConfig+0x2b0>
 8004d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d0e:	d81b      	bhi.n	8004d48 <UART_SetConfig+0x2b8>
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d14:	d00c      	beq.n	8004d30 <UART_SetConfig+0x2a0>
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d815      	bhi.n	8004d48 <UART_SetConfig+0x2b8>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UART_SetConfig+0x298>
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d24:	d008      	beq.n	8004d38 <UART_SetConfig+0x2a8>
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x2b8>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e022      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e01e      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e01a      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e016      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e012      	b.n	8004d76 <UART_SetConfig+0x2e6>
 8004d50:	efff69f3 	.word	0xefff69f3
 8004d54:	40008000 	.word	0x40008000
 8004d58:	40013800 	.word	0x40013800
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40004400 	.word	0x40004400
 8004d64:	40004800 	.word	0x40004800
 8004d68:	40004c00 	.word	0x40004c00
 8004d6c:	40005000 	.word	0x40005000
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a9f      	ldr	r2, [pc, #636]	; (8004ff8 <UART_SetConfig+0x568>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d17a      	bne.n	8004e76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d824      	bhi.n	8004dd2 <UART_SetConfig+0x342>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x300>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dd3 	.word	0x08004dd3
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004dd3 	.word	0x08004dd3
 8004da0:	08004dc3 	.word	0x08004dc3
 8004da4:	08004dd3 	.word	0x08004dd3
 8004da8:	08004dd3 	.word	0x08004dd3
 8004dac:	08004dd3 	.word	0x08004dd3
 8004db0:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fd fc30 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004db8:	61f8      	str	r0, [r7, #28]
        break;
 8004dba:	e010      	b.n	8004dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b8f      	ldr	r3, [pc, #572]	; (8004ffc <UART_SetConfig+0x56c>)
 8004dbe:	61fb      	str	r3, [r7, #28]
        break;
 8004dc0:	e00d      	b.n	8004dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7fd fb91 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8004dc6:	61f8      	str	r0, [r7, #28]
        break;
 8004dc8:	e009      	b.n	8004dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	61fb      	str	r3, [r7, #28]
        break;
 8004dd0:	e005      	b.n	8004dde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80fb 	beq.w	8004fdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d305      	bcc.n	8004e02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d903      	bls.n	8004e0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e08:	e0e8      	b.n	8004fdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	461c      	mov	r4, r3
 8004e10:	4615      	mov	r5, r2
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	022b      	lsls	r3, r5, #8
 8004e1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e20:	0222      	lsls	r2, r4, #8
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	6849      	ldr	r1, [r1, #4]
 8004e26:	0849      	lsrs	r1, r1, #1
 8004e28:	2000      	movs	r0, #0
 8004e2a:	4688      	mov	r8, r1
 8004e2c:	4681      	mov	r9, r0
 8004e2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004e32:	eb43 0b09 	adc.w	fp, r3, r9
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e44:	4650      	mov	r0, sl
 8004e46:	4659      	mov	r1, fp
 8004e48:	f7fb fa12 	bl	8000270 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4613      	mov	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5a:	d308      	bcc.n	8004e6e <UART_SetConfig+0x3de>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d204      	bcs.n	8004e6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	60da      	str	r2, [r3, #12]
 8004e6c:	e0b6      	b.n	8004fdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e74:	e0b2      	b.n	8004fdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7e:	d15e      	bne.n	8004f3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d828      	bhi.n	8004eda <UART_SetConfig+0x44a>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x400>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fd fbb0 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004eb8:	61f8      	str	r0, [r7, #28]
        break;
 8004eba:	e014      	b.n	8004ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fd fbc2 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	61f8      	str	r0, [r7, #28]
        break;
 8004ec2:	e010      	b.n	8004ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b4d      	ldr	r3, [pc, #308]	; (8004ffc <UART_SetConfig+0x56c>)
 8004ec6:	61fb      	str	r3, [r7, #28]
        break;
 8004ec8:	e00d      	b.n	8004ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fd fb0d 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8004ece:	61f8      	str	r0, [r7, #28]
        break;
 8004ed0:	e009      	b.n	8004ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	61fb      	str	r3, [r7, #28]
        break;
 8004ed8:	e005      	b.n	8004ee6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d077      	beq.n	8004fdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	005a      	lsls	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d916      	bls.n	8004f36 <UART_SetConfig+0x4a6>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d212      	bcs.n	8004f36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f023 030f 	bic.w	r3, r3, #15
 8004f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	8afb      	ldrh	r3, [r7, #22]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	8afa      	ldrh	r2, [r7, #22]
 8004f32:	60da      	str	r2, [r3, #12]
 8004f34:	e052      	b.n	8004fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f3c:	e04e      	b.n	8004fdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d827      	bhi.n	8004f96 <UART_SetConfig+0x506>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0x4bc>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	08004f97 	.word	0x08004f97
 8004f5c:	08004f87 	.word	0x08004f87
 8004f60:	08004f97 	.word	0x08004f97
 8004f64:	08004f97 	.word	0x08004f97
 8004f68:	08004f97 	.word	0x08004f97
 8004f6c:	08004f8f 	.word	0x08004f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f70:	f7fd fb52 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004f74:	61f8      	str	r0, [r7, #28]
        break;
 8004f76:	e014      	b.n	8004fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f78:	f7fd fb64 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8004f7c:	61f8      	str	r0, [r7, #28]
        break;
 8004f7e:	e010      	b.n	8004fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <UART_SetConfig+0x56c>)
 8004f82:	61fb      	str	r3, [r7, #28]
        break;
 8004f84:	e00d      	b.n	8004fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f86:	f7fd faaf 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8004f8a:	61f8      	str	r0, [r7, #28]
        break;
 8004f8c:	e009      	b.n	8004fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f92:	61fb      	str	r3, [r7, #28]
        break;
 8004f94:	e005      	b.n	8004fa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d019      	beq.n	8004fdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	085a      	lsrs	r2, r3, #1
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	d909      	bls.n	8004fd6 <UART_SetConfig+0x546>
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d205      	bcs.n	8004fd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e002      	b.n	8004fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40008000 	.word	0x40008000
 8004ffc:	00f42400 	.word	0x00f42400

08005000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01a      	beq.n	8005116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fe:	d10a      	bne.n	8005116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b098      	sub	sp, #96	; 0x60
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005154:	f7fc f95a 	bl	800140c <HAL_GetTick>
 8005158:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d12e      	bne.n	80051c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005170:	2200      	movs	r2, #0
 8005172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f88c 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d021      	beq.n	80051c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005196:	653b      	str	r3, [r7, #80]	; 0x50
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44
 80051a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e062      	b.n	800528c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d149      	bne.n	8005268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	2200      	movs	r2, #0
 80051de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f856 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d03c      	beq.n	8005268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	623b      	str	r3, [r7, #32]
   return(result);
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
 800520e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3308      	adds	r3, #8
 800523e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005240:	61fa      	str	r2, [r7, #28]
 8005242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	617b      	str	r3, [r7, #20]
   return(result);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e011      	b.n	800528c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3758      	adds	r7, #88	; 0x58
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a4:	e049      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d045      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ae:	f7fc f8ad 	bl	800140c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d302      	bcc.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e048      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d031      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d110      	bne.n	8005306 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2208      	movs	r2, #8
 80052ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f838 	bl	8005362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2208      	movs	r2, #8
 80052f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e029      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005314:	d111      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800531e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f81e 	bl	8005362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00f      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4013      	ands	r3, r2
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	bf0c      	ite	eq
 800534a:	2301      	moveq	r3, #1
 800534c:	2300      	movne	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	429a      	cmp	r2, r3
 8005356:	d0a6      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005362:	b480      	push	{r7}
 8005364:	b095      	sub	sp, #84	; 0x54
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005388:	643b      	str	r3, [r7, #64]	; 0x40
 800538a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800538e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d118      	bne.n	800540a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	647b      	str	r3, [r7, #68]	; 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800541e:	bf00      	nop
 8005420:	3754      	adds	r7, #84	; 0x54
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800542a:	b480      	push	{r7}
 800542c:	b08f      	sub	sp, #60	; 0x3c
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005436:	2b21      	cmp	r3, #33	; 0x21
 8005438:	d14d      	bne.n	80054d6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d132      	bne.n	80054ac <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	61fb      	str	r3, [r7, #28]
   return(result);
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005466:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800546a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e6      	bne.n	8005446 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	60bb      	str	r3, [r7, #8]
   return(result);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6979      	ldr	r1, [r7, #20]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	613b      	str	r3, [r7, #16]
   return(result);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e6      	bne.n	8005478 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80054aa:	e014      	b.n	80054d6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	b292      	uxth	r2, r2
 80054b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80054d6:	bf00      	nop
 80054d8:	373c      	adds	r7, #60	; 0x3c
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b091      	sub	sp, #68	; 0x44
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ee:	2b21      	cmp	r3, #33	; 0x21
 80054f0:	d151      	bne.n	8005596 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d132      	bne.n	8005564 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	623b      	str	r3, [r7, #32]
   return(result);
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
 800551e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	60fb      	str	r3, [r7, #12]
   return(result);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	69b9      	ldr	r1, [r7, #24]
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	617b      	str	r3, [r7, #20]
   return(result);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005562:	e018      	b.n	8005596 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800556a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556c:	881a      	ldrh	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005576:	b292      	uxth	r2, r2
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005596:	bf00      	nop
 8005598:	3744      	adds	r7, #68	; 0x44
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <__NVIC_SetPriority>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db0a      	blt.n	80055ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	490c      	ldr	r1, [pc, #48]	; (80055f0 <__NVIC_SetPriority+0x4c>)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	0112      	lsls	r2, r2, #4
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	440b      	add	r3, r1
 80055c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055cc:	e00a      	b.n	80055e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4908      	ldr	r1, [pc, #32]	; (80055f4 <__NVIC_SetPriority+0x50>)
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	3b04      	subs	r3, #4
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	440b      	add	r3, r1
 80055e2:	761a      	strb	r2, [r3, #24]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000e100 	.word	0xe000e100
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <SysTick_Handler+0x1c>)
 80055fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005600:	f001 fd28 	bl	8007054 <xTaskGetSchedulerState>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d001      	beq.n	800560e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800560a:	f002 fb0d 	bl	8007c28 <xPortSysTickHandler>
  }
}
 800560e:	bf00      	nop
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000e010 	.word	0xe000e010

08005618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800561c:	2100      	movs	r1, #0
 800561e:	f06f 0004 	mvn.w	r0, #4
 8005622:	f7ff ffbf 	bl	80055a4 <__NVIC_SetPriority>
#endif
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005632:	f3ef 8305 	mrs	r3, IPSR
 8005636:	603b      	str	r3, [r7, #0]
  return(result);
 8005638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800563e:	f06f 0305 	mvn.w	r3, #5
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	e00c      	b.n	8005660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <osKernelInitialize+0x44>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <osKernelInitialize+0x44>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005654:	2300      	movs	r3, #0
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	e002      	b.n	8005660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005660:	687b      	ldr	r3, [r7, #4]
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000384 	.word	0x20000384

08005674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567a:	f3ef 8305 	mrs	r3, IPSR
 800567e:	603b      	str	r3, [r7, #0]
  return(result);
 8005680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005686:	f06f 0305 	mvn.w	r3, #5
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	e010      	b.n	80056b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <osKernelStart+0x48>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d109      	bne.n	80056aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005696:	f7ff ffbf 	bl	8005618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <osKernelStart+0x48>)
 800569c:	2202      	movs	r2, #2
 800569e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056a0:	f001 f87c 	bl	800679c <vTaskStartScheduler>
      stat = osOK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	e002      	b.n	80056b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b0:	687b      	ldr	r3, [r7, #4]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000384 	.word	0x20000384

080056c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08e      	sub	sp, #56	; 0x38
 80056c4:	af04      	add	r7, sp, #16
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d0:	f3ef 8305 	mrs	r3, IPSR
 80056d4:	617b      	str	r3, [r7, #20]
  return(result);
 80056d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d17e      	bne.n	80057da <osThreadNew+0x11a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d07b      	beq.n	80057da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056e6:	2318      	movs	r3, #24
 80056e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
 80056f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d045      	beq.n	8005786 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <osThreadNew+0x48>
        name = attr->name;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <osThreadNew+0x6e>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b38      	cmp	r3, #56	; 0x38
 8005720:	d805      	bhi.n	800572e <osThreadNew+0x6e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <osThreadNew+0x72>
        return (NULL);
 800572e:	2300      	movs	r3, #0
 8005730:	e054      	b.n	80057dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00e      	beq.n	8005768 <osThreadNew+0xa8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2ba7      	cmp	r3, #167	; 0xa7
 8005750:	d90a      	bls.n	8005768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <osThreadNew+0xa8>
        mem = 1;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e010      	b.n	800578a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10c      	bne.n	800578a <osThreadNew+0xca>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d108      	bne.n	800578a <osThreadNew+0xca>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <osThreadNew+0xca>
          mem = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e001      	b.n	800578a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d110      	bne.n	80057b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005798:	9202      	str	r2, [sp, #8]
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fe0c 	bl	80063c4 <xTaskCreateStatic>
 80057ac:	4603      	mov	r3, r0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e013      	b.n	80057da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d110      	bne.n	80057da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	f107 0310 	add.w	r3, r7, #16
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fe57 	bl	800647e <xTaskCreate>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <osThreadNew+0x11a>
            hTask = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057da:	693b      	ldr	r3, [r7, #16]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3728      	adds	r7, #40	; 0x28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ec:	f3ef 8305 	mrs	r3, IPSR
 80057f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80057f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <osDelay+0x1c>
    stat = osErrorISR;
 80057f8:	f06f 0305 	mvn.w	r3, #5
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e007      	b.n	8005810 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <osDelay+0x2c>
      vTaskDelay(ticks);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 ff92 	bl	8006734 <vTaskDelay>
    }
  }

  return (stat);
 8005810:	68fb      	ldr	r3, [r7, #12]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a07      	ldr	r2, [pc, #28]	; (8005848 <vApplicationGetIdleTaskMemory+0x2c>)
 800582c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4a06      	ldr	r2, [pc, #24]	; (800584c <vApplicationGetIdleTaskMemory+0x30>)
 8005832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	601a      	str	r2, [r3, #0]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000388 	.word	0x20000388
 800584c:	20000430 	.word	0x20000430

08005850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a07      	ldr	r2, [pc, #28]	; (800587c <vApplicationGetTimerTaskMemory+0x2c>)
 8005860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <vApplicationGetTimerTaskMemory+0x30>)
 8005866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586e:	601a      	str	r2, [r3, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000630 	.word	0x20000630
 8005880:	200006d8 	.word	0x200006d8

08005884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f103 0208 	add.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f103 0208 	add.w	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0208 	add.w	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d103      	bne.n	8005946 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e00c      	b.n	8005960 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3308      	adds	r3, #8
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e002      	b.n	8005954 <vListInsert+0x2e>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d2f6      	bcs.n	800594e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6892      	ldr	r2, [r2, #8]
 80059ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6852      	ldr	r2, [r2, #4]
 80059b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d103      	bne.n	80059cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1e5a      	subs	r2, r3, #1
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a16:	f002 f875 	bl	8007b04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a26:	fb01 f303 	mul.w	r3, r1, r3
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	3b01      	subs	r3, #1
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	22ff      	movs	r2, #255	; 0xff
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d114      	bne.n	8005a96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3310      	adds	r3, #16
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 f929 	bl	8006cd0 <xTaskRemoveFromEventList>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d012      	beq.n	8005aaa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <xQueueGenericReset+0xcc>)
 8005a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	e009      	b.n	8005aaa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3310      	adds	r3, #16
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fef2 	bl	8005884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3324      	adds	r3, #36	; 0x24
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff feed 	bl	8005884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aaa:	f002 f85b 	bl	8007b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005aae:	2301      	movs	r3, #1
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	; 0x38
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <xQueueGenericCreateStatic+0x52>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <xQueueGenericCreateStatic+0x56>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueGenericCreateStatic+0x58>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	623b      	str	r3, [r7, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <xQueueGenericCreateStatic+0x7e>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <xQueueGenericCreateStatic+0x82>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <xQueueGenericCreateStatic+0x84>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	61fb      	str	r3, [r7, #28]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b5a:	2350      	movs	r3, #80	; 0x50
 8005b5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b50      	cmp	r3, #80	; 0x50
 8005b62:	d00a      	beq.n	8005b7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	61bb      	str	r3, [r7, #24]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f805 	bl	8005bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3730      	adds	r7, #48	; 0x30
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bda:	2101      	movs	r1, #1
 8005bdc:	69b8      	ldr	r0, [r7, #24]
 8005bde:	f7ff ff05 	bl	80059ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08e      	sub	sp, #56	; 0x38
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c02:	2300      	movs	r3, #0
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <xQueueGenericSend+0x32>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <xQueueGenericSend+0x40>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <xQueueGenericSend+0x44>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <xQueueGenericSend+0x46>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <xQueueGenericSend+0x60>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSend+0x6e>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericSend+0x72>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericSend+0x74>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xQueueGenericSend+0x8e>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c82:	f001 f9e7 	bl	8007054 <xTaskGetSchedulerState>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <xQueueGenericSend+0x9e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericSend+0xa2>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueGenericSend+0xa4>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	61fb      	str	r3, [r7, #28]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cb2:	f001 ff27 	bl	8007b04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <xQueueGenericSend+0xd4>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d129      	bne.n	8005d1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cce:	f000 fa0b 	bl	80060e8 <prvCopyDataToQueue>
 8005cd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	3324      	adds	r3, #36	; 0x24
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fff5 	bl	8006cd0 <xTaskRemoveFromEventList>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d013      	beq.n	8005d14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cec:	4b3f      	ldr	r3, [pc, #252]	; (8005dec <xQueueGenericSend+0x1f8>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	e00a      	b.n	8005d14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d04:	4b39      	ldr	r3, [pc, #228]	; (8005dec <xQueueGenericSend+0x1f8>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d14:	f001 ff26 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e063      	b.n	8005de4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d22:	f001 ff1f 	bl	8007b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e05c      	b.n	8005de4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 f82f 	bl	8006d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d3e:	f001 ff11 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d42:	f000 fd9b 	bl	800687c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d46:	f001 fedd 	bl	8007b04 <vPortEnterCritical>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d50:	b25b      	sxtb	r3, r3
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d103      	bne.n	8005d60 <xQueueGenericSend+0x16c>
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d103      	bne.n	8005d76 <xQueueGenericSend+0x182>
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d76:	f001 fef5 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d7a:	1d3a      	adds	r2, r7, #4
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	4611      	mov	r1, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 f81e 	bl	8006dc4 <xTaskCheckForTimeOut>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d124      	bne.n	8005dd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d90:	f000 faa2 	bl	80062d8 <prvIsQueueFull>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	3310      	adds	r3, #16
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 ff44 	bl	8006c30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005daa:	f000 fa2d 	bl	8006208 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dae:	f000 fd73 	bl	8006898 <xTaskResumeAll>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f47f af7c 	bne.w	8005cb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <xQueueGenericSend+0x1f8>)
 8005dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	e772      	b.n	8005cb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dce:	f000 fa1b 	bl	8006208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dd2:	f000 fd61 	bl	8006898 <xTaskResumeAll>
 8005dd6:	e76c      	b.n	8005cb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dda:	f000 fa15 	bl	8006208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dde:	f000 fd5b 	bl	8006898 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005de2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3738      	adds	r7, #56	; 0x38
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b090      	sub	sp, #64	; 0x40
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d103      	bne.n	8005e2c <xQueueGenericSendFromISR+0x3c>
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <xQueueGenericSendFromISR+0x40>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <xQueueGenericSendFromISR+0x42>
 8005e30:	2300      	movs	r3, #0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d103      	bne.n	8005e5a <xQueueGenericSendFromISR+0x6a>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <xQueueGenericSendFromISR+0x6e>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <xQueueGenericSendFromISR+0x70>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	623b      	str	r3, [r7, #32]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e7a:	f001 ff25 	bl	8007cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61fa      	str	r2, [r7, #28]
 8005e94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <xQueueGenericSendFromISR+0xbc>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d12f      	bne.n	8005f0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ec2:	f000 f911 	bl	80060e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ec6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d112      	bne.n	8005ef6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d016      	beq.n	8005f06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	3324      	adds	r3, #36	; 0x24
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fef7 	bl	8006cd0 <xTaskRemoveFromEventList>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e007      	b.n	8005f06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005efa:	3301      	adds	r3, #1
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	b25a      	sxtb	r2, r3
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f06:	2301      	movs	r3, #1
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f0a:	e001      	b.n	8005f10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3740      	adds	r7, #64	; 0x40
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xQueueReceive+0x30>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	623b      	str	r3, [r7, #32]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <xQueueReceive+0x3e>
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <xQueueReceive+0x42>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <xQueueReceive+0x44>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueReceive+0x5e>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	61fb      	str	r3, [r7, #28]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f86:	f001 f865 	bl	8007054 <xTaskGetSchedulerState>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <xQueueReceive+0x6e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <xQueueReceive+0x72>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <xQueueReceive+0x74>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueReceive+0x8e>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	61bb      	str	r3, [r7, #24]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fb6:	f001 fda5 	bl	8007b04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01f      	beq.n	8006006 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fca:	f000 f8f7 	bl	80061bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1e5a      	subs	r2, r3, #1
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00f      	beq.n	8005ffe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	3310      	adds	r3, #16
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fe74 	bl	8006cd0 <xTaskRemoveFromEventList>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fee:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <xQueueReceive+0x1bc>)
 8005ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ffe:	f001 fdb1 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 8006002:	2301      	movs	r3, #1
 8006004:	e069      	b.n	80060da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d103      	bne.n	8006014 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800600c:	f001 fdaa 	bl	8007b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006010:	2300      	movs	r3, #0
 8006012:	e062      	b.n	80060da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800601a:	f107 0310 	add.w	r3, r7, #16
 800601e:	4618      	mov	r0, r3
 8006020:	f000 feba 	bl	8006d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006028:	f001 fd9c 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800602c:	f000 fc26 	bl	800687c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006030:	f001 fd68 	bl	8007b04 <vPortEnterCritical>
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800603a:	b25b      	sxtb	r3, r3
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d103      	bne.n	800604a <xQueueReceive+0x122>
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006050:	b25b      	sxtb	r3, r3
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d103      	bne.n	8006060 <xQueueReceive+0x138>
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006060:	f001 fd80 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006064:	1d3a      	adds	r2, r7, #4
 8006066:	f107 0310 	add.w	r3, r7, #16
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fea9 	bl	8006dc4 <xTaskCheckForTimeOut>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d123      	bne.n	80060c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607a:	f000 f917 	bl	80062ac <prvIsQueueEmpty>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d017      	beq.n	80060b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	3324      	adds	r3, #36	; 0x24
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fdcf 	bl	8006c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006094:	f000 f8b8 	bl	8006208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006098:	f000 fbfe 	bl	8006898 <xTaskResumeAll>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d189      	bne.n	8005fb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <xQueueReceive+0x1bc>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	e780      	b.n	8005fb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b6:	f000 f8a7 	bl	8006208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ba:	f000 fbed 	bl	8006898 <xTaskResumeAll>
 80060be:	e77a      	b.n	8005fb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c2:	f000 f8a1 	bl	8006208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060c6:	f000 fbe7 	bl	8006898 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060cc:	f000 f8ee 	bl	80062ac <prvIsQueueEmpty>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f43f af6f 	beq.w	8005fb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3730      	adds	r7, #48	; 0x30
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d14d      	bne.n	80061aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 ffbc 	bl	8007090 <xTaskPriorityDisinherit>
 8006118:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
 8006120:	e043      	b.n	80061aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d119      	bne.n	800615c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6858      	ldr	r0, [r3, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	461a      	mov	r2, r3
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	f002 f9c8 	bl	80084c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	441a      	add	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	d32b      	bcc.n	80061aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	e026      	b.n	80061aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68d8      	ldr	r0, [r3, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	461a      	mov	r2, r3
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	f002 f9ae 	bl	80084c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	425b      	negs	r3, r3
 8006176:	441a      	add	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d207      	bcs.n	8006198 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	425b      	negs	r3, r3
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d105      	bne.n	80061aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061b2:	697b      	ldr	r3, [r7, #20]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d018      	beq.n	8006200 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	441a      	add	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d303      	bcc.n	80061f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68d9      	ldr	r1, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	461a      	mov	r2, r3
 80061fa:	6838      	ldr	r0, [r7, #0]
 80061fc:	f002 f964 	bl	80084c8 <memcpy>
	}
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006210:	f001 fc78 	bl	8007b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800621a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800621c:	e011      	b.n	8006242 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d012      	beq.n	800624c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3324      	adds	r3, #36	; 0x24
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd50 	bl	8006cd0 <xTaskRemoveFromEventList>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006236:	f000 fe27 	bl	8006e88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	3b01      	subs	r3, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dce9      	bgt.n	800621e <prvUnlockQueue+0x16>
 800624a:	e000      	b.n	800624e <prvUnlockQueue+0x46>
					break;
 800624c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	22ff      	movs	r2, #255	; 0xff
 8006252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006256:	f001 fc85 	bl	8007b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800625a:	f001 fc53 	bl	8007b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006264:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006266:	e011      	b.n	800628c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3310      	adds	r3, #16
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fd2b 	bl	8006cd0 <xTaskRemoveFromEventList>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006280:	f000 fe02 	bl	8006e88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	3b01      	subs	r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800628c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006290:	2b00      	cmp	r3, #0
 8006292:	dce9      	bgt.n	8006268 <prvUnlockQueue+0x60>
 8006294:	e000      	b.n	8006298 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006296:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	22ff      	movs	r2, #255	; 0xff
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062a0:	f001 fc60 	bl	8007b64 <vPortExitCritical>
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062b4:	f001 fc26 	bl	8007b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e001      	b.n	80062ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062ca:	f001 fc4b 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 80062ce:	68fb      	ldr	r3, [r7, #12]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062e0:	f001 fc10 	bl	8007b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d102      	bne.n	80062f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e001      	b.n	80062fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062fa:	f001 fc33 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	e014      	b.n	8006342 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006318:	4a0f      	ldr	r2, [pc, #60]	; (8006358 <vQueueAddToRegistry+0x50>)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006324:	490c      	ldr	r1, [pc, #48]	; (8006358 <vQueueAddToRegistry+0x50>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <vQueueAddToRegistry+0x50>)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800633a:	e006      	b.n	800634a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3301      	adds	r3, #1
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b07      	cmp	r3, #7
 8006346:	d9e7      	bls.n	8006318 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000ad8 	.word	0x20000ad8

0800635c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800636c:	f001 fbca 	bl	8007b04 <vPortEnterCritical>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006376:	b25b      	sxtb	r3, r3
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d103      	bne.n	8006386 <vQueueWaitForMessageRestricted+0x2a>
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800638c:	b25b      	sxtb	r3, r3
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d103      	bne.n	800639c <vQueueWaitForMessageRestricted+0x40>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800639c:	f001 fbe2 	bl	8007b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fc61 	bl	8006c78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063b6:	6978      	ldr	r0, [r7, #20]
 80063b8:	f7ff ff26 	bl	8006208 <prvUnlockQueue>
	}
 80063bc:	bf00      	nop
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08e      	sub	sp, #56	; 0x38
 80063c8:	af04      	add	r7, sp, #16
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	623b      	str	r3, [r7, #32]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xTaskCreateStatic+0x46>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	61fb      	str	r3, [r7, #28]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800640a:	23a8      	movs	r3, #168	; 0xa8
 800640c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2ba8      	cmp	r3, #168	; 0xa8
 8006412:	d00a      	beq.n	800642a <xTaskCreateStatic+0x66>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61bb      	str	r3, [r7, #24]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800642a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01e      	beq.n	8006470 <xTaskCreateStatic+0xac>
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01b      	beq.n	8006470 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006440:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2202      	movs	r2, #2
 8006446:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800644a:	2300      	movs	r3, #0
 800644c:	9303      	str	r3, [sp, #12]
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	f107 0314 	add.w	r3, r7, #20
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f850 	bl	8006508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800646a:	f000 f8f3 	bl	8006654 <prvAddNewTaskToReadyList>
 800646e:	e001      	b.n	8006474 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006474:	697b      	ldr	r3, [r7, #20]
	}
 8006476:	4618      	mov	r0, r3
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08c      	sub	sp, #48	; 0x30
 8006482:	af04      	add	r7, sp, #16
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fc58 	bl	8007d48 <pvPortMalloc>
 8006498:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064a0:	20a8      	movs	r0, #168	; 0xa8
 80064a2:	f001 fc51 	bl	8007d48 <pvPortMalloc>
 80064a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
 80064b4:	e005      	b.n	80064c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f001 fd12 	bl	8007ee0 <vPortFree>
 80064bc:	e001      	b.n	80064c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	9302      	str	r3, [sp, #8]
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f80e 	bl	8006508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ec:	69f8      	ldr	r0, [r7, #28]
 80064ee:	f000 f8b1 	bl	8006654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e002      	b.n	80064fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064f8:	f04f 33ff 	mov.w	r3, #4294967295
 80064fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006500:	4618      	mov	r0, r3
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	461a      	mov	r2, r3
 8006520:	21a5      	movs	r1, #165	; 0xa5
 8006522:	f001 ff00 	bl	8008326 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006530:	3b01      	subs	r3, #1
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <prvInitialiseNewTask+0x58>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	617b      	str	r3, [r7, #20]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01f      	beq.n	80065a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e012      	b.n	8006592 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	7819      	ldrb	r1, [r3, #0]
 8006574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	3334      	adds	r3, #52	; 0x34
 800657c:	460a      	mov	r2, r1
 800657e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d006      	beq.n	800659a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	3301      	adds	r3, #1
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b0f      	cmp	r3, #15
 8006596:	d9e9      	bls.n	800656c <prvInitialiseNewTask+0x64>
 8006598:	e000      	b.n	800659c <prvInitialiseNewTask+0x94>
			{
				break;
 800659a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065a4:	e003      	b.n	80065ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	2b37      	cmp	r3, #55	; 0x37
 80065b2:	d901      	bls.n	80065b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065b4:	2337      	movs	r3, #55	; 0x37
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	2200      	movs	r2, #0
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff f978 	bl	80058c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	3318      	adds	r3, #24
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff f973 	bl	80058c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	3354      	adds	r3, #84	; 0x54
 8006608:	224c      	movs	r2, #76	; 0x4c
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fe8a 	bl	8008326 <memset>
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <prvInitialiseNewTask+0x140>)
 8006616:	659a      	str	r2, [r3, #88]	; 0x58
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	4a0c      	ldr	r2, [pc, #48]	; (800664c <prvInitialiseNewTask+0x144>)
 800661c:	65da      	str	r2, [r3, #92]	; 0x5c
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	4a0b      	ldr	r2, [pc, #44]	; (8006650 <prvInitialiseNewTask+0x148>)
 8006622:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	69b8      	ldr	r0, [r7, #24]
 800662a:	f001 f941 	bl	80078b0 <pxPortInitialiseStack>
 800662e:	4602      	mov	r2, r0
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006640:	bf00      	nop
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20001d24 	.word	0x20001d24
 800664c:	20001d8c 	.word	0x20001d8c
 8006650:	20001df4 	.word	0x20001df4

08006654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800665c:	f001 fa52 	bl	8007b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006660:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <prvAddNewTaskToReadyList+0xc4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3301      	adds	r3, #1
 8006666:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <prvAddNewTaskToReadyList+0xc4>)
 8006668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800666a:	4b2c      	ldr	r3, [pc, #176]	; (800671c <prvAddNewTaskToReadyList+0xc8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006672:	4a2a      	ldr	r2, [pc, #168]	; (800671c <prvAddNewTaskToReadyList+0xc8>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006678:	4b27      	ldr	r3, [pc, #156]	; (8006718 <prvAddNewTaskToReadyList+0xc4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d110      	bne.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006680:	f000 fc26 	bl	8006ed0 <prvInitialiseTaskLists>
 8006684:	e00d      	b.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006686:	4b26      	ldr	r3, [pc, #152]	; (8006720 <prvAddNewTaskToReadyList+0xcc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800668e:	4b23      	ldr	r3, [pc, #140]	; (800671c <prvAddNewTaskToReadyList+0xc8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	429a      	cmp	r2, r3
 800669a:	d802      	bhi.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <prvAddNewTaskToReadyList+0xc8>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066a2:	4b20      	ldr	r3, [pc, #128]	; (8006724 <prvAddNewTaskToReadyList+0xd0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <prvAddNewTaskToReadyList+0xd0>)
 80066aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <prvAddNewTaskToReadyList+0xd0>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <prvAddNewTaskToReadyList+0xd4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d903      	bls.n	80066c8 <prvAddNewTaskToReadyList+0x74>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	4a18      	ldr	r2, [pc, #96]	; (8006728 <prvAddNewTaskToReadyList+0xd4>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a15      	ldr	r2, [pc, #84]	; (800672c <prvAddNewTaskToReadyList+0xd8>)
 80066d6:	441a      	add	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7ff f8fd 	bl	80058de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066e4:	f001 fa3e 	bl	8007b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <prvAddNewTaskToReadyList+0xcc>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <prvAddNewTaskToReadyList+0xc8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d207      	bcs.n	800670e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <prvAddNewTaskToReadyList+0xdc>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000fec 	.word	0x20000fec
 800671c:	20000b18 	.word	0x20000b18
 8006720:	20000ff8 	.word	0x20000ff8
 8006724:	20001008 	.word	0x20001008
 8006728:	20000ff4 	.word	0x20000ff4
 800672c:	20000b1c 	.word	0x20000b1c
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d017      	beq.n	8006776 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <vTaskDelay+0x60>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <vTaskDelay+0x30>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	60bb      	str	r3, [r7, #8]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006764:	f000 f88a 	bl	800687c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006768:	2100      	movs	r1, #0
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fcfe 	bl	800716c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006770:	f000 f892 	bl	8006898 <xTaskResumeAll>
 8006774:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <vTaskDelay+0x64>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20001014 	.word	0x20001014
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067aa:	463a      	mov	r2, r7
 80067ac:	1d39      	adds	r1, r7, #4
 80067ae:	f107 0308 	add.w	r3, r7, #8
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff f832 	bl	800581c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	9202      	str	r2, [sp, #8]
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	2300      	movs	r3, #0
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	460a      	mov	r2, r1
 80067ca:	4924      	ldr	r1, [pc, #144]	; (800685c <vTaskStartScheduler+0xc0>)
 80067cc:	4824      	ldr	r0, [pc, #144]	; (8006860 <vTaskStartScheduler+0xc4>)
 80067ce:	f7ff fdf9 	bl	80063c4 <xTaskCreateStatic>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4a23      	ldr	r2, [pc, #140]	; (8006864 <vTaskStartScheduler+0xc8>)
 80067d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <vTaskStartScheduler+0xc8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067e0:	2301      	movs	r3, #1
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e001      	b.n	80067ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d102      	bne.n	80067f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067f0:	f000 fd10 	bl	8007214 <xTimerCreateTimerTask>
 80067f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d11b      	bne.n	8006834 <vTaskStartScheduler+0x98>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
}
 800680e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006810:	4b15      	ldr	r3, [pc, #84]	; (8006868 <vTaskStartScheduler+0xcc>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3354      	adds	r3, #84	; 0x54
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <vTaskStartScheduler+0xd0>)
 8006818:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <vTaskStartScheduler+0xd4>)
 800681c:	f04f 32ff 	mov.w	r2, #4294967295
 8006820:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <vTaskStartScheduler+0xd8>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <vTaskStartScheduler+0xdc>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800682e:	f001 f8c7 	bl	80079c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006832:	e00e      	b.n	8006852 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d10a      	bne.n	8006852 <vTaskStartScheduler+0xb6>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60fb      	str	r3, [r7, #12]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <vTaskStartScheduler+0xb4>
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	0800909c 	.word	0x0800909c
 8006860:	08006ea1 	.word	0x08006ea1
 8006864:	20001010 	.word	0x20001010
 8006868:	20000b18 	.word	0x20000b18
 800686c:	20000068 	.word	0x20000068
 8006870:	2000100c 	.word	0x2000100c
 8006874:	20000ff8 	.word	0x20000ff8
 8006878:	20000ff0 	.word	0x20000ff0

0800687c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006880:	4b04      	ldr	r3, [pc, #16]	; (8006894 <vTaskSuspendAll+0x18>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a03      	ldr	r2, [pc, #12]	; (8006894 <vTaskSuspendAll+0x18>)
 8006888:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800688a:	bf00      	nop
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20001014 	.word	0x20001014

08006898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068a6:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <xTaskResumeAll+0x118>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	603b      	str	r3, [r7, #0]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068c4:	f001 f91e 	bl	8007b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068c8:	4b39      	ldr	r3, [pc, #228]	; (80069b0 <xTaskResumeAll+0x118>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4a38      	ldr	r2, [pc, #224]	; (80069b0 <xTaskResumeAll+0x118>)
 80068d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d2:	4b37      	ldr	r3, [pc, #220]	; (80069b0 <xTaskResumeAll+0x118>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d162      	bne.n	80069a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068da:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <xTaskResumeAll+0x11c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d05e      	beq.n	80069a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068e2:	e02f      	b.n	8006944 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e4:	4b34      	ldr	r3, [pc, #208]	; (80069b8 <xTaskResumeAll+0x120>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3318      	adds	r3, #24
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff f851 	bl	8005998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff f84c 	bl	8005998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <xTaskResumeAll+0x124>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d903      	bls.n	8006914 <xTaskResumeAll+0x7c>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <xTaskResumeAll+0x124>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <xTaskResumeAll+0x128>)
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7fe ffd7 	bl	80058de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <xTaskResumeAll+0x12c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800693e:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <xTaskResumeAll+0x130>)
 8006940:	2201      	movs	r2, #1
 8006942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006944:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <xTaskResumeAll+0x120>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1cb      	bne.n	80068e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006952:	f000 fb5f 	bl	8007014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <xTaskResumeAll+0x134>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006962:	f000 f847 	bl	80069f4 <xTaskIncrementTick>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800696c:	4b16      	ldr	r3, [pc, #88]	; (80069c8 <xTaskResumeAll+0x130>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3b01      	subs	r3, #1
 8006976:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f1      	bne.n	8006962 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <xTaskResumeAll+0x134>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006984:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <xTaskResumeAll+0x130>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006990:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <xTaskResumeAll+0x138>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069a0:	f001 f8e0 	bl	8007b64 <vPortExitCritical>

	return xAlreadyYielded;
 80069a4:	68bb      	ldr	r3, [r7, #8]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20001014 	.word	0x20001014
 80069b4:	20000fec 	.word	0x20000fec
 80069b8:	20000fac 	.word	0x20000fac
 80069bc:	20000ff4 	.word	0x20000ff4
 80069c0:	20000b1c 	.word	0x20000b1c
 80069c4:	20000b18 	.word	0x20000b18
 80069c8:	20001000 	.word	0x20001000
 80069cc:	20000ffc 	.word	0x20000ffc
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <xTaskGetTickCount+0x1c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069e0:	687b      	ldr	r3, [r7, #4]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000ff0 	.word	0x20000ff0

080069f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069fe:	4b4f      	ldr	r3, [pc, #316]	; (8006b3c <xTaskIncrementTick+0x148>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 808f 	bne.w	8006b26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a08:	4b4d      	ldr	r3, [pc, #308]	; (8006b40 <xTaskIncrementTick+0x14c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a10:	4a4b      	ldr	r2, [pc, #300]	; (8006b40 <xTaskIncrementTick+0x14c>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d120      	bne.n	8006a5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a1c:	4b49      	ldr	r3, [pc, #292]	; (8006b44 <xTaskIncrementTick+0x150>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	603b      	str	r3, [r7, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xTaskIncrementTick+0x46>
 8006a3c:	4b41      	ldr	r3, [pc, #260]	; (8006b44 <xTaskIncrementTick+0x150>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	4b41      	ldr	r3, [pc, #260]	; (8006b48 <xTaskIncrementTick+0x154>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a3f      	ldr	r2, [pc, #252]	; (8006b44 <xTaskIncrementTick+0x150>)
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4a3f      	ldr	r2, [pc, #252]	; (8006b48 <xTaskIncrementTick+0x154>)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	4b3e      	ldr	r3, [pc, #248]	; (8006b4c <xTaskIncrementTick+0x158>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	4a3d      	ldr	r2, [pc, #244]	; (8006b4c <xTaskIncrementTick+0x158>)
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	f000 fadb 	bl	8007014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a5e:	4b3c      	ldr	r3, [pc, #240]	; (8006b50 <xTaskIncrementTick+0x15c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d349      	bcc.n	8006afc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a68:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <xTaskIncrementTick+0x150>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a72:	4b37      	ldr	r3, [pc, #220]	; (8006b50 <xTaskIncrementTick+0x15c>)
 8006a74:	f04f 32ff 	mov.w	r2, #4294967295
 8006a78:	601a      	str	r2, [r3, #0]
					break;
 8006a7a:	e03f      	b.n	8006afc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a7c:	4b31      	ldr	r3, [pc, #196]	; (8006b44 <xTaskIncrementTick+0x150>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d203      	bcs.n	8006a9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a94:	4a2e      	ldr	r2, [pc, #184]	; (8006b50 <xTaskIncrementTick+0x15c>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a9a:	e02f      	b.n	8006afc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fe ff79 	bl	8005998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe ff70 	bl	8005998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <xTaskIncrementTick+0x160>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d903      	bls.n	8006acc <xTaskIncrementTick+0xd8>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <xTaskIncrementTick+0x160>)
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <xTaskIncrementTick+0x164>)
 8006ada:	441a      	add	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7fe fefb 	bl	80058de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <xTaskIncrementTick+0x168>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d3b8      	bcc.n	8006a68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006afa:	e7b5      	b.n	8006a68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006afc:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <xTaskIncrementTick+0x168>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b02:	4915      	ldr	r1, [pc, #84]	; (8006b58 <xTaskIncrementTick+0x164>)
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d901      	bls.n	8006b18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <xTaskIncrementTick+0x16c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e004      	b.n	8006b30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b26:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <xTaskIncrementTick+0x170>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	4a0d      	ldr	r2, [pc, #52]	; (8006b64 <xTaskIncrementTick+0x170>)
 8006b2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b30:	697b      	ldr	r3, [r7, #20]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20001014 	.word	0x20001014
 8006b40:	20000ff0 	.word	0x20000ff0
 8006b44:	20000fa4 	.word	0x20000fa4
 8006b48:	20000fa8 	.word	0x20000fa8
 8006b4c:	20001004 	.word	0x20001004
 8006b50:	2000100c 	.word	0x2000100c
 8006b54:	20000ff4 	.word	0x20000ff4
 8006b58:	20000b1c 	.word	0x20000b1c
 8006b5c:	20000b18 	.word	0x20000b18
 8006b60:	20001000 	.word	0x20001000
 8006b64:	20000ffc 	.word	0x20000ffc

08006b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <vTaskSwitchContext+0xb0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b76:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <vTaskSwitchContext+0xb4>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b7c:	e046      	b.n	8006c0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b7e:	4b27      	ldr	r3, [pc, #156]	; (8006c1c <vTaskSwitchContext+0xb4>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b84:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <vTaskSwitchContext+0xb8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	e010      	b.n	8006bae <vTaskSwitchContext+0x46>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	607b      	str	r3, [r7, #4]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <vTaskSwitchContext+0x3e>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	491d      	ldr	r1, [pc, #116]	; (8006c24 <vTaskSwitchContext+0xbc>)
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0e4      	beq.n	8006b8c <vTaskSwitchContext+0x24>
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <vTaskSwitchContext+0xbc>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	605a      	str	r2, [r3, #4]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3308      	adds	r3, #8
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d104      	bne.n	8006bf2 <vTaskSwitchContext+0x8a>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	4a0b      	ldr	r2, [pc, #44]	; (8006c28 <vTaskSwitchContext+0xc0>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <vTaskSwitchContext+0xb8>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <vTaskSwitchContext+0xc0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3354      	adds	r3, #84	; 0x54
 8006c08:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <vTaskSwitchContext+0xc4>)
 8006c0a:	6013      	str	r3, [r2, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	20001014 	.word	0x20001014
 8006c1c:	20001000 	.word	0x20001000
 8006c20:	20000ff4 	.word	0x20000ff4
 8006c24:	20000b1c 	.word	0x20000b1c
 8006c28:	20000b18 	.word	0x20000b18
 8006c2c:	20000068 	.word	0x20000068

08006c30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <vTaskPlaceOnEventList+0x44>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3318      	adds	r3, #24
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fe fe61 	bl	8005926 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c64:	2101      	movs	r1, #1
 8006c66:	6838      	ldr	r0, [r7, #0]
 8006c68:	f000 fa80 	bl	800716c <prvAddCurrentTaskToDelayedList>
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000b18 	.word	0x20000b18

08006c78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	617b      	str	r3, [r7, #20]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <vTaskPlaceOnEventListRestricted+0x54>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3318      	adds	r3, #24
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fe fe18 	bl	80058de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	68b8      	ldr	r0, [r7, #8]
 8006cbe:	f000 fa55 	bl	800716c <prvAddCurrentTaskToDelayedList>
	}
 8006cc2:	bf00      	nop
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000b18 	.word	0x20000b18

08006cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	3318      	adds	r3, #24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe fe49 	bl	8005998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d06:	4b1e      	ldr	r3, [pc, #120]	; (8006d80 <xTaskRemoveFromEventList+0xb0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11d      	bne.n	8006d4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	3304      	adds	r3, #4
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fe40 	bl	8005998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <xTaskRemoveFromEventList+0xb4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d903      	bls.n	8006d2c <xTaskRemoveFromEventList+0x5c>
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <xTaskRemoveFromEventList+0xb4>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <xTaskRemoveFromEventList+0xb8>)
 8006d3a:	441a      	add	r2, r3
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4619      	mov	r1, r3
 8006d42:	4610      	mov	r0, r2
 8006d44:	f7fe fdcb 	bl	80058de <vListInsertEnd>
 8006d48:	e005      	b.n	8006d56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	4619      	mov	r1, r3
 8006d50:	480e      	ldr	r0, [pc, #56]	; (8006d8c <xTaskRemoveFromEventList+0xbc>)
 8006d52:	f7fe fdc4 	bl	80058de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <xTaskRemoveFromEventList+0xc0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d905      	bls.n	8006d70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <xTaskRemoveFromEventList+0xc4>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e001      	b.n	8006d74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d74:	697b      	ldr	r3, [r7, #20]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20001014 	.word	0x20001014
 8006d84:	20000ff4 	.word	0x20000ff4
 8006d88:	20000b1c 	.word	0x20000b1c
 8006d8c:	20000fac 	.word	0x20000fac
 8006d90:	20000b18 	.word	0x20000b18
 8006d94:	20001000 	.word	0x20001000

08006d98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <vTaskInternalSetTimeOutState+0x24>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <vTaskInternalSetTimeOutState+0x28>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	605a      	str	r2, [r3, #4]
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	20001004 	.word	0x20001004
 8006dc0:	20000ff0 	.word	0x20000ff0

08006dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	613b      	str	r3, [r7, #16]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e06:	f000 fe7d 	bl	8007b04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <xTaskCheckForTimeOut+0xbc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d102      	bne.n	8006e2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	e023      	b.n	8006e72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <xTaskCheckForTimeOut+0xc0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d007      	beq.n	8006e46 <xTaskCheckForTimeOut+0x82>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d302      	bcc.n	8006e46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	e015      	b.n	8006e72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d20b      	bcs.n	8006e68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	1ad2      	subs	r2, r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff9b 	bl	8006d98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	e004      	b.n	8006e72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e72:	f000 fe77 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 8006e76:	69fb      	ldr	r3, [r7, #28]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20000ff0 	.word	0x20000ff0
 8006e84:	20001004 	.word	0x20001004

08006e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <vTaskMissedYield+0x14>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	20001000 	.word	0x20001000

08006ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ea8:	f000 f852 	bl	8006f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <prvIdleTask+0x28>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d9f9      	bls.n	8006ea8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <prvIdleTask+0x2c>)
 8006eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ec4:	e7f0      	b.n	8006ea8 <prvIdleTask+0x8>
 8006ec6:	bf00      	nop
 8006ec8:	20000b1c 	.word	0x20000b1c
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	607b      	str	r3, [r7, #4]
 8006eda:	e00c      	b.n	8006ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4a12      	ldr	r2, [pc, #72]	; (8006f30 <prvInitialiseTaskLists+0x60>)
 8006ee8:	4413      	add	r3, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fcca 	bl	8005884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b37      	cmp	r3, #55	; 0x37
 8006efa:	d9ef      	bls.n	8006edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006efc:	480d      	ldr	r0, [pc, #52]	; (8006f34 <prvInitialiseTaskLists+0x64>)
 8006efe:	f7fe fcc1 	bl	8005884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f02:	480d      	ldr	r0, [pc, #52]	; (8006f38 <prvInitialiseTaskLists+0x68>)
 8006f04:	f7fe fcbe 	bl	8005884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f08:	480c      	ldr	r0, [pc, #48]	; (8006f3c <prvInitialiseTaskLists+0x6c>)
 8006f0a:	f7fe fcbb 	bl	8005884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f0e:	480c      	ldr	r0, [pc, #48]	; (8006f40 <prvInitialiseTaskLists+0x70>)
 8006f10:	f7fe fcb8 	bl	8005884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f14:	480b      	ldr	r0, [pc, #44]	; (8006f44 <prvInitialiseTaskLists+0x74>)
 8006f16:	f7fe fcb5 	bl	8005884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <prvInitialiseTaskLists+0x78>)
 8006f1c:	4a05      	ldr	r2, [pc, #20]	; (8006f34 <prvInitialiseTaskLists+0x64>)
 8006f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <prvInitialiseTaskLists+0x7c>)
 8006f22:	4a05      	ldr	r2, [pc, #20]	; (8006f38 <prvInitialiseTaskLists+0x68>)
 8006f24:	601a      	str	r2, [r3, #0]
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000b1c 	.word	0x20000b1c
 8006f34:	20000f7c 	.word	0x20000f7c
 8006f38:	20000f90 	.word	0x20000f90
 8006f3c:	20000fac 	.word	0x20000fac
 8006f40:	20000fc0 	.word	0x20000fc0
 8006f44:	20000fd8 	.word	0x20000fd8
 8006f48:	20000fa4 	.word	0x20000fa4
 8006f4c:	20000fa8 	.word	0x20000fa8

08006f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f56:	e019      	b.n	8006f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f58:	f000 fdd4 	bl	8007b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5c:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <prvCheckTasksWaitingTermination+0x50>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe fd15 	bl	8005998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <prvCheckTasksWaitingTermination+0x54>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <prvCheckTasksWaitingTermination+0x54>)
 8006f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <prvCheckTasksWaitingTermination+0x58>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <prvCheckTasksWaitingTermination+0x58>)
 8006f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f82:	f000 fdef 	bl	8007b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f810 	bl	8006fac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <prvCheckTasksWaitingTermination+0x58>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e1      	bne.n	8006f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000fc0 	.word	0x20000fc0
 8006fa4:	20000fec 	.word	0x20000fec
 8006fa8:	20000fd4 	.word	0x20000fd4

08006fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3354      	adds	r3, #84	; 0x54
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f9cd 	bl	8008358 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d108      	bne.n	8006fda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 ff87 	bl	8007ee0 <vPortFree>
				vPortFree( pxTCB );
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 ff84 	bl	8007ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fd8:	e018      	b.n	800700c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d103      	bne.n	8006fec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 ff7b 	bl	8007ee0 <vPortFree>
	}
 8006fea:	e00f      	b.n	800700c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d00a      	beq.n	800700c <prvDeleteTCB+0x60>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60fb      	str	r3, [r7, #12]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <prvDeleteTCB+0x5e>
	}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <prvResetNextTaskUnblockTime+0x38>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <prvResetNextTaskUnblockTime+0x3c>)
 8007026:	f04f 32ff 	mov.w	r2, #4294967295
 800702a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800702c:	e008      	b.n	8007040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <prvResetNextTaskUnblockTime+0x38>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a04      	ldr	r2, [pc, #16]	; (8007050 <prvResetNextTaskUnblockTime+0x3c>)
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000fa4 	.word	0x20000fa4
 8007050:	2000100c 	.word	0x2000100c

08007054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <xTaskGetSchedulerState+0x34>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007062:	2301      	movs	r3, #1
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	e008      	b.n	800707a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007068:	4b08      	ldr	r3, [pc, #32]	; (800708c <xTaskGetSchedulerState+0x38>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007070:	2302      	movs	r3, #2
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	e001      	b.n	800707a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800707a:	687b      	ldr	r3, [r7, #4]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	20000ff8 	.word	0x20000ff8
 800708c:	20001014 	.word	0x20001014

08007090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d056      	beq.n	8007154 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070a6:	4b2e      	ldr	r3, [pc, #184]	; (8007160 <xTaskPriorityDisinherit+0xd0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d00a      	beq.n	80070c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	60bb      	str	r3, [r7, #8]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e8:	1e5a      	subs	r2, r3, #1
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d02c      	beq.n	8007154 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d128      	bne.n	8007154 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3304      	adds	r3, #4
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fc46 	bl	8005998 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <xTaskPriorityDisinherit+0xd4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d903      	bls.n	8007134 <xTaskPriorityDisinherit+0xa4>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4a0c      	ldr	r2, [pc, #48]	; (8007164 <xTaskPriorityDisinherit+0xd4>)
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4a09      	ldr	r2, [pc, #36]	; (8007168 <xTaskPriorityDisinherit+0xd8>)
 8007142:	441a      	add	r2, r3
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe fbc7 	bl	80058de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007154:	697b      	ldr	r3, [r7, #20]
	}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000b18 	.word	0x20000b18
 8007164:	20000ff4 	.word	0x20000ff4
 8007168:	20000b1c 	.word	0x20000b1c

0800716c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007176:	4b21      	ldr	r3, [pc, #132]	; (80071fc <prvAddCurrentTaskToDelayedList+0x90>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800717c:	4b20      	ldr	r3, [pc, #128]	; (8007200 <prvAddCurrentTaskToDelayedList+0x94>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3304      	adds	r3, #4
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fc08 	bl	8005998 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718e:	d10a      	bne.n	80071a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007196:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <prvAddCurrentTaskToDelayedList+0x94>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4819      	ldr	r0, [pc, #100]	; (8007204 <prvAddCurrentTaskToDelayedList+0x98>)
 80071a0:	f7fe fb9d 	bl	80058de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071a4:	e026      	b.n	80071f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4413      	add	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071ae:	4b14      	ldr	r3, [pc, #80]	; (8007200 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d209      	bcs.n	80071d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <prvAddCurrentTaskToDelayedList+0x94>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f7fe fbab 	bl	8005926 <vListInsert>
}
 80071d0:	e010      	b.n	80071f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071d2:	4b0e      	ldr	r3, [pc, #56]	; (800720c <prvAddCurrentTaskToDelayedList+0xa0>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <prvAddCurrentTaskToDelayedList+0x94>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3304      	adds	r3, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fba1 	bl	8005926 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d202      	bcs.n	80071f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071ee:	4a08      	ldr	r2, [pc, #32]	; (8007210 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6013      	str	r3, [r2, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000ff0 	.word	0x20000ff0
 8007200:	20000b18 	.word	0x20000b18
 8007204:	20000fd8 	.word	0x20000fd8
 8007208:	20000fa8 	.word	0x20000fa8
 800720c:	20000fa4 	.word	0x20000fa4
 8007210:	2000100c 	.word	0x2000100c

08007214 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800721e:	f000 fb07 	bl	8007830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007222:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <xTimerCreateTimerTask+0x80>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d021      	beq.n	800726e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007232:	1d3a      	adds	r2, r7, #4
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe fb07 	bl	8005850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	9202      	str	r2, [sp, #8]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	2302      	movs	r3, #2
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2300      	movs	r3, #0
 8007252:	460a      	mov	r2, r1
 8007254:	4910      	ldr	r1, [pc, #64]	; (8007298 <xTimerCreateTimerTask+0x84>)
 8007256:	4811      	ldr	r0, [pc, #68]	; (800729c <xTimerCreateTimerTask+0x88>)
 8007258:	f7ff f8b4 	bl	80063c4 <xTaskCreateStatic>
 800725c:	4603      	mov	r3, r0
 800725e:	4a10      	ldr	r2, [pc, #64]	; (80072a0 <xTimerCreateTimerTask+0x8c>)
 8007260:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <xTimerCreateTimerTask+0x8c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800726a:	2301      	movs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	613b      	str	r3, [r7, #16]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800728a:	697b      	ldr	r3, [r7, #20]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20001048 	.word	0x20001048
 8007298:	080090a4 	.word	0x080090a4
 800729c:	080073d9 	.word	0x080073d9
 80072a0:	2000104c 	.word	0x2000104c

080072a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	623b      	str	r3, [r7, #32]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <xTimerGenericCommand+0x98>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d02a      	beq.n	8007330 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	dc18      	bgt.n	800731e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072ec:	f7ff feb2 	bl	8007054 <xTaskGetSchedulerState>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d109      	bne.n	800730a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072f6:	4b11      	ldr	r3, [pc, #68]	; (800733c <xTimerGenericCommand+0x98>)
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	f107 0110 	add.w	r1, r7, #16
 80072fe:	2300      	movs	r3, #0
 8007300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007302:	f7fe fc77 	bl	8005bf4 <xQueueGenericSend>
 8007306:	6278      	str	r0, [r7, #36]	; 0x24
 8007308:	e012      	b.n	8007330 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800730a:	4b0c      	ldr	r3, [pc, #48]	; (800733c <xTimerGenericCommand+0x98>)
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	f107 0110 	add.w	r1, r7, #16
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	f7fe fc6d 	bl	8005bf4 <xQueueGenericSend>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24
 800731c:	e008      	b.n	8007330 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <xTimerGenericCommand+0x98>)
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f107 0110 	add.w	r1, r7, #16
 8007326:	2300      	movs	r3, #0
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	f7fe fd61 	bl	8005df0 <xQueueGenericSendFromISR>
 800732e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007332:	4618      	mov	r0, r3
 8007334:	3728      	adds	r7, #40	; 0x28
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20001048 	.word	0x20001048

08007340 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800734a:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <prvProcessExpiredTimer+0x94>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3304      	adds	r3, #4
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe fb1d 	bl	8005998 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d022      	beq.n	80073b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	18d1      	adds	r1, r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	6978      	ldr	r0, [r7, #20]
 800737a:	f000 f8d1 	bl	8007520 <prvInsertTimerInActiveList>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01f      	beq.n	80073c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007384:	2300      	movs	r3, #0
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2300      	movs	r3, #0
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	2100      	movs	r1, #0
 800738e:	6978      	ldr	r0, [r7, #20]
 8007390:	f7ff ff88 	bl	80072a4 <xTimerGenericCommand>
 8007394:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d113      	bne.n	80073c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60fb      	str	r3, [r7, #12]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	6978      	ldr	r0, [r7, #20]
 80073ca:	4798      	blx	r3
}
 80073cc:	bf00      	nop
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20001040 	.word	0x20001040

080073d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073e0:	f107 0308 	add.w	r3, r7, #8
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f857 	bl	8007498 <prvGetNextExpireTime>
 80073ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f803 	bl	80073fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073f6:	f000 f8d5 	bl	80075a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073fa:	e7f1      	b.n	80073e0 <prvTimerTask+0x8>

080073fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007406:	f7ff fa39 	bl	800687c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800740a:	f107 0308 	add.w	r3, r7, #8
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f866 	bl	80074e0 <prvSampleTimeNow>
 8007414:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d130      	bne.n	800747e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <prvProcessTimerOrBlockTask+0x3c>
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	429a      	cmp	r2, r3
 8007428:	d806      	bhi.n	8007438 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800742a:	f7ff fa35 	bl	8006898 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff ff85 	bl	8007340 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007436:	e024      	b.n	8007482 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <prvProcessTimerOrBlockTask+0x90>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <prvProcessTimerOrBlockTask+0x50>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <prvProcessTimerOrBlockTask+0x52>
 800744c:	2300      	movs	r3, #0
 800744e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <prvProcessTimerOrBlockTask+0x94>)
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4619      	mov	r1, r3
 800745e:	f7fe ff7d 	bl	800635c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007462:	f7ff fa19 	bl	8006898 <xTaskResumeAll>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <prvProcessTimerOrBlockTask+0x98>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
}
 800747c:	e001      	b.n	8007482 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800747e:	f7ff fa0b 	bl	8006898 <xTaskResumeAll>
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20001044 	.word	0x20001044
 8007490:	20001048 	.word	0x20001048
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <prvGetNextExpireTime+0x44>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <prvGetNextExpireTime+0x16>
 80074aa:	2201      	movs	r2, #1
 80074ac:	e000      	b.n	80074b0 <prvGetNextExpireTime+0x18>
 80074ae:	2200      	movs	r2, #0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <prvGetNextExpireTime+0x44>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e001      	b.n	80074cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20001040 	.word	0x20001040

080074e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074e8:	f7ff fa74 	bl	80069d4 <xTaskGetTickCount>
 80074ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <prvSampleTimeNow+0x3c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d205      	bcs.n	8007504 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074f8:	f000 f936 	bl	8007768 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	e002      	b.n	800750a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800750a:	4a04      	ldr	r2, [pc, #16]	; (800751c <prvSampleTimeNow+0x3c>)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20001050 	.word	0x20001050

08007520 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	429a      	cmp	r2, r3
 8007544:	d812      	bhi.n	800756c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	1ad2      	subs	r2, r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e01b      	b.n	8007592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <prvInsertTimerInActiveList+0x7c>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe f9de 	bl	8005926 <vListInsert>
 800756a:	e012      	b.n	8007592 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d206      	bcs.n	8007582 <prvInsertTimerInActiveList+0x62>
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d302      	bcc.n	8007582 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e007      	b.n	8007592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <prvInsertTimerInActiveList+0x80>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3304      	adds	r3, #4
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f7fe f9ca 	bl	8005926 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007592:	697b      	ldr	r3, [r7, #20]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20001044 	.word	0x20001044
 80075a0:	20001040 	.word	0x20001040

080075a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08e      	sub	sp, #56	; 0x38
 80075a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075aa:	e0ca      	b.n	8007742 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da18      	bge.n	80075e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	3304      	adds	r3, #4
 80075b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	61fb      	str	r3, [r7, #28]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075da:	6850      	ldr	r0, [r2, #4]
 80075dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075de:	6892      	ldr	r2, [r2, #8]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f2c0 80ab 	blt.w	8007742 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	3304      	adds	r3, #4
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe f9cb 	bl	8005998 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007602:	463b      	mov	r3, r7
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff ff6b 	bl	80074e0 <prvSampleTimeNow>
 800760a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b09      	cmp	r3, #9
 8007610:	f200 8096 	bhi.w	8007740 <prvProcessReceivedCommands+0x19c>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <prvProcessReceivedCommands+0x78>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007645 	.word	0x08007645
 8007620:	08007645 	.word	0x08007645
 8007624:	08007645 	.word	0x08007645
 8007628:	080076b9 	.word	0x080076b9
 800762c:	080076cd 	.word	0x080076cd
 8007630:	08007717 	.word	0x08007717
 8007634:	08007645 	.word	0x08007645
 8007638:	08007645 	.word	0x08007645
 800763c:	080076b9 	.word	0x080076b9
 8007640:	080076cd 	.word	0x080076cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	18d1      	adds	r1, r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007664:	f7ff ff5c 	bl	8007520 <prvInsertTimerInActiveList>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d069      	beq.n	8007742 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d05e      	beq.n	8007742 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	441a      	add	r2, r3
 800768c:	2300      	movs	r3, #0
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	2300      	movs	r3, #0
 8007692:	2100      	movs	r1, #0
 8007694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007696:	f7ff fe05 	bl	80072a4 <xTimerGenericCommand>
 800769a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d14f      	bne.n	8007742 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	61bb      	str	r3, [r7, #24]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80076ca:	e03a      	b.n	8007742 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	617b      	str	r3, [r7, #20]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	18d1      	adds	r1, r2, r3
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007710:	f7ff ff06 	bl	8007520 <prvInsertTimerInActiveList>
					break;
 8007714:	e015      	b.n	8007742 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007726:	f000 fbdb 	bl	8007ee0 <vPortFree>
 800772a:	e00a      	b.n	8007742 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	b2da      	uxtb	r2, r3
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800773e:	e000      	b.n	8007742 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007740:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <prvProcessReceivedCommands+0x1c0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	1d39      	adds	r1, r7, #4
 8007748:	2200      	movs	r2, #0
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fbec 	bl	8005f28 <xQueueReceive>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f af2a 	bne.w	80075ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007758:	bf00      	nop
 800775a:	bf00      	nop
 800775c:	3730      	adds	r7, #48	; 0x30
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20001048 	.word	0x20001048

08007768 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800776e:	e048      	b.n	8007802 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007770:	4b2d      	ldr	r3, [pc, #180]	; (8007828 <prvSwitchTimerLists+0xc0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800777a:	4b2b      	ldr	r3, [pc, #172]	; (8007828 <prvSwitchTimerLists+0xc0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3304      	adds	r3, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe f905 	bl	8005998 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d02e      	beq.n	8007802 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4413      	add	r3, r2
 80077ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d90e      	bls.n	80077d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077c2:	4b19      	ldr	r3, [pc, #100]	; (8007828 <prvSwitchTimerLists+0xc0>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7fe f8aa 	bl	8005926 <vListInsert>
 80077d2:	e016      	b.n	8007802 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077d4:	2300      	movs	r3, #0
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	2300      	movs	r3, #0
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	2100      	movs	r1, #0
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff fd60 	bl	80072a4 <xTimerGenericCommand>
 80077e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	603b      	str	r3, [r7, #0]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <prvSwitchTimerLists+0xc0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1b1      	bne.n	8007770 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <prvSwitchTimerLists+0xc0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007812:	4b06      	ldr	r3, [pc, #24]	; (800782c <prvSwitchTimerLists+0xc4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a04      	ldr	r2, [pc, #16]	; (8007828 <prvSwitchTimerLists+0xc0>)
 8007818:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800781a:	4a04      	ldr	r2, [pc, #16]	; (800782c <prvSwitchTimerLists+0xc4>)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	6013      	str	r3, [r2, #0]
}
 8007820:	bf00      	nop
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20001040 	.word	0x20001040
 800782c:	20001044 	.word	0x20001044

08007830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007836:	f000 f965 	bl	8007b04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <prvCheckForValidListAndQueue+0x60>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d120      	bne.n	8007884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007842:	4814      	ldr	r0, [pc, #80]	; (8007894 <prvCheckForValidListAndQueue+0x64>)
 8007844:	f7fe f81e 	bl	8005884 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007848:	4813      	ldr	r0, [pc, #76]	; (8007898 <prvCheckForValidListAndQueue+0x68>)
 800784a:	f7fe f81b 	bl	8005884 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800784e:	4b13      	ldr	r3, [pc, #76]	; (800789c <prvCheckForValidListAndQueue+0x6c>)
 8007850:	4a10      	ldr	r2, [pc, #64]	; (8007894 <prvCheckForValidListAndQueue+0x64>)
 8007852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007854:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <prvCheckForValidListAndQueue+0x70>)
 8007856:	4a10      	ldr	r2, [pc, #64]	; (8007898 <prvCheckForValidListAndQueue+0x68>)
 8007858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <prvCheckForValidListAndQueue+0x74>)
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <prvCheckForValidListAndQueue+0x78>)
 8007862:	2110      	movs	r1, #16
 8007864:	200a      	movs	r0, #10
 8007866:	f7fe f929 	bl	8005abc <xQueueGenericCreateStatic>
 800786a:	4603      	mov	r3, r0
 800786c:	4a08      	ldr	r2, [pc, #32]	; (8007890 <prvCheckForValidListAndQueue+0x60>)
 800786e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <prvCheckForValidListAndQueue+0x60>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <prvCheckForValidListAndQueue+0x60>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	490b      	ldr	r1, [pc, #44]	; (80078ac <prvCheckForValidListAndQueue+0x7c>)
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fd42 	bl	8006308 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007884:	f000 f96e 	bl	8007b64 <vPortExitCritical>
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20001048 	.word	0x20001048
 8007894:	20001018 	.word	0x20001018
 8007898:	2000102c 	.word	0x2000102c
 800789c:	20001040 	.word	0x20001040
 80078a0:	20001044 	.word	0x20001044
 80078a4:	200010f4 	.word	0x200010f4
 80078a8:	20001054 	.word	0x20001054
 80078ac:	080090ac 	.word	0x080090ac

080078b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3b04      	subs	r3, #4
 80078c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3b04      	subs	r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0201 	bic.w	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3b04      	subs	r3, #4
 80078de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e0:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <pxPortInitialiseStack+0x64>)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3b14      	subs	r3, #20
 80078ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f06f 0202 	mvn.w	r2, #2
 80078fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b20      	subs	r3, #32
 8007904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	08007919 	.word	0x08007919

08007918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <prvTaskExitError+0x54>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d00a      	beq.n	8007942 <prvTaskExitError+0x2a>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <prvTaskExitError+0x28>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60bb      	str	r3, [r7, #8]
}
 8007954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007956:	bf00      	nop
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0fc      	beq.n	8007958 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	2000000c 	.word	0x2000000c

08007970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <pxCurrentTCBConst2>)
 8007972:	6819      	ldr	r1, [r3, #0]
 8007974:	6808      	ldr	r0, [r1, #0]
 8007976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797a:	f380 8809 	msr	PSP, r0
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f380 8811 	msr	BASEPRI, r0
 800798a:	4770      	bx	lr
 800798c:	f3af 8000 	nop.w

08007990 <pxCurrentTCBConst2>:
 8007990:	20000b18 	.word	0x20000b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop

08007998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007998:	4808      	ldr	r0, [pc, #32]	; (80079bc <prvPortStartFirstTask+0x24>)
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	6800      	ldr	r0, [r0, #0]
 800799e:	f380 8808 	msr	MSP, r0
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8814 	msr	CONTROL, r0
 80079aa:	b662      	cpsie	i
 80079ac:	b661      	cpsie	f
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	df00      	svc	0
 80079b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ba:	bf00      	nop
 80079bc:	e000ed08 	.word	0xe000ed08

080079c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079c6:	4b46      	ldr	r3, [pc, #280]	; (8007ae0 <xPortStartScheduler+0x120>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a46      	ldr	r2, [pc, #280]	; (8007ae4 <xPortStartScheduler+0x124>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d10a      	bne.n	80079e6 <xPortStartScheduler+0x26>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	613b      	str	r3, [r7, #16]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079e6:	4b3e      	ldr	r3, [pc, #248]	; (8007ae0 <xPortStartScheduler+0x120>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a3f      	ldr	r2, [pc, #252]	; (8007ae8 <xPortStartScheduler+0x128>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10a      	bne.n	8007a06 <xPortStartScheduler+0x46>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	60fb      	str	r3, [r7, #12]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a06:	4b39      	ldr	r3, [pc, #228]	; (8007aec <xPortStartScheduler+0x12c>)
 8007a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4b31      	ldr	r3, [pc, #196]	; (8007af0 <xPortStartScheduler+0x130>)
 8007a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a2e:	4b31      	ldr	r3, [pc, #196]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a30:	2207      	movs	r2, #7
 8007a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a34:	e009      	b.n	8007a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a36:	4b2f      	ldr	r3, [pc, #188]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4a2d      	ldr	r2, [pc, #180]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d0ef      	beq.n	8007a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a56:	4b27      	ldr	r3, [pc, #156]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1c3 0307 	rsb	r3, r3, #7
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d00a      	beq.n	8007a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60bb      	str	r3, [r7, #8]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a78:	4b1e      	ldr	r3, [pc, #120]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	4a1d      	ldr	r2, [pc, #116]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a82:	4b1c      	ldr	r3, [pc, #112]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a8a:	4a1a      	ldr	r2, [pc, #104]	; (8007af4 <xPortStartScheduler+0x134>)
 8007a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a96:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <xPortStartScheduler+0x138>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <xPortStartScheduler+0x138>)
 8007a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <xPortStartScheduler+0x138>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a14      	ldr	r2, [pc, #80]	; (8007af8 <xPortStartScheduler+0x138>)
 8007aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007aae:	f000 f8dd 	bl	8007c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ab2:	4b12      	ldr	r3, [pc, #72]	; (8007afc <xPortStartScheduler+0x13c>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ab8:	f000 f8fc 	bl	8007cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007abc:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <xPortStartScheduler+0x140>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0f      	ldr	r2, [pc, #60]	; (8007b00 <xPortStartScheduler+0x140>)
 8007ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ac8:	f7ff ff66 	bl	8007998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007acc:	f7ff f84c 	bl	8006b68 <vTaskSwitchContext>
	prvTaskExitError();
 8007ad0:	f7ff ff22 	bl	8007918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	e000ed00 	.word	0xe000ed00
 8007ae4:	410fc271 	.word	0x410fc271
 8007ae8:	410fc270 	.word	0x410fc270
 8007aec:	e000e400 	.word	0xe000e400
 8007af0:	20001144 	.word	0x20001144
 8007af4:	20001148 	.word	0x20001148
 8007af8:	e000ed20 	.word	0xe000ed20
 8007afc:	2000000c 	.word	0x2000000c
 8007b00:	e000ef34 	.word	0xe000ef34

08007b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	607b      	str	r3, [r7, #4]
}
 8007b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <vPortEnterCritical+0x58>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a0d      	ldr	r2, [pc, #52]	; (8007b5c <vPortEnterCritical+0x58>)
 8007b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b28:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <vPortEnterCritical+0x58>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10f      	bne.n	8007b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <vPortEnterCritical+0x5c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	603b      	str	r3, [r7, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vPortEnterCritical+0x4a>
	}
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b6a:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <vPortExitCritical+0x50>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <vPortExitCritical+0x24>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	607b      	str	r3, [r7, #4]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b88:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <vPortExitCritical+0x50>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	4a09      	ldr	r2, [pc, #36]	; (8007bb4 <vPortExitCritical+0x50>)
 8007b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <vPortExitCritical+0x50>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d105      	bne.n	8007ba6 <vPortExitCritical+0x42>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	f383 8811 	msr	BASEPRI, r3
}
 8007ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	2000000c 	.word	0x2000000c
	...

08007bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bc0:	f3ef 8009 	mrs	r0, PSP
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <pxCurrentTCBConst>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f01e 0f10 	tst.w	lr, #16
 8007bd0:	bf08      	it	eq
 8007bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007be4:	f380 8811 	msr	BASEPRI, r0
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f7fe ffba 	bl	8006b68 <vTaskSwitchContext>
 8007bf4:	f04f 0000 	mov.w	r0, #0
 8007bf8:	f380 8811 	msr	BASEPRI, r0
 8007bfc:	bc09      	pop	{r0, r3}
 8007bfe:	6819      	ldr	r1, [r3, #0]
 8007c00:	6808      	ldr	r0, [r1, #0]
 8007c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c06:	f01e 0f10 	tst.w	lr, #16
 8007c0a:	bf08      	it	eq
 8007c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c10:	f380 8809 	msr	PSP, r0
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst>:
 8007c20:	20000b18 	.word	0x20000b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	607b      	str	r3, [r7, #4]
}
 8007c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c42:	f7fe fed7 	bl	80069f4 <xTaskIncrementTick>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <xPortSysTickHandler+0x40>)
 8007c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	f383 8811 	msr	BASEPRI, r3
}
 8007c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <vPortSetupTimerInterrupt+0x34>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <vPortSetupTimerInterrupt+0x38>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <vPortSetupTimerInterrupt+0x3c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <vPortSetupTimerInterrupt+0x40>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	099b      	lsrs	r3, r3, #6
 8007c88:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <vPortSetupTimerInterrupt+0x44>)
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c8e:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <vPortSetupTimerInterrupt+0x34>)
 8007c90:	2207      	movs	r2, #7
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	e000e010 	.word	0xe000e010
 8007ca4:	e000e018 	.word	0xe000e018
 8007ca8:	20000000 	.word	0x20000000
 8007cac:	10624dd3 	.word	0x10624dd3
 8007cb0:	e000e014 	.word	0xe000e014

08007cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cc4 <vPortEnableVFP+0x10>
 8007cb8:	6801      	ldr	r1, [r0, #0]
 8007cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cbe:	6001      	str	r1, [r0, #0]
 8007cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cc2:	bf00      	nop
 8007cc4:	e000ed88 	.word	0xe000ed88

08007cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cce:	f3ef 8305 	mrs	r3, IPSR
 8007cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b0f      	cmp	r3, #15
 8007cd8:	d914      	bls.n	8007d04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <vPortValidateInterruptPriority+0x70>)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ce4:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <vPortValidateInterruptPriority+0x74>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	7afa      	ldrb	r2, [r7, #11]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d20a      	bcs.n	8007d04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	607b      	str	r3, [r7, #4]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d04:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <vPortValidateInterruptPriority+0x78>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <vPortValidateInterruptPriority+0x7c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d90a      	bls.n	8007d2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	603b      	str	r3, [r7, #0]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <vPortValidateInterruptPriority+0x60>
	}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	e000e3f0 	.word	0xe000e3f0
 8007d3c:	20001144 	.word	0x20001144
 8007d40:	e000ed0c 	.word	0xe000ed0c
 8007d44:	20001148 	.word	0x20001148

08007d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d54:	f7fe fd92 	bl	800687c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d58:	4b5b      	ldr	r3, [pc, #364]	; (8007ec8 <pvPortMalloc+0x180>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d60:	f000 f920 	bl	8007fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d64:	4b59      	ldr	r3, [pc, #356]	; (8007ecc <pvPortMalloc+0x184>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 8093 	bne.w	8007e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01d      	beq.n	8007db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d78:	2208      	movs	r2, #8
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f023 0307 	bic.w	r3, r3, #7
 8007d90:	3308      	adds	r3, #8
 8007d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <pvPortMalloc+0x6c>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	617b      	str	r3, [r7, #20]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d06e      	beq.n	8007e98 <pvPortMalloc+0x150>
 8007dba:	4b45      	ldr	r3, [pc, #276]	; (8007ed0 <pvPortMalloc+0x188>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d869      	bhi.n	8007e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dc4:	4b43      	ldr	r3, [pc, #268]	; (8007ed4 <pvPortMalloc+0x18c>)
 8007dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dc8:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <pvPortMalloc+0x18c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dce:	e004      	b.n	8007dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <pvPortMalloc+0xa4>
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f1      	bne.n	8007dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dec:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <pvPortMalloc+0x180>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d050      	beq.n	8007e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	4413      	add	r3, r2
 8007dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	2308      	movs	r3, #8
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d91f      	bls.n	8007e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <pvPortMalloc+0xf8>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	613b      	str	r3, [r7, #16]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e52:	69b8      	ldr	r0, [r7, #24]
 8007e54:	f000 f908 	bl	8008068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	4a1b      	ldr	r2, [pc, #108]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e66:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <pvPortMalloc+0x190>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d203      	bcs.n	8007e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e72:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a18      	ldr	r2, [pc, #96]	; (8007ed8 <pvPortMalloc+0x190>)
 8007e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <pvPortMalloc+0x184>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <pvPortMalloc+0x194>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	4a11      	ldr	r2, [pc, #68]	; (8007edc <pvPortMalloc+0x194>)
 8007e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e98:	f7fe fcfe 	bl	8006898 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <pvPortMalloc+0x174>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	60fb      	str	r3, [r7, #12]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <pvPortMalloc+0x172>
	return pvReturn;
 8007ebc:	69fb      	ldr	r3, [r7, #28]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	; 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20001d0c 	.word	0x20001d0c
 8007ecc:	20001d20 	.word	0x20001d20
 8007ed0:	20001d10 	.word	0x20001d10
 8007ed4:	20001d04 	.word	0x20001d04
 8007ed8:	20001d14 	.word	0x20001d14
 8007edc:	20001d18 	.word	0x20001d18

08007ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d04d      	beq.n	8007f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <vPortFree+0xb8>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <vPortFree+0x44>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60fb      	str	r3, [r7, #12]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <vPortFree+0x62>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60bb      	str	r3, [r7, #8]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <vPortFree+0xb8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01e      	beq.n	8007f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11a      	bne.n	8007f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <vPortFree+0xb8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	43db      	mvns	r3, r3
 8007f62:	401a      	ands	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f68:	f7fe fc88 	bl	800687c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <vPortFree+0xbc>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <vPortFree+0xbc>)
 8007f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f7a:	6938      	ldr	r0, [r7, #16]
 8007f7c:	f000 f874 	bl	8008068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <vPortFree+0xc0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	4a06      	ldr	r2, [pc, #24]	; (8007fa0 <vPortFree+0xc0>)
 8007f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f8a:	f7fe fc85 	bl	8006898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f8e:	bf00      	nop
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20001d20 	.word	0x20001d20
 8007f9c:	20001d10 	.word	0x20001d10
 8007fa0:	20001d1c 	.word	0x20001d1c

08007fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007faa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fb0:	4b27      	ldr	r3, [pc, #156]	; (8008050 <prvHeapInit+0xac>)
 8007fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <prvHeapInit+0xac>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <prvHeapInit+0xb0>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <prvHeapInit+0xb0>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a15      	ldr	r2, [pc, #84]	; (8008058 <prvHeapInit+0xb4>)
 8008004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <prvHeapInit+0xb4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <prvHeapInit+0xb4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008024:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvHeapInit+0xb4>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a0a      	ldr	r2, [pc, #40]	; (800805c <prvHeapInit+0xb8>)
 8008032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	4a09      	ldr	r2, [pc, #36]	; (8008060 <prvHeapInit+0xbc>)
 800803a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <prvHeapInit+0xc0>)
 800803e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	2000114c 	.word	0x2000114c
 8008054:	20001d04 	.word	0x20001d04
 8008058:	20001d0c 	.word	0x20001d0c
 800805c:	20001d14 	.word	0x20001d14
 8008060:	20001d10 	.word	0x20001d10
 8008064:	20001d20 	.word	0x20001d20

08008068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <prvInsertBlockIntoFreeList+0xac>)
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	e002      	b.n	800807c <prvInsertBlockIntoFreeList+0x14>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d8f7      	bhi.n	8008076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d108      	bne.n	80080aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	441a      	add	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d118      	bne.n	80080f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d00d      	beq.n	80080e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e008      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080e6:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e003      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d002      	beq.n	8008106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20001d04 	.word	0x20001d04
 8008118:	20001d0c 	.word	0x20001d0c

0800811c <std>:
 800811c:	2300      	movs	r3, #0
 800811e:	b510      	push	{r4, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	e9c0 3300 	strd	r3, r3, [r0]
 8008126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800812a:	6083      	str	r3, [r0, #8]
 800812c:	8181      	strh	r1, [r0, #12]
 800812e:	6643      	str	r3, [r0, #100]	; 0x64
 8008130:	81c2      	strh	r2, [r0, #14]
 8008132:	6183      	str	r3, [r0, #24]
 8008134:	4619      	mov	r1, r3
 8008136:	2208      	movs	r2, #8
 8008138:	305c      	adds	r0, #92	; 0x5c
 800813a:	f000 f8f4 	bl	8008326 <memset>
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <std+0x38>)
 8008140:	6263      	str	r3, [r4, #36]	; 0x24
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <std+0x3c>)
 8008144:	62a3      	str	r3, [r4, #40]	; 0x28
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <std+0x40>)
 8008148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800814a:	4b05      	ldr	r3, [pc, #20]	; (8008160 <std+0x44>)
 800814c:	6224      	str	r4, [r4, #32]
 800814e:	6323      	str	r3, [r4, #48]	; 0x30
 8008150:	bd10      	pop	{r4, pc}
 8008152:	bf00      	nop
 8008154:	080082a1 	.word	0x080082a1
 8008158:	080082c3 	.word	0x080082c3
 800815c:	080082fb 	.word	0x080082fb
 8008160:	0800831f 	.word	0x0800831f

08008164 <stdio_exit_handler>:
 8008164:	4a02      	ldr	r2, [pc, #8]	; (8008170 <stdio_exit_handler+0xc>)
 8008166:	4903      	ldr	r1, [pc, #12]	; (8008174 <stdio_exit_handler+0x10>)
 8008168:	4803      	ldr	r0, [pc, #12]	; (8008178 <stdio_exit_handler+0x14>)
 800816a:	f000 b869 	b.w	8008240 <_fwalk_sglue>
 800816e:	bf00      	nop
 8008170:	20000010 	.word	0x20000010
 8008174:	08008d89 	.word	0x08008d89
 8008178:	2000001c 	.word	0x2000001c

0800817c <cleanup_stdio>:
 800817c:	6841      	ldr	r1, [r0, #4]
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <cleanup_stdio+0x34>)
 8008180:	4299      	cmp	r1, r3
 8008182:	b510      	push	{r4, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	d001      	beq.n	800818c <cleanup_stdio+0x10>
 8008188:	f000 fdfe 	bl	8008d88 <_fflush_r>
 800818c:	68a1      	ldr	r1, [r4, #8]
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <cleanup_stdio+0x38>)
 8008190:	4299      	cmp	r1, r3
 8008192:	d002      	beq.n	800819a <cleanup_stdio+0x1e>
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fdf7 	bl	8008d88 <_fflush_r>
 800819a:	68e1      	ldr	r1, [r4, #12]
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <cleanup_stdio+0x3c>)
 800819e:	4299      	cmp	r1, r3
 80081a0:	d004      	beq.n	80081ac <cleanup_stdio+0x30>
 80081a2:	4620      	mov	r0, r4
 80081a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a8:	f000 bdee 	b.w	8008d88 <_fflush_r>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	20001d24 	.word	0x20001d24
 80081b4:	20001d8c 	.word	0x20001d8c
 80081b8:	20001df4 	.word	0x20001df4

080081bc <global_stdio_init.part.0>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <global_stdio_init.part.0+0x30>)
 80081c0:	4c0b      	ldr	r4, [pc, #44]	; (80081f0 <global_stdio_init.part.0+0x34>)
 80081c2:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <global_stdio_init.part.0+0x38>)
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	4620      	mov	r0, r4
 80081c8:	2200      	movs	r2, #0
 80081ca:	2104      	movs	r1, #4
 80081cc:	f7ff ffa6 	bl	800811c <std>
 80081d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081d4:	2201      	movs	r2, #1
 80081d6:	2109      	movs	r1, #9
 80081d8:	f7ff ffa0 	bl	800811c <std>
 80081dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081e0:	2202      	movs	r2, #2
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e6:	2112      	movs	r1, #18
 80081e8:	f7ff bf98 	b.w	800811c <std>
 80081ec:	20001e5c 	.word	0x20001e5c
 80081f0:	20001d24 	.word	0x20001d24
 80081f4:	08008165 	.word	0x08008165

080081f8 <__sfp_lock_acquire>:
 80081f8:	4801      	ldr	r0, [pc, #4]	; (8008200 <__sfp_lock_acquire+0x8>)
 80081fa:	f000 b963 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 80081fe:	bf00      	nop
 8008200:	20001e65 	.word	0x20001e65

08008204 <__sfp_lock_release>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__sfp_lock_release+0x8>)
 8008206:	f000 b95e 	b.w	80084c6 <__retarget_lock_release_recursive>
 800820a:	bf00      	nop
 800820c:	20001e65 	.word	0x20001e65

08008210 <__sinit>:
 8008210:	b510      	push	{r4, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	f7ff fff0 	bl	80081f8 <__sfp_lock_acquire>
 8008218:	6a23      	ldr	r3, [r4, #32]
 800821a:	b11b      	cbz	r3, 8008224 <__sinit+0x14>
 800821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008220:	f7ff bff0 	b.w	8008204 <__sfp_lock_release>
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <__sinit+0x28>)
 8008226:	6223      	str	r3, [r4, #32]
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <__sinit+0x2c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f5      	bne.n	800821c <__sinit+0xc>
 8008230:	f7ff ffc4 	bl	80081bc <global_stdio_init.part.0>
 8008234:	e7f2      	b.n	800821c <__sinit+0xc>
 8008236:	bf00      	nop
 8008238:	0800817d 	.word	0x0800817d
 800823c:	20001e5c 	.word	0x20001e5c

08008240 <_fwalk_sglue>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	4607      	mov	r7, r0
 8008246:	4688      	mov	r8, r1
 8008248:	4614      	mov	r4, r2
 800824a:	2600      	movs	r6, #0
 800824c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008250:	f1b9 0901 	subs.w	r9, r9, #1
 8008254:	d505      	bpl.n	8008262 <_fwalk_sglue+0x22>
 8008256:	6824      	ldr	r4, [r4, #0]
 8008258:	2c00      	cmp	r4, #0
 800825a:	d1f7      	bne.n	800824c <_fwalk_sglue+0xc>
 800825c:	4630      	mov	r0, r6
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d907      	bls.n	8008278 <_fwalk_sglue+0x38>
 8008268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800826c:	3301      	adds	r3, #1
 800826e:	d003      	beq.n	8008278 <_fwalk_sglue+0x38>
 8008270:	4629      	mov	r1, r5
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	4306      	orrs	r6, r0
 8008278:	3568      	adds	r5, #104	; 0x68
 800827a:	e7e9      	b.n	8008250 <_fwalk_sglue+0x10>

0800827c <iprintf>:
 800827c:	b40f      	push	{r0, r1, r2, r3}
 800827e:	b507      	push	{r0, r1, r2, lr}
 8008280:	4906      	ldr	r1, [pc, #24]	; (800829c <iprintf+0x20>)
 8008282:	ab04      	add	r3, sp, #16
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	f853 2b04 	ldr.w	r2, [r3], #4
 800828a:	6881      	ldr	r1, [r0, #8]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f000 fa4b 	bl	8008728 <_vfiprintf_r>
 8008292:	b003      	add	sp, #12
 8008294:	f85d eb04 	ldr.w	lr, [sp], #4
 8008298:	b004      	add	sp, #16
 800829a:	4770      	bx	lr
 800829c:	20000068 	.word	0x20000068

080082a0 <__sread>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	f000 f8be 	bl	8008428 <_read_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bfab      	itete	ge
 80082b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082b2:	89a3      	ldrhlt	r3, [r4, #12]
 80082b4:	181b      	addge	r3, r3, r0
 80082b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ba:	bfac      	ite	ge
 80082bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082be:	81a3      	strhlt	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__swrite>:
 80082c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	461f      	mov	r7, r3
 80082c8:	898b      	ldrh	r3, [r1, #12]
 80082ca:	05db      	lsls	r3, r3, #23
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4616      	mov	r6, r2
 80082d2:	d505      	bpl.n	80082e0 <__swrite+0x1e>
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	2302      	movs	r3, #2
 80082da:	2200      	movs	r2, #0
 80082dc:	f000 f892 	bl	8008404 <_lseek_r>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f6:	f000 b8a9 	b.w	800844c <_write_r>

080082fa <__sseek>:
 80082fa:	b510      	push	{r4, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008302:	f000 f87f 	bl	8008404 <_lseek_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	bf15      	itete	ne
 800830c:	6560      	strne	r0, [r4, #84]	; 0x54
 800830e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008316:	81a3      	strheq	r3, [r4, #12]
 8008318:	bf18      	it	ne
 800831a:	81a3      	strhne	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__sclose>:
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 b809 	b.w	8008338 <_close_r>

08008326 <memset>:
 8008326:	4402      	add	r2, r0
 8008328:	4603      	mov	r3, r0
 800832a:	4293      	cmp	r3, r2
 800832c:	d100      	bne.n	8008330 <memset+0xa>
 800832e:	4770      	bx	lr
 8008330:	f803 1b01 	strb.w	r1, [r3], #1
 8008334:	e7f9      	b.n	800832a <memset+0x4>
	...

08008338 <_close_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d06      	ldr	r5, [pc, #24]	; (8008354 <_close_r+0x1c>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7f8 ff87 	bl	8001256 <_close>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_close_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_close_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	20001e60 	.word	0x20001e60

08008358 <_reclaim_reent>:
 8008358:	4b29      	ldr	r3, [pc, #164]	; (8008400 <_reclaim_reent+0xa8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4283      	cmp	r3, r0
 800835e:	b570      	push	{r4, r5, r6, lr}
 8008360:	4604      	mov	r4, r0
 8008362:	d04b      	beq.n	80083fc <_reclaim_reent+0xa4>
 8008364:	69c3      	ldr	r3, [r0, #28]
 8008366:	b143      	cbz	r3, 800837a <_reclaim_reent+0x22>
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d144      	bne.n	80083f8 <_reclaim_reent+0xa0>
 800836e:	69e3      	ldr	r3, [r4, #28]
 8008370:	6819      	ldr	r1, [r3, #0]
 8008372:	b111      	cbz	r1, 800837a <_reclaim_reent+0x22>
 8008374:	4620      	mov	r0, r4
 8008376:	f000 f8b5 	bl	80084e4 <_free_r>
 800837a:	6961      	ldr	r1, [r4, #20]
 800837c:	b111      	cbz	r1, 8008384 <_reclaim_reent+0x2c>
 800837e:	4620      	mov	r0, r4
 8008380:	f000 f8b0 	bl	80084e4 <_free_r>
 8008384:	69e1      	ldr	r1, [r4, #28]
 8008386:	b111      	cbz	r1, 800838e <_reclaim_reent+0x36>
 8008388:	4620      	mov	r0, r4
 800838a:	f000 f8ab 	bl	80084e4 <_free_r>
 800838e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008390:	b111      	cbz	r1, 8008398 <_reclaim_reent+0x40>
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f8a6 	bl	80084e4 <_free_r>
 8008398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800839a:	b111      	cbz	r1, 80083a2 <_reclaim_reent+0x4a>
 800839c:	4620      	mov	r0, r4
 800839e:	f000 f8a1 	bl	80084e4 <_free_r>
 80083a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083a4:	b111      	cbz	r1, 80083ac <_reclaim_reent+0x54>
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 f89c 	bl	80084e4 <_free_r>
 80083ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083ae:	b111      	cbz	r1, 80083b6 <_reclaim_reent+0x5e>
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 f897 	bl	80084e4 <_free_r>
 80083b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80083b8:	b111      	cbz	r1, 80083c0 <_reclaim_reent+0x68>
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f892 	bl	80084e4 <_free_r>
 80083c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80083c2:	b111      	cbz	r1, 80083ca <_reclaim_reent+0x72>
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f88d 	bl	80084e4 <_free_r>
 80083ca:	6a23      	ldr	r3, [r4, #32]
 80083cc:	b1b3      	cbz	r3, 80083fc <_reclaim_reent+0xa4>
 80083ce:	4620      	mov	r0, r4
 80083d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083d4:	4718      	bx	r3
 80083d6:	5949      	ldr	r1, [r1, r5]
 80083d8:	b941      	cbnz	r1, 80083ec <_reclaim_reent+0x94>
 80083da:	3504      	adds	r5, #4
 80083dc:	69e3      	ldr	r3, [r4, #28]
 80083de:	2d80      	cmp	r5, #128	; 0x80
 80083e0:	68d9      	ldr	r1, [r3, #12]
 80083e2:	d1f8      	bne.n	80083d6 <_reclaim_reent+0x7e>
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 f87d 	bl	80084e4 <_free_r>
 80083ea:	e7c0      	b.n	800836e <_reclaim_reent+0x16>
 80083ec:	680e      	ldr	r6, [r1, #0]
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 f878 	bl	80084e4 <_free_r>
 80083f4:	4631      	mov	r1, r6
 80083f6:	e7ef      	b.n	80083d8 <_reclaim_reent+0x80>
 80083f8:	2500      	movs	r5, #0
 80083fa:	e7ef      	b.n	80083dc <_reclaim_reent+0x84>
 80083fc:	bd70      	pop	{r4, r5, r6, pc}
 80083fe:	bf00      	nop
 8008400:	20000068 	.word	0x20000068

08008404 <_lseek_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	; (8008424 <_lseek_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7f8 ff46 	bl	80012a4 <_lseek>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_lseek_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_lseek_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20001e60 	.word	0x20001e60

08008428 <_read_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	; (8008448 <_read_r+0x20>)
 800842c:	4604      	mov	r4, r0
 800842e:	4608      	mov	r0, r1
 8008430:	4611      	mov	r1, r2
 8008432:	2200      	movs	r2, #0
 8008434:	602a      	str	r2, [r5, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	f7f8 fed4 	bl	80011e4 <_read>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_read_r+0x1e>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_read_r+0x1e>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20001e60 	.word	0x20001e60

0800844c <_write_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	; (800846c <_write_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7f8 fedf 	bl	800121e <_write>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_write_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_write_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20001e60 	.word	0x20001e60

08008470 <__errno>:
 8008470:	4b01      	ldr	r3, [pc, #4]	; (8008478 <__errno+0x8>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000068 	.word	0x20000068

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	; (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	; (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	; (80084c0 <__libc_init_array+0x44>)
 8008490:	f000 fdcc 	bl	800902c <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	08009160 	.word	0x08009160
 80084b8:	08009160 	.word	0x08009160
 80084bc:	08009160 	.word	0x08009160
 80084c0:	08009164 	.word	0x08009164

080084c4 <__retarget_lock_acquire_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_release_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <memcpy>:
 80084c8:	440a      	add	r2, r1
 80084ca:	4291      	cmp	r1, r2
 80084cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d0:	d100      	bne.n	80084d4 <memcpy+0xc>
 80084d2:	4770      	bx	lr
 80084d4:	b510      	push	{r4, lr}
 80084d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084de:	4291      	cmp	r1, r2
 80084e0:	d1f9      	bne.n	80084d6 <memcpy+0xe>
 80084e2:	bd10      	pop	{r4, pc}

080084e4 <_free_r>:
 80084e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e6:	2900      	cmp	r1, #0
 80084e8:	d044      	beq.n	8008574 <_free_r+0x90>
 80084ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f1a1 0404 	sub.w	r4, r1, #4
 80084f6:	bfb8      	it	lt
 80084f8:	18e4      	addlt	r4, r4, r3
 80084fa:	f000 f8df 	bl	80086bc <__malloc_lock>
 80084fe:	4a1e      	ldr	r2, [pc, #120]	; (8008578 <_free_r+0x94>)
 8008500:	9801      	ldr	r0, [sp, #4]
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	b933      	cbnz	r3, 8008514 <_free_r+0x30>
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	b003      	add	sp, #12
 800850c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008510:	f000 b8da 	b.w	80086c8 <__malloc_unlock>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d908      	bls.n	800852a <_free_r+0x46>
 8008518:	6825      	ldr	r5, [r4, #0]
 800851a:	1961      	adds	r1, r4, r5
 800851c:	428b      	cmp	r3, r1
 800851e:	bf01      	itttt	eq
 8008520:	6819      	ldreq	r1, [r3, #0]
 8008522:	685b      	ldreq	r3, [r3, #4]
 8008524:	1949      	addeq	r1, r1, r5
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	e7ed      	b.n	8008506 <_free_r+0x22>
 800852a:	461a      	mov	r2, r3
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b10b      	cbz	r3, 8008534 <_free_r+0x50>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d9fa      	bls.n	800852a <_free_r+0x46>
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	1855      	adds	r5, r2, r1
 8008538:	42a5      	cmp	r5, r4
 800853a:	d10b      	bne.n	8008554 <_free_r+0x70>
 800853c:	6824      	ldr	r4, [r4, #0]
 800853e:	4421      	add	r1, r4
 8008540:	1854      	adds	r4, r2, r1
 8008542:	42a3      	cmp	r3, r4
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	d1e0      	bne.n	800850a <_free_r+0x26>
 8008548:	681c      	ldr	r4, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	440c      	add	r4, r1
 8008550:	6014      	str	r4, [r2, #0]
 8008552:	e7da      	b.n	800850a <_free_r+0x26>
 8008554:	d902      	bls.n	800855c <_free_r+0x78>
 8008556:	230c      	movs	r3, #12
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	e7d6      	b.n	800850a <_free_r+0x26>
 800855c:	6825      	ldr	r5, [r4, #0]
 800855e:	1961      	adds	r1, r4, r5
 8008560:	428b      	cmp	r3, r1
 8008562:	bf04      	itt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	bf04      	itt	eq
 800856c:	1949      	addeq	r1, r1, r5
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	6054      	str	r4, [r2, #4]
 8008572:	e7ca      	b.n	800850a <_free_r+0x26>
 8008574:	b003      	add	sp, #12
 8008576:	bd30      	pop	{r4, r5, pc}
 8008578:	20001e68 	.word	0x20001e68

0800857c <sbrk_aligned>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	4e0e      	ldr	r6, [pc, #56]	; (80085b8 <sbrk_aligned+0x3c>)
 8008580:	460c      	mov	r4, r1
 8008582:	6831      	ldr	r1, [r6, #0]
 8008584:	4605      	mov	r5, r0
 8008586:	b911      	cbnz	r1, 800858e <sbrk_aligned+0x12>
 8008588:	f000 fcbc 	bl	8008f04 <_sbrk_r>
 800858c:	6030      	str	r0, [r6, #0]
 800858e:	4621      	mov	r1, r4
 8008590:	4628      	mov	r0, r5
 8008592:	f000 fcb7 	bl	8008f04 <_sbrk_r>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d00a      	beq.n	80085b0 <sbrk_aligned+0x34>
 800859a:	1cc4      	adds	r4, r0, #3
 800859c:	f024 0403 	bic.w	r4, r4, #3
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d007      	beq.n	80085b4 <sbrk_aligned+0x38>
 80085a4:	1a21      	subs	r1, r4, r0
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 fcac 	bl	8008f04 <_sbrk_r>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d101      	bne.n	80085b4 <sbrk_aligned+0x38>
 80085b0:	f04f 34ff 	mov.w	r4, #4294967295
 80085b4:	4620      	mov	r0, r4
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	20001e6c 	.word	0x20001e6c

080085bc <_malloc_r>:
 80085bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c0:	1ccd      	adds	r5, r1, #3
 80085c2:	f025 0503 	bic.w	r5, r5, #3
 80085c6:	3508      	adds	r5, #8
 80085c8:	2d0c      	cmp	r5, #12
 80085ca:	bf38      	it	cc
 80085cc:	250c      	movcc	r5, #12
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	4607      	mov	r7, r0
 80085d2:	db01      	blt.n	80085d8 <_malloc_r+0x1c>
 80085d4:	42a9      	cmp	r1, r5
 80085d6:	d905      	bls.n	80085e4 <_malloc_r+0x28>
 80085d8:	230c      	movs	r3, #12
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	2600      	movs	r6, #0
 80085de:	4630      	mov	r0, r6
 80085e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086b8 <_malloc_r+0xfc>
 80085e8:	f000 f868 	bl	80086bc <__malloc_lock>
 80085ec:	f8d8 3000 	ldr.w	r3, [r8]
 80085f0:	461c      	mov	r4, r3
 80085f2:	bb5c      	cbnz	r4, 800864c <_malloc_r+0x90>
 80085f4:	4629      	mov	r1, r5
 80085f6:	4638      	mov	r0, r7
 80085f8:	f7ff ffc0 	bl	800857c <sbrk_aligned>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	4604      	mov	r4, r0
 8008600:	d155      	bne.n	80086ae <_malloc_r+0xf2>
 8008602:	f8d8 4000 	ldr.w	r4, [r8]
 8008606:	4626      	mov	r6, r4
 8008608:	2e00      	cmp	r6, #0
 800860a:	d145      	bne.n	8008698 <_malloc_r+0xdc>
 800860c:	2c00      	cmp	r4, #0
 800860e:	d048      	beq.n	80086a2 <_malloc_r+0xe6>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	4631      	mov	r1, r6
 8008614:	4638      	mov	r0, r7
 8008616:	eb04 0903 	add.w	r9, r4, r3
 800861a:	f000 fc73 	bl	8008f04 <_sbrk_r>
 800861e:	4581      	cmp	r9, r0
 8008620:	d13f      	bne.n	80086a2 <_malloc_r+0xe6>
 8008622:	6821      	ldr	r1, [r4, #0]
 8008624:	1a6d      	subs	r5, r5, r1
 8008626:	4629      	mov	r1, r5
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff ffa7 	bl	800857c <sbrk_aligned>
 800862e:	3001      	adds	r0, #1
 8008630:	d037      	beq.n	80086a2 <_malloc_r+0xe6>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	442b      	add	r3, r5
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	f8d8 3000 	ldr.w	r3, [r8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d038      	beq.n	80086b2 <_malloc_r+0xf6>
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	42a2      	cmp	r2, r4
 8008644:	d12b      	bne.n	800869e <_malloc_r+0xe2>
 8008646:	2200      	movs	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
 800864a:	e00f      	b.n	800866c <_malloc_r+0xb0>
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	1b52      	subs	r2, r2, r5
 8008650:	d41f      	bmi.n	8008692 <_malloc_r+0xd6>
 8008652:	2a0b      	cmp	r2, #11
 8008654:	d917      	bls.n	8008686 <_malloc_r+0xca>
 8008656:	1961      	adds	r1, r4, r5
 8008658:	42a3      	cmp	r3, r4
 800865a:	6025      	str	r5, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	6059      	strne	r1, [r3, #4]
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	bf08      	it	eq
 8008664:	f8c8 1000 	streq.w	r1, [r8]
 8008668:	5162      	str	r2, [r4, r5]
 800866a:	604b      	str	r3, [r1, #4]
 800866c:	4638      	mov	r0, r7
 800866e:	f104 060b 	add.w	r6, r4, #11
 8008672:	f000 f829 	bl	80086c8 <__malloc_unlock>
 8008676:	f026 0607 	bic.w	r6, r6, #7
 800867a:	1d23      	adds	r3, r4, #4
 800867c:	1af2      	subs	r2, r6, r3
 800867e:	d0ae      	beq.n	80085de <_malloc_r+0x22>
 8008680:	1b9b      	subs	r3, r3, r6
 8008682:	50a3      	str	r3, [r4, r2]
 8008684:	e7ab      	b.n	80085de <_malloc_r+0x22>
 8008686:	42a3      	cmp	r3, r4
 8008688:	6862      	ldr	r2, [r4, #4]
 800868a:	d1dd      	bne.n	8008648 <_malloc_r+0x8c>
 800868c:	f8c8 2000 	str.w	r2, [r8]
 8008690:	e7ec      	b.n	800866c <_malloc_r+0xb0>
 8008692:	4623      	mov	r3, r4
 8008694:	6864      	ldr	r4, [r4, #4]
 8008696:	e7ac      	b.n	80085f2 <_malloc_r+0x36>
 8008698:	4634      	mov	r4, r6
 800869a:	6876      	ldr	r6, [r6, #4]
 800869c:	e7b4      	b.n	8008608 <_malloc_r+0x4c>
 800869e:	4613      	mov	r3, r2
 80086a0:	e7cc      	b.n	800863c <_malloc_r+0x80>
 80086a2:	230c      	movs	r3, #12
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	4638      	mov	r0, r7
 80086a8:	f000 f80e 	bl	80086c8 <__malloc_unlock>
 80086ac:	e797      	b.n	80085de <_malloc_r+0x22>
 80086ae:	6025      	str	r5, [r4, #0]
 80086b0:	e7dc      	b.n	800866c <_malloc_r+0xb0>
 80086b2:	605b      	str	r3, [r3, #4]
 80086b4:	deff      	udf	#255	; 0xff
 80086b6:	bf00      	nop
 80086b8:	20001e68 	.word	0x20001e68

080086bc <__malloc_lock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_lock+0x8>)
 80086be:	f7ff bf01 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 80086c2:	bf00      	nop
 80086c4:	20001e64 	.word	0x20001e64

080086c8 <__malloc_unlock>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__malloc_unlock+0x8>)
 80086ca:	f7ff befc 	b.w	80084c6 <__retarget_lock_release_recursive>
 80086ce:	bf00      	nop
 80086d0:	20001e64 	.word	0x20001e64

080086d4 <__sfputc_r>:
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	b410      	push	{r4}
 80086dc:	6093      	str	r3, [r2, #8]
 80086de:	da08      	bge.n	80086f2 <__sfputc_r+0x1e>
 80086e0:	6994      	ldr	r4, [r2, #24]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db01      	blt.n	80086ea <__sfputc_r+0x16>
 80086e6:	290a      	cmp	r1, #10
 80086e8:	d103      	bne.n	80086f2 <__sfputc_r+0x1e>
 80086ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ee:	f000 bb73 	b.w	8008dd8 <__swbuf_r>
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	1c58      	adds	r0, r3, #1
 80086f6:	6010      	str	r0, [r2, #0]
 80086f8:	7019      	strb	r1, [r3, #0]
 80086fa:	4608      	mov	r0, r1
 80086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008700:	4770      	bx	lr

08008702 <__sfputs_r>:
 8008702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	4614      	mov	r4, r2
 800870a:	18d5      	adds	r5, r2, r3
 800870c:	42ac      	cmp	r4, r5
 800870e:	d101      	bne.n	8008714 <__sfputs_r+0x12>
 8008710:	2000      	movs	r0, #0
 8008712:	e007      	b.n	8008724 <__sfputs_r+0x22>
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	463a      	mov	r2, r7
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ffda 	bl	80086d4 <__sfputc_r>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d1f3      	bne.n	800870c <__sfputs_r+0xa>
 8008724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008728 <_vfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	460d      	mov	r5, r1
 800872e:	b09d      	sub	sp, #116	; 0x74
 8008730:	4614      	mov	r4, r2
 8008732:	4698      	mov	r8, r3
 8008734:	4606      	mov	r6, r0
 8008736:	b118      	cbz	r0, 8008740 <_vfiprintf_r+0x18>
 8008738:	6a03      	ldr	r3, [r0, #32]
 800873a:	b90b      	cbnz	r3, 8008740 <_vfiprintf_r+0x18>
 800873c:	f7ff fd68 	bl	8008210 <__sinit>
 8008740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	d405      	bmi.n	8008752 <_vfiprintf_r+0x2a>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d402      	bmi.n	8008752 <_vfiprintf_r+0x2a>
 800874c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800874e:	f7ff feb9 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	071b      	lsls	r3, r3, #28
 8008756:	d501      	bpl.n	800875c <_vfiprintf_r+0x34>
 8008758:	692b      	ldr	r3, [r5, #16]
 800875a:	b99b      	cbnz	r3, 8008784 <_vfiprintf_r+0x5c>
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	f000 fb78 	bl	8008e54 <__swsetup_r>
 8008764:	b170      	cbz	r0, 8008784 <_vfiprintf_r+0x5c>
 8008766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008768:	07dc      	lsls	r4, r3, #31
 800876a:	d504      	bpl.n	8008776 <_vfiprintf_r+0x4e>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	b01d      	add	sp, #116	; 0x74
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	0598      	lsls	r0, r3, #22
 800877a:	d4f7      	bmi.n	800876c <_vfiprintf_r+0x44>
 800877c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800877e:	f7ff fea2 	bl	80084c6 <__retarget_lock_release_recursive>
 8008782:	e7f3      	b.n	800876c <_vfiprintf_r+0x44>
 8008784:	2300      	movs	r3, #0
 8008786:	9309      	str	r3, [sp, #36]	; 0x24
 8008788:	2320      	movs	r3, #32
 800878a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800878e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008792:	2330      	movs	r3, #48	; 0x30
 8008794:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008948 <_vfiprintf_r+0x220>
 8008798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800879c:	f04f 0901 	mov.w	r9, #1
 80087a0:	4623      	mov	r3, r4
 80087a2:	469a      	mov	sl, r3
 80087a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a8:	b10a      	cbz	r2, 80087ae <_vfiprintf_r+0x86>
 80087aa:	2a25      	cmp	r2, #37	; 0x25
 80087ac:	d1f9      	bne.n	80087a2 <_vfiprintf_r+0x7a>
 80087ae:	ebba 0b04 	subs.w	fp, sl, r4
 80087b2:	d00b      	beq.n	80087cc <_vfiprintf_r+0xa4>
 80087b4:	465b      	mov	r3, fp
 80087b6:	4622      	mov	r2, r4
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ffa1 	bl	8008702 <__sfputs_r>
 80087c0:	3001      	adds	r0, #1
 80087c2:	f000 80a9 	beq.w	8008918 <_vfiprintf_r+0x1f0>
 80087c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c8:	445a      	add	r2, fp
 80087ca:	9209      	str	r2, [sp, #36]	; 0x24
 80087cc:	f89a 3000 	ldrb.w	r3, [sl]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80a1 	beq.w	8008918 <_vfiprintf_r+0x1f0>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295
 80087dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e0:	f10a 0a01 	add.w	sl, sl, #1
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ec:	931a      	str	r3, [sp, #104]	; 0x68
 80087ee:	4654      	mov	r4, sl
 80087f0:	2205      	movs	r2, #5
 80087f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f6:	4854      	ldr	r0, [pc, #336]	; (8008948 <_vfiprintf_r+0x220>)
 80087f8:	f7f7 fcea 	bl	80001d0 <memchr>
 80087fc:	9a04      	ldr	r2, [sp, #16]
 80087fe:	b9d8      	cbnz	r0, 8008838 <_vfiprintf_r+0x110>
 8008800:	06d1      	lsls	r1, r2, #27
 8008802:	bf44      	itt	mi
 8008804:	2320      	movmi	r3, #32
 8008806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880a:	0713      	lsls	r3, r2, #28
 800880c:	bf44      	itt	mi
 800880e:	232b      	movmi	r3, #43	; 0x2b
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b2a      	cmp	r3, #42	; 0x2a
 800881a:	d015      	beq.n	8008848 <_vfiprintf_r+0x120>
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	4654      	mov	r4, sl
 8008820:	2000      	movs	r0, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4621      	mov	r1, r4
 8008828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800882c:	3b30      	subs	r3, #48	; 0x30
 800882e:	2b09      	cmp	r3, #9
 8008830:	d94d      	bls.n	80088ce <_vfiprintf_r+0x1a6>
 8008832:	b1b0      	cbz	r0, 8008862 <_vfiprintf_r+0x13a>
 8008834:	9207      	str	r2, [sp, #28]
 8008836:	e014      	b.n	8008862 <_vfiprintf_r+0x13a>
 8008838:	eba0 0308 	sub.w	r3, r0, r8
 800883c:	fa09 f303 	lsl.w	r3, r9, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	46a2      	mov	sl, r4
 8008846:	e7d2      	b.n	80087ee <_vfiprintf_r+0xc6>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	1d19      	adds	r1, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	9103      	str	r1, [sp, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfbb      	ittet	lt
 8008854:	425b      	neglt	r3, r3
 8008856:	f042 0202 	orrlt.w	r2, r2, #2
 800885a:	9307      	strge	r3, [sp, #28]
 800885c:	9307      	strlt	r3, [sp, #28]
 800885e:	bfb8      	it	lt
 8008860:	9204      	strlt	r2, [sp, #16]
 8008862:	7823      	ldrb	r3, [r4, #0]
 8008864:	2b2e      	cmp	r3, #46	; 0x2e
 8008866:	d10c      	bne.n	8008882 <_vfiprintf_r+0x15a>
 8008868:	7863      	ldrb	r3, [r4, #1]
 800886a:	2b2a      	cmp	r3, #42	; 0x2a
 800886c:	d134      	bne.n	80088d8 <_vfiprintf_r+0x1b0>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	9203      	str	r2, [sp, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	bfb8      	it	lt
 800887a:	f04f 33ff 	movlt.w	r3, #4294967295
 800887e:	3402      	adds	r4, #2
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008958 <_vfiprintf_r+0x230>
 8008886:	7821      	ldrb	r1, [r4, #0]
 8008888:	2203      	movs	r2, #3
 800888a:	4650      	mov	r0, sl
 800888c:	f7f7 fca0 	bl	80001d0 <memchr>
 8008890:	b138      	cbz	r0, 80088a2 <_vfiprintf_r+0x17a>
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	eba0 000a 	sub.w	r0, r0, sl
 8008898:	2240      	movs	r2, #64	; 0x40
 800889a:	4082      	lsls	r2, r0
 800889c:	4313      	orrs	r3, r2
 800889e:	3401      	adds	r4, #1
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a6:	4829      	ldr	r0, [pc, #164]	; (800894c <_vfiprintf_r+0x224>)
 80088a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ac:	2206      	movs	r2, #6
 80088ae:	f7f7 fc8f 	bl	80001d0 <memchr>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d03f      	beq.n	8008936 <_vfiprintf_r+0x20e>
 80088b6:	4b26      	ldr	r3, [pc, #152]	; (8008950 <_vfiprintf_r+0x228>)
 80088b8:	bb1b      	cbnz	r3, 8008902 <_vfiprintf_r+0x1da>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	3307      	adds	r3, #7
 80088be:	f023 0307 	bic.w	r3, r3, #7
 80088c2:	3308      	adds	r3, #8
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	443b      	add	r3, r7
 80088ca:	9309      	str	r3, [sp, #36]	; 0x24
 80088cc:	e768      	b.n	80087a0 <_vfiprintf_r+0x78>
 80088ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d2:	460c      	mov	r4, r1
 80088d4:	2001      	movs	r0, #1
 80088d6:	e7a6      	b.n	8008826 <_vfiprintf_r+0xfe>
 80088d8:	2300      	movs	r3, #0
 80088da:	3401      	adds	r4, #1
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	4619      	mov	r1, r3
 80088e0:	f04f 0c0a 	mov.w	ip, #10
 80088e4:	4620      	mov	r0, r4
 80088e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ea:	3a30      	subs	r2, #48	; 0x30
 80088ec:	2a09      	cmp	r2, #9
 80088ee:	d903      	bls.n	80088f8 <_vfiprintf_r+0x1d0>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0c6      	beq.n	8008882 <_vfiprintf_r+0x15a>
 80088f4:	9105      	str	r1, [sp, #20]
 80088f6:	e7c4      	b.n	8008882 <_vfiprintf_r+0x15a>
 80088f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80088fc:	4604      	mov	r4, r0
 80088fe:	2301      	movs	r3, #1
 8008900:	e7f0      	b.n	80088e4 <_vfiprintf_r+0x1bc>
 8008902:	ab03      	add	r3, sp, #12
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	462a      	mov	r2, r5
 8008908:	4b12      	ldr	r3, [pc, #72]	; (8008954 <_vfiprintf_r+0x22c>)
 800890a:	a904      	add	r1, sp, #16
 800890c:	4630      	mov	r0, r6
 800890e:	f3af 8000 	nop.w
 8008912:	4607      	mov	r7, r0
 8008914:	1c78      	adds	r0, r7, #1
 8008916:	d1d6      	bne.n	80088c6 <_vfiprintf_r+0x19e>
 8008918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800891a:	07d9      	lsls	r1, r3, #31
 800891c:	d405      	bmi.n	800892a <_vfiprintf_r+0x202>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	059a      	lsls	r2, r3, #22
 8008922:	d402      	bmi.n	800892a <_vfiprintf_r+0x202>
 8008924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008926:	f7ff fdce 	bl	80084c6 <__retarget_lock_release_recursive>
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	065b      	lsls	r3, r3, #25
 800892e:	f53f af1d 	bmi.w	800876c <_vfiprintf_r+0x44>
 8008932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008934:	e71c      	b.n	8008770 <_vfiprintf_r+0x48>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b05      	ldr	r3, [pc, #20]	; (8008954 <_vfiprintf_r+0x22c>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f879 	bl	8008a38 <_printf_i>
 8008946:	e7e4      	b.n	8008912 <_vfiprintf_r+0x1ea>
 8008948:	08009124 	.word	0x08009124
 800894c:	0800912e 	.word	0x0800912e
 8008950:	00000000 	.word	0x00000000
 8008954:	08008703 	.word	0x08008703
 8008958:	0800912a 	.word	0x0800912a

0800895c <_printf_common>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	4616      	mov	r6, r2
 8008962:	4699      	mov	r9, r3
 8008964:	688a      	ldr	r2, [r1, #8]
 8008966:	690b      	ldr	r3, [r1, #16]
 8008968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800896c:	4293      	cmp	r3, r2
 800896e:	bfb8      	it	lt
 8008970:	4613      	movlt	r3, r2
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008978:	4607      	mov	r7, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b10a      	cbz	r2, 8008982 <_printf_common+0x26>
 800897e:	3301      	adds	r3, #1
 8008980:	6033      	str	r3, [r6, #0]
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	0699      	lsls	r1, r3, #26
 8008986:	bf42      	ittt	mi
 8008988:	6833      	ldrmi	r3, [r6, #0]
 800898a:	3302      	addmi	r3, #2
 800898c:	6033      	strmi	r3, [r6, #0]
 800898e:	6825      	ldr	r5, [r4, #0]
 8008990:	f015 0506 	ands.w	r5, r5, #6
 8008994:	d106      	bne.n	80089a4 <_printf_common+0x48>
 8008996:	f104 0a19 	add.w	sl, r4, #25
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	6832      	ldr	r2, [r6, #0]
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	dc26      	bgt.n	80089f2 <_printf_common+0x96>
 80089a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089a8:	1e13      	subs	r3, r2, #0
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	bf18      	it	ne
 80089ae:	2301      	movne	r3, #1
 80089b0:	0692      	lsls	r2, r2, #26
 80089b2:	d42b      	bmi.n	8008a0c <_printf_common+0xb0>
 80089b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089b8:	4649      	mov	r1, r9
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c0      	blx	r8
 80089be:	3001      	adds	r0, #1
 80089c0:	d01e      	beq.n	8008a00 <_printf_common+0xa4>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	f003 0306 	and.w	r3, r3, #6
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	bf02      	ittt	eq
 80089ce:	68e5      	ldreq	r5, [r4, #12]
 80089d0:	6833      	ldreq	r3, [r6, #0]
 80089d2:	1aed      	subeq	r5, r5, r3
 80089d4:	68a3      	ldr	r3, [r4, #8]
 80089d6:	bf0c      	ite	eq
 80089d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089dc:	2500      	movne	r5, #0
 80089de:	4293      	cmp	r3, r2
 80089e0:	bfc4      	itt	gt
 80089e2:	1a9b      	subgt	r3, r3, r2
 80089e4:	18ed      	addgt	r5, r5, r3
 80089e6:	2600      	movs	r6, #0
 80089e8:	341a      	adds	r4, #26
 80089ea:	42b5      	cmp	r5, r6
 80089ec:	d11a      	bne.n	8008a24 <_printf_common+0xc8>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e008      	b.n	8008a04 <_printf_common+0xa8>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4652      	mov	r2, sl
 80089f6:	4649      	mov	r1, r9
 80089f8:	4638      	mov	r0, r7
 80089fa:	47c0      	blx	r8
 80089fc:	3001      	adds	r0, #1
 80089fe:	d103      	bne.n	8008a08 <_printf_common+0xac>
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a08:	3501      	adds	r5, #1
 8008a0a:	e7c6      	b.n	800899a <_printf_common+0x3e>
 8008a0c:	18e1      	adds	r1, r4, r3
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	2030      	movs	r0, #48	; 0x30
 8008a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a16:	4422      	add	r2, r4
 8008a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a20:	3302      	adds	r3, #2
 8008a22:	e7c7      	b.n	80089b4 <_printf_common+0x58>
 8008a24:	2301      	movs	r3, #1
 8008a26:	4622      	mov	r2, r4
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	47c0      	blx	r8
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d0e6      	beq.n	8008a00 <_printf_common+0xa4>
 8008a32:	3601      	adds	r6, #1
 8008a34:	e7d9      	b.n	80089ea <_printf_common+0x8e>
	...

08008a38 <_printf_i>:
 8008a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	7e0f      	ldrb	r7, [r1, #24]
 8008a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a40:	2f78      	cmp	r7, #120	; 0x78
 8008a42:	4691      	mov	r9, r2
 8008a44:	4680      	mov	r8, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	469a      	mov	sl, r3
 8008a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a4e:	d807      	bhi.n	8008a60 <_printf_i+0x28>
 8008a50:	2f62      	cmp	r7, #98	; 0x62
 8008a52:	d80a      	bhi.n	8008a6a <_printf_i+0x32>
 8008a54:	2f00      	cmp	r7, #0
 8008a56:	f000 80d4 	beq.w	8008c02 <_printf_i+0x1ca>
 8008a5a:	2f58      	cmp	r7, #88	; 0x58
 8008a5c:	f000 80c0 	beq.w	8008be0 <_printf_i+0x1a8>
 8008a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a68:	e03a      	b.n	8008ae0 <_printf_i+0xa8>
 8008a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a6e:	2b15      	cmp	r3, #21
 8008a70:	d8f6      	bhi.n	8008a60 <_printf_i+0x28>
 8008a72:	a101      	add	r1, pc, #4	; (adr r1, 8008a78 <_printf_i+0x40>)
 8008a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ae5 	.word	0x08008ae5
 8008a80:	08008a61 	.word	0x08008a61
 8008a84:	08008a61 	.word	0x08008a61
 8008a88:	08008a61 	.word	0x08008a61
 8008a8c:	08008a61 	.word	0x08008a61
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008a61 	.word	0x08008a61
 8008a98:	08008a61 	.word	0x08008a61
 8008a9c:	08008a61 	.word	0x08008a61
 8008aa0:	08008a61 	.word	0x08008a61
 8008aa4:	08008be9 	.word	0x08008be9
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008ba3 	.word	0x08008ba3
 8008ab0:	08008a61 	.word	0x08008a61
 8008ab4:	08008a61 	.word	0x08008a61
 8008ab8:	08008c0b 	.word	0x08008c0b
 8008abc:	08008a61 	.word	0x08008a61
 8008ac0:	08008b11 	.word	0x08008b11
 8008ac4:	08008a61 	.word	0x08008a61
 8008ac8:	08008a61 	.word	0x08008a61
 8008acc:	08008bab 	.word	0x08008bab
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	1d1a      	adds	r2, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	602a      	str	r2, [r5, #0]
 8008ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e09f      	b.n	8008c24 <_printf_i+0x1ec>
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	0607      	lsls	r7, r0, #24
 8008aea:	f103 0104 	add.w	r1, r3, #4
 8008aee:	6029      	str	r1, [r5, #0]
 8008af0:	d501      	bpl.n	8008af6 <_printf_i+0xbe>
 8008af2:	681e      	ldr	r6, [r3, #0]
 8008af4:	e003      	b.n	8008afe <_printf_i+0xc6>
 8008af6:	0646      	lsls	r6, r0, #25
 8008af8:	d5fb      	bpl.n	8008af2 <_printf_i+0xba>
 8008afa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	da03      	bge.n	8008b0a <_printf_i+0xd2>
 8008b02:	232d      	movs	r3, #45	; 0x2d
 8008b04:	4276      	negs	r6, r6
 8008b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b0a:	485a      	ldr	r0, [pc, #360]	; (8008c74 <_printf_i+0x23c>)
 8008b0c:	230a      	movs	r3, #10
 8008b0e:	e012      	b.n	8008b36 <_printf_i+0xfe>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	6820      	ldr	r0, [r4, #0]
 8008b14:	1d19      	adds	r1, r3, #4
 8008b16:	6029      	str	r1, [r5, #0]
 8008b18:	0605      	lsls	r5, r0, #24
 8008b1a:	d501      	bpl.n	8008b20 <_printf_i+0xe8>
 8008b1c:	681e      	ldr	r6, [r3, #0]
 8008b1e:	e002      	b.n	8008b26 <_printf_i+0xee>
 8008b20:	0641      	lsls	r1, r0, #25
 8008b22:	d5fb      	bpl.n	8008b1c <_printf_i+0xe4>
 8008b24:	881e      	ldrh	r6, [r3, #0]
 8008b26:	4853      	ldr	r0, [pc, #332]	; (8008c74 <_printf_i+0x23c>)
 8008b28:	2f6f      	cmp	r7, #111	; 0x6f
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2308      	moveq	r3, #8
 8008b2e:	230a      	movne	r3, #10
 8008b30:	2100      	movs	r1, #0
 8008b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b36:	6865      	ldr	r5, [r4, #4]
 8008b38:	60a5      	str	r5, [r4, #8]
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	bfa2      	ittt	ge
 8008b3e:	6821      	ldrge	r1, [r4, #0]
 8008b40:	f021 0104 	bicge.w	r1, r1, #4
 8008b44:	6021      	strge	r1, [r4, #0]
 8008b46:	b90e      	cbnz	r6, 8008b4c <_printf_i+0x114>
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	d04b      	beq.n	8008be4 <_printf_i+0x1ac>
 8008b4c:	4615      	mov	r5, r2
 8008b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b52:	fb03 6711 	mls	r7, r3, r1, r6
 8008b56:	5dc7      	ldrb	r7, [r0, r7]
 8008b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b5c:	4637      	mov	r7, r6
 8008b5e:	42bb      	cmp	r3, r7
 8008b60:	460e      	mov	r6, r1
 8008b62:	d9f4      	bls.n	8008b4e <_printf_i+0x116>
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d10b      	bne.n	8008b80 <_printf_i+0x148>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	07de      	lsls	r6, r3, #31
 8008b6c:	d508      	bpl.n	8008b80 <_printf_i+0x148>
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	6861      	ldr	r1, [r4, #4]
 8008b72:	4299      	cmp	r1, r3
 8008b74:	bfde      	ittt	le
 8008b76:	2330      	movle	r3, #48	; 0x30
 8008b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b80:	1b52      	subs	r2, r2, r5
 8008b82:	6122      	str	r2, [r4, #16]
 8008b84:	f8cd a000 	str.w	sl, [sp]
 8008b88:	464b      	mov	r3, r9
 8008b8a:	aa03      	add	r2, sp, #12
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f7ff fee4 	bl	800895c <_printf_common>
 8008b94:	3001      	adds	r0, #1
 8008b96:	d14a      	bne.n	8008c2e <_printf_i+0x1f6>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	b004      	add	sp, #16
 8008b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f043 0320 	orr.w	r3, r3, #32
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	4833      	ldr	r0, [pc, #204]	; (8008c78 <_printf_i+0x240>)
 8008bac:	2778      	movs	r7, #120	; 0x78
 8008bae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	6829      	ldr	r1, [r5, #0]
 8008bb6:	061f      	lsls	r7, r3, #24
 8008bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bbc:	d402      	bmi.n	8008bc4 <_printf_i+0x18c>
 8008bbe:	065f      	lsls	r7, r3, #25
 8008bc0:	bf48      	it	mi
 8008bc2:	b2b6      	uxthmi	r6, r6
 8008bc4:	07df      	lsls	r7, r3, #31
 8008bc6:	bf48      	it	mi
 8008bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bcc:	6029      	str	r1, [r5, #0]
 8008bce:	bf48      	it	mi
 8008bd0:	6023      	strmi	r3, [r4, #0]
 8008bd2:	b91e      	cbnz	r6, 8008bdc <_printf_i+0x1a4>
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	f023 0320 	bic.w	r3, r3, #32
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	2310      	movs	r3, #16
 8008bde:	e7a7      	b.n	8008b30 <_printf_i+0xf8>
 8008be0:	4824      	ldr	r0, [pc, #144]	; (8008c74 <_printf_i+0x23c>)
 8008be2:	e7e4      	b.n	8008bae <_printf_i+0x176>
 8008be4:	4615      	mov	r5, r2
 8008be6:	e7bd      	b.n	8008b64 <_printf_i+0x12c>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	6826      	ldr	r6, [r4, #0]
 8008bec:	6961      	ldr	r1, [r4, #20]
 8008bee:	1d18      	adds	r0, r3, #4
 8008bf0:	6028      	str	r0, [r5, #0]
 8008bf2:	0635      	lsls	r5, r6, #24
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	d501      	bpl.n	8008bfc <_printf_i+0x1c4>
 8008bf8:	6019      	str	r1, [r3, #0]
 8008bfa:	e002      	b.n	8008c02 <_printf_i+0x1ca>
 8008bfc:	0670      	lsls	r0, r6, #25
 8008bfe:	d5fb      	bpl.n	8008bf8 <_printf_i+0x1c0>
 8008c00:	8019      	strh	r1, [r3, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	4615      	mov	r5, r2
 8008c08:	e7bc      	b.n	8008b84 <_printf_i+0x14c>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	602a      	str	r2, [r5, #0]
 8008c10:	681d      	ldr	r5, [r3, #0]
 8008c12:	6862      	ldr	r2, [r4, #4]
 8008c14:	2100      	movs	r1, #0
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7f7 fada 	bl	80001d0 <memchr>
 8008c1c:	b108      	cbz	r0, 8008c22 <_printf_i+0x1ea>
 8008c1e:	1b40      	subs	r0, r0, r5
 8008c20:	6060      	str	r0, [r4, #4]
 8008c22:	6863      	ldr	r3, [r4, #4]
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	2300      	movs	r3, #0
 8008c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c2c:	e7aa      	b.n	8008b84 <_printf_i+0x14c>
 8008c2e:	6923      	ldr	r3, [r4, #16]
 8008c30:	462a      	mov	r2, r5
 8008c32:	4649      	mov	r1, r9
 8008c34:	4640      	mov	r0, r8
 8008c36:	47d0      	blx	sl
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d0ad      	beq.n	8008b98 <_printf_i+0x160>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	079b      	lsls	r3, r3, #30
 8008c40:	d413      	bmi.n	8008c6a <_printf_i+0x232>
 8008c42:	68e0      	ldr	r0, [r4, #12]
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	4298      	cmp	r0, r3
 8008c48:	bfb8      	it	lt
 8008c4a:	4618      	movlt	r0, r3
 8008c4c:	e7a6      	b.n	8008b9c <_printf_i+0x164>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4632      	mov	r2, r6
 8008c52:	4649      	mov	r1, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	47d0      	blx	sl
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d09d      	beq.n	8008b98 <_printf_i+0x160>
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	9903      	ldr	r1, [sp, #12]
 8008c62:	1a5b      	subs	r3, r3, r1
 8008c64:	42ab      	cmp	r3, r5
 8008c66:	dcf2      	bgt.n	8008c4e <_printf_i+0x216>
 8008c68:	e7eb      	b.n	8008c42 <_printf_i+0x20a>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	f104 0619 	add.w	r6, r4, #25
 8008c70:	e7f5      	b.n	8008c5e <_printf_i+0x226>
 8008c72:	bf00      	nop
 8008c74:	08009135 	.word	0x08009135
 8008c78:	08009146 	.word	0x08009146

08008c7c <__sflush_r>:
 8008c7c:	898a      	ldrh	r2, [r1, #12]
 8008c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	4605      	mov	r5, r0
 8008c84:	0710      	lsls	r0, r2, #28
 8008c86:	460c      	mov	r4, r1
 8008c88:	d458      	bmi.n	8008d3c <__sflush_r+0xc0>
 8008c8a:	684b      	ldr	r3, [r1, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dc05      	bgt.n	8008c9c <__sflush_r+0x20>
 8008c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	dc02      	bgt.n	8008c9c <__sflush_r+0x20>
 8008c96:	2000      	movs	r0, #0
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	d0f9      	beq.n	8008c96 <__sflush_r+0x1a>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ca8:	682f      	ldr	r7, [r5, #0]
 8008caa:	6a21      	ldr	r1, [r4, #32]
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	d032      	beq.n	8008d16 <__sflush_r+0x9a>
 8008cb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	075a      	lsls	r2, r3, #29
 8008cb6:	d505      	bpl.n	8008cc4 <__sflush_r+0x48>
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	1ac0      	subs	r0, r0, r3
 8008cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cbe:	b10b      	cbz	r3, 8008cc4 <__sflush_r+0x48>
 8008cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cc2:	1ac0      	subs	r0, r0, r3
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cca:	6a21      	ldr	r1, [r4, #32]
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b0      	blx	r6
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	d106      	bne.n	8008ce4 <__sflush_r+0x68>
 8008cd6:	6829      	ldr	r1, [r5, #0]
 8008cd8:	291d      	cmp	r1, #29
 8008cda:	d82b      	bhi.n	8008d34 <__sflush_r+0xb8>
 8008cdc:	4a29      	ldr	r2, [pc, #164]	; (8008d84 <__sflush_r+0x108>)
 8008cde:	410a      	asrs	r2, r1
 8008ce0:	07d6      	lsls	r6, r2, #31
 8008ce2:	d427      	bmi.n	8008d34 <__sflush_r+0xb8>
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	6062      	str	r2, [r4, #4]
 8008ce8:	04d9      	lsls	r1, r3, #19
 8008cea:	6922      	ldr	r2, [r4, #16]
 8008cec:	6022      	str	r2, [r4, #0]
 8008cee:	d504      	bpl.n	8008cfa <__sflush_r+0x7e>
 8008cf0:	1c42      	adds	r2, r0, #1
 8008cf2:	d101      	bne.n	8008cf8 <__sflush_r+0x7c>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b903      	cbnz	r3, 8008cfa <__sflush_r+0x7e>
 8008cf8:	6560      	str	r0, [r4, #84]	; 0x54
 8008cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cfc:	602f      	str	r7, [r5, #0]
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	d0c9      	beq.n	8008c96 <__sflush_r+0x1a>
 8008d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d06:	4299      	cmp	r1, r3
 8008d08:	d002      	beq.n	8008d10 <__sflush_r+0x94>
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f7ff fbea 	bl	80084e4 <_free_r>
 8008d10:	2000      	movs	r0, #0
 8008d12:	6360      	str	r0, [r4, #52]	; 0x34
 8008d14:	e7c0      	b.n	8008c98 <__sflush_r+0x1c>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b0      	blx	r6
 8008d1c:	1c41      	adds	r1, r0, #1
 8008d1e:	d1c8      	bne.n	8008cb2 <__sflush_r+0x36>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0c5      	beq.n	8008cb2 <__sflush_r+0x36>
 8008d26:	2b1d      	cmp	r3, #29
 8008d28:	d001      	beq.n	8008d2e <__sflush_r+0xb2>
 8008d2a:	2b16      	cmp	r3, #22
 8008d2c:	d101      	bne.n	8008d32 <__sflush_r+0xb6>
 8008d2e:	602f      	str	r7, [r5, #0]
 8008d30:	e7b1      	b.n	8008c96 <__sflush_r+0x1a>
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	e7ad      	b.n	8008c98 <__sflush_r+0x1c>
 8008d3c:	690f      	ldr	r7, [r1, #16]
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	d0a9      	beq.n	8008c96 <__sflush_r+0x1a>
 8008d42:	0793      	lsls	r3, r2, #30
 8008d44:	680e      	ldr	r6, [r1, #0]
 8008d46:	bf08      	it	eq
 8008d48:	694b      	ldreq	r3, [r1, #20]
 8008d4a:	600f      	str	r7, [r1, #0]
 8008d4c:	bf18      	it	ne
 8008d4e:	2300      	movne	r3, #0
 8008d50:	eba6 0807 	sub.w	r8, r6, r7
 8008d54:	608b      	str	r3, [r1, #8]
 8008d56:	f1b8 0f00 	cmp.w	r8, #0
 8008d5a:	dd9c      	ble.n	8008c96 <__sflush_r+0x1a>
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d60:	4643      	mov	r3, r8
 8008d62:	463a      	mov	r2, r7
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b0      	blx	r6
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dc06      	bgt.n	8008d7a <__sflush_r+0xfe>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e78e      	b.n	8008c98 <__sflush_r+0x1c>
 8008d7a:	4407      	add	r7, r0
 8008d7c:	eba8 0800 	sub.w	r8, r8, r0
 8008d80:	e7e9      	b.n	8008d56 <__sflush_r+0xda>
 8008d82:	bf00      	nop
 8008d84:	dfbffffe 	.word	0xdfbffffe

08008d88 <_fflush_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b913      	cbnz	r3, 8008d98 <_fflush_r+0x10>
 8008d92:	2500      	movs	r5, #0
 8008d94:	4628      	mov	r0, r5
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	b118      	cbz	r0, 8008da2 <_fflush_r+0x1a>
 8008d9a:	6a03      	ldr	r3, [r0, #32]
 8008d9c:	b90b      	cbnz	r3, 8008da2 <_fflush_r+0x1a>
 8008d9e:	f7ff fa37 	bl	8008210 <__sinit>
 8008da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0f3      	beq.n	8008d92 <_fflush_r+0xa>
 8008daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dac:	07d0      	lsls	r0, r2, #31
 8008dae:	d404      	bmi.n	8008dba <_fflush_r+0x32>
 8008db0:	0599      	lsls	r1, r3, #22
 8008db2:	d402      	bmi.n	8008dba <_fflush_r+0x32>
 8008db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008db6:	f7ff fb85 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8008dba:	4628      	mov	r0, r5
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f7ff ff5d 	bl	8008c7c <__sflush_r>
 8008dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc4:	07da      	lsls	r2, r3, #31
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	d4e4      	bmi.n	8008d94 <_fflush_r+0xc>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	059b      	lsls	r3, r3, #22
 8008dce:	d4e1      	bmi.n	8008d94 <_fflush_r+0xc>
 8008dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dd2:	f7ff fb78 	bl	80084c6 <__retarget_lock_release_recursive>
 8008dd6:	e7dd      	b.n	8008d94 <_fflush_r+0xc>

08008dd8 <__swbuf_r>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	460e      	mov	r6, r1
 8008ddc:	4614      	mov	r4, r2
 8008dde:	4605      	mov	r5, r0
 8008de0:	b118      	cbz	r0, 8008dea <__swbuf_r+0x12>
 8008de2:	6a03      	ldr	r3, [r0, #32]
 8008de4:	b90b      	cbnz	r3, 8008dea <__swbuf_r+0x12>
 8008de6:	f7ff fa13 	bl	8008210 <__sinit>
 8008dea:	69a3      	ldr	r3, [r4, #24]
 8008dec:	60a3      	str	r3, [r4, #8]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	071a      	lsls	r2, r3, #28
 8008df2:	d525      	bpl.n	8008e40 <__swbuf_r+0x68>
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	b31b      	cbz	r3, 8008e40 <__swbuf_r+0x68>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	6922      	ldr	r2, [r4, #16]
 8008dfc:	1a98      	subs	r0, r3, r2
 8008dfe:	6963      	ldr	r3, [r4, #20]
 8008e00:	b2f6      	uxtb	r6, r6
 8008e02:	4283      	cmp	r3, r0
 8008e04:	4637      	mov	r7, r6
 8008e06:	dc04      	bgt.n	8008e12 <__swbuf_r+0x3a>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f7ff ffbc 	bl	8008d88 <_fflush_r>
 8008e10:	b9e0      	cbnz	r0, 8008e4c <__swbuf_r+0x74>
 8008e12:	68a3      	ldr	r3, [r4, #8]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	60a3      	str	r3, [r4, #8]
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	6022      	str	r2, [r4, #0]
 8008e1e:	701e      	strb	r6, [r3, #0]
 8008e20:	6962      	ldr	r2, [r4, #20]
 8008e22:	1c43      	adds	r3, r0, #1
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d004      	beq.n	8008e32 <__swbuf_r+0x5a>
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	07db      	lsls	r3, r3, #31
 8008e2c:	d506      	bpl.n	8008e3c <__swbuf_r+0x64>
 8008e2e:	2e0a      	cmp	r6, #10
 8008e30:	d104      	bne.n	8008e3c <__swbuf_r+0x64>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4628      	mov	r0, r5
 8008e36:	f7ff ffa7 	bl	8008d88 <_fflush_r>
 8008e3a:	b938      	cbnz	r0, 8008e4c <__swbuf_r+0x74>
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e40:	4621      	mov	r1, r4
 8008e42:	4628      	mov	r0, r5
 8008e44:	f000 f806 	bl	8008e54 <__swsetup_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d0d5      	beq.n	8008df8 <__swbuf_r+0x20>
 8008e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e50:	e7f4      	b.n	8008e3c <__swbuf_r+0x64>
	...

08008e54 <__swsetup_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4b2a      	ldr	r3, [pc, #168]	; (8008f00 <__swsetup_r+0xac>)
 8008e58:	4605      	mov	r5, r0
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	b118      	cbz	r0, 8008e68 <__swsetup_r+0x14>
 8008e60:	6a03      	ldr	r3, [r0, #32]
 8008e62:	b90b      	cbnz	r3, 8008e68 <__swsetup_r+0x14>
 8008e64:	f7ff f9d4 	bl	8008210 <__sinit>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e6e:	0718      	lsls	r0, r3, #28
 8008e70:	d422      	bmi.n	8008eb8 <__swsetup_r+0x64>
 8008e72:	06d9      	lsls	r1, r3, #27
 8008e74:	d407      	bmi.n	8008e86 <__swsetup_r+0x32>
 8008e76:	2309      	movs	r3, #9
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	e034      	b.n	8008ef0 <__swsetup_r+0x9c>
 8008e86:	0758      	lsls	r0, r3, #29
 8008e88:	d512      	bpl.n	8008eb0 <__swsetup_r+0x5c>
 8008e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8c:	b141      	cbz	r1, 8008ea0 <__swsetup_r+0x4c>
 8008e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e92:	4299      	cmp	r1, r3
 8008e94:	d002      	beq.n	8008e9c <__swsetup_r+0x48>
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7ff fb24 	bl	80084e4 <_free_r>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	6063      	str	r3, [r4, #4]
 8008eac:	6923      	ldr	r3, [r4, #16]
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f043 0308 	orr.w	r3, r3, #8
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	b94b      	cbnz	r3, 8008ed0 <__swsetup_r+0x7c>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec6:	d003      	beq.n	8008ed0 <__swsetup_r+0x7c>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 f850 	bl	8008f70 <__smakebuf_r>
 8008ed0:	89a0      	ldrh	r0, [r4, #12]
 8008ed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed6:	f010 0301 	ands.w	r3, r0, #1
 8008eda:	d00a      	beq.n	8008ef2 <__swsetup_r+0x9e>
 8008edc:	2300      	movs	r3, #0
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	6963      	ldr	r3, [r4, #20]
 8008ee2:	425b      	negs	r3, r3
 8008ee4:	61a3      	str	r3, [r4, #24]
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	b943      	cbnz	r3, 8008efc <__swsetup_r+0xa8>
 8008eea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008eee:	d1c4      	bne.n	8008e7a <__swsetup_r+0x26>
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
 8008ef2:	0781      	lsls	r1, r0, #30
 8008ef4:	bf58      	it	pl
 8008ef6:	6963      	ldrpl	r3, [r4, #20]
 8008ef8:	60a3      	str	r3, [r4, #8]
 8008efa:	e7f4      	b.n	8008ee6 <__swsetup_r+0x92>
 8008efc:	2000      	movs	r0, #0
 8008efe:	e7f7      	b.n	8008ef0 <__swsetup_r+0x9c>
 8008f00:	20000068 	.word	0x20000068

08008f04 <_sbrk_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d06      	ldr	r5, [pc, #24]	; (8008f20 <_sbrk_r+0x1c>)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	f7f8 f9d6 	bl	80012c0 <_sbrk>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_sbrk_r+0x1a>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_sbrk_r+0x1a>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20001e60 	.word	0x20001e60

08008f24 <__swhatbuf_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	460c      	mov	r4, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	b096      	sub	sp, #88	; 0x58
 8008f30:	4615      	mov	r5, r2
 8008f32:	461e      	mov	r6, r3
 8008f34:	da0d      	bge.n	8008f52 <__swhatbuf_r+0x2e>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f3c:	f04f 0100 	mov.w	r1, #0
 8008f40:	bf0c      	ite	eq
 8008f42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f46:	2340      	movne	r3, #64	; 0x40
 8008f48:	2000      	movs	r0, #0
 8008f4a:	6031      	str	r1, [r6, #0]
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	b016      	add	sp, #88	; 0x58
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	466a      	mov	r2, sp
 8008f54:	f000 f848 	bl	8008fe8 <_fstat_r>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	dbec      	blt.n	8008f36 <__swhatbuf_r+0x12>
 8008f5c:	9901      	ldr	r1, [sp, #4]
 8008f5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f66:	4259      	negs	r1, r3
 8008f68:	4159      	adcs	r1, r3
 8008f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6e:	e7eb      	b.n	8008f48 <__swhatbuf_r+0x24>

08008f70 <__smakebuf_r>:
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f74:	079d      	lsls	r5, r3, #30
 8008f76:	4606      	mov	r6, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d507      	bpl.n	8008f8c <__smakebuf_r+0x1c>
 8008f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	ab01      	add	r3, sp, #4
 8008f8e:	466a      	mov	r2, sp
 8008f90:	f7ff ffc8 	bl	8008f24 <__swhatbuf_r>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff fb0f 	bl	80085bc <_malloc_r>
 8008f9e:	b948      	cbnz	r0, 8008fb4 <__smakebuf_r+0x44>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d4ef      	bmi.n	8008f88 <__smakebuf_r+0x18>
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7e3      	b.n	8008f7c <__smakebuf_r+0xc>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	6020      	str	r0, [r4, #0]
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	6163      	str	r3, [r4, #20]
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	6120      	str	r0, [r4, #16]
 8008fc6:	b15b      	cbz	r3, 8008fe0 <__smakebuf_r+0x70>
 8008fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f81d 	bl	800900c <_isatty_r>
 8008fd2:	b128      	cbz	r0, 8008fe0 <__smakebuf_r+0x70>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	431d      	orrs	r5, r3
 8008fe4:	81a5      	strh	r5, [r4, #12]
 8008fe6:	e7cf      	b.n	8008f88 <__smakebuf_r+0x18>

08008fe8 <_fstat_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d07      	ldr	r5, [pc, #28]	; (8009008 <_fstat_r+0x20>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	f7f8 f93a 	bl	800126e <_fstat>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d102      	bne.n	8009004 <_fstat_r+0x1c>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	b103      	cbz	r3, 8009004 <_fstat_r+0x1c>
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	bd38      	pop	{r3, r4, r5, pc}
 8009006:	bf00      	nop
 8009008:	20001e60 	.word	0x20001e60

0800900c <_isatty_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d06      	ldr	r5, [pc, #24]	; (8009028 <_isatty_r+0x1c>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f8 f939 	bl	800128e <_isatty>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_isatty_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_isatty_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20001e60 	.word	0x20001e60

0800902c <_init>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr

08009038 <_fini>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr
