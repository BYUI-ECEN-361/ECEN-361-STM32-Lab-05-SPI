
ECEN-361-STM32-Lab-05-SPI-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec0  08007ec0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  2000006c  08007f34  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  08007f34  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d97d  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ced  00000000  00000000  0003da5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00041750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ed  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000295bb  00000000  00000000  000444e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ccdf  00000000  00000000  0006daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001011e8  00000000  00000000  0008a77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073b8  00000000  00000000  0018b968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00192d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d8c 	.word	0x08007d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007d8c 	.word	0x08007d8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f989 	bl	80018b4 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f978 	bl	80018b4 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f96d 	bl	80018b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f967 	bl	80018b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f961 	bl	80018b4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	  // Clear the LED lights
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2120      	movs	r1, #32
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 f94e 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f001 f948 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f942 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <Clear_LEDs+0x38>)
 8000636:	f001 f93d 	bl	80018b4 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	48000400 	.word	0x48000400

08000644 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MultiFunctionShield_Clear+0x28>)
 800064c:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MultiFunctionShield_Clear+0x28>)
 8000652:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <MultiFunctionShield_Clear+0x28>)
 8000658:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800065a:	22ff      	movs	r2, #255	; 0xff
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <MultiFunctionShield_Clear+0x28>)
 800065e:	70da      	strb	r2, [r3, #3]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000008c 	.word	0x2000008c

08000670 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000680:	f001 f918 	bl	80018b4 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000684:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000688:	5cd3      	ldrb	r3, [r2, r3]
 800068a:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f7ff ff63 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006a6:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f7ff ff53 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2120      	movs	r1, #32
 80006ca:	4803      	ldr	r0, [pc, #12]	; (80006d8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006cc:	f001 f8f2 	bl	80018b4 <HAL_GPIO_WritePin>
	}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	48000400 	.word	0x48000400
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	08007e14 	.word	0x08007e14

080006e4 <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MultiFunctionShield__ISRFunc+0x60>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MultiFunctionShield__ISRFunc+0x60>)
 80006f4:	4611      	mov	r1, r2
 80006f6:	7019      	strb	r1, [r3, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	3b01      	subs	r3, #1
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d81e      	bhi.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
 8000700:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <MultiFunctionShield__ISRFunc+0x24>)
 8000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000706:	bf00      	nop
 8000708:	08000719 	.word	0x08000719
 800070c:	08000721 	.word	0x08000721
 8000710:	08000729 	.word	0x08000729
 8000714:	08000731 	.word	0x08000731
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ffa9 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	e00e      	b.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ffa5 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 8000726:	e00a      	b.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff ffa1 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 800072e:	e006      	b.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000730:	2003      	movs	r0, #3
 8000732:	f7ff ff9d 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 8000736:	4b03      	ldr	r3, [pc, #12]	; (8000744 <MultiFunctionShield__ISRFunc+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	bf00      	nop
  }
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000088 	.word	0x20000088

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fdc2 	bl	80012d4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f83a 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f958 	bl	8000a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000758:	f000 f926 	bl	80009a8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800075c:	f000 f8fe 	bl	800095c <MX_TIM17_Init>
  MX_SPI2_Init();
 8000760:	f000 f884 	bl	800086c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000764:	f000 f8c0 	bl	80008e8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  // HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_Base_Start_IT(&htim17);  // LED SevenSeg cycle thru them
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <main+0x64>)
 800076a:	f002 fd07 	bl	800317c <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();
 800076e:	f7ff ff69 	bl	8000644 <MultiFunctionShield_Clear>
  Clear_LEDs();  // Clear the lights
 8000772:	f7ff ff49 	bl	8000608 <Clear_LEDs>
  printf("\033\143Welcome to ECEN-361 Lab-05\n\r\n\r");
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <main+0x68>)
 8000778:	f006 fc30 	bl	8006fdc <iprintf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800077c:	f003 fe04 	bl	8004388 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <main+0x6c>)
 8000782:	2100      	movs	r1, #0
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <main+0x70>)
 8000786:	f003 fe49 	bl	800441c <osThreadNew>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <main+0x74>)
 800078e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
   osThreadNew(Read_and_Transmit_Task, NULL, &defaultTask_attributes);
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <main+0x6c>)
 8000792:	2100      	movs	r1, #0
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <main+0x78>)
 8000796:	f003 fe41 	bl	800441c <osThreadNew>
   osThreadNew(Receive_and_Print_Task, NULL, &defaultTask_attributes);
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <main+0x6c>)
 800079c:	2100      	movs	r1, #0
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <main+0x7c>)
 80007a0:	f003 fe3c 	bl	800441c <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a4:	f003 fe14 	bl	80043d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x60>
 80007aa:	bf00      	nop
 80007ac:	20000158 	.word	0x20000158
 80007b0:	08007db0 	.word	0x08007db0
 80007b4:	08007e18 	.word	0x08007e18
 80007b8:	08000ccd 	.word	0x08000ccd
 80007bc:	2000022c 	.word	0x2000022c
 80007c0:	08000bb9 	.word	0x08000bb9
 80007c4:	08000c9d 	.word	0x08000c9d

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2244      	movs	r2, #68	; 0x44
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 fc55 	bl	8007086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ee:	f001 f887 	bl	8001900 <HAL_PWREx_ControlVoltageScaling>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f8:	f000 fa88 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081a:	2307      	movs	r3, #7
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f8be 	bl	80019ac <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000836:	f000 fa69 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	2104      	movs	r1, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fc86 	bl	8002164 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085e:	f000 fa55 	bl	8000d0c <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3758      	adds	r7, #88	; 0x58
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_SPI2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000886:	f44f 7240 	mov.w	r2, #768	; 0x300
 800088a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI2_Init+0x74>)
 800089a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800089e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_SPI2_Init+0x74>)
 80008cc:	f002 fb5c 	bl	8002f88 <HAL_SPI_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fa19 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000090 	.word	0x20000090
 80008e4:	40003800 	.word	0x40003800

080008e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_SPI3_Init+0x6c>)
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <MX_SPI3_Init+0x70>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI3_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI3_Init+0x6c>)
 80008fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000902:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000906:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI3_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI3_Init+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI3_Init+0x6c>)
 800092e:	2207      	movs	r2, #7
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI3_Init+0x6c>)
 800093a:	2200      	movs	r2, #0
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_SPI3_Init+0x6c>)
 8000940:	f002 fb22 	bl	8002f88 <HAL_SPI_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 800094a:	f000 f9df 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000f4 	.word	0x200000f4
 8000958:	40003c00 	.word	0x40003c00

0800095c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <MX_TIM17_Init+0x48>)
 8000964:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000968:	f240 321f 	movw	r2, #799	; 0x31f
 800096c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_TIM17_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_TIM17_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_TIM17_Init+0x44>)
 800098e:	f002 fb9e 	bl	80030ce <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000998:	f000 f9b8 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000158 	.word	0x20000158
 80009a4:	40014800 	.word	0x40014800

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART2_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ec:	f002 fe18 	bl	8003620 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f989 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001a4 	.word	0x200001a4
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b63      	ldr	r3, [pc, #396]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a62      	ldr	r2, [pc, #392]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b60      	ldr	r3, [pc, #384]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a5c      	ldr	r2, [pc, #368]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b5a      	ldr	r3, [pc, #360]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b57      	ldr	r3, [pc, #348]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a56      	ldr	r2, [pc, #344]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b54      	ldr	r3, [pc, #336]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b51      	ldr	r3, [pc, #324]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a50      	ldr	r2, [pc, #320]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <MX_GPIO_Init+0x1a4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 ff14 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 ff0e 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	4844      	ldr	r0, [pc, #272]	; (8000bb0 <MX_GPIO_Init+0x1a8>)
 8000a9e:	f000 ff09 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4842      	ldr	r0, [pc, #264]	; (8000bb0 <MX_GPIO_Init+0x1a8>)
 8000aa8:	f000 ff04 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	483c      	ldr	r0, [pc, #240]	; (8000bb4 <MX_GPIO_Init+0x1ac>)
 8000ac4:	f000 fd4c 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000acc:	230b      	movs	r3, #11
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4836      	ldr	r0, [pc, #216]	; (8000bb4 <MX_GPIO_Init+0x1ac>)
 8000adc:	f000 fd40 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f000 fd33 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000afa:	2312      	movs	r3, #18
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fd26 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000b14:	23e0      	movs	r3, #224	; 0xe0
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b18:	2311      	movs	r3, #17
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f000 fd17 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <MX_GPIO_Init+0x1a8>)
 8000b46:	f000 fd0b 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fcfb 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <MX_GPIO_Init+0x1a8>)
 8000b82:	f000 fced 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b8a:	2311      	movs	r3, #17
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_GPIO_Init+0x1a8>)
 8000b9e:	f000 fcdf 	bl	8001560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	48000800 	.word	0x48000800

08000bb8 <Read_and_Transmit_Task>:
		}
	}


void Read_and_Transmit_Task()
	{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b0ce      	sub	sp, #312	; 0x138
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t receive_byte;
	uint8_t receive_buffer[255];
	uint8_t bytes_in =0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000bc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000bcc:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <Read_and_Transmit_Task+0xd8>)
 8000bce:	461c      	mov	r4, r3
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bda:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000bde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000be2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000be6:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <Read_and_Transmit_Task+0xdc>)
 8000be8:	461c      	mov	r4, r3
 8000bea:	4613      	mov	r3, r2
 8000bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bee:	c407      	stmia	r4!, {r0, r1, r2}
 8000bf0:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint8_t *sndmsg_ptr = sndmsg;
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	while(true)
		{
		bytes_in = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		receive_byte = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2217      	movs	r2, #23
 8000c12:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000c16:	4820      	ldr	r0, [pc, #128]	; (8000c98 <Read_and_Transmit_Task+0xe0>)
 8000c18:	f002 fd50 	bl	80036bc <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000c1c:	e021      	b.n	8000c62 <Read_and_Transmit_Task+0xaa>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fb98 	bl	8001354 <HAL_Delay>
 8000c24:	f207 112b 	addw	r1, r7, #299	; 0x12b
 8000c28:	230a      	movs	r3, #10
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	481a      	ldr	r0, [pc, #104]	; (8000c98 <Read_and_Transmit_Task+0xe0>)
 8000c2e:	f002 fdcf 	bl	80037d0 <HAL_UART_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f2      	bne.n	8000c1e <Read_and_Transmit_Task+0x66>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			receive_buffer[bytes_in++] = receive_byte;
 8000c38:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	f887 2137 	strb.w	r2, [r7, #311]	; 0x137
 8000c42:	461a      	mov	r2, r3
 8000c44:	f897 112b 	ldrb.w	r1, [r7, #299]	; 0x12b
 8000c48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c50:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart2, &receive_byte , 1, HAL_MAX_DELAY);
 8000c52:	f207 112b 	addw	r1, r7, #299	; 0x12b
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	480e      	ldr	r0, [pc, #56]	; (8000c98 <Read_and_Transmit_Task+0xe0>)
 8000c5e:	f002 fd2d 	bl	80036bc <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000c62:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8000c66:	2b0d      	cmp	r3, #13
 8000c68:	d1dc      	bne.n	8000c24 <Read_and_Transmit_Task+0x6c>
		}

		// printf("Sending:%s\n\r",receive_buf_ptr);
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	220d      	movs	r2, #13
 8000c70:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <Read_and_Transmit_Task+0xe0>)
 8000c76:	f002 fd21 	bl	80036bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &receive_buffer, bytes_in, HAL_MAX_DELAY);
 8000c7a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <Read_and_Transmit_Task+0xe0>)
 8000c8a:	f002 fd17 	bl	80036bc <HAL_UART_Transmit>
		bytes_in = 0;
 8000c8e:	e7b7      	b.n	8000c00 <Read_and_Transmit_Task+0x48>
 8000c90:	08007dd4 	.word	0x08007dd4
 8000c94:	08007dec 	.word	0x08007dec
 8000c98:	200001a4 	.word	0x200001a4

08000c9c <Receive_and_Print_Task>:

		}
	}

void Receive_and_Print_Task(void *argument)
	{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	while(true)
		__NOP();
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Receive_and_Print_Task+0x8>

08000ca8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <__io_putchar+0x20>)
 8000cba:	f002 fcff 	bl	80036bc <HAL_UART_Transmit>

  return ch;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001a4 	.word	0x200001a4

08000ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f003 fc33 	bl	8004540 <osDelay>
 8000cda:	e7fb      	b.n	8000cd4 <StartDefaultTask+0x8>

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000cec:	f7ff fcfa 	bl	80006e4 <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d101      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000cfa:	f000 fb0b 	bl	8001314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000158 	.word	0x20000158

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	210f      	movs	r1, #15
 8000d52:	f06f 0001 	mvn.w	r0, #1
 8000d56:	f000 fbd9 	bl	800150c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <HAL_SPI_MspInit+0x150>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d145      	bne.n	8000e16 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de2:	2305      	movs	r3, #5
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <HAL_SPI_MspInit+0x158>)
 8000dee:	f000 fbb7 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000df2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e04:	2305      	movs	r3, #5
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	482d      	ldr	r0, [pc, #180]	; (8000ec4 <HAL_SPI_MspInit+0x15c>)
 8000e10:	f000 fba6 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e14:	e04b      	b.n	8000eae <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <HAL_SPI_MspInit+0x160>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d146      	bne.n	8000eae <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x154>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f000 fb6a 	bl	8001560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x158>)
 8000eaa:	f000 fb59 	bl	8001560 <HAL_GPIO_Init>
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	; 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40003800 	.word	0x40003800
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	40003c00 	.word	0x40003c00

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_TIM_Base_MspInit+0x44>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d113      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2105      	movs	r1, #5
 8000efa:	201a      	movs	r0, #26
 8000efc:	f000 fb06 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f00:	201a      	movs	r0, #26
 8000f02:	f000 fb1f 	bl	8001544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40014800 	.word	0x40014800
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ac      	sub	sp, #176	; 0xb0
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2288      	movs	r2, #136	; 0x88
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 f8a4 	bl	8007086 <memset>
  if(huart->Instance==USART2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_UART_MspInit+0xb0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d13b      	bne.n	8000fc0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fb5b 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f60:	f7ff fed4 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0xb4>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0xb4>)
 8000f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_UART_MspInit+0xb4>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_UART_MspInit+0xb4>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_UART_MspInit+0xb4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_UART_MspInit+0xb4>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f94:	230c      	movs	r3, #12
 8000f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fac:	2307      	movs	r3, #7
 8000fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f000 fad0 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	37b0      	adds	r7, #176	; 0xb0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_InitTick+0xe0>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <HAL_InitTick+0xe0>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_InitTick+0xe0>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff6:	f107 0210 	add.w	r2, r7, #16
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fa73 	bl	80024ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d103      	bne.n	8001018 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001010:	f001 fa40 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8001014:	6378      	str	r0, [r7, #52]	; 0x34
 8001016:	e004      	b.n	8001022 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001018:	f001 fa3c 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 800101c:	4603      	mov	r3, r0
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_InitTick+0xe4>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	0c9b      	lsrs	r3, r3, #18
 800102c:	3b01      	subs	r3, #1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_InitTick+0xe8>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_InitTick+0xe8>)
 800103a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800103e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_InitTick+0xe8>)
 8001042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001044:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_InitTick+0xe8>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_InitTick+0xe8>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_InitTick+0xe8>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001058:	4817      	ldr	r0, [pc, #92]	; (80010b8 <HAL_InitTick+0xe8>)
 800105a:	f002 f838 	bl	80030ce <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001064:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11b      	bne.n	80010a4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <HAL_InitTick+0xe8>)
 800106e:	f002 f885 	bl	800317c <HAL_TIM_Base_Start_IT>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800107c:	2b00      	cmp	r3, #0
 800107e:	d111      	bne.n	80010a4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001080:	201c      	movs	r0, #28
 8001082:	f000 fa5f 	bl	8001544 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d808      	bhi.n	800109e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	201c      	movs	r0, #28
 8001092:	f000 fa3b 	bl	800150c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_InitTick+0xec>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e002      	b.n	80010a4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	431bde83 	.word	0x431bde83
 80010b8:	20000230 	.word	0x20000230
 80010bc:	20000004 	.word	0x20000004

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80010f2:	f002 f8b3 	bl	800325c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000158 	.word	0x20000158

08001100 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM2_IRQHandler+0x10>)
 8001106:	f002 f8a9 	bl	800325c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000230 	.word	0x20000230

08001114 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e00a      	b.n	800113c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	4601      	mov	r1, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbf0      	blt.n	8001126 <_read+0x12>
  }

  return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e009      	b.n	8001174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fd9d 	bl	8000ca8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf1      	blt.n	8001160 <_write+0x12>
  }
  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
  return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_isatty>:

int _isatty(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f005 ffd6 	bl	80071d0 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20018000 	.word	0x20018000
 8001250:	00000400 	.word	0x00000400
 8001254:	2000027c 	.word	0x2000027c
 8001258:	20001d70 	.word	0x20001d70

0800125c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001284:	f7ff ffea 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f005 ff95 	bl	80071dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b2:	f7ff fa49 	bl	8000748 <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012c4:	08007ec8 	.word	0x08007ec8
  ldr r2, =_sbss
 80012c8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012cc:	20001d70 	.word	0x20001d70

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_Init+0x3c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_Init+0x3c>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f903 	bl	80014f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f0:	200f      	movs	r0, #15
 80012f2:	f7ff fe6d 	bl	8000fd0 <HAL_InitTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	e001      	b.n	8001306 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001302:	f7ff fd09 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001306:	79fb      	ldrb	r3, [r7, #7]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	20000280 	.word	0x20000280

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000280 	.word	0x20000280

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff4c 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800151e:	f7ff ff61 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001522:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	6978      	ldr	r0, [r7, #20]
 800152a:	f7ff ffb1 	bl	8001490 <NVIC_EncodePriority>
 800152e:	4602      	mov	r2, r0
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff80 	bl	800143c <__NVIC_SetPriority>
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff54 	bl	8001400 <__NVIC_EnableIRQ>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e17f      	b.n	8001870 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8171 	beq.w	800186a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d118      	bne.n	8001640 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ac 	beq.w	800186a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172a:	4a5a      	ldr	r2, [pc, #360]	; (8001894 <HAL_GPIO_Init+0x334>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	; (8001898 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	; (800189c <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	; (80018a0 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x22a>
 8001786:	2306      	movs	r3, #6
 8001788:	e00c      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178a:	2307      	movs	r3, #7
 800178c:	e00a      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178e:	2305      	movs	r3, #5
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001792:	2304      	movs	r3, #4
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 80017a2:	2300      	movs	r3, #0
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_GPIO_Init+0x350>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_GPIO_Init+0x350>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_GPIO_Init+0x350>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_GPIO_Init+0x350>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae78 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	48000400 	.word	0x48000400
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000c00 	.word	0x48000c00
 80018a4:	48001000 	.word	0x48001000
 80018a8:	48001400 	.word	0x48001400
 80018ac:	48001800 	.word	0x48001800
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190e:	d130      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191c:	d038      	beq.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2232      	movs	r2, #50	; 0x32
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001944:	e002      	b.n	800194c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001958:	d102      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f2      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d110      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e00f      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d007      	beq.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001988:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000
 80019a4:	20000000 	.word	0x20000000
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e3ca      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019be:	4b97      	ldr	r3, [pc, #604]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c8:	4b94      	ldr	r3, [pc, #592]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80e4 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4a>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	f040 808b 	bne.w	8001b04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	f040 8087 	bne.w	8001b04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f6:	4b89      	ldr	r3, [pc, #548]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x62>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e3a2      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_RCC_OscConfig+0x7c>
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_OscConfig+0x88>
 8001a28:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d223      	bcs.n	8001a80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fd87 	bl	8002550 <RCC_SetFlashLatencyFromMSIRange>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e383      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4c:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	496d      	ldr	r1, [pc, #436]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6a:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	4968      	ldr	r1, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
 8001a7e:	e025      	b.n	8001acc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a80:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4960      	ldr	r1, [pc, #384]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	495b      	ldr	r1, [pc, #364]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fd47 	bl	8002550 <RCC_SetFlashLatencyFromMSIRange>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e343      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001acc:	f000 fc4a 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	4950      	ldr	r1, [pc, #320]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001aea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aec:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fa6d 	bl	8000fd0 <HAL_InitTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d052      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	e327      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d032      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc10 	bl	800133c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b20:	f7ff fc0c 	bl	800133c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e310      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a36      	ldr	r2, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4931      	ldr	r1, [pc, #196]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	492c      	ldr	r1, [pc, #176]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e01a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fbdd 	bl	800133c <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b86:	f7ff fbd9 	bl	800133c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e2dd      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b98:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x1da>
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d074      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x21a>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d10e      	bne.n	8001bde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d064      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d160      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e2ba      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e026      	b.n	8001c44 <HAL_RCC_OscConfig+0x298>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfe:	d115      	bne.n	8001c2c <HAL_RCC_OscConfig+0x280>
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a02      	ldr	r2, [pc, #8]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e014      	b.n	8001c44 <HAL_RCC_OscConfig+0x298>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08007e3c 	.word	0x08007e3c
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	4ba0      	ldr	r3, [pc, #640]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a9f      	ldr	r2, [pc, #636]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a9c      	ldr	r2, [pc, #624]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb76 	bl	800133c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fb72 	bl	800133c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e276      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2a8>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fb62 	bl	800133c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fb5e 	bl	800133c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e262      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2d0>
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d060      	beq.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_OscConfig+0x310>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d116      	bne.n	8001cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x328>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e23f      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	4973      	ldr	r1, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce8:	e040      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d023      	beq.n	8001d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb1d 	bl	800133c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fb19 	bl	800133c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e21d      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	495f      	ldr	r1, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e018      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff faf9 	bl	800133c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff faf5 	bl	800133c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1f9      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d03c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01c      	beq.n	8001dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff fad4 	bl	800133c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fad0 	bl	800133c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1d4      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ef      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3ec>
 8001db8:	e01b      	b.n	8001df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff fab7 	bl	800133c <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fab3 	bl	800133c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1b7      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a6 	beq.w	8001f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d118      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fa7a 	bl	800133c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7ff fa76 	bl	800133c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e17a      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4d8>
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e82:	e029      	b.n	8001ed8 <HAL_RCC_OscConfig+0x52c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d115      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x50c>
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x52c>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	4a9b      	ldr	r2, [pc, #620]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec8:	4b98      	ldr	r3, [pc, #608]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	4a97      	ldr	r2, [pc, #604]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fa2c 	bl	800133c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fa28 	bl	800133c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e12a      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b8b      	ldr	r3, [pc, #556]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x53c>
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fa15 	bl	800133c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff fa11 	bl	800133c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e113      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	4b7f      	ldr	r3, [pc, #508]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ed      	bne.n	8001f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b7a      	ldr	r3, [pc, #488]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a79      	ldr	r2, [pc, #484]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80fe 	beq.w	8002152 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	f040 80d0 	bne.w	8002100 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f60:	4b72      	ldr	r3, [pc, #456]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d130      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d127      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d11f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa0:	2a07      	cmp	r2, #7
 8001fa2:	bf14      	ite	ne
 8001fa4:	2201      	movne	r2, #1
 8001fa6:	2200      	moveq	r2, #0
 8001fa8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d113      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d06e      	beq.n	80020b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	d069      	beq.n	80020b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0ad      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002004:	f7ff f99a 	bl	800133c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff f996 	bl	800133c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e09a      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202a:	4b40      	ldr	r3, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x780>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x784>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800203a:	3a01      	subs	r2, #1
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002044:	0212      	lsls	r2, r2, #8
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800204c:	0852      	lsrs	r2, r2, #1
 800204e:	3a01      	subs	r2, #1
 8002050:	0552      	lsls	r2, r2, #21
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002058:	0852      	lsrs	r2, r2, #1
 800205a:	3a01      	subs	r2, #1
 800205c:	0652      	lsls	r2, r2, #25
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002064:	0912      	lsrs	r2, r2, #4
 8002066:	0452      	lsls	r2, r2, #17
 8002068:	430a      	orrs	r2, r1
 800206a:	4930      	ldr	r1, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x780>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002070:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a2d      	ldr	r2, [pc, #180]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_OscConfig+0x780>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002088:	f7ff f958 	bl	800133c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f954 	bl	800133c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e058      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ae:	e050      	b.n	8002152 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e04f      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d148      	bne.n	8002152 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a16      	ldr	r2, [pc, #88]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d8:	f7ff f930 	bl	800133c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f92c 	bl	800133c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e030      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_RCC_OscConfig+0x780>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x734>
 80020fe:	e028      	b.n	8002152 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d023      	beq.n	800214e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_OscConfig+0x780>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_RCC_OscConfig+0x780>)
 800210c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff f913 	bl	800133c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	e00c      	b.n	8002134 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff f90f 	bl	800133c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d905      	bls.n	8002134 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e013      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
 800212c:	40021000 	.word	0x40021000
 8002130:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_OscConfig+0x7b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ec      	bne.n	800211a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x7b0>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4905      	ldr	r1, [pc, #20]	; (800215c <HAL_RCC_OscConfig+0x7b0>)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x7b4>)
 8002148:	4013      	ands	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e001      	b.n	8002152 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	feeefffc 	.word	0xfeeefffc

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0e7      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b75      	ldr	r3, [pc, #468]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b72      	ldr	r3, [pc, #456]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4970      	ldr	r1, [pc, #448]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b6e      	ldr	r3, [pc, #440]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cf      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4960      	ldr	r1, [pc, #384]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04c      	beq.n	800227c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d121      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0a6      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	4b54      	ldr	r3, [pc, #336]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e09a      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221a:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e08e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222a:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e086      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4943      	ldr	r1, [pc, #268]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7ff f876 	bl	800133c <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff f872 	bl	800133c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e06e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002294:	429a      	cmp	r2, r3
 8002296:	d208      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	492b      	ldr	r1, [pc, #172]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d210      	bcs.n	80022da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4923      	ldr	r1, [pc, #140]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e036      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4918      	ldr	r1, [pc, #96]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4910      	ldr	r1, [pc, #64]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 f824 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	490b      	ldr	r1, [pc, #44]	; (8002358 <HAL_RCC_ClockConfig+0x1f4>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1f8>)
 8002336:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1fc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fe47 	bl	8000fd0 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	72fb      	strb	r3, [r7, #11]

  return status;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08007e3c 	.word	0x08007e3c
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x34>
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d11e      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e004      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d134      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0xa6>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d003      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0xac>
 8002408:	e005      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	e005      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 8002412:	617b      	str	r3, [r7, #20]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	fb03 f202 	mul.w	r2, r3, r2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0e5b      	lsrs	r3, r3, #25
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800245c:	69bb      	ldr	r3, [r7, #24]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	08007e54 	.word	0x08007e54
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200

0800247c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000000 	.word	0x20000000

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08007e4c 	.word	0x08007e4c

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c4:	f7ff ffda 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08007e4c 	.word	0x08007e4c

080024ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	220f      	movs	r2, #15
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_RCC_GetClockConfig+0x60>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0207 	and.w	r2, r3, #7
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40022000 	.word	0x40022000

08002550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002568:	f7ff f9bc 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
 800256c:	6178      	str	r0, [r7, #20]
 800256e:	e014      	b.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	6593      	str	r3, [r2, #88]	; 0x58
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002588:	f7ff f9ac 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
 800258c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d10b      	bne.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d919      	bls.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2ba0      	cmp	r3, #160	; 0xa0
 80025ac:	d902      	bls.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ae:	2302      	movs	r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	e013      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b4:	2301      	movs	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e010      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d902      	bls.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025c0:	2303      	movs	r3, #3
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	e00a      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d102      	bne.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025cc:	2302      	movs	r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e004      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b70      	cmp	r3, #112	; 0x70
 80025d6:	d101      	bne.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 0207 	bic.w	r2, r3, #7
 80025e4:	4909      	ldr	r1, [pc, #36]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	40022000 	.word	0x40022000

08002610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002618:	2300      	movs	r3, #0
 800261a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800261c:	2300      	movs	r3, #0
 800261e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	2b00      	cmp	r3, #0
 800262a:	d041      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002634:	d02a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002636:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800263a:	d824      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800263c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002640:	d008      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002646:	d81e      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800264c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002650:	d010      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002652:	e018      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002654:	4b86      	ldr	r3, [pc, #536]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a85      	ldr	r2, [pc, #532]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002660:	e015      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fabb 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002672:	e00c      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3320      	adds	r3, #32
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fba6 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002684:	e003      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	74fb      	strb	r3, [r7, #19]
      break;
 800268a:	e000      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800268c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002694:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a2:	4973      	ldr	r1, [pc, #460]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026aa:	e001      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d041      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026c4:	d02a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ca:	d824      	bhi.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d6:	d81e      	bhi.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d010      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026e2:	e018      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e4:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a61      	ldr	r2, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f0:	e015      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fa73 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002702:	e00c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3320      	adds	r3, #32
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fb5e 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002714:	e003      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	74fb      	strb	r3, [r7, #19]
      break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800271c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002724:	4b52      	ldr	r3, [pc, #328]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002732:	494f      	ldr	r1, [pc, #316]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a0 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4a40      	ldr	r2, [pc, #256]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	; 0x58
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002780:	2301      	movs	r3, #1
 8002782:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002790:	f7fe fdd4 	bl	800133c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002796:	e009      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe fdd0 	bl	800133c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	74fb      	strb	r3, [r7, #19]
        break;
 80027aa:	e005      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ac:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d15c      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d019      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fd8f 	bl	800133c <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	e00b      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fd8b 	bl	800133c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d902      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	74fb      	strb	r3, [r7, #19]
            break;
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ec      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
 800286c:	e006      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287c:	7c7b      	ldrb	r3, [r7, #17]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d105      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002882:	4b9e      	ldr	r3, [pc, #632]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a9d      	ldr	r2, [pc, #628]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289a:	4b98      	ldr	r3, [pc, #608]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 0203 	bic.w	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4994      	ldr	r1, [pc, #592]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028bc:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 020c 	bic.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	498c      	ldr	r1, [pc, #560]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028de:	4b87      	ldr	r3, [pc, #540]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4983      	ldr	r1, [pc, #524]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002900:	4b7e      	ldr	r3, [pc, #504]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	497b      	ldr	r1, [pc, #492]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	4972      	ldr	r1, [pc, #456]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002944:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	496a      	ldr	r1, [pc, #424]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	4961      	ldr	r1, [pc, #388]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002988:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	4959      	ldr	r1, [pc, #356]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4950      	ldr	r1, [pc, #320]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029cc:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	4948      	ldr	r1, [pc, #288]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	493f      	ldr	r1, [pc, #252]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d028      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a10:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1e:	4937      	ldr	r1, [pc, #220]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a31      	ldr	r2, [pc, #196]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e011      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8c8 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	491f      	ldr	r1, [pc, #124]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a1a      	ldr	r2, [pc, #104]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e011      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f899 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02b      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aea:	d109      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a02      	ldr	r2, [pc, #8]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
 8002af8:	e014      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f867 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	4928      	ldr	r1, [pc, #160]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	2102      	movs	r1, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f844 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	74bb      	strb	r3, [r7, #18]
 8002b6a:	e011      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3320      	adds	r3, #32
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f925 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002baa:	490d      	ldr	r1, [pc, #52]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bce:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bf2:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
       ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c16:	4b6c      	ldr	r3, [pc, #432]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
       ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d047      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	e044      	b.n	8002cba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d018      	beq.n	8002c6a <RCCEx_PLLSAI1_Config+0x86>
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d825      	bhi.n	8002c88 <RCCEx_PLLSAI1_Config+0xa4>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d002      	beq.n	8002c46 <RCCEx_PLLSAI1_Config+0x62>
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d009      	beq.n	8002c58 <RCCEx_PLLSAI1_Config+0x74>
 8002c44:	e020      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c46:	4b60      	ldr	r3, [pc, #384]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11d      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c56:	e01a      	b.n	8002c8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c58:	4b5b      	ldr	r3, [pc, #364]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e013      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c86:	e006      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e004      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	4944      	ldr	r1, [pc, #272]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d17d      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fb36 	bl	800133c <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd2:	e009      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd4:	f7fe fb32 	bl	800133c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ce6:	e005      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d160      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d111      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	0211      	lsls	r1, r2, #8
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	0912      	lsrs	r2, r2, #4
 8002d18:	0452      	lsls	r2, r2, #17
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	492a      	ldr	r1, [pc, #168]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	610b      	str	r3, [r1, #16]
 8002d22:	e027      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d112      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	0211      	lsls	r1, r2, #8
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6912      	ldr	r2, [r2, #16]
 8002d40:	0852      	lsrs	r2, r2, #1
 8002d42:	3a01      	subs	r2, #1
 8002d44:	0552      	lsls	r2, r2, #21
 8002d46:	430a      	orrs	r2, r1
 8002d48:	491f      	ldr	r1, [pc, #124]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
 8002d4e:	e011      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	0211      	lsls	r1, r2, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6952      	ldr	r2, [r2, #20]
 8002d66:	0852      	lsrs	r2, r2, #1
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	0652      	lsls	r2, r2, #25
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	4916      	ldr	r1, [pc, #88]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe fadc 	bl	800133c <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d86:	e009      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d88:	f7fe fad8 	bl	800133c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	73fb      	strb	r3, [r7, #15]
          break;
 8002d9a:	e005      	b.n	8002da8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000

08002dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d018      	beq.n	8002e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002de6:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0203 	and.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d10d      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dfe:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d047      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e044      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d018      	beq.n	8002e52 <RCCEx_PLLSAI2_Config+0x86>
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d825      	bhi.n	8002e70 <RCCEx_PLLSAI2_Config+0xa4>
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d002      	beq.n	8002e2e <RCCEx_PLLSAI2_Config+0x62>
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d009      	beq.n	8002e40 <RCCEx_PLLSAI2_Config+0x74>
 8002e2c:	e020      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e2e:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11d      	bne.n	8002e76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3e:	e01a      	b.n	8002e76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d116      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e013      	b.n	8002e7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e5e:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e6e:	e006      	b.n	8002e7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e004      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e76:	bf00      	nop
 8002e78:	e002      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	4939      	ldr	r1, [pc, #228]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d167      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a35      	ldr	r2, [pc, #212]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fa42 	bl	800133c <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eba:	e009      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ebc:	f7fe fa3e 	bl	800133c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ece:	e005      	b.n	8002edc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ef      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d14a      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6892      	ldr	r2, [r2, #8]
 8002ef8:	0211      	lsls	r1, r2, #8
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68d2      	ldr	r2, [r2, #12]
 8002efe:	0912      	lsrs	r2, r2, #4
 8002f00:	0452      	lsls	r2, r2, #17
 8002f02:	430a      	orrs	r2, r1
 8002f04:	491f      	ldr	r1, [pc, #124]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	614b      	str	r3, [r1, #20]
 8002f0a:	e011      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6912      	ldr	r2, [r2, #16]
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe f9fe 	bl	800133c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f44:	f7fe f9fa 	bl	800133c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e095      	b.n	80030c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002faa:	d009      	beq.n	8002fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
 8002fb2:	e005      	b.n	8002fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fec4 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003000:	d902      	bls.n	8003008 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e002      	b.n	800300e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003016:	d007      	beq.n	8003028 <HAL_SPI_Init+0xa0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003020:	d002      	beq.n	8003028 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	ea42 0103 	orr.w	r1, r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	0c1b      	lsrs	r3, r3, #16
 8003084:	f003 0204 	and.w	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030a4:	ea42 0103 	orr.w	r1, r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e049      	b.n	8003174 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fd fee9 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 f9cf 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d001      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e04f      	b.n	8003234 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a23      	ldr	r2, [pc, #140]	; (8003240 <HAL_TIM_Base_Start_IT+0xc4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d018      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_TIM_Base_Start_IT+0xc8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_TIM_Base_Start_IT+0xcc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <HAL_TIM_Base_Start_IT+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_TIM_Base_Start_IT+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_TIM_Base_Start_IT+0xdc>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d015      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0xb4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	d011      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	e008      	b.n	8003230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e000      	b.n	8003232 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40013400 	.word	0x40013400
 8003254:	40014000 	.word	0x40014000
 8003258:	00010007 	.word	0x00010007

0800325c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d020      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0202 	mvn.w	r2, #2
 8003290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8e4 	bl	8003474 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8d6 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8e7 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0204 	mvn.w	r2, #4
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8be 	bl	8003474 <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8b0 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8c1 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0208 	mvn.w	r2, #8
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2204      	movs	r2, #4
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f898 	bl	8003474 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f88a 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f89b 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0210 	mvn.w	r2, #16
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2208      	movs	r2, #8
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f872 	bl	8003474 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f864 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f875 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0201 	mvn.w	r2, #1
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fc8a 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f906 	bl	80035f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8fe 	bl	800360c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f834 	bl	800349c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00c      	beq.n	8003458 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0220 	mvn.w	r2, #32
 8003450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8c6 	bl	80035e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d00f      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <TIM_Base_SetConfig+0x118>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <TIM_Base_SetConfig+0x11c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <TIM_Base_SetConfig+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2f      	ldr	r2, [pc, #188]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d01b      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <TIM_Base_SetConfig+0x118>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d017      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <TIM_Base_SetConfig+0x11c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <TIM_Base_SetConfig+0x120>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00f      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00b      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <TIM_Base_SetConfig+0x128>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a27      	ldr	r2, [pc, #156]	; (80035dc <TIM_Base_SetConfig+0x12c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <TIM_Base_SetConfig+0x130>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00f      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00b      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <TIM_Base_SetConfig+0x128>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <TIM_Base_SetConfig+0x12c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <TIM_Base_SetConfig+0x130>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e040      	b.n	80036b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fc68 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fc34 	bl	8003ed4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f979 	bl	8003964 <UART_SetConfig>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e01b      	b.n	80036b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800368a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800369a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fcb3 	bl	8004018 <UART_CheckIdleState>
 80036b2:	4603      	mov	r3, r0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d178      	bne.n	80037c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_UART_Transmit+0x24>
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e071      	b.n	80037c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2221      	movs	r2, #33	; 0x21
 80036f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f2:	f7fd fe23 	bl	800133c <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003710:	d108      	bne.n	8003724 <HAL_UART_Transmit+0x68>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800372c:	e030      	b.n	8003790 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fd15 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e03c      	b.n	80037c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	b292      	uxth	r2, r2
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	3302      	adds	r3, #2
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e008      	b.n	800377e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b292      	uxth	r2, r2
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1c8      	bne.n	800372e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fcde 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e005      	b.n	80037c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f040 80b6 	bne.w	8003958 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Receive+0x28>
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0ae      	b.n	800395a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2222      	movs	r2, #34	; 0x22
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003812:	f7fd fd93 	bl	800133c <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003830:	d10e      	bne.n	8003850 <HAL_UART_Receive+0x80>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_UART_Receive+0x76>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003844:	e02d      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800384e:	e028      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_UART_Receive+0xa4>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_UART_Receive+0x9a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003868:	e01b      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	227f      	movs	r2, #127	; 0x7f
 800386e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003872:	e016      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387c:	d10d      	bne.n	800389a <HAL_UART_Receive+0xca>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_UART_Receive+0xc0>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	227f      	movs	r2, #127	; 0x7f
 800388a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800388e:	e008      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	223f      	movs	r2, #63	; 0x3f
 8003894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003898:	e003      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d108      	bne.n	80038c6 <HAL_UART_Receive+0xf6>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e003      	b.n	80038ce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038ce:	e037      	b.n	8003940 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	2120      	movs	r1, #32
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fc44 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e033      	b.n	800395a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10c      	bne.n	8003912 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038fe:	b29a      	uxth	r2, r3
 8003900:	8a7b      	ldrh	r3, [r7, #18]
 8003902:	4013      	ands	r3, r2
 8003904:	b29a      	uxth	r2, r3
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e00d      	b.n	800392e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003918:	b29b      	uxth	r3, r3
 800391a:	b2da      	uxtb	r2, r3
 800391c:	8a7b      	ldrh	r3, [r7, #18]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4013      	ands	r3, r2
 8003922:	b2da      	uxtb	r2, r3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3301      	adds	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1c1      	bne.n	80038d0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b08a      	sub	sp, #40	; 0x28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4ba4      	ldr	r3, [pc, #656]	; (8003c24 <UART_SetConfig+0x2c0>)
 8003994:	4013      	ands	r3, r2
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a99      	ldr	r2, [pc, #612]	; (8003c28 <UART_SetConfig+0x2c4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	4313      	orrs	r3, r2
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	430a      	orrs	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <UART_SetConfig+0x2c8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d126      	bne.n	8003a3c <UART_SetConfig+0xd8>
 80039ee:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <UART_SetConfig+0x2cc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d81b      	bhi.n	8003a34 <UART_SetConfig+0xd0>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0xa0>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2d 	.word	0x08003a2d
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e116      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e112      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a24:	2304      	movs	r3, #4
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e10e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e10a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a34:	2310      	movs	r3, #16
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e106      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <UART_SetConfig+0x2d0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d138      	bne.n	8003ab8 <UART_SetConfig+0x154>
 8003a46:	4b7a      	ldr	r3, [pc, #488]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d82d      	bhi.n	8003ab0 <UART_SetConfig+0x14c>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0xf8>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003ab1 	.word	0x08003ab1
 8003a68:	08003ab1 	.word	0x08003ab1
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003ab1 	.word	0x08003ab1
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	08003ab1 	.word	0x08003ab1
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003aa9 	.word	0x08003aa9
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e0d8      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e0d4      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e0d0      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e0cc      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e0c8      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <UART_SetConfig+0x2d4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d125      	bne.n	8003b0e <UART_SetConfig+0x1aa>
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d016      	beq.n	8003afe <UART_SetConfig+0x19a>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d818      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d00a      	beq.n	8003aee <UART_SetConfig+0x18a>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d814      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x182>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d008      	beq.n	8003af6 <UART_SetConfig+0x192>
 8003ae4:	e00f      	b.n	8003b06 <UART_SetConfig+0x1a2>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aec:	e0ad      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003aee:	2302      	movs	r3, #2
 8003af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af4:	e0a9      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003af6:	2304      	movs	r3, #4
 8003af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afc:	e0a5      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003afe:	2308      	movs	r3, #8
 8003b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b04:	e0a1      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b06:	2310      	movs	r3, #16
 8003b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0c:	e09d      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4a      	ldr	r2, [pc, #296]	; (8003c3c <UART_SetConfig+0x2d8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d125      	bne.n	8003b64 <UART_SetConfig+0x200>
 8003b18:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b22:	2bc0      	cmp	r3, #192	; 0xc0
 8003b24:	d016      	beq.n	8003b54 <UART_SetConfig+0x1f0>
 8003b26:	2bc0      	cmp	r3, #192	; 0xc0
 8003b28:	d818      	bhi.n	8003b5c <UART_SetConfig+0x1f8>
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d00a      	beq.n	8003b44 <UART_SetConfig+0x1e0>
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d814      	bhi.n	8003b5c <UART_SetConfig+0x1f8>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <UART_SetConfig+0x1d8>
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d008      	beq.n	8003b4c <UART_SetConfig+0x1e8>
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x1f8>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e082      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e07e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e07a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b54:	2308      	movs	r3, #8
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e076      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e072      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <UART_SetConfig+0x2dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12a      	bne.n	8003bc4 <UART_SetConfig+0x260>
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7c:	d01a      	beq.n	8003bb4 <UART_SetConfig+0x250>
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d81b      	bhi.n	8003bbc <UART_SetConfig+0x258>
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x240>
 8003b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8e:	d815      	bhi.n	8003bbc <UART_SetConfig+0x258>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x238>
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d008      	beq.n	8003bac <UART_SetConfig+0x248>
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x258>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e052      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e04e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e04a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e046      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e042      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <UART_SetConfig+0x2c4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d13a      	bne.n	8003c44 <UART_SetConfig+0x2e0>
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bdc:	d01a      	beq.n	8003c14 <UART_SetConfig+0x2b0>
 8003bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be2:	d81b      	bhi.n	8003c1c <UART_SetConfig+0x2b8>
 8003be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be8:	d00c      	beq.n	8003c04 <UART_SetConfig+0x2a0>
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d815      	bhi.n	8003c1c <UART_SetConfig+0x2b8>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <UART_SetConfig+0x298>
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d008      	beq.n	8003c0c <UART_SetConfig+0x2a8>
 8003bfa:	e00f      	b.n	8003c1c <UART_SetConfig+0x2b8>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e022      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e01e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e01a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c14:	2308      	movs	r3, #8
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e016      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e012      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c24:	efff69f3 	.word	0xefff69f3
 8003c28:	40008000 	.word	0x40008000
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	40004800 	.word	0x40004800
 8003c3c:	40004c00 	.word	0x40004c00
 8003c40:	40005000 	.word	0x40005000
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a9f      	ldr	r2, [pc, #636]	; (8003ecc <UART_SetConfig+0x568>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d17a      	bne.n	8003d4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d824      	bhi.n	8003ca6 <UART_SetConfig+0x342>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x300>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003c97 	.word	0x08003c97
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	08003ca7 	.word	0x08003ca7
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe fc04 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	61f8      	str	r0, [r7, #28]
        break;
 8003c8e:	e010      	b.n	8003cb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <UART_SetConfig+0x56c>)
 8003c92:	61fb      	str	r3, [r7, #28]
        break;
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe fb65 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003c9a:	61f8      	str	r0, [r7, #28]
        break;
 8003c9c:	e009      	b.n	8003cb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	61fb      	str	r3, [r7, #28]
        break;
 8003ca4:	e005      	b.n	8003cb2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80fb 	beq.w	8003eb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d305      	bcc.n	8003cd6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d903      	bls.n	8003cde <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cdc:	e0e8      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	461c      	mov	r4, r3
 8003ce4:	4615      	mov	r5, r2
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	022b      	lsls	r3, r5, #8
 8003cf0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cf4:	0222      	lsls	r2, r4, #8
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	6849      	ldr	r1, [r1, #4]
 8003cfa:	0849      	lsrs	r1, r1, #1
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4688      	mov	r8, r1
 8003d00:	4681      	mov	r9, r0
 8003d02:	eb12 0a08 	adds.w	sl, r2, r8
 8003d06:	eb43 0b09 	adc.w	fp, r3, r9
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d18:	4650      	mov	r0, sl
 8003d1a:	4659      	mov	r1, fp
 8003d1c:	f7fc faa8 	bl	8000270 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2e:	d308      	bcc.n	8003d42 <UART_SetConfig+0x3de>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d36:	d204      	bcs.n	8003d42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e0b6      	b.n	8003eb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d48:	e0b2      	b.n	8003eb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d52:	d15e      	bne.n	8003e12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d828      	bhi.n	8003dae <UART_SetConfig+0x44a>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0x400>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe fb84 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	61f8      	str	r0, [r7, #28]
        break;
 8003d8e:	e014      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fb96 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <UART_SetConfig+0x56c>)
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fae1 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003da2:	61f8      	str	r0, [r7, #28]
        break;
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	61fb      	str	r3, [r7, #28]
        break;
 8003dac:	e005      	b.n	8003dba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d077      	beq.n	8003eb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005a      	lsls	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d916      	bls.n	8003e0a <UART_SetConfig+0x4a6>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d212      	bcs.n	8003e0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	8afb      	ldrh	r3, [r7, #22]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	8afa      	ldrh	r2, [r7, #22]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e052      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e10:	e04e      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d827      	bhi.n	8003e6a <UART_SetConfig+0x506>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x4bc>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e6b 	.word	0x08003e6b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e6b 	.word	0x08003e6b
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	08003e6b 	.word	0x08003e6b
 8003e40:	08003e63 	.word	0x08003e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe fb26 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003e48:	61f8      	str	r0, [r7, #28]
        break;
 8003e4a:	e014      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7fe fb38 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003e50:	61f8      	str	r0, [r7, #28]
        break;
 8003e52:	e010      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <UART_SetConfig+0x56c>)
 8003e56:	61fb      	str	r3, [r7, #28]
        break;
 8003e58:	e00d      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7fe fa83 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003e5e:	61f8      	str	r0, [r7, #28]
        break;
 8003e60:	e009      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	61fb      	str	r3, [r7, #28]
        break;
 8003e68:	e005      	b.n	8003e76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e74:	bf00      	nop
    }

    if (pclk != 0U)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d019      	beq.n	8003eb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085a      	lsrs	r2, r3, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d909      	bls.n	8003eaa <UART_SetConfig+0x546>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d205      	bcs.n	8003eaa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e002      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ebc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eca:	bf00      	nop
 8003ecc:	40008000 	.word	0x40008000
 8003ed0:	00f42400 	.word	0x00f42400

08003ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd2:	d10a      	bne.n	8003fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b098      	sub	sp, #96	; 0x60
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004028:	f7fd f988 	bl	800133c <HAL_GetTick>
 800402c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b08      	cmp	r3, #8
 800403a:	d12e      	bne.n	800409a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	2200      	movs	r2, #0
 8004046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f88c 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d021      	beq.n	800409a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406a:	653b      	str	r3, [r7, #80]	; 0x50
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
 8004076:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800407a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e6      	bne.n	8004056 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e062      	b.n	8004160 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d149      	bne.n	800413c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	2200      	movs	r2, #0
 80040b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f856 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03c      	beq.n	800413c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	623b      	str	r3, [r7, #32]
   return(result);
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
 80040e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	60fb      	str	r3, [r7, #12]
   return(result);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3308      	adds	r3, #8
 8004112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004114:	61fa      	str	r2, [r7, #28]
 8004116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	617b      	str	r3, [r7, #20]
   return(result);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e5      	bne.n	80040f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e011      	b.n	8004160 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3758      	adds	r7, #88	; 0x58
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004178:	e049      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d045      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fd f8db 	bl	800133c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <UART_WaitOnFlagUntilTimeout+0x30>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e048      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d031      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d110      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f838 	bl	8004236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2208      	movs	r2, #8
 80041ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e029      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e8:	d111      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f81e 	bl	8004236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e00f      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d0a6      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004236:	b480      	push	{r7}
 8004238:	b095      	sub	sp, #84	; 0x54
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425c:	643b      	str	r3, [r7, #64]	; 0x40
 800425e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d118      	bne.n	80042de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 0310 	bic.w	r3, r3, #16
 80042c0:	647b      	str	r3, [r7, #68]	; 0x44
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6979      	ldr	r1, [r7, #20]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	613b      	str	r3, [r7, #16]
   return(result);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e6      	bne.n	80042ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042f2:	bf00      	nop
 80042f4:	3754      	adds	r7, #84	; 0x54
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <__NVIC_SetPriority>:
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db0a      	blt.n	800432a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	490c      	ldr	r1, [pc, #48]	; (800434c <__NVIC_SetPriority+0x4c>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	440b      	add	r3, r1
 8004324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004328:	e00a      	b.n	8004340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4908      	ldr	r1, [pc, #32]	; (8004350 <__NVIC_SetPriority+0x50>)
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	3b04      	subs	r3, #4
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	440b      	add	r3, r1
 800433e:	761a      	strb	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000e100 	.word	0xe000e100
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <SysTick_Handler+0x1c>)
 800435a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800435c:	f001 fd28 	bl	8005db0 <xTaskGetSchedulerState>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004366:	f002 fb0f 	bl	8006988 <xPortSysTickHandler>
  }
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000e010 	.word	0xe000e010

08004374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004378:	2100      	movs	r1, #0
 800437a:	f06f 0004 	mvn.w	r0, #4
 800437e:	f7ff ffbf 	bl	8004300 <__NVIC_SetPriority>
#endif
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800438e:	f3ef 8305 	mrs	r3, IPSR
 8004392:	603b      	str	r3, [r7, #0]
  return(result);
 8004394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800439a:	f06f 0305 	mvn.w	r3, #5
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	e00c      	b.n	80043bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <osKernelInitialize+0x44>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <osKernelInitialize+0x44>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e002      	b.n	80043bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043bc:	687b      	ldr	r3, [r7, #4]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000284 	.word	0x20000284

080043d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d6:	f3ef 8305 	mrs	r3, IPSR
 80043da:	603b      	str	r3, [r7, #0]
  return(result);
 80043dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80043e2:	f06f 0305 	mvn.w	r3, #5
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	e010      	b.n	800440c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <osKernelStart+0x48>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d109      	bne.n	8004406 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043f2:	f7ff ffbf 	bl	8004374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <osKernelStart+0x48>)
 80043f8:	2202      	movs	r2, #2
 80043fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043fc:	f001 f87c 	bl	80054f8 <vTaskStartScheduler>
      stat = osOK;
 8004400:	2300      	movs	r3, #0
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	e002      	b.n	800440c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004406:	f04f 33ff 	mov.w	r3, #4294967295
 800440a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800440c:	687b      	ldr	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000284 	.word	0x20000284

0800441c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	; 0x38
 8004420:	af04      	add	r7, sp, #16
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442c:	f3ef 8305 	mrs	r3, IPSR
 8004430:	617b      	str	r3, [r7, #20]
  return(result);
 8004432:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004434:	2b00      	cmp	r3, #0
 8004436:	d17e      	bne.n	8004536 <osThreadNew+0x11a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d07b      	beq.n	8004536 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004442:	2318      	movs	r3, #24
 8004444:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d045      	beq.n	80044e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <osThreadNew+0x48>
        name = attr->name;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <osThreadNew+0x6e>
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b38      	cmp	r3, #56	; 0x38
 800447c:	d805      	bhi.n	800448a <osThreadNew+0x6e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <osThreadNew+0x72>
        return (NULL);
 800448a:	2300      	movs	r3, #0
 800448c:	e054      	b.n	8004538 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00e      	beq.n	80044c4 <osThreadNew+0xa8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2ba7      	cmp	r3, #167	; 0xa7
 80044ac:	d90a      	bls.n	80044c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <osThreadNew+0xa8>
        mem = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e010      	b.n	80044e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10c      	bne.n	80044e6 <osThreadNew+0xca>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d108      	bne.n	80044e6 <osThreadNew+0xca>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <osThreadNew+0xca>
          mem = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e001      	b.n	80044e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d110      	bne.n	800450e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044f4:	9202      	str	r2, [sp, #8]
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fe0c 	bl	8005120 <xTaskCreateStatic>
 8004508:	4603      	mov	r3, r0
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e013      	b.n	8004536 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d110      	bne.n	8004536 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	b29a      	uxth	r2, r3
 8004518:	f107 0310 	add.w	r3, r7, #16
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fe57 	bl	80051da <xTaskCreate>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <osThreadNew+0x11a>
            hTask = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004536:	693b      	ldr	r3, [r7, #16]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3728      	adds	r7, #40	; 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004548:	f3ef 8305 	mrs	r3, IPSR
 800454c:	60bb      	str	r3, [r7, #8]
  return(result);
 800454e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <osDelay+0x1c>
    stat = osErrorISR;
 8004554:	f06f 0305 	mvn.w	r3, #5
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e007      	b.n	800456c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 ff92 	bl	8005490 <vTaskDelay>
    }
  }

  return (stat);
 800456c:	68fb      	ldr	r3, [r7, #12]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4a06      	ldr	r2, [pc, #24]	; (80045a8 <vApplicationGetIdleTaskMemory+0x30>)
 800458e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000288 	.word	0x20000288
 80045a8:	20000330 	.word	0x20000330

080045ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80045bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4a06      	ldr	r2, [pc, #24]	; (80045dc <vApplicationGetTimerTaskMemory+0x30>)
 80045c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ca:	601a      	str	r2, [r3, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000530 	.word	0x20000530
 80045dc:	200005d8 	.word	0x200005d8

080045e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f103 0208 	add.w	r2, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f103 0208 	add.w	r2, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f103 0208 	add.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d103      	bne.n	80046a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e00c      	b.n	80046bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3308      	adds	r3, #8
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e002      	b.n	80046b0 <vListInsert+0x2e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d2f6      	bcs.n	80046aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6892      	ldr	r2, [r2, #8]
 800470a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d103      	bne.n	8004728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004772:	f002 f877 	bl	8006864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	441a      	add	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	3b01      	subs	r3, #1
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	441a      	add	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d114      	bne.n	80047f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01a      	beq.n	8004806 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3310      	adds	r3, #16
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f929 	bl	8005a2c <xTaskRemoveFromEventList>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <xQueueGenericReset+0xcc>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	e009      	b.n	8004806 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3310      	adds	r3, #16
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fef2 	bl	80045e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3324      	adds	r3, #36	; 0x24
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff feed 	bl	80045e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004806:	f002 f85d 	bl	80068c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800480a:	2301      	movs	r3, #1
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <xQueueGenericCreateStatic+0x52>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <xQueueGenericCreateStatic+0x56>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericCreateStatic+0x58>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <xQueueGenericCreateStatic+0x7e>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <xQueueGenericCreateStatic+0x82>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <xQueueGenericCreateStatic+0x84>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61fb      	str	r3, [r7, #28]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048b6:	2350      	movs	r3, #80	; 0x50
 80048b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d00a      	beq.n	80048d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	61bb      	str	r3, [r7, #24]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f805 	bl	8004908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004900:	4618      	mov	r0, r3
 8004902:	3730      	adds	r7, #48	; 0x30
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e002      	b.n	800492a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004936:	2101      	movs	r1, #1
 8004938:	69b8      	ldr	r0, [r7, #24]
 800493a:	f7ff ff05 	bl	8004748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08e      	sub	sp, #56	; 0x38
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800495e:	2300      	movs	r3, #0
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xQueueGenericSend+0x32>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <xQueueGenericSend+0x40>
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <xQueueGenericSend+0x44>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <xQueueGenericSend+0x46>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <xQueueGenericSend+0x60>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d103      	bne.n	80049be <xQueueGenericSend+0x6e>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <xQueueGenericSend+0x72>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <xQueueGenericSend+0x74>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueGenericSend+0x8e>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049de:	f001 f9e7 	bl	8005db0 <xTaskGetSchedulerState>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <xQueueGenericSend+0x9e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <xQueueGenericSend+0xa2>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueGenericSend+0xa4>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueGenericSend+0xbe>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	61fb      	str	r3, [r7, #28]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a0e:	f001 ff29 	bl	8006864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <xQueueGenericSend+0xd4>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d129      	bne.n	8004a78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a2a:	f000 fa0b 	bl	8004e44 <prvCopyDataToQueue>
 8004a2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	3324      	adds	r3, #36	; 0x24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fff5 	bl	8005a2c <xTaskRemoveFromEventList>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a48:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <xQueueGenericSend+0x1f8>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	e00a      	b.n	8004a70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a60:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <xQueueGenericSend+0x1f8>)
 8004a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a70:	f001 ff28 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e063      	b.n	8004b40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a7e:	f001 ff21 	bl	80068c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e05c      	b.n	8004b40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f82f 	bl	8005af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a9a:	f001 ff13 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a9e:	f000 fd9b 	bl	80055d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aa2:	f001 fedf 	bl	8006864 <vPortEnterCritical>
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d103      	bne.n	8004abc <xQueueGenericSend+0x16c>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac2:	b25b      	sxtb	r3, r3
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d103      	bne.n	8004ad2 <xQueueGenericSend+0x182>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad2:	f001 fef7 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad6:	1d3a      	adds	r2, r7, #4
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 f81e 	bl	8005b20 <xTaskCheckForTimeOut>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d124      	bne.n	8004b34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aec:	f000 faa2 	bl	8005034 <prvIsQueueFull>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d018      	beq.n	8004b28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	3310      	adds	r3, #16
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 ff44 	bl	800598c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b06:	f000 fa2d 	bl	8004f64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b0a:	f000 fd73 	bl	80055f4 <xTaskResumeAll>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f af7c 	bne.w	8004a0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <xQueueGenericSend+0x1f8>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	e772      	b.n	8004a0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b2a:	f000 fa1b 	bl	8004f64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b2e:	f000 fd61 	bl	80055f4 <xTaskResumeAll>
 8004b32:	e76c      	b.n	8004a0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b36:	f000 fa15 	bl	8004f64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3a:	f000 fd5b 	bl	80055f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3738      	adds	r7, #56	; 0x38
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b090      	sub	sp, #64	; 0x40
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <xQueueGenericSendFromISR+0x3c>
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <xQueueGenericSendFromISR+0x40>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <xQueueGenericSendFromISR+0x42>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d103      	bne.n	8004bb6 <xQueueGenericSendFromISR+0x6a>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericSendFromISR+0x6e>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericSendFromISR+0x70>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	623b      	str	r3, [r7, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bd6:	f001 ff27 	bl	8006a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bda:	f3ef 8211 	mrs	r2, BASEPRI
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	61fa      	str	r2, [r7, #28]
 8004bf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <xQueueGenericSendFromISR+0xbc>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d12f      	bne.n	8004c68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c1e:	f000 f911 	bl	8004e44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d112      	bne.n	8004c52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	3324      	adds	r3, #36	; 0x24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fef7 	bl	8005a2c <xTaskRemoveFromEventList>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e007      	b.n	8004c62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c56:	3301      	adds	r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	b25a      	sxtb	r2, r3
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c62:	2301      	movs	r3, #1
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c66:	e001      	b.n	8004c6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3740      	adds	r7, #64	; 0x40
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <xQueueReceive+0x30>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	623b      	str	r3, [r7, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <xQueueReceive+0x3e>
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <xQueueReceive+0x42>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueReceive+0x44>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueReceive+0x5e>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	61fb      	str	r3, [r7, #28]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ce2:	f001 f865 	bl	8005db0 <xTaskGetSchedulerState>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <xQueueReceive+0x6e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <xQueueReceive+0x72>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueReceive+0x74>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <xQueueReceive+0x8e>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61bb      	str	r3, [r7, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d12:	f001 fda7 	bl	8006864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01f      	beq.n	8004d62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d26:	f000 f8f7 	bl	8004f18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	1e5a      	subs	r2, r3, #1
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00f      	beq.n	8004d5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	3310      	adds	r3, #16
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fe74 	bl	8005a2c <xTaskRemoveFromEventList>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	; (8004e40 <xQueueReceive+0x1bc>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d5a:	f001 fdb3 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e069      	b.n	8004e36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d68:	f001 fdac 	bl	80068c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e062      	b.n	8004e36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d76:	f107 0310 	add.w	r3, r7, #16
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 feba 	bl	8005af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d84:	f001 fd9e 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d88:	f000 fc26 	bl	80055d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d8c:	f001 fd6a 	bl	8006864 <vPortEnterCritical>
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d96:	b25b      	sxtb	r3, r3
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d103      	bne.n	8004da6 <xQueueReceive+0x122>
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d103      	bne.n	8004dbc <xQueueReceive+0x138>
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dbc:	f001 fd82 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dc0:	1d3a      	adds	r2, r7, #4
 8004dc2:	f107 0310 	add.w	r3, r7, #16
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fea9 	bl	8005b20 <xTaskCheckForTimeOut>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d123      	bne.n	8004e1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd6:	f000 f917 	bl	8005008 <prvIsQueueEmpty>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d017      	beq.n	8004e10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	3324      	adds	r3, #36	; 0x24
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fdcf 	bl	800598c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df0:	f000 f8b8 	bl	8004f64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004df4:	f000 fbfe 	bl	80055f4 <xTaskResumeAll>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d189      	bne.n	8004d12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <xQueueReceive+0x1bc>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	e780      	b.n	8004d12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e12:	f000 f8a7 	bl	8004f64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e16:	f000 fbed 	bl	80055f4 <xTaskResumeAll>
 8004e1a:	e77a      	b.n	8004d12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1e:	f000 f8a1 	bl	8004f64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e22:	f000 fbe7 	bl	80055f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e28:	f000 f8ee 	bl	8005008 <prvIsQueueEmpty>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f43f af6f 	beq.w	8004d12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3730      	adds	r7, #48	; 0x30
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10d      	bne.n	8004e7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d14d      	bne.n	8004f06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 ffbc 	bl	8005dec <xTaskPriorityDisinherit>
 8004e74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	e043      	b.n	8004f06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d119      	bne.n	8004eb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6858      	ldr	r0, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	f002 f9ca 	bl	8007228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	441a      	add	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d32b      	bcc.n	8004f06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	e026      	b.n	8004f06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68d8      	ldr	r0, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	f002 f9b0 	bl	8007228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	425b      	negs	r3, r3
 8004ed2:	441a      	add	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d207      	bcs.n	8004ef4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	425b      	negs	r3, r3
 8004eee:	441a      	add	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d105      	bne.n	8004f06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f0e:	697b      	ldr	r3, [r7, #20]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d018      	beq.n	8004f5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	441a      	add	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d303      	bcc.n	8004f4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68d9      	ldr	r1, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	461a      	mov	r2, r3
 8004f56:	6838      	ldr	r0, [r7, #0]
 8004f58:	f002 f966 	bl	8007228 <memcpy>
	}
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f6c:	f001 fc7a 	bl	8006864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f78:	e011      	b.n	8004f9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d012      	beq.n	8004fa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3324      	adds	r3, #36	; 0x24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fd50 	bl	8005a2c <xTaskRemoveFromEventList>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f92:	f000 fe27 	bl	8005be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dce9      	bgt.n	8004f7a <prvUnlockQueue+0x16>
 8004fa6:	e000      	b.n	8004faa <prvUnlockQueue+0x46>
					break;
 8004fa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	22ff      	movs	r2, #255	; 0xff
 8004fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fb2:	f001 fc87 	bl	80068c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fb6:	f001 fc55 	bl	8006864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc2:	e011      	b.n	8004fe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3310      	adds	r3, #16
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd2b 	bl	8005a2c <xTaskRemoveFromEventList>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fdc:	f000 fe02 	bl	8005be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dce9      	bgt.n	8004fc4 <prvUnlockQueue+0x60>
 8004ff0:	e000      	b.n	8004ff4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ff2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	22ff      	movs	r2, #255	; 0xff
 8004ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ffc:	f001 fc62 	bl	80068c4 <vPortExitCritical>
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005010:	f001 fc28 	bl	8006864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e001      	b.n	8005026 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005026:	f001 fc4d 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800503c:	f001 fc12 	bl	8006864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	429a      	cmp	r2, r3
 800504a:	d102      	bne.n	8005052 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e001      	b.n	8005056 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005056:	f001 fc35 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e014      	b.n	800509e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005074:	4a0f      	ldr	r2, [pc, #60]	; (80050b4 <vQueueAddToRegistry+0x50>)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005080:	490c      	ldr	r1, [pc, #48]	; (80050b4 <vQueueAddToRegistry+0x50>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <vQueueAddToRegistry+0x50>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005096:	e006      	b.n	80050a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b07      	cmp	r3, #7
 80050a2:	d9e7      	bls.n	8005074 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	200009d8 	.word	0x200009d8

080050b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050c8:	f001 fbcc 	bl	8006864 <vPortEnterCritical>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d103      	bne.n	80050e2 <vQueueWaitForMessageRestricted+0x2a>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d103      	bne.n	80050f8 <vQueueWaitForMessageRestricted+0x40>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f8:	f001 fbe4 	bl	80068c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fc61 	bl	80059d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7ff ff26 	bl	8004f64 <prvUnlockQueue>
	}
 8005118:	bf00      	nop
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08e      	sub	sp, #56	; 0x38
 8005124:	af04      	add	r7, sp, #16
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <xTaskCreateStatic+0x46>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	61fb      	str	r3, [r7, #28]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005166:	23a8      	movs	r3, #168	; 0xa8
 8005168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2ba8      	cmp	r3, #168	; 0xa8
 800516e:	d00a      	beq.n	8005186 <xTaskCreateStatic+0x66>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61bb      	str	r3, [r7, #24]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01e      	beq.n	80051cc <xTaskCreateStatic+0xac>
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800519c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051a6:	2300      	movs	r3, #0
 80051a8:	9303      	str	r3, [sp, #12]
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f850 	bl	8005264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051c6:	f000 f8f3 	bl	80053b0 <prvAddNewTaskToReadyList>
 80051ca:	e001      	b.n	80051d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051d0:	697b      	ldr	r3, [r7, #20]
	}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3728      	adds	r7, #40	; 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b08c      	sub	sp, #48	; 0x30
 80051de:	af04      	add	r7, sp, #16
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 fc5a 	bl	8006aa8 <pvPortMalloc>
 80051f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051fc:	20a8      	movs	r0, #168	; 0xa8
 80051fe:	f001 fc53 	bl	8006aa8 <pvPortMalloc>
 8005202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
 8005210:	e005      	b.n	800521e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f001 fd14 	bl	8006c40 <vPortFree>
 8005218:	e001      	b.n	800521e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d017      	beq.n	8005254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	2300      	movs	r3, #0
 8005230:	9303      	str	r3, [sp, #12]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	9302      	str	r3, [sp, #8]
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f80e 	bl	8005264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005248:	69f8      	ldr	r0, [r7, #28]
 800524a:	f000 f8b1 	bl	80053b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800524e:	2301      	movs	r3, #1
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	e002      	b.n	800525a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800525a:	69bb      	ldr	r3, [r7, #24]
	}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	461a      	mov	r2, r3
 800527c:	21a5      	movs	r1, #165	; 0xa5
 800527e:	f001 ff02 	bl	8007086 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800528c:	3b01      	subs	r3, #1
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	617b      	str	r3, [r7, #20]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01f      	beq.n	8005302 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	e012      	b.n	80052ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	7819      	ldrb	r1, [r3, #0]
 80052d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	3334      	adds	r3, #52	; 0x34
 80052d8:	460a      	mov	r2, r1
 80052da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3301      	adds	r3, #1
 80052ec:	61fb      	str	r3, [r7, #28]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b0f      	cmp	r3, #15
 80052f2:	d9e9      	bls.n	80052c8 <prvInitialiseNewTask+0x64>
 80052f4:	e000      	b.n	80052f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80052f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005300:	e003      	b.n	800530a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	2b37      	cmp	r3, #55	; 0x37
 800530e:	d901      	bls.n	8005314 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005310:	2337      	movs	r3, #55	; 0x37
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005318:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	2200      	movs	r2, #0
 8005324:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	3304      	adds	r3, #4
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff f978 	bl	8004620 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	3318      	adds	r3, #24
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff f973 	bl	8004620 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2200      	movs	r2, #0
 8005354:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	3354      	adds	r3, #84	; 0x54
 8005364:	224c      	movs	r2, #76	; 0x4c
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fe8c 	bl	8007086 <memset>
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <prvInitialiseNewTask+0x140>)
 8005372:	659a      	str	r2, [r3, #88]	; 0x58
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <prvInitialiseNewTask+0x144>)
 8005378:	65da      	str	r2, [r3, #92]	; 0x5c
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <prvInitialiseNewTask+0x148>)
 800537e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	69b8      	ldr	r0, [r7, #24]
 8005386:	f001 f941 	bl	800660c <pxPortInitialiseStack>
 800538a:	4602      	mov	r2, r0
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800539c:	bf00      	nop
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20001c24 	.word	0x20001c24
 80053a8:	20001c8c 	.word	0x20001c8c
 80053ac:	20001cf4 	.word	0x20001cf4

080053b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053b8:	f001 fa54 	bl	8006864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053bc:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <prvAddNewTaskToReadyList+0xc4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3301      	adds	r3, #1
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <prvAddNewTaskToReadyList+0xc4>)
 80053c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053c6:	4b2c      	ldr	r3, [pc, #176]	; (8005478 <prvAddNewTaskToReadyList+0xc8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ce:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <prvAddNewTaskToReadyList+0xc8>)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053d4:	4b27      	ldr	r3, [pc, #156]	; (8005474 <prvAddNewTaskToReadyList+0xc4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d110      	bne.n	80053fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053dc:	f000 fc26 	bl	8005c2c <prvInitialiseTaskLists>
 80053e0:	e00d      	b.n	80053fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053e2:	4b26      	ldr	r3, [pc, #152]	; (800547c <prvAddNewTaskToReadyList+0xcc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <prvAddNewTaskToReadyList+0xc8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d802      	bhi.n	80053fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053f8:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <prvAddNewTaskToReadyList+0xc8>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <prvAddNewTaskToReadyList+0xd0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <prvAddNewTaskToReadyList+0xd0>)
 8005406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <prvAddNewTaskToReadyList+0xd0>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <prvAddNewTaskToReadyList+0xd4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d903      	bls.n	8005424 <prvAddNewTaskToReadyList+0x74>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	4a18      	ldr	r2, [pc, #96]	; (8005484 <prvAddNewTaskToReadyList+0xd4>)
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a15      	ldr	r2, [pc, #84]	; (8005488 <prvAddNewTaskToReadyList+0xd8>)
 8005432:	441a      	add	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7ff f8fd 	bl	800463a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005440:	f001 fa40 	bl	80068c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005444:	4b0d      	ldr	r3, [pc, #52]	; (800547c <prvAddNewTaskToReadyList+0xcc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00e      	beq.n	800546a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <prvAddNewTaskToReadyList+0xc8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	429a      	cmp	r2, r3
 8005458:	d207      	bcs.n	800546a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <prvAddNewTaskToReadyList+0xdc>)
 800545c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000eec 	.word	0x20000eec
 8005478:	20000a18 	.word	0x20000a18
 800547c:	20000ef8 	.word	0x20000ef8
 8005480:	20000f08 	.word	0x20000f08
 8005484:	20000ef4 	.word	0x20000ef4
 8005488:	20000a1c 	.word	0x20000a1c
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d017      	beq.n	80054d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <vTaskDelay+0x60>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <vTaskDelay+0x30>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	60bb      	str	r3, [r7, #8]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054c0:	f000 f88a 	bl	80055d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c4:	2100      	movs	r1, #0
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fcfe 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054cc:	f000 f892 	bl	80055f4 <xTaskResumeAll>
 80054d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <vTaskDelay+0x64>)
 80054da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20000f14 	.word	0x20000f14
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005506:	463a      	mov	r2, r7
 8005508:	1d39      	adds	r1, r7, #4
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f832 	bl	8004578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	9202      	str	r2, [sp, #8]
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2300      	movs	r3, #0
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2300      	movs	r3, #0
 8005524:	460a      	mov	r2, r1
 8005526:	4924      	ldr	r1, [pc, #144]	; (80055b8 <vTaskStartScheduler+0xc0>)
 8005528:	4824      	ldr	r0, [pc, #144]	; (80055bc <vTaskStartScheduler+0xc4>)
 800552a:	f7ff fdf9 	bl	8005120 <xTaskCreateStatic>
 800552e:	4603      	mov	r3, r0
 8005530:	4a23      	ldr	r2, [pc, #140]	; (80055c0 <vTaskStartScheduler+0xc8>)
 8005532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005534:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <vTaskStartScheduler+0xc8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e001      	b.n	8005546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800554c:	f000 fd10 	bl	8005f70 <xTimerCreateTimerTask>
 8005550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d11b      	bne.n	8005590 <vTaskStartScheduler+0x98>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	613b      	str	r3, [r7, #16]
}
 800556a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800556c:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <vTaskStartScheduler+0xcc>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3354      	adds	r3, #84	; 0x54
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <vTaskStartScheduler+0xd0>)
 8005574:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005576:	4b15      	ldr	r3, [pc, #84]	; (80055cc <vTaskStartScheduler+0xd4>)
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <vTaskStartScheduler+0xd8>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <vTaskStartScheduler+0xdc>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800558a:	f001 f8c9 	bl	8006720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800558e:	e00e      	b.n	80055ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d10a      	bne.n	80055ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	60fb      	str	r3, [r7, #12]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <vTaskStartScheduler+0xb4>
}
 80055ae:	bf00      	nop
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	08007dfc 	.word	0x08007dfc
 80055bc:	08005bfd 	.word	0x08005bfd
 80055c0:	20000f10 	.word	0x20000f10
 80055c4:	20000a18 	.word	0x20000a18
 80055c8:	20000068 	.word	0x20000068
 80055cc:	20000f0c 	.word	0x20000f0c
 80055d0:	20000ef8 	.word	0x20000ef8
 80055d4:	20000ef0 	.word	0x20000ef0

080055d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <vTaskSuspendAll+0x18>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a03      	ldr	r2, [pc, #12]	; (80055f0 <vTaskSuspendAll+0x18>)
 80055e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20000f14 	.word	0x20000f14

080055f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005602:	4b42      	ldr	r3, [pc, #264]	; (800570c <xTaskResumeAll+0x118>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <xTaskResumeAll+0x2c>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	603b      	str	r3, [r7, #0]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005620:	f001 f920 	bl	8006864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005624:	4b39      	ldr	r3, [pc, #228]	; (800570c <xTaskResumeAll+0x118>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3b01      	subs	r3, #1
 800562a:	4a38      	ldr	r2, [pc, #224]	; (800570c <xTaskResumeAll+0x118>)
 800562c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <xTaskResumeAll+0x118>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d162      	bne.n	80056fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005636:	4b36      	ldr	r3, [pc, #216]	; (8005710 <xTaskResumeAll+0x11c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d05e      	beq.n	80056fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800563e:	e02f      	b.n	80056a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005640:	4b34      	ldr	r3, [pc, #208]	; (8005714 <xTaskResumeAll+0x120>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3318      	adds	r3, #24
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff f851 	bl	80046f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3304      	adds	r3, #4
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff f84c 	bl	80046f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <xTaskResumeAll+0x124>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <xTaskResumeAll+0x7c>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <xTaskResumeAll+0x124>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a27      	ldr	r2, [pc, #156]	; (800571c <xTaskResumeAll+0x128>)
 800567e:	441a      	add	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f7fe ffd7 	bl	800463a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <xTaskResumeAll+0x12c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	429a      	cmp	r2, r3
 8005698:	d302      	bcc.n	80056a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <xTaskResumeAll+0x130>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xTaskResumeAll+0x120>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1cb      	bne.n	8005640 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056ae:	f000 fb5f 	bl	8005d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <xTaskResumeAll+0x134>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d010      	beq.n	80056e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056be:	f000 f847 	bl	8005750 <xTaskIncrementTick>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056c8:	4b16      	ldr	r3, [pc, #88]	; (8005724 <xTaskResumeAll+0x130>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f1      	bne.n	80056be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056da:	4b13      	ldr	r3, [pc, #76]	; (8005728 <xTaskResumeAll+0x134>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056e0:	4b10      	ldr	r3, [pc, #64]	; (8005724 <xTaskResumeAll+0x130>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <xTaskResumeAll+0x138>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056fc:	f001 f8e2 	bl	80068c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005700:	68bb      	ldr	r3, [r7, #8]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000f14 	.word	0x20000f14
 8005710:	20000eec 	.word	0x20000eec
 8005714:	20000eac 	.word	0x20000eac
 8005718:	20000ef4 	.word	0x20000ef4
 800571c:	20000a1c 	.word	0x20000a1c
 8005720:	20000a18 	.word	0x20000a18
 8005724:	20000f00 	.word	0x20000f00
 8005728:	20000efc 	.word	0x20000efc
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <xTaskGetTickCount+0x1c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800573c:	687b      	ldr	r3, [r7, #4]
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000ef0 	.word	0x20000ef0

08005750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800575a:	4b4f      	ldr	r3, [pc, #316]	; (8005898 <xTaskIncrementTick+0x148>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 808f 	bne.w	8005882 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005764:	4b4d      	ldr	r3, [pc, #308]	; (800589c <xTaskIncrementTick+0x14c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800576c:	4a4b      	ldr	r2, [pc, #300]	; (800589c <xTaskIncrementTick+0x14c>)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d120      	bne.n	80057ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005778:	4b49      	ldr	r3, [pc, #292]	; (80058a0 <xTaskIncrementTick+0x150>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <xTaskIncrementTick+0x48>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	603b      	str	r3, [r7, #0]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xTaskIncrementTick+0x46>
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <xTaskIncrementTick+0x150>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <xTaskIncrementTick+0x154>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3f      	ldr	r2, [pc, #252]	; (80058a0 <xTaskIncrementTick+0x150>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4a3f      	ldr	r2, [pc, #252]	; (80058a4 <xTaskIncrementTick+0x154>)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <xTaskIncrementTick+0x158>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <xTaskIncrementTick+0x158>)
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	f000 fadb 	bl	8005d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ba:	4b3c      	ldr	r3, [pc, #240]	; (80058ac <xTaskIncrementTick+0x15c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d349      	bcc.n	8005858 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c4:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <xTaskIncrementTick+0x150>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <xTaskIncrementTick+0x15c>)
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	601a      	str	r2, [r3, #0]
					break;
 80057d6:	e03f      	b.n	8005858 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d8:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <xTaskIncrementTick+0x150>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d203      	bcs.n	80057f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057f0:	4a2e      	ldr	r2, [pc, #184]	; (80058ac <xTaskIncrementTick+0x15c>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057f6:	e02f      	b.n	8005858 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe ff79 	bl	80046f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3318      	adds	r3, #24
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe ff70 	bl	80046f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <xTaskIncrementTick+0x160>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d903      	bls.n	8005828 <xTaskIncrementTick+0xd8>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <xTaskIncrementTick+0x160>)
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <xTaskIncrementTick+0x164>)
 8005836:	441a      	add	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7fe fefb 	bl	800463a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <xTaskIncrementTick+0x168>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	429a      	cmp	r2, r3
 8005850:	d3b8      	bcc.n	80057c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005856:	e7b5      	b.n	80057c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <xTaskIncrementTick+0x168>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4915      	ldr	r1, [pc, #84]	; (80058b4 <xTaskIncrementTick+0x164>)
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d901      	bls.n	8005874 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <xTaskIncrementTick+0x16c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e004      	b.n	800588c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <xTaskIncrementTick+0x170>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <xTaskIncrementTick+0x170>)
 800588a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800588c:	697b      	ldr	r3, [r7, #20]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000f14 	.word	0x20000f14
 800589c:	20000ef0 	.word	0x20000ef0
 80058a0:	20000ea4 	.word	0x20000ea4
 80058a4:	20000ea8 	.word	0x20000ea8
 80058a8:	20000f04 	.word	0x20000f04
 80058ac:	20000f0c 	.word	0x20000f0c
 80058b0:	20000ef4 	.word	0x20000ef4
 80058b4:	20000a1c 	.word	0x20000a1c
 80058b8:	20000a18 	.word	0x20000a18
 80058bc:	20000f00 	.word	0x20000f00
 80058c0:	20000efc 	.word	0x20000efc

080058c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ca:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <vTaskSwitchContext+0xb0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058d2:	4b29      	ldr	r3, [pc, #164]	; (8005978 <vTaskSwitchContext+0xb4>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058d8:	e046      	b.n	8005968 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058da:	4b27      	ldr	r3, [pc, #156]	; (8005978 <vTaskSwitchContext+0xb4>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <vTaskSwitchContext+0xb8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e010      	b.n	800590a <vTaskSwitchContext+0x46>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <vTaskSwitchContext+0x40>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	607b      	str	r3, [r7, #4]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vTaskSwitchContext+0x3e>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3b01      	subs	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	491d      	ldr	r1, [pc, #116]	; (8005980 <vTaskSwitchContext+0xbc>)
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0e4      	beq.n	80058e8 <vTaskSwitchContext+0x24>
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4a15      	ldr	r2, [pc, #84]	; (8005980 <vTaskSwitchContext+0xbc>)
 800592a:	4413      	add	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	3308      	adds	r3, #8
 8005940:	429a      	cmp	r2, r3
 8005942:	d104      	bne.n	800594e <vTaskSwitchContext+0x8a>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	605a      	str	r2, [r3, #4]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <vTaskSwitchContext+0xc0>)
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <vTaskSwitchContext+0xb8>)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <vTaskSwitchContext+0xc0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3354      	adds	r3, #84	; 0x54
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <vTaskSwitchContext+0xc4>)
 8005966:	6013      	str	r3, [r2, #0]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	20000f14 	.word	0x20000f14
 8005978:	20000f00 	.word	0x20000f00
 800597c:	20000ef4 	.word	0x20000ef4
 8005980:	20000a1c 	.word	0x20000a1c
 8005984:	20000a18 	.word	0x20000a18
 8005988:	20000068 	.word	0x20000068

0800598c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60fb      	str	r3, [r7, #12]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059b2:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <vTaskPlaceOnEventList+0x44>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3318      	adds	r3, #24
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fe fe61 	bl	8004682 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059c0:	2101      	movs	r1, #1
 80059c2:	6838      	ldr	r0, [r7, #0]
 80059c4:	f000 fa80 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000a18 	.word	0x20000a18

080059d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	617b      	str	r3, [r7, #20]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <vTaskPlaceOnEventListRestricted+0x54>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3318      	adds	r3, #24
 8005a02:	4619      	mov	r1, r3
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7fe fe18 	bl	800463a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	68b8      	ldr	r0, [r7, #8]
 8005a1a:	f000 fa55 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
	}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000a18 	.word	0x20000a18

08005a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60fb      	str	r3, [r7, #12]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	3318      	adds	r3, #24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fe49 	bl	80046f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a62:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <xTaskRemoveFromEventList+0xb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11d      	bne.n	8005aa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fe40 	bl	80046f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <xTaskRemoveFromEventList+0xb4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <xTaskRemoveFromEventList+0x5c>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <xTaskRemoveFromEventList+0xb4>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <xTaskRemoveFromEventList+0xb8>)
 8005a96:	441a      	add	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe fdcb 	bl	800463a <vListInsertEnd>
 8005aa4:	e005      	b.n	8005ab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3318      	adds	r3, #24
 8005aaa:	4619      	mov	r1, r3
 8005aac:	480e      	ldr	r0, [pc, #56]	; (8005ae8 <xTaskRemoveFromEventList+0xbc>)
 8005aae:	f7fe fdc4 	bl	800463a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <xTaskRemoveFromEventList+0xc0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d905      	bls.n	8005acc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <xTaskRemoveFromEventList+0xc4>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	e001      	b.n	8005ad0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ad0:	697b      	ldr	r3, [r7, #20]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000f14 	.word	0x20000f14
 8005ae0:	20000ef4 	.word	0x20000ef4
 8005ae4:	20000a1c 	.word	0x20000a1c
 8005ae8:	20000eac 	.word	0x20000eac
 8005aec:	20000a18 	.word	0x20000a18
 8005af0:	20000f00 	.word	0x20000f00

08005af4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <vTaskInternalSetTimeOutState+0x24>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <vTaskInternalSetTimeOutState+0x28>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	605a      	str	r2, [r3, #4]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000f04 	.word	0x20000f04
 8005b1c:	20000ef0 	.word	0x20000ef0

08005b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b62:	f000 fe7f 	bl	8006864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <xTaskCheckForTimeOut+0xbc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d102      	bne.n	8005b86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	e023      	b.n	8005bce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <xTaskCheckForTimeOut+0xc0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d007      	beq.n	8005ba2 <xTaskCheckForTimeOut+0x82>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e015      	b.n	8005bce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d20b      	bcs.n	8005bc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff9b 	bl	8005af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e004      	b.n	8005bce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bce:	f000 fe79 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000ef0 	.word	0x20000ef0
 8005be0:	20000f04 	.word	0x20000f04

08005be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <vTaskMissedYield+0x14>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000f00 	.word	0x20000f00

08005bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c04:	f000 f852 	bl	8005cac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <prvIdleTask+0x28>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d9f9      	bls.n	8005c04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <prvIdleTask+0x2c>)
 8005c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c20:	e7f0      	b.n	8005c04 <prvIdleTask+0x8>
 8005c22:	bf00      	nop
 8005c24:	20000a1c 	.word	0x20000a1c
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	e00c      	b.n	8005c52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <prvInitialiseTaskLists+0x60>)
 8005c44:	4413      	add	r3, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fcca 	bl	80045e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b37      	cmp	r3, #55	; 0x37
 8005c56:	d9ef      	bls.n	8005c38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c58:	480d      	ldr	r0, [pc, #52]	; (8005c90 <prvInitialiseTaskLists+0x64>)
 8005c5a:	f7fe fcc1 	bl	80045e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c5e:	480d      	ldr	r0, [pc, #52]	; (8005c94 <prvInitialiseTaskLists+0x68>)
 8005c60:	f7fe fcbe 	bl	80045e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c64:	480c      	ldr	r0, [pc, #48]	; (8005c98 <prvInitialiseTaskLists+0x6c>)
 8005c66:	f7fe fcbb 	bl	80045e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c6a:	480c      	ldr	r0, [pc, #48]	; (8005c9c <prvInitialiseTaskLists+0x70>)
 8005c6c:	f7fe fcb8 	bl	80045e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c70:	480b      	ldr	r0, [pc, #44]	; (8005ca0 <prvInitialiseTaskLists+0x74>)
 8005c72:	f7fe fcb5 	bl	80045e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <prvInitialiseTaskLists+0x78>)
 8005c78:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <prvInitialiseTaskLists+0x64>)
 8005c7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <prvInitialiseTaskLists+0x7c>)
 8005c7e:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <prvInitialiseTaskLists+0x68>)
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000a1c 	.word	0x20000a1c
 8005c90:	20000e7c 	.word	0x20000e7c
 8005c94:	20000e90 	.word	0x20000e90
 8005c98:	20000eac 	.word	0x20000eac
 8005c9c:	20000ec0 	.word	0x20000ec0
 8005ca0:	20000ed8 	.word	0x20000ed8
 8005ca4:	20000ea4 	.word	0x20000ea4
 8005ca8:	20000ea8 	.word	0x20000ea8

08005cac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb2:	e019      	b.n	8005ce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cb4:	f000 fdd6 	bl	8006864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <prvCheckTasksWaitingTermination+0x50>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fd15 	bl	80046f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <prvCheckTasksWaitingTermination+0x54>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <prvCheckTasksWaitingTermination+0x54>)
 8005cd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cde:	f000 fdf1 	bl	80068c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f810 	bl	8005d08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e1      	bne.n	8005cb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000ec0 	.word	0x20000ec0
 8005d00:	20000eec 	.word	0x20000eec
 8005d04:	20000ed4 	.word	0x20000ed4

08005d08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3354      	adds	r3, #84	; 0x54
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f9cf 	bl	80070b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 ff89 	bl	8006c40 <vPortFree>
				vPortFree( pxTCB );
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 ff86 	bl	8006c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d34:	e018      	b.n	8005d68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d103      	bne.n	8005d48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 ff7d 	bl	8006c40 <vPortFree>
	}
 8005d46:	e00f      	b.n	8005d68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d00a      	beq.n	8005d68 <prvDeleteTCB+0x60>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60fb      	str	r3, [r7, #12]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <prvDeleteTCB+0x5e>
	}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <prvResetNextTaskUnblockTime+0x38>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <prvResetNextTaskUnblockTime+0x3c>)
 8005d82:	f04f 32ff 	mov.w	r2, #4294967295
 8005d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d88:	e008      	b.n	8005d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <prvResetNextTaskUnblockTime+0x38>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a04      	ldr	r2, [pc, #16]	; (8005dac <prvResetNextTaskUnblockTime+0x3c>)
 8005d9a:	6013      	str	r3, [r2, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	20000ea4 	.word	0x20000ea4
 8005dac:	20000f0c 	.word	0x20000f0c

08005db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <xTaskGetSchedulerState+0x34>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	e008      	b.n	8005dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <xTaskGetSchedulerState+0x38>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	e001      	b.n	8005dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dd6:	687b      	ldr	r3, [r7, #4]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	20000ef8 	.word	0x20000ef8
 8005de8:	20000f14 	.word	0x20000f14

08005dec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d056      	beq.n	8005eb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <xTaskPriorityDisinherit+0xd0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d00a      	beq.n	8005e22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60fb      	str	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	60bb      	str	r3, [r7, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	1e5a      	subs	r2, r3, #1
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d02c      	beq.n	8005eb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d128      	bne.n	8005eb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fc46 	bl	80046f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <xTaskPriorityDisinherit+0xd4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <xTaskPriorityDisinherit+0xa4>
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4a0c      	ldr	r2, [pc, #48]	; (8005ec0 <xTaskPriorityDisinherit+0xd4>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <xTaskPriorityDisinherit+0xd8>)
 8005e9e:	441a      	add	r2, r3
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fe fbc7 	bl	800463a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
	}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000a18 	.word	0x20000a18
 8005ec0:	20000ef4 	.word	0x20000ef4
 8005ec4:	20000a1c 	.word	0x20000a1c

08005ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ed2:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed8:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fc08 	bl	80046f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d10a      	bne.n	8005f02 <prvAddCurrentTaskToDelayedList+0x3a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4819      	ldr	r0, [pc, #100]	; (8005f60 <prvAddCurrentTaskToDelayedList+0x98>)
 8005efc:	f7fe fb9d 	bl	800463a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f00:	e026      	b.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4413      	add	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d209      	bcs.n	8005f2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f7fe fbab 	bl	8004682 <vListInsert>
}
 8005f2c:	e010      	b.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fe fba1 	bl	8004682 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d202      	bcs.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000ef0 	.word	0x20000ef0
 8005f5c:	20000a18 	.word	0x20000a18
 8005f60:	20000ed8 	.word	0x20000ed8
 8005f64:	20000ea8 	.word	0x20000ea8
 8005f68:	20000ea4 	.word	0x20000ea4
 8005f6c:	20000f0c 	.word	0x20000f0c

08005f70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f7a:	f000 fb07 	bl	800658c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <xTimerCreateTimerTask+0x80>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d021      	beq.n	8005fca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f8e:	1d3a      	adds	r2, r7, #4
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fb07 	bl	80045ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	9202      	str	r2, [sp, #8]
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	2302      	movs	r3, #2
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	460a      	mov	r2, r1
 8005fb0:	4910      	ldr	r1, [pc, #64]	; (8005ff4 <xTimerCreateTimerTask+0x84>)
 8005fb2:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <xTimerCreateTimerTask+0x88>)
 8005fb4:	f7ff f8b4 	bl	8005120 <xTaskCreateStatic>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <xTimerCreateTimerTask+0x8c>)
 8005fbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <xTimerCreateTimerTask+0x8c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	613b      	str	r3, [r7, #16]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fe6:	697b      	ldr	r3, [r7, #20]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000f48 	.word	0x20000f48
 8005ff4:	08007e04 	.word	0x08007e04
 8005ff8:	08006135 	.word	0x08006135
 8005ffc:	20000f4c 	.word	0x20000f4c

08006000 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	623b      	str	r3, [r7, #32]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800602e:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <xTimerGenericCommand+0x98>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02a      	beq.n	800608c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b05      	cmp	r3, #5
 8006046:	dc18      	bgt.n	800607a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006048:	f7ff feb2 	bl	8005db0 <xTaskGetSchedulerState>
 800604c:	4603      	mov	r3, r0
 800604e:	2b02      	cmp	r3, #2
 8006050:	d109      	bne.n	8006066 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <xTimerGenericCommand+0x98>)
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f107 0110 	add.w	r1, r7, #16
 800605a:	2300      	movs	r3, #0
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	f7fe fc77 	bl	8004950 <xQueueGenericSend>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24
 8006064:	e012      	b.n	800608c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <xTimerGenericCommand+0x98>)
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	f107 0110 	add.w	r1, r7, #16
 800606e:	2300      	movs	r3, #0
 8006070:	2200      	movs	r2, #0
 8006072:	f7fe fc6d 	bl	8004950 <xQueueGenericSend>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24
 8006078:	e008      	b.n	800608c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <xTimerGenericCommand+0x98>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	f107 0110 	add.w	r1, r7, #16
 8006082:	2300      	movs	r3, #0
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	f7fe fd61 	bl	8004b4c <xQueueGenericSendFromISR>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800608e:	4618      	mov	r0, r3
 8006090:	3728      	adds	r7, #40	; 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000f48 	.word	0x20000f48

0800609c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a6:	4b22      	ldr	r3, [pc, #136]	; (8006130 <prvProcessExpiredTimer+0x94>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe fb1d 	bl	80046f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d022      	beq.n	800610e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	18d1      	adds	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	6978      	ldr	r0, [r7, #20]
 80060d6:	f000 f8d1 	bl	800627c <prvInsertTimerInActiveList>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01f      	beq.n	8006120 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060e0:	2300      	movs	r3, #0
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	2100      	movs	r1, #0
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff ff88 	bl	8006000 <xTimerGenericCommand>
 80060f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d113      	bne.n	8006120 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	6978      	ldr	r0, [r7, #20]
 8006126:	4798      	blx	r3
}
 8006128:	bf00      	nop
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000f40 	.word	0x20000f40

08006134 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800613c:	f107 0308 	add.w	r3, r7, #8
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f857 	bl	80061f4 <prvGetNextExpireTime>
 8006146:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4619      	mov	r1, r3
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f803 	bl	8006158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006152:	f000 f8d5 	bl	8006300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006156:	e7f1      	b.n	800613c <prvTimerTask+0x8>

08006158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006162:	f7ff fa39 	bl	80055d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4618      	mov	r0, r3
 800616c:	f000 f866 	bl	800623c <prvSampleTimeNow>
 8006170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d130      	bne.n	80061da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <prvProcessTimerOrBlockTask+0x3c>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	d806      	bhi.n	8006194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006186:	f7ff fa35 	bl	80055f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ff85 	bl	800609c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006192:	e024      	b.n	80061de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <prvProcessTimerOrBlockTask+0x90>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <prvProcessTimerOrBlockTask+0x50>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <prvProcessTimerOrBlockTask+0x52>
 80061a8:	2300      	movs	r3, #0
 80061aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <prvProcessTimerOrBlockTask+0x94>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fe ff7d 	bl	80050b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061be:	f7ff fa19 	bl	80055f4 <xTaskResumeAll>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <prvProcessTimerOrBlockTask+0x98>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
}
 80061d8:	e001      	b.n	80061de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061da:	f7ff fa0b 	bl	80055f4 <xTaskResumeAll>
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000f44 	.word	0x20000f44
 80061ec:	20000f48 	.word	0x20000f48
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <prvGetNextExpireTime+0x44>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <prvGetNextExpireTime+0x16>
 8006206:	2201      	movs	r2, #1
 8006208:	e000      	b.n	800620c <prvGetNextExpireTime+0x18>
 800620a:	2200      	movs	r2, #0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006218:	4b07      	ldr	r3, [pc, #28]	; (8006238 <prvGetNextExpireTime+0x44>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e001      	b.n	8006228 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006228:	68fb      	ldr	r3, [r7, #12]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000f40 	.word	0x20000f40

0800623c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006244:	f7ff fa74 	bl	8005730 <xTaskGetTickCount>
 8006248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <prvSampleTimeNow+0x3c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	429a      	cmp	r2, r3
 8006252:	d205      	bcs.n	8006260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006254:	f000 f936 	bl	80064c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e002      	b.n	8006266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006266:	4a04      	ldr	r2, [pc, #16]	; (8006278 <prvSampleTimeNow+0x3c>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000f50 	.word	0x20000f50

0800627c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d812      	bhi.n	80062c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e01b      	b.n	80062ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <prvInsertTimerInActiveList+0x7c>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7fe f9de 	bl	8004682 <vListInsert>
 80062c6:	e012      	b.n	80062ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d206      	bcs.n	80062de <prvInsertTimerInActiveList+0x62>
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e007      	b.n	80062ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <prvInsertTimerInActiveList+0x80>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7fe f9ca 	bl	8004682 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000f44 	.word	0x20000f44
 80062fc:	20000f40 	.word	0x20000f40

08006300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006306:	e0ca      	b.n	800649e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da18      	bge.n	8006340 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	3304      	adds	r3, #4
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	61fb      	str	r3, [r7, #28]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006336:	6850      	ldr	r0, [r2, #4]
 8006338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633a:	6892      	ldr	r2, [r2, #8]
 800633c:	4611      	mov	r1, r2
 800633e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f2c0 80ab 	blt.w	800649e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	3304      	adds	r3, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe f9cb 	bl	80046f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800635e:	463b      	mov	r3, r7
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff ff6b 	bl	800623c <prvSampleTimeNow>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b09      	cmp	r3, #9
 800636c:	f200 8096 	bhi.w	800649c <prvProcessReceivedCommands+0x19c>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <prvProcessReceivedCommands+0x78>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063a1 	.word	0x080063a1
 8006384:	08006415 	.word	0x08006415
 8006388:	08006429 	.word	0x08006429
 800638c:	08006473 	.word	0x08006473
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063a1 	.word	0x080063a1
 8006398:	08006415 	.word	0x08006415
 800639c:	08006429 	.word	0x08006429
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	18d1      	adds	r1, r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c0:	f7ff ff5c 	bl	800627c <prvInsertTimerInActiveList>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d069      	beq.n	800649e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05e      	beq.n	800649e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	441a      	add	r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	2300      	movs	r3, #0
 80063ee:	2100      	movs	r1, #0
 80063f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f2:	f7ff fe05 	bl	8006000 <xTimerGenericCommand>
 80063f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d14f      	bne.n	800649e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61bb      	str	r3, [r7, #24]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	b2da      	uxtb	r2, r3
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006426:	e03a      	b.n	800649e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	617b      	str	r3, [r7, #20]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	18d1      	adds	r1, r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646c:	f7ff ff06 	bl	800627c <prvInsertTimerInActiveList>
					break;
 8006470:	e015      	b.n	800649e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006482:	f000 fbdd 	bl	8006c40 <vPortFree>
 8006486:	e00a      	b.n	800649e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800649a:	e000      	b.n	800649e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800649c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <prvProcessReceivedCommands+0x1c0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	1d39      	adds	r1, r7, #4
 80064a4:	2200      	movs	r2, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fbec 	bl	8004c84 <xQueueReceive>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f47f af2a 	bne.w	8006308 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3730      	adds	r7, #48	; 0x30
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000f48 	.word	0x20000f48

080064c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064ca:	e048      	b.n	800655e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064cc:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <prvSwitchTimerLists+0xc0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d6:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <prvSwitchTimerLists+0xc0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe f905 	bl	80046f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02e      	beq.n	800655e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	d90e      	bls.n	8006530 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <prvSwitchTimerLists+0xc0>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fe f8aa 	bl	8004682 <vListInsert>
 800652e:	e016      	b.n	800655e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	2100      	movs	r1, #0
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fd60 	bl	8006000 <xTimerGenericCommand>
 8006540:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	603b      	str	r3, [r7, #0]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <prvSwitchTimerLists+0xc0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1b1      	bne.n	80064cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <prvSwitchTimerLists+0xc0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <prvSwitchTimerLists+0xc4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <prvSwitchTimerLists+0xc0>)
 8006574:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006576:	4a04      	ldr	r2, [pc, #16]	; (8006588 <prvSwitchTimerLists+0xc4>)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6013      	str	r3, [r2, #0]
}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000f40 	.word	0x20000f40
 8006588:	20000f44 	.word	0x20000f44

0800658c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006592:	f000 f967 	bl	8006864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d120      	bne.n	80065e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800659e:	4814      	ldr	r0, [pc, #80]	; (80065f0 <prvCheckForValidListAndQueue+0x64>)
 80065a0:	f7fe f81e 	bl	80045e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065a4:	4813      	ldr	r0, [pc, #76]	; (80065f4 <prvCheckForValidListAndQueue+0x68>)
 80065a6:	f7fe f81b 	bl	80045e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <prvCheckForValidListAndQueue+0x6c>)
 80065ac:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <prvCheckForValidListAndQueue+0x64>)
 80065ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <prvCheckForValidListAndQueue+0x70>)
 80065b2:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <prvCheckForValidListAndQueue+0x68>)
 80065b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065b6:	2300      	movs	r3, #0
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <prvCheckForValidListAndQueue+0x74>)
 80065bc:	4a11      	ldr	r2, [pc, #68]	; (8006604 <prvCheckForValidListAndQueue+0x78>)
 80065be:	2110      	movs	r1, #16
 80065c0:	200a      	movs	r0, #10
 80065c2:	f7fe f929 	bl	8004818 <xQueueGenericCreateStatic>
 80065c6:	4603      	mov	r3, r0
 80065c8:	4a08      	ldr	r2, [pc, #32]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 80065ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	490b      	ldr	r1, [pc, #44]	; (8006608 <prvCheckForValidListAndQueue+0x7c>)
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fd42 	bl	8005064 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065e0:	f000 f970 	bl	80068c4 <vPortExitCritical>
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000f48 	.word	0x20000f48
 80065f0:	20000f18 	.word	0x20000f18
 80065f4:	20000f2c 	.word	0x20000f2c
 80065f8:	20000f40 	.word	0x20000f40
 80065fc:	20000f44 	.word	0x20000f44
 8006600:	20000ff4 	.word	0x20000ff4
 8006604:	20000f54 	.word	0x20000f54
 8006608:	08007e0c 	.word	0x08007e0c

0800660c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b04      	subs	r3, #4
 800661c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f023 0201 	bic.w	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800663c:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <pxPortInitialiseStack+0x64>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3b14      	subs	r3, #20
 8006646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b04      	subs	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f06f 0202 	mvn.w	r2, #2
 800665a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b20      	subs	r3, #32
 8006660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	08006675 	.word	0x08006675

08006674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvTaskExitError+0x54>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d00a      	beq.n	800669e <prvTaskExitError+0x2a>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <prvTaskExitError+0x28>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60bb      	str	r3, [r7, #8]
}
 80066b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066b2:	bf00      	nop
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0fc      	beq.n	80066b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	00000000 	.word	0x00000000

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066f8:	4808      	ldr	r0, [pc, #32]	; (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800671a:	bf00      	nop
 800671c:	e000ed08 	.word	0xe000ed08

08006720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006726:	4b46      	ldr	r3, [pc, #280]	; (8006840 <xPortStartScheduler+0x120>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a46      	ldr	r2, [pc, #280]	; (8006844 <xPortStartScheduler+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10a      	bne.n	8006746 <xPortStartScheduler+0x26>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006746:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <xPortStartScheduler+0x120>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3f      	ldr	r2, [pc, #252]	; (8006848 <xPortStartScheduler+0x128>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10a      	bne.n	8006766 <xPortStartScheduler+0x46>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006766:	4b39      	ldr	r3, [pc, #228]	; (800684c <xPortStartScheduler+0x12c>)
 8006768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4b31      	ldr	r3, [pc, #196]	; (8006850 <xPortStartScheduler+0x130>)
 800678c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <xPortStartScheduler+0x134>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006794:	e009      	b.n	80067aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <xPortStartScheduler+0x134>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <xPortStartScheduler+0x134>)
 800679e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d0ef      	beq.n	8006796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067b6:	4b27      	ldr	r3, [pc, #156]	; (8006854 <xPortStartScheduler+0x134>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1c3 0307 	rsb	r3, r3, #7
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d00a      	beq.n	80067d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60bb      	str	r3, [r7, #8]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <xPortStartScheduler+0x134>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <xPortStartScheduler+0x134>)
 80067e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067e2:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <xPortStartScheduler+0x134>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ea:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <xPortStartScheduler+0x134>)
 80067ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <xPortStartScheduler+0x138>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <xPortStartScheduler+0x138>)
 80067fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <xPortStartScheduler+0x138>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <xPortStartScheduler+0x138>)
 8006808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800680c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800680e:	f000 f8dd 	bl	80069cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <xPortStartScheduler+0x13c>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006818:	f000 f8fc 	bl	8006a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800681c:	4b10      	ldr	r3, [pc, #64]	; (8006860 <xPortStartScheduler+0x140>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <xPortStartScheduler+0x140>)
 8006822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006828:	f7ff ff66 	bl	80066f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800682c:	f7ff f84a 	bl	80058c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006830:	f7ff ff20 	bl	8006674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	e000ed00 	.word	0xe000ed00
 8006844:	410fc271 	.word	0x410fc271
 8006848:	410fc270 	.word	0x410fc270
 800684c:	e000e400 	.word	0xe000e400
 8006850:	20001044 	.word	0x20001044
 8006854:	20001048 	.word	0x20001048
 8006858:	e000ed20 	.word	0xe000ed20
 800685c:	2000000c 	.word	0x2000000c
 8006860:	e000ef34 	.word	0xe000ef34

08006864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
}
 800687c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <vPortEnterCritical+0x58>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <vPortEnterCritical+0x58>)
 8006886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vPortEnterCritical+0x58>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortEnterCritical+0x5c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	603b      	str	r3, [r7, #0]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <vPortEnterCritical+0x4a>
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2000000c 	.word	0x2000000c
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <vPortExitCritical+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <vPortExitCritical+0x24>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	607b      	str	r3, [r7, #4]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <vPortExitCritical+0x50>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <vPortExitCritical+0x50>)
 80068f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <vPortExitCritical+0x42>
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f383 8811 	msr	BASEPRI, r3
}
 8006904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	2000000c 	.word	0x2000000c
	...

08006920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006920:	f3ef 8009 	mrs	r0, PSP
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <pxCurrentTCBConst>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f01e 0f10 	tst.w	lr, #16
 8006930:	bf08      	it	eq
 8006932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006944:	f380 8811 	msr	BASEPRI, r0
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f7fe ffb8 	bl	80058c4 <vTaskSwitchContext>
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f380 8811 	msr	BASEPRI, r0
 800695c:	bc09      	pop	{r0, r3}
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	6808      	ldr	r0, [r1, #0]
 8006962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006966:	f01e 0f10 	tst.w	lr, #16
 800696a:	bf08      	it	eq
 800696c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006970:	f380 8809 	msr	PSP, r0
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst>:
 8006980:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f7fe fed5 	bl	8005750 <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <xPortSysTickHandler+0x40>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortSetupTimerInterrupt+0x38>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vPortSetupTimerInterrupt+0x3c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <vPortSetupTimerInterrupt+0x40>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <vPortSetupTimerInterrupt+0x44>)
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e010 	.word	0xe000e010
 8006a04:	e000e018 	.word	0xe000e018
 8006a08:	20000000 	.word	0x20000000
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	e000e014 	.word	0xe000e014

08006a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a24 <vPortEnableVFP+0x10>
 8006a18:	6801      	ldr	r1, [r0, #0]
 8006a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a1e:	6001      	str	r1, [r0, #0]
 8006a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a22:	bf00      	nop
 8006a24:	e000ed88 	.word	0xe000ed88

08006a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d914      	bls.n	8006a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <vPortValidateInterruptPriority+0x70>)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <vPortValidateInterruptPriority+0x74>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	7afa      	ldrb	r2, [r7, #11]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20a      	bcs.n	8006a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <vPortValidateInterruptPriority+0x78>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <vPortValidateInterruptPriority+0x7c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d90a      	bls.n	8006a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	603b      	str	r3, [r7, #0]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <vPortValidateInterruptPriority+0x60>
	}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	e000e3f0 	.word	0xe000e3f0
 8006a9c:	20001044 	.word	0x20001044
 8006aa0:	e000ed0c 	.word	0xe000ed0c
 8006aa4:	20001048 	.word	0x20001048

08006aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ab4:	f7fe fd90 	bl	80055d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ab8:	4b5b      	ldr	r3, [pc, #364]	; (8006c28 <pvPortMalloc+0x180>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ac0:	f000 f920 	bl	8006d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ac4:	4b59      	ldr	r3, [pc, #356]	; (8006c2c <pvPortMalloc+0x184>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8093 	bne.w	8006bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01d      	beq.n	8006b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ad8:	2208      	movs	r2, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d014      	beq.n	8006b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f023 0307 	bic.w	r3, r3, #7
 8006af0:	3308      	adds	r3, #8
 8006af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <pvPortMalloc+0x6c>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	617b      	str	r3, [r7, #20]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d06e      	beq.n	8006bf8 <pvPortMalloc+0x150>
 8006b1a:	4b45      	ldr	r3, [pc, #276]	; (8006c30 <pvPortMalloc+0x188>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d869      	bhi.n	8006bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b24:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <pvPortMalloc+0x18c>)
 8006b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b28:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <pvPortMalloc+0x18c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2e:	e004      	b.n	8006b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d903      	bls.n	8006b4c <pvPortMalloc+0xa4>
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f1      	bne.n	8006b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b4c:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <pvPortMalloc+0x180>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d050      	beq.n	8006bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	2308      	movs	r3, #8
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d91f      	bls.n	8006bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	613b      	str	r3, [r7, #16]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bb2:	69b8      	ldr	r0, [r7, #24]
 8006bb4:	f000 f908 	bl	8006dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <pvPortMalloc+0x188>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	4a1b      	ldr	r2, [pc, #108]	; (8006c30 <pvPortMalloc+0x188>)
 8006bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <pvPortMalloc+0x188>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <pvPortMalloc+0x190>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d203      	bcs.n	8006bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <pvPortMalloc+0x188>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <pvPortMalloc+0x190>)
 8006bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <pvPortMalloc+0x184>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <pvPortMalloc+0x194>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <pvPortMalloc+0x194>)
 8006bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bf8:	f7fe fcfc 	bl	80055f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <pvPortMalloc+0x174>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60fb      	str	r3, [r7, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <pvPortMalloc+0x172>
	return pvReturn;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3728      	adds	r7, #40	; 0x28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20001c0c 	.word	0x20001c0c
 8006c2c:	20001c20 	.word	0x20001c20
 8006c30:	20001c10 	.word	0x20001c10
 8006c34:	20001c04 	.word	0x20001c04
 8006c38:	20001c14 	.word	0x20001c14
 8006c3c:	20001c18 	.word	0x20001c18

08006c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04d      	beq.n	8006cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c52:	2308      	movs	r3, #8
 8006c54:	425b      	negs	r3, r3
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <vPortFree+0xb8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <vPortFree+0x44>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60fb      	str	r3, [r7, #12]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <vPortFree+0x62>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60bb      	str	r3, [r7, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <vPortFree+0xb8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01e      	beq.n	8006cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11a      	bne.n	8006cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <vPortFree+0xb8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cc8:	f7fe fc86 	bl	80055d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <vPortFree+0xbc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <vPortFree+0xbc>)
 8006cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cda:	6938      	ldr	r0, [r7, #16]
 8006cdc:	f000 f874 	bl	8006dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <vPortFree+0xc0>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <vPortFree+0xc0>)
 8006ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cea:	f7fe fc83 	bl	80055f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20001c20 	.word	0x20001c20
 8006cfc:	20001c10 	.word	0x20001c10
 8006d00:	20001c1c 	.word	0x20001c1c

08006d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d10:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <prvHeapInit+0xac>)
 8006d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <prvHeapInit+0xac>)
 8006d34:	4413      	add	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <prvHeapInit+0xb0>)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d42:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <prvHeapInit+0xb0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d50:	2208      	movs	r2, #8
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <prvHeapInit+0xb4>)
 8006d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <prvHeapInit+0xb4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d6e:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <prvHeapInit+0xb4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvHeapInit+0xb4>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <prvHeapInit+0xb8>)
 8006d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <prvHeapInit+0xbc>)
 8006d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <prvHeapInit+0xc0>)
 8006d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	2000104c 	.word	0x2000104c
 8006db4:	20001c04 	.word	0x20001c04
 8006db8:	20001c0c 	.word	0x20001c0c
 8006dbc:	20001c14 	.word	0x20001c14
 8006dc0:	20001c10 	.word	0x20001c10
 8006dc4:	20001c20 	.word	0x20001c20

08006dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dd0:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <prvInsertBlockIntoFreeList+0xac>)
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e002      	b.n	8006ddc <prvInsertBlockIntoFreeList+0x14>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d8f7      	bhi.n	8006dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d108      	bne.n	8006e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d118      	bne.n	8006e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <prvInsertBlockIntoFreeList+0xb0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d00d      	beq.n	8006e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	441a      	add	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e008      	b.n	8006e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <prvInsertBlockIntoFreeList+0xb0>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e003      	b.n	8006e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d002      	beq.n	8006e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20001c04 	.word	0x20001c04
 8006e78:	20001c0c 	.word	0x20001c0c

08006e7c <std>:
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	e9c0 3300 	strd	r3, r3, [r0]
 8006e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8a:	6083      	str	r3, [r0, #8]
 8006e8c:	8181      	strh	r1, [r0, #12]
 8006e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e90:	81c2      	strh	r2, [r0, #14]
 8006e92:	6183      	str	r3, [r0, #24]
 8006e94:	4619      	mov	r1, r3
 8006e96:	2208      	movs	r2, #8
 8006e98:	305c      	adds	r0, #92	; 0x5c
 8006e9a:	f000 f8f4 	bl	8007086 <memset>
 8006e9e:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <std+0x38>)
 8006ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <std+0x3c>)
 8006ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <std+0x40>)
 8006ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <std+0x44>)
 8006eac:	6224      	str	r4, [r4, #32]
 8006eae:	6323      	str	r3, [r4, #48]	; 0x30
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	bf00      	nop
 8006eb4:	08007001 	.word	0x08007001
 8006eb8:	08007023 	.word	0x08007023
 8006ebc:	0800705b 	.word	0x0800705b
 8006ec0:	0800707f 	.word	0x0800707f

08006ec4 <stdio_exit_handler>:
 8006ec4:	4a02      	ldr	r2, [pc, #8]	; (8006ed0 <stdio_exit_handler+0xc>)
 8006ec6:	4903      	ldr	r1, [pc, #12]	; (8006ed4 <stdio_exit_handler+0x10>)
 8006ec8:	4803      	ldr	r0, [pc, #12]	; (8006ed8 <stdio_exit_handler+0x14>)
 8006eca:	f000 b869 	b.w	8006fa0 <_fwalk_sglue>
 8006ece:	bf00      	nop
 8006ed0:	20000010 	.word	0x20000010
 8006ed4:	08007ae9 	.word	0x08007ae9
 8006ed8:	2000001c 	.word	0x2000001c

08006edc <cleanup_stdio>:
 8006edc:	6841      	ldr	r1, [r0, #4]
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <cleanup_stdio+0x34>)
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	b510      	push	{r4, lr}
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	d001      	beq.n	8006eec <cleanup_stdio+0x10>
 8006ee8:	f000 fdfe 	bl	8007ae8 <_fflush_r>
 8006eec:	68a1      	ldr	r1, [r4, #8]
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <cleanup_stdio+0x38>)
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	d002      	beq.n	8006efa <cleanup_stdio+0x1e>
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fdf7 	bl	8007ae8 <_fflush_r>
 8006efa:	68e1      	ldr	r1, [r4, #12]
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <cleanup_stdio+0x3c>)
 8006efe:	4299      	cmp	r1, r3
 8006f00:	d004      	beq.n	8006f0c <cleanup_stdio+0x30>
 8006f02:	4620      	mov	r0, r4
 8006f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f08:	f000 bdee 	b.w	8007ae8 <_fflush_r>
 8006f0c:	bd10      	pop	{r4, pc}
 8006f0e:	bf00      	nop
 8006f10:	20001c24 	.word	0x20001c24
 8006f14:	20001c8c 	.word	0x20001c8c
 8006f18:	20001cf4 	.word	0x20001cf4

08006f1c <global_stdio_init.part.0>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <global_stdio_init.part.0+0x30>)
 8006f20:	4c0b      	ldr	r4, [pc, #44]	; (8006f50 <global_stdio_init.part.0+0x34>)
 8006f22:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <global_stdio_init.part.0+0x38>)
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	4620      	mov	r0, r4
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2104      	movs	r1, #4
 8006f2c:	f7ff ffa6 	bl	8006e7c <std>
 8006f30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f34:	2201      	movs	r2, #1
 8006f36:	2109      	movs	r1, #9
 8006f38:	f7ff ffa0 	bl	8006e7c <std>
 8006f3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f40:	2202      	movs	r2, #2
 8006f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f46:	2112      	movs	r1, #18
 8006f48:	f7ff bf98 	b.w	8006e7c <std>
 8006f4c:	20001d5c 	.word	0x20001d5c
 8006f50:	20001c24 	.word	0x20001c24
 8006f54:	08006ec5 	.word	0x08006ec5

08006f58 <__sfp_lock_acquire>:
 8006f58:	4801      	ldr	r0, [pc, #4]	; (8006f60 <__sfp_lock_acquire+0x8>)
 8006f5a:	f000 b963 	b.w	8007224 <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20001d65 	.word	0x20001d65

08006f64 <__sfp_lock_release>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__sfp_lock_release+0x8>)
 8006f66:	f000 b95e 	b.w	8007226 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20001d65 	.word	0x20001d65

08006f70 <__sinit>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	4604      	mov	r4, r0
 8006f74:	f7ff fff0 	bl	8006f58 <__sfp_lock_acquire>
 8006f78:	6a23      	ldr	r3, [r4, #32]
 8006f7a:	b11b      	cbz	r3, 8006f84 <__sinit+0x14>
 8006f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f80:	f7ff bff0 	b.w	8006f64 <__sfp_lock_release>
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__sinit+0x28>)
 8006f86:	6223      	str	r3, [r4, #32]
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <__sinit+0x2c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f5      	bne.n	8006f7c <__sinit+0xc>
 8006f90:	f7ff ffc4 	bl	8006f1c <global_stdio_init.part.0>
 8006f94:	e7f2      	b.n	8006f7c <__sinit+0xc>
 8006f96:	bf00      	nop
 8006f98:	08006edd 	.word	0x08006edd
 8006f9c:	20001d5c 	.word	0x20001d5c

08006fa0 <_fwalk_sglue>:
 8006fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	4688      	mov	r8, r1
 8006fa8:	4614      	mov	r4, r2
 8006faa:	2600      	movs	r6, #0
 8006fac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fb0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb4:	d505      	bpl.n	8006fc2 <_fwalk_sglue+0x22>
 8006fb6:	6824      	ldr	r4, [r4, #0]
 8006fb8:	2c00      	cmp	r4, #0
 8006fba:	d1f7      	bne.n	8006fac <_fwalk_sglue+0xc>
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d907      	bls.n	8006fd8 <_fwalk_sglue+0x38>
 8006fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	d003      	beq.n	8006fd8 <_fwalk_sglue+0x38>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	47c0      	blx	r8
 8006fd6:	4306      	orrs	r6, r0
 8006fd8:	3568      	adds	r5, #104	; 0x68
 8006fda:	e7e9      	b.n	8006fb0 <_fwalk_sglue+0x10>

08006fdc <iprintf>:
 8006fdc:	b40f      	push	{r0, r1, r2, r3}
 8006fde:	b507      	push	{r0, r1, r2, lr}
 8006fe0:	4906      	ldr	r1, [pc, #24]	; (8006ffc <iprintf+0x20>)
 8006fe2:	ab04      	add	r3, sp, #16
 8006fe4:	6808      	ldr	r0, [r1, #0]
 8006fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fea:	6881      	ldr	r1, [r0, #8]
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	f000 fa4b 	bl	8007488 <_vfiprintf_r>
 8006ff2:	b003      	add	sp, #12
 8006ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff8:	b004      	add	sp, #16
 8006ffa:	4770      	bx	lr
 8006ffc:	20000068 	.word	0x20000068

08007000 <__sread>:
 8007000:	b510      	push	{r4, lr}
 8007002:	460c      	mov	r4, r1
 8007004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007008:	f000 f8be 	bl	8007188 <_read_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	bfab      	itete	ge
 8007010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007012:	89a3      	ldrhlt	r3, [r4, #12]
 8007014:	181b      	addge	r3, r3, r0
 8007016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800701a:	bfac      	ite	ge
 800701c:	6563      	strge	r3, [r4, #84]	; 0x54
 800701e:	81a3      	strhlt	r3, [r4, #12]
 8007020:	bd10      	pop	{r4, pc}

08007022 <__swrite>:
 8007022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	461f      	mov	r7, r3
 8007028:	898b      	ldrh	r3, [r1, #12]
 800702a:	05db      	lsls	r3, r3, #23
 800702c:	4605      	mov	r5, r0
 800702e:	460c      	mov	r4, r1
 8007030:	4616      	mov	r6, r2
 8007032:	d505      	bpl.n	8007040 <__swrite+0x1e>
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	2302      	movs	r3, #2
 800703a:	2200      	movs	r2, #0
 800703c:	f000 f892 	bl	8007164 <_lseek_r>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	4628      	mov	r0, r5
 8007052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	f000 b8a9 	b.w	80071ac <_write_r>

0800705a <__sseek>:
 800705a:	b510      	push	{r4, lr}
 800705c:	460c      	mov	r4, r1
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 f87f 	bl	8007164 <_lseek_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	bf15      	itete	ne
 800706c:	6560      	strne	r0, [r4, #84]	; 0x54
 800706e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007076:	81a3      	strheq	r3, [r4, #12]
 8007078:	bf18      	it	ne
 800707a:	81a3      	strhne	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__sclose>:
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 b809 	b.w	8007098 <_close_r>

08007086 <memset>:
 8007086:	4402      	add	r2, r0
 8007088:	4603      	mov	r3, r0
 800708a:	4293      	cmp	r3, r2
 800708c:	d100      	bne.n	8007090 <memset+0xa>
 800708e:	4770      	bx	lr
 8007090:	f803 1b01 	strb.w	r1, [r3], #1
 8007094:	e7f9      	b.n	800708a <memset+0x4>
	...

08007098 <_close_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d06      	ldr	r5, [pc, #24]	; (80070b4 <_close_r+0x1c>)
 800709c:	2300      	movs	r3, #0
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	f7fa f86f 	bl	8001186 <_close>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_close_r+0x1a>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_close_r+0x1a>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20001d60 	.word	0x20001d60

080070b8 <_reclaim_reent>:
 80070b8:	4b29      	ldr	r3, [pc, #164]	; (8007160 <_reclaim_reent+0xa8>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4283      	cmp	r3, r0
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	d04b      	beq.n	800715c <_reclaim_reent+0xa4>
 80070c4:	69c3      	ldr	r3, [r0, #28]
 80070c6:	b143      	cbz	r3, 80070da <_reclaim_reent+0x22>
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d144      	bne.n	8007158 <_reclaim_reent+0xa0>
 80070ce:	69e3      	ldr	r3, [r4, #28]
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	b111      	cbz	r1, 80070da <_reclaim_reent+0x22>
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 f8b5 	bl	8007244 <_free_r>
 80070da:	6961      	ldr	r1, [r4, #20]
 80070dc:	b111      	cbz	r1, 80070e4 <_reclaim_reent+0x2c>
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 f8b0 	bl	8007244 <_free_r>
 80070e4:	69e1      	ldr	r1, [r4, #28]
 80070e6:	b111      	cbz	r1, 80070ee <_reclaim_reent+0x36>
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 f8ab 	bl	8007244 <_free_r>
 80070ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070f0:	b111      	cbz	r1, 80070f8 <_reclaim_reent+0x40>
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 f8a6 	bl	8007244 <_free_r>
 80070f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fa:	b111      	cbz	r1, 8007102 <_reclaim_reent+0x4a>
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 f8a1 	bl	8007244 <_free_r>
 8007102:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007104:	b111      	cbz	r1, 800710c <_reclaim_reent+0x54>
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f89c 	bl	8007244 <_free_r>
 800710c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800710e:	b111      	cbz	r1, 8007116 <_reclaim_reent+0x5e>
 8007110:	4620      	mov	r0, r4
 8007112:	f000 f897 	bl	8007244 <_free_r>
 8007116:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007118:	b111      	cbz	r1, 8007120 <_reclaim_reent+0x68>
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f892 	bl	8007244 <_free_r>
 8007120:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007122:	b111      	cbz	r1, 800712a <_reclaim_reent+0x72>
 8007124:	4620      	mov	r0, r4
 8007126:	f000 f88d 	bl	8007244 <_free_r>
 800712a:	6a23      	ldr	r3, [r4, #32]
 800712c:	b1b3      	cbz	r3, 800715c <_reclaim_reent+0xa4>
 800712e:	4620      	mov	r0, r4
 8007130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007134:	4718      	bx	r3
 8007136:	5949      	ldr	r1, [r1, r5]
 8007138:	b941      	cbnz	r1, 800714c <_reclaim_reent+0x94>
 800713a:	3504      	adds	r5, #4
 800713c:	69e3      	ldr	r3, [r4, #28]
 800713e:	2d80      	cmp	r5, #128	; 0x80
 8007140:	68d9      	ldr	r1, [r3, #12]
 8007142:	d1f8      	bne.n	8007136 <_reclaim_reent+0x7e>
 8007144:	4620      	mov	r0, r4
 8007146:	f000 f87d 	bl	8007244 <_free_r>
 800714a:	e7c0      	b.n	80070ce <_reclaim_reent+0x16>
 800714c:	680e      	ldr	r6, [r1, #0]
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f878 	bl	8007244 <_free_r>
 8007154:	4631      	mov	r1, r6
 8007156:	e7ef      	b.n	8007138 <_reclaim_reent+0x80>
 8007158:	2500      	movs	r5, #0
 800715a:	e7ef      	b.n	800713c <_reclaim_reent+0x84>
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	bf00      	nop
 8007160:	20000068 	.word	0x20000068

08007164 <_lseek_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	; (8007184 <_lseek_r+0x20>)
 8007168:	4604      	mov	r4, r0
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	2200      	movs	r2, #0
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7fa f82e 	bl	80011d4 <_lseek>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_lseek_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_lseek_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20001d60 	.word	0x20001d60

08007188 <_read_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	; (80071a8 <_read_r+0x20>)
 800718c:	4604      	mov	r4, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	2200      	movs	r2, #0
 8007194:	602a      	str	r2, [r5, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f7f9 ffbc 	bl	8001114 <_read>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_read_r+0x1e>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_read_r+0x1e>
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20001d60 	.word	0x20001d60

080071ac <_write_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d07      	ldr	r5, [pc, #28]	; (80071cc <_write_r+0x20>)
 80071b0:	4604      	mov	r4, r0
 80071b2:	4608      	mov	r0, r1
 80071b4:	4611      	mov	r1, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	602a      	str	r2, [r5, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	f7f9 ffc7 	bl	800114e <_write>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_write_r+0x1e>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_write_r+0x1e>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20001d60 	.word	0x20001d60

080071d0 <__errno>:
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <__errno+0x8>)
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000068 	.word	0x20000068

080071dc <__libc_init_array>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	4d0d      	ldr	r5, [pc, #52]	; (8007214 <__libc_init_array+0x38>)
 80071e0:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <__libc_init_array+0x3c>)
 80071e2:	1b64      	subs	r4, r4, r5
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	2600      	movs	r6, #0
 80071e8:	42a6      	cmp	r6, r4
 80071ea:	d109      	bne.n	8007200 <__libc_init_array+0x24>
 80071ec:	4d0b      	ldr	r5, [pc, #44]	; (800721c <__libc_init_array+0x40>)
 80071ee:	4c0c      	ldr	r4, [pc, #48]	; (8007220 <__libc_init_array+0x44>)
 80071f0:	f000 fdcc 	bl	8007d8c <_init>
 80071f4:	1b64      	subs	r4, r4, r5
 80071f6:	10a4      	asrs	r4, r4, #2
 80071f8:	2600      	movs	r6, #0
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	d105      	bne.n	800720a <__libc_init_array+0x2e>
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	f855 3b04 	ldr.w	r3, [r5], #4
 8007204:	4798      	blx	r3
 8007206:	3601      	adds	r6, #1
 8007208:	e7ee      	b.n	80071e8 <__libc_init_array+0xc>
 800720a:	f855 3b04 	ldr.w	r3, [r5], #4
 800720e:	4798      	blx	r3
 8007210:	3601      	adds	r6, #1
 8007212:	e7f2      	b.n	80071fa <__libc_init_array+0x1e>
 8007214:	08007ec0 	.word	0x08007ec0
 8007218:	08007ec0 	.word	0x08007ec0
 800721c:	08007ec0 	.word	0x08007ec0
 8007220:	08007ec4 	.word	0x08007ec4

08007224 <__retarget_lock_acquire_recursive>:
 8007224:	4770      	bx	lr

08007226 <__retarget_lock_release_recursive>:
 8007226:	4770      	bx	lr

08007228 <memcpy>:
 8007228:	440a      	add	r2, r1
 800722a:	4291      	cmp	r1, r2
 800722c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007230:	d100      	bne.n	8007234 <memcpy+0xc>
 8007232:	4770      	bx	lr
 8007234:	b510      	push	{r4, lr}
 8007236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800723a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723e:	4291      	cmp	r1, r2
 8007240:	d1f9      	bne.n	8007236 <memcpy+0xe>
 8007242:	bd10      	pop	{r4, pc}

08007244 <_free_r>:
 8007244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007246:	2900      	cmp	r1, #0
 8007248:	d044      	beq.n	80072d4 <_free_r+0x90>
 800724a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724e:	9001      	str	r0, [sp, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f1a1 0404 	sub.w	r4, r1, #4
 8007256:	bfb8      	it	lt
 8007258:	18e4      	addlt	r4, r4, r3
 800725a:	f000 f8df 	bl	800741c <__malloc_lock>
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <_free_r+0x94>)
 8007260:	9801      	ldr	r0, [sp, #4]
 8007262:	6813      	ldr	r3, [r2, #0]
 8007264:	b933      	cbnz	r3, 8007274 <_free_r+0x30>
 8007266:	6063      	str	r3, [r4, #4]
 8007268:	6014      	str	r4, [r2, #0]
 800726a:	b003      	add	sp, #12
 800726c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007270:	f000 b8da 	b.w	8007428 <__malloc_unlock>
 8007274:	42a3      	cmp	r3, r4
 8007276:	d908      	bls.n	800728a <_free_r+0x46>
 8007278:	6825      	ldr	r5, [r4, #0]
 800727a:	1961      	adds	r1, r4, r5
 800727c:	428b      	cmp	r3, r1
 800727e:	bf01      	itttt	eq
 8007280:	6819      	ldreq	r1, [r3, #0]
 8007282:	685b      	ldreq	r3, [r3, #4]
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	e7ed      	b.n	8007266 <_free_r+0x22>
 800728a:	461a      	mov	r2, r3
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	b10b      	cbz	r3, 8007294 <_free_r+0x50>
 8007290:	42a3      	cmp	r3, r4
 8007292:	d9fa      	bls.n	800728a <_free_r+0x46>
 8007294:	6811      	ldr	r1, [r2, #0]
 8007296:	1855      	adds	r5, r2, r1
 8007298:	42a5      	cmp	r5, r4
 800729a:	d10b      	bne.n	80072b4 <_free_r+0x70>
 800729c:	6824      	ldr	r4, [r4, #0]
 800729e:	4421      	add	r1, r4
 80072a0:	1854      	adds	r4, r2, r1
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	d1e0      	bne.n	800726a <_free_r+0x26>
 80072a8:	681c      	ldr	r4, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	6053      	str	r3, [r2, #4]
 80072ae:	440c      	add	r4, r1
 80072b0:	6014      	str	r4, [r2, #0]
 80072b2:	e7da      	b.n	800726a <_free_r+0x26>
 80072b4:	d902      	bls.n	80072bc <_free_r+0x78>
 80072b6:	230c      	movs	r3, #12
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	e7d6      	b.n	800726a <_free_r+0x26>
 80072bc:	6825      	ldr	r5, [r4, #0]
 80072be:	1961      	adds	r1, r4, r5
 80072c0:	428b      	cmp	r3, r1
 80072c2:	bf04      	itt	eq
 80072c4:	6819      	ldreq	r1, [r3, #0]
 80072c6:	685b      	ldreq	r3, [r3, #4]
 80072c8:	6063      	str	r3, [r4, #4]
 80072ca:	bf04      	itt	eq
 80072cc:	1949      	addeq	r1, r1, r5
 80072ce:	6021      	streq	r1, [r4, #0]
 80072d0:	6054      	str	r4, [r2, #4]
 80072d2:	e7ca      	b.n	800726a <_free_r+0x26>
 80072d4:	b003      	add	sp, #12
 80072d6:	bd30      	pop	{r4, r5, pc}
 80072d8:	20001d68 	.word	0x20001d68

080072dc <sbrk_aligned>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0e      	ldr	r6, [pc, #56]	; (8007318 <sbrk_aligned+0x3c>)
 80072e0:	460c      	mov	r4, r1
 80072e2:	6831      	ldr	r1, [r6, #0]
 80072e4:	4605      	mov	r5, r0
 80072e6:	b911      	cbnz	r1, 80072ee <sbrk_aligned+0x12>
 80072e8:	f000 fcbc 	bl	8007c64 <_sbrk_r>
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 fcb7 	bl	8007c64 <_sbrk_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d00a      	beq.n	8007310 <sbrk_aligned+0x34>
 80072fa:	1cc4      	adds	r4, r0, #3
 80072fc:	f024 0403 	bic.w	r4, r4, #3
 8007300:	42a0      	cmp	r0, r4
 8007302:	d007      	beq.n	8007314 <sbrk_aligned+0x38>
 8007304:	1a21      	subs	r1, r4, r0
 8007306:	4628      	mov	r0, r5
 8007308:	f000 fcac 	bl	8007c64 <_sbrk_r>
 800730c:	3001      	adds	r0, #1
 800730e:	d101      	bne.n	8007314 <sbrk_aligned+0x38>
 8007310:	f04f 34ff 	mov.w	r4, #4294967295
 8007314:	4620      	mov	r0, r4
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	20001d6c 	.word	0x20001d6c

0800731c <_malloc_r>:
 800731c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007320:	1ccd      	adds	r5, r1, #3
 8007322:	f025 0503 	bic.w	r5, r5, #3
 8007326:	3508      	adds	r5, #8
 8007328:	2d0c      	cmp	r5, #12
 800732a:	bf38      	it	cc
 800732c:	250c      	movcc	r5, #12
 800732e:	2d00      	cmp	r5, #0
 8007330:	4607      	mov	r7, r0
 8007332:	db01      	blt.n	8007338 <_malloc_r+0x1c>
 8007334:	42a9      	cmp	r1, r5
 8007336:	d905      	bls.n	8007344 <_malloc_r+0x28>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	2600      	movs	r6, #0
 800733e:	4630      	mov	r0, r6
 8007340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007344:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007418 <_malloc_r+0xfc>
 8007348:	f000 f868 	bl	800741c <__malloc_lock>
 800734c:	f8d8 3000 	ldr.w	r3, [r8]
 8007350:	461c      	mov	r4, r3
 8007352:	bb5c      	cbnz	r4, 80073ac <_malloc_r+0x90>
 8007354:	4629      	mov	r1, r5
 8007356:	4638      	mov	r0, r7
 8007358:	f7ff ffc0 	bl	80072dc <sbrk_aligned>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	4604      	mov	r4, r0
 8007360:	d155      	bne.n	800740e <_malloc_r+0xf2>
 8007362:	f8d8 4000 	ldr.w	r4, [r8]
 8007366:	4626      	mov	r6, r4
 8007368:	2e00      	cmp	r6, #0
 800736a:	d145      	bne.n	80073f8 <_malloc_r+0xdc>
 800736c:	2c00      	cmp	r4, #0
 800736e:	d048      	beq.n	8007402 <_malloc_r+0xe6>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	4631      	mov	r1, r6
 8007374:	4638      	mov	r0, r7
 8007376:	eb04 0903 	add.w	r9, r4, r3
 800737a:	f000 fc73 	bl	8007c64 <_sbrk_r>
 800737e:	4581      	cmp	r9, r0
 8007380:	d13f      	bne.n	8007402 <_malloc_r+0xe6>
 8007382:	6821      	ldr	r1, [r4, #0]
 8007384:	1a6d      	subs	r5, r5, r1
 8007386:	4629      	mov	r1, r5
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ffa7 	bl	80072dc <sbrk_aligned>
 800738e:	3001      	adds	r0, #1
 8007390:	d037      	beq.n	8007402 <_malloc_r+0xe6>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	442b      	add	r3, r5
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	f8d8 3000 	ldr.w	r3, [r8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d038      	beq.n	8007412 <_malloc_r+0xf6>
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	42a2      	cmp	r2, r4
 80073a4:	d12b      	bne.n	80073fe <_malloc_r+0xe2>
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	e00f      	b.n	80073cc <_malloc_r+0xb0>
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	1b52      	subs	r2, r2, r5
 80073b0:	d41f      	bmi.n	80073f2 <_malloc_r+0xd6>
 80073b2:	2a0b      	cmp	r2, #11
 80073b4:	d917      	bls.n	80073e6 <_malloc_r+0xca>
 80073b6:	1961      	adds	r1, r4, r5
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	6025      	str	r5, [r4, #0]
 80073bc:	bf18      	it	ne
 80073be:	6059      	strne	r1, [r3, #4]
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	bf08      	it	eq
 80073c4:	f8c8 1000 	streq.w	r1, [r8]
 80073c8:	5162      	str	r2, [r4, r5]
 80073ca:	604b      	str	r3, [r1, #4]
 80073cc:	4638      	mov	r0, r7
 80073ce:	f104 060b 	add.w	r6, r4, #11
 80073d2:	f000 f829 	bl	8007428 <__malloc_unlock>
 80073d6:	f026 0607 	bic.w	r6, r6, #7
 80073da:	1d23      	adds	r3, r4, #4
 80073dc:	1af2      	subs	r2, r6, r3
 80073de:	d0ae      	beq.n	800733e <_malloc_r+0x22>
 80073e0:	1b9b      	subs	r3, r3, r6
 80073e2:	50a3      	str	r3, [r4, r2]
 80073e4:	e7ab      	b.n	800733e <_malloc_r+0x22>
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	6862      	ldr	r2, [r4, #4]
 80073ea:	d1dd      	bne.n	80073a8 <_malloc_r+0x8c>
 80073ec:	f8c8 2000 	str.w	r2, [r8]
 80073f0:	e7ec      	b.n	80073cc <_malloc_r+0xb0>
 80073f2:	4623      	mov	r3, r4
 80073f4:	6864      	ldr	r4, [r4, #4]
 80073f6:	e7ac      	b.n	8007352 <_malloc_r+0x36>
 80073f8:	4634      	mov	r4, r6
 80073fa:	6876      	ldr	r6, [r6, #4]
 80073fc:	e7b4      	b.n	8007368 <_malloc_r+0x4c>
 80073fe:	4613      	mov	r3, r2
 8007400:	e7cc      	b.n	800739c <_malloc_r+0x80>
 8007402:	230c      	movs	r3, #12
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	4638      	mov	r0, r7
 8007408:	f000 f80e 	bl	8007428 <__malloc_unlock>
 800740c:	e797      	b.n	800733e <_malloc_r+0x22>
 800740e:	6025      	str	r5, [r4, #0]
 8007410:	e7dc      	b.n	80073cc <_malloc_r+0xb0>
 8007412:	605b      	str	r3, [r3, #4]
 8007414:	deff      	udf	#255	; 0xff
 8007416:	bf00      	nop
 8007418:	20001d68 	.word	0x20001d68

0800741c <__malloc_lock>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__malloc_lock+0x8>)
 800741e:	f7ff bf01 	b.w	8007224 <__retarget_lock_acquire_recursive>
 8007422:	bf00      	nop
 8007424:	20001d64 	.word	0x20001d64

08007428 <__malloc_unlock>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__malloc_unlock+0x8>)
 800742a:	f7ff befc 	b.w	8007226 <__retarget_lock_release_recursive>
 800742e:	bf00      	nop
 8007430:	20001d64 	.word	0x20001d64

08007434 <__sfputc_r>:
 8007434:	6893      	ldr	r3, [r2, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	b410      	push	{r4}
 800743c:	6093      	str	r3, [r2, #8]
 800743e:	da08      	bge.n	8007452 <__sfputc_r+0x1e>
 8007440:	6994      	ldr	r4, [r2, #24]
 8007442:	42a3      	cmp	r3, r4
 8007444:	db01      	blt.n	800744a <__sfputc_r+0x16>
 8007446:	290a      	cmp	r1, #10
 8007448:	d103      	bne.n	8007452 <__sfputc_r+0x1e>
 800744a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800744e:	f000 bb73 	b.w	8007b38 <__swbuf_r>
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	1c58      	adds	r0, r3, #1
 8007456:	6010      	str	r0, [r2, #0]
 8007458:	7019      	strb	r1, [r3, #0]
 800745a:	4608      	mov	r0, r1
 800745c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007460:	4770      	bx	lr

08007462 <__sfputs_r>:
 8007462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007464:	4606      	mov	r6, r0
 8007466:	460f      	mov	r7, r1
 8007468:	4614      	mov	r4, r2
 800746a:	18d5      	adds	r5, r2, r3
 800746c:	42ac      	cmp	r4, r5
 800746e:	d101      	bne.n	8007474 <__sfputs_r+0x12>
 8007470:	2000      	movs	r0, #0
 8007472:	e007      	b.n	8007484 <__sfputs_r+0x22>
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	463a      	mov	r2, r7
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ffda 	bl	8007434 <__sfputc_r>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d1f3      	bne.n	800746c <__sfputs_r+0xa>
 8007484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007488 <_vfiprintf_r>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	460d      	mov	r5, r1
 800748e:	b09d      	sub	sp, #116	; 0x74
 8007490:	4614      	mov	r4, r2
 8007492:	4698      	mov	r8, r3
 8007494:	4606      	mov	r6, r0
 8007496:	b118      	cbz	r0, 80074a0 <_vfiprintf_r+0x18>
 8007498:	6a03      	ldr	r3, [r0, #32]
 800749a:	b90b      	cbnz	r3, 80074a0 <_vfiprintf_r+0x18>
 800749c:	f7ff fd68 	bl	8006f70 <__sinit>
 80074a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074a2:	07d9      	lsls	r1, r3, #31
 80074a4:	d405      	bmi.n	80074b2 <_vfiprintf_r+0x2a>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_vfiprintf_r+0x2a>
 80074ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ae:	f7ff feb9 	bl	8007224 <__retarget_lock_acquire_recursive>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	071b      	lsls	r3, r3, #28
 80074b6:	d501      	bpl.n	80074bc <_vfiprintf_r+0x34>
 80074b8:	692b      	ldr	r3, [r5, #16]
 80074ba:	b99b      	cbnz	r3, 80074e4 <_vfiprintf_r+0x5c>
 80074bc:	4629      	mov	r1, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	f000 fb78 	bl	8007bb4 <__swsetup_r>
 80074c4:	b170      	cbz	r0, 80074e4 <_vfiprintf_r+0x5c>
 80074c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074c8:	07dc      	lsls	r4, r3, #31
 80074ca:	d504      	bpl.n	80074d6 <_vfiprintf_r+0x4e>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	b01d      	add	sp, #116	; 0x74
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d6:	89ab      	ldrh	r3, [r5, #12]
 80074d8:	0598      	lsls	r0, r3, #22
 80074da:	d4f7      	bmi.n	80074cc <_vfiprintf_r+0x44>
 80074dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074de:	f7ff fea2 	bl	8007226 <__retarget_lock_release_recursive>
 80074e2:	e7f3      	b.n	80074cc <_vfiprintf_r+0x44>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	2320      	movs	r3, #32
 80074ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80074f2:	2330      	movs	r3, #48	; 0x30
 80074f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076a8 <_vfiprintf_r+0x220>
 80074f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074fc:	f04f 0901 	mov.w	r9, #1
 8007500:	4623      	mov	r3, r4
 8007502:	469a      	mov	sl, r3
 8007504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007508:	b10a      	cbz	r2, 800750e <_vfiprintf_r+0x86>
 800750a:	2a25      	cmp	r2, #37	; 0x25
 800750c:	d1f9      	bne.n	8007502 <_vfiprintf_r+0x7a>
 800750e:	ebba 0b04 	subs.w	fp, sl, r4
 8007512:	d00b      	beq.n	800752c <_vfiprintf_r+0xa4>
 8007514:	465b      	mov	r3, fp
 8007516:	4622      	mov	r2, r4
 8007518:	4629      	mov	r1, r5
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ffa1 	bl	8007462 <__sfputs_r>
 8007520:	3001      	adds	r0, #1
 8007522:	f000 80a9 	beq.w	8007678 <_vfiprintf_r+0x1f0>
 8007526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007528:	445a      	add	r2, fp
 800752a:	9209      	str	r2, [sp, #36]	; 0x24
 800752c:	f89a 3000 	ldrb.w	r3, [sl]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80a1 	beq.w	8007678 <_vfiprintf_r+0x1f0>
 8007536:	2300      	movs	r3, #0
 8007538:	f04f 32ff 	mov.w	r2, #4294967295
 800753c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007540:	f10a 0a01 	add.w	sl, sl, #1
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800754c:	931a      	str	r3, [sp, #104]	; 0x68
 800754e:	4654      	mov	r4, sl
 8007550:	2205      	movs	r2, #5
 8007552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007556:	4854      	ldr	r0, [pc, #336]	; (80076a8 <_vfiprintf_r+0x220>)
 8007558:	f7f8 fe3a 	bl	80001d0 <memchr>
 800755c:	9a04      	ldr	r2, [sp, #16]
 800755e:	b9d8      	cbnz	r0, 8007598 <_vfiprintf_r+0x110>
 8007560:	06d1      	lsls	r1, r2, #27
 8007562:	bf44      	itt	mi
 8007564:	2320      	movmi	r3, #32
 8007566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756a:	0713      	lsls	r3, r2, #28
 800756c:	bf44      	itt	mi
 800756e:	232b      	movmi	r3, #43	; 0x2b
 8007570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007574:	f89a 3000 	ldrb.w	r3, [sl]
 8007578:	2b2a      	cmp	r3, #42	; 0x2a
 800757a:	d015      	beq.n	80075a8 <_vfiprintf_r+0x120>
 800757c:	9a07      	ldr	r2, [sp, #28]
 800757e:	4654      	mov	r4, sl
 8007580:	2000      	movs	r0, #0
 8007582:	f04f 0c0a 	mov.w	ip, #10
 8007586:	4621      	mov	r1, r4
 8007588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758c:	3b30      	subs	r3, #48	; 0x30
 800758e:	2b09      	cmp	r3, #9
 8007590:	d94d      	bls.n	800762e <_vfiprintf_r+0x1a6>
 8007592:	b1b0      	cbz	r0, 80075c2 <_vfiprintf_r+0x13a>
 8007594:	9207      	str	r2, [sp, #28]
 8007596:	e014      	b.n	80075c2 <_vfiprintf_r+0x13a>
 8007598:	eba0 0308 	sub.w	r3, r0, r8
 800759c:	fa09 f303 	lsl.w	r3, r9, r3
 80075a0:	4313      	orrs	r3, r2
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	46a2      	mov	sl, r4
 80075a6:	e7d2      	b.n	800754e <_vfiprintf_r+0xc6>
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	1d19      	adds	r1, r3, #4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	9103      	str	r1, [sp, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bfbb      	ittet	lt
 80075b4:	425b      	neglt	r3, r3
 80075b6:	f042 0202 	orrlt.w	r2, r2, #2
 80075ba:	9307      	strge	r3, [sp, #28]
 80075bc:	9307      	strlt	r3, [sp, #28]
 80075be:	bfb8      	it	lt
 80075c0:	9204      	strlt	r2, [sp, #16]
 80075c2:	7823      	ldrb	r3, [r4, #0]
 80075c4:	2b2e      	cmp	r3, #46	; 0x2e
 80075c6:	d10c      	bne.n	80075e2 <_vfiprintf_r+0x15a>
 80075c8:	7863      	ldrb	r3, [r4, #1]
 80075ca:	2b2a      	cmp	r3, #42	; 0x2a
 80075cc:	d134      	bne.n	8007638 <_vfiprintf_r+0x1b0>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	1d1a      	adds	r2, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	9203      	str	r2, [sp, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfb8      	it	lt
 80075da:	f04f 33ff 	movlt.w	r3, #4294967295
 80075de:	3402      	adds	r4, #2
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80076b8 <_vfiprintf_r+0x230>
 80075e6:	7821      	ldrb	r1, [r4, #0]
 80075e8:	2203      	movs	r2, #3
 80075ea:	4650      	mov	r0, sl
 80075ec:	f7f8 fdf0 	bl	80001d0 <memchr>
 80075f0:	b138      	cbz	r0, 8007602 <_vfiprintf_r+0x17a>
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	eba0 000a 	sub.w	r0, r0, sl
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	4082      	lsls	r2, r0
 80075fc:	4313      	orrs	r3, r2
 80075fe:	3401      	adds	r4, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007606:	4829      	ldr	r0, [pc, #164]	; (80076ac <_vfiprintf_r+0x224>)
 8007608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800760c:	2206      	movs	r2, #6
 800760e:	f7f8 fddf 	bl	80001d0 <memchr>
 8007612:	2800      	cmp	r0, #0
 8007614:	d03f      	beq.n	8007696 <_vfiprintf_r+0x20e>
 8007616:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <_vfiprintf_r+0x228>)
 8007618:	bb1b      	cbnz	r3, 8007662 <_vfiprintf_r+0x1da>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	3307      	adds	r3, #7
 800761e:	f023 0307 	bic.w	r3, r3, #7
 8007622:	3308      	adds	r3, #8
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	443b      	add	r3, r7
 800762a:	9309      	str	r3, [sp, #36]	; 0x24
 800762c:	e768      	b.n	8007500 <_vfiprintf_r+0x78>
 800762e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007632:	460c      	mov	r4, r1
 8007634:	2001      	movs	r0, #1
 8007636:	e7a6      	b.n	8007586 <_vfiprintf_r+0xfe>
 8007638:	2300      	movs	r3, #0
 800763a:	3401      	adds	r4, #1
 800763c:	9305      	str	r3, [sp, #20]
 800763e:	4619      	mov	r1, r3
 8007640:	f04f 0c0a 	mov.w	ip, #10
 8007644:	4620      	mov	r0, r4
 8007646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764a:	3a30      	subs	r2, #48	; 0x30
 800764c:	2a09      	cmp	r2, #9
 800764e:	d903      	bls.n	8007658 <_vfiprintf_r+0x1d0>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0c6      	beq.n	80075e2 <_vfiprintf_r+0x15a>
 8007654:	9105      	str	r1, [sp, #20]
 8007656:	e7c4      	b.n	80075e2 <_vfiprintf_r+0x15a>
 8007658:	fb0c 2101 	mla	r1, ip, r1, r2
 800765c:	4604      	mov	r4, r0
 800765e:	2301      	movs	r3, #1
 8007660:	e7f0      	b.n	8007644 <_vfiprintf_r+0x1bc>
 8007662:	ab03      	add	r3, sp, #12
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	462a      	mov	r2, r5
 8007668:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <_vfiprintf_r+0x22c>)
 800766a:	a904      	add	r1, sp, #16
 800766c:	4630      	mov	r0, r6
 800766e:	f3af 8000 	nop.w
 8007672:	4607      	mov	r7, r0
 8007674:	1c78      	adds	r0, r7, #1
 8007676:	d1d6      	bne.n	8007626 <_vfiprintf_r+0x19e>
 8007678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d405      	bmi.n	800768a <_vfiprintf_r+0x202>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d402      	bmi.n	800768a <_vfiprintf_r+0x202>
 8007684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007686:	f7ff fdce 	bl	8007226 <__retarget_lock_release_recursive>
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	065b      	lsls	r3, r3, #25
 800768e:	f53f af1d 	bmi.w	80074cc <_vfiprintf_r+0x44>
 8007692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007694:	e71c      	b.n	80074d0 <_vfiprintf_r+0x48>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <_vfiprintf_r+0x22c>)
 800769e:	a904      	add	r1, sp, #16
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f879 	bl	8007798 <_printf_i>
 80076a6:	e7e4      	b.n	8007672 <_vfiprintf_r+0x1ea>
 80076a8:	08007e84 	.word	0x08007e84
 80076ac:	08007e8e 	.word	0x08007e8e
 80076b0:	00000000 	.word	0x00000000
 80076b4:	08007463 	.word	0x08007463
 80076b8:	08007e8a 	.word	0x08007e8a

080076bc <_printf_common>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	4616      	mov	r6, r2
 80076c2:	4699      	mov	r9, r3
 80076c4:	688a      	ldr	r2, [r1, #8]
 80076c6:	690b      	ldr	r3, [r1, #16]
 80076c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	bfb8      	it	lt
 80076d0:	4613      	movlt	r3, r2
 80076d2:	6033      	str	r3, [r6, #0]
 80076d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076d8:	4607      	mov	r7, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	b10a      	cbz	r2, 80076e2 <_printf_common+0x26>
 80076de:	3301      	adds	r3, #1
 80076e0:	6033      	str	r3, [r6, #0]
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	0699      	lsls	r1, r3, #26
 80076e6:	bf42      	ittt	mi
 80076e8:	6833      	ldrmi	r3, [r6, #0]
 80076ea:	3302      	addmi	r3, #2
 80076ec:	6033      	strmi	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	f015 0506 	ands.w	r5, r5, #6
 80076f4:	d106      	bne.n	8007704 <_printf_common+0x48>
 80076f6:	f104 0a19 	add.w	sl, r4, #25
 80076fa:	68e3      	ldr	r3, [r4, #12]
 80076fc:	6832      	ldr	r2, [r6, #0]
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	42ab      	cmp	r3, r5
 8007702:	dc26      	bgt.n	8007752 <_printf_common+0x96>
 8007704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007708:	1e13      	subs	r3, r2, #0
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	bf18      	it	ne
 800770e:	2301      	movne	r3, #1
 8007710:	0692      	lsls	r2, r2, #26
 8007712:	d42b      	bmi.n	800776c <_printf_common+0xb0>
 8007714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007718:	4649      	mov	r1, r9
 800771a:	4638      	mov	r0, r7
 800771c:	47c0      	blx	r8
 800771e:	3001      	adds	r0, #1
 8007720:	d01e      	beq.n	8007760 <_printf_common+0xa4>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	f003 0306 	and.w	r3, r3, #6
 800772a:	2b04      	cmp	r3, #4
 800772c:	bf02      	ittt	eq
 800772e:	68e5      	ldreq	r5, [r4, #12]
 8007730:	6833      	ldreq	r3, [r6, #0]
 8007732:	1aed      	subeq	r5, r5, r3
 8007734:	68a3      	ldr	r3, [r4, #8]
 8007736:	bf0c      	ite	eq
 8007738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800773c:	2500      	movne	r5, #0
 800773e:	4293      	cmp	r3, r2
 8007740:	bfc4      	itt	gt
 8007742:	1a9b      	subgt	r3, r3, r2
 8007744:	18ed      	addgt	r5, r5, r3
 8007746:	2600      	movs	r6, #0
 8007748:	341a      	adds	r4, #26
 800774a:	42b5      	cmp	r5, r6
 800774c:	d11a      	bne.n	8007784 <_printf_common+0xc8>
 800774e:	2000      	movs	r0, #0
 8007750:	e008      	b.n	8007764 <_printf_common+0xa8>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4649      	mov	r1, r9
 8007758:	4638      	mov	r0, r7
 800775a:	47c0      	blx	r8
 800775c:	3001      	adds	r0, #1
 800775e:	d103      	bne.n	8007768 <_printf_common+0xac>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	3501      	adds	r5, #1
 800776a:	e7c6      	b.n	80076fa <_printf_common+0x3e>
 800776c:	18e1      	adds	r1, r4, r3
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	2030      	movs	r0, #48	; 0x30
 8007772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007776:	4422      	add	r2, r4
 8007778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800777c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007780:	3302      	adds	r3, #2
 8007782:	e7c7      	b.n	8007714 <_printf_common+0x58>
 8007784:	2301      	movs	r3, #1
 8007786:	4622      	mov	r2, r4
 8007788:	4649      	mov	r1, r9
 800778a:	4638      	mov	r0, r7
 800778c:	47c0      	blx	r8
 800778e:	3001      	adds	r0, #1
 8007790:	d0e6      	beq.n	8007760 <_printf_common+0xa4>
 8007792:	3601      	adds	r6, #1
 8007794:	e7d9      	b.n	800774a <_printf_common+0x8e>
	...

08007798 <_printf_i>:
 8007798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	7e0f      	ldrb	r7, [r1, #24]
 800779e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077a0:	2f78      	cmp	r7, #120	; 0x78
 80077a2:	4691      	mov	r9, r2
 80077a4:	4680      	mov	r8, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	469a      	mov	sl, r3
 80077aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ae:	d807      	bhi.n	80077c0 <_printf_i+0x28>
 80077b0:	2f62      	cmp	r7, #98	; 0x62
 80077b2:	d80a      	bhi.n	80077ca <_printf_i+0x32>
 80077b4:	2f00      	cmp	r7, #0
 80077b6:	f000 80d4 	beq.w	8007962 <_printf_i+0x1ca>
 80077ba:	2f58      	cmp	r7, #88	; 0x58
 80077bc:	f000 80c0 	beq.w	8007940 <_printf_i+0x1a8>
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077c8:	e03a      	b.n	8007840 <_printf_i+0xa8>
 80077ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ce:	2b15      	cmp	r3, #21
 80077d0:	d8f6      	bhi.n	80077c0 <_printf_i+0x28>
 80077d2:	a101      	add	r1, pc, #4	; (adr r1, 80077d8 <_printf_i+0x40>)
 80077d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077d8:	08007831 	.word	0x08007831
 80077dc:	08007845 	.word	0x08007845
 80077e0:	080077c1 	.word	0x080077c1
 80077e4:	080077c1 	.word	0x080077c1
 80077e8:	080077c1 	.word	0x080077c1
 80077ec:	080077c1 	.word	0x080077c1
 80077f0:	08007845 	.word	0x08007845
 80077f4:	080077c1 	.word	0x080077c1
 80077f8:	080077c1 	.word	0x080077c1
 80077fc:	080077c1 	.word	0x080077c1
 8007800:	080077c1 	.word	0x080077c1
 8007804:	08007949 	.word	0x08007949
 8007808:	08007871 	.word	0x08007871
 800780c:	08007903 	.word	0x08007903
 8007810:	080077c1 	.word	0x080077c1
 8007814:	080077c1 	.word	0x080077c1
 8007818:	0800796b 	.word	0x0800796b
 800781c:	080077c1 	.word	0x080077c1
 8007820:	08007871 	.word	0x08007871
 8007824:	080077c1 	.word	0x080077c1
 8007828:	080077c1 	.word	0x080077c1
 800782c:	0800790b 	.word	0x0800790b
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	602a      	str	r2, [r5, #0]
 8007838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800783c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007840:	2301      	movs	r3, #1
 8007842:	e09f      	b.n	8007984 <_printf_i+0x1ec>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	0607      	lsls	r7, r0, #24
 800784a:	f103 0104 	add.w	r1, r3, #4
 800784e:	6029      	str	r1, [r5, #0]
 8007850:	d501      	bpl.n	8007856 <_printf_i+0xbe>
 8007852:	681e      	ldr	r6, [r3, #0]
 8007854:	e003      	b.n	800785e <_printf_i+0xc6>
 8007856:	0646      	lsls	r6, r0, #25
 8007858:	d5fb      	bpl.n	8007852 <_printf_i+0xba>
 800785a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800785e:	2e00      	cmp	r6, #0
 8007860:	da03      	bge.n	800786a <_printf_i+0xd2>
 8007862:	232d      	movs	r3, #45	; 0x2d
 8007864:	4276      	negs	r6, r6
 8007866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800786a:	485a      	ldr	r0, [pc, #360]	; (80079d4 <_printf_i+0x23c>)
 800786c:	230a      	movs	r3, #10
 800786e:	e012      	b.n	8007896 <_printf_i+0xfe>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	6820      	ldr	r0, [r4, #0]
 8007874:	1d19      	adds	r1, r3, #4
 8007876:	6029      	str	r1, [r5, #0]
 8007878:	0605      	lsls	r5, r0, #24
 800787a:	d501      	bpl.n	8007880 <_printf_i+0xe8>
 800787c:	681e      	ldr	r6, [r3, #0]
 800787e:	e002      	b.n	8007886 <_printf_i+0xee>
 8007880:	0641      	lsls	r1, r0, #25
 8007882:	d5fb      	bpl.n	800787c <_printf_i+0xe4>
 8007884:	881e      	ldrh	r6, [r3, #0]
 8007886:	4853      	ldr	r0, [pc, #332]	; (80079d4 <_printf_i+0x23c>)
 8007888:	2f6f      	cmp	r7, #111	; 0x6f
 800788a:	bf0c      	ite	eq
 800788c:	2308      	moveq	r3, #8
 800788e:	230a      	movne	r3, #10
 8007890:	2100      	movs	r1, #0
 8007892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007896:	6865      	ldr	r5, [r4, #4]
 8007898:	60a5      	str	r5, [r4, #8]
 800789a:	2d00      	cmp	r5, #0
 800789c:	bfa2      	ittt	ge
 800789e:	6821      	ldrge	r1, [r4, #0]
 80078a0:	f021 0104 	bicge.w	r1, r1, #4
 80078a4:	6021      	strge	r1, [r4, #0]
 80078a6:	b90e      	cbnz	r6, 80078ac <_printf_i+0x114>
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	d04b      	beq.n	8007944 <_printf_i+0x1ac>
 80078ac:	4615      	mov	r5, r2
 80078ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80078b2:	fb03 6711 	mls	r7, r3, r1, r6
 80078b6:	5dc7      	ldrb	r7, [r0, r7]
 80078b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078bc:	4637      	mov	r7, r6
 80078be:	42bb      	cmp	r3, r7
 80078c0:	460e      	mov	r6, r1
 80078c2:	d9f4      	bls.n	80078ae <_printf_i+0x116>
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d10b      	bne.n	80078e0 <_printf_i+0x148>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	07de      	lsls	r6, r3, #31
 80078cc:	d508      	bpl.n	80078e0 <_printf_i+0x148>
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	6861      	ldr	r1, [r4, #4]
 80078d2:	4299      	cmp	r1, r3
 80078d4:	bfde      	ittt	le
 80078d6:	2330      	movle	r3, #48	; 0x30
 80078d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078e0:	1b52      	subs	r2, r2, r5
 80078e2:	6122      	str	r2, [r4, #16]
 80078e4:	f8cd a000 	str.w	sl, [sp]
 80078e8:	464b      	mov	r3, r9
 80078ea:	aa03      	add	r2, sp, #12
 80078ec:	4621      	mov	r1, r4
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fee4 	bl	80076bc <_printf_common>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d14a      	bne.n	800798e <_printf_i+0x1f6>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b004      	add	sp, #16
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f043 0320 	orr.w	r3, r3, #32
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	4833      	ldr	r0, [pc, #204]	; (80079d8 <_printf_i+0x240>)
 800790c:	2778      	movs	r7, #120	; 0x78
 800790e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	061f      	lsls	r7, r3, #24
 8007918:	f851 6b04 	ldr.w	r6, [r1], #4
 800791c:	d402      	bmi.n	8007924 <_printf_i+0x18c>
 800791e:	065f      	lsls	r7, r3, #25
 8007920:	bf48      	it	mi
 8007922:	b2b6      	uxthmi	r6, r6
 8007924:	07df      	lsls	r7, r3, #31
 8007926:	bf48      	it	mi
 8007928:	f043 0320 	orrmi.w	r3, r3, #32
 800792c:	6029      	str	r1, [r5, #0]
 800792e:	bf48      	it	mi
 8007930:	6023      	strmi	r3, [r4, #0]
 8007932:	b91e      	cbnz	r6, 800793c <_printf_i+0x1a4>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	2310      	movs	r3, #16
 800793e:	e7a7      	b.n	8007890 <_printf_i+0xf8>
 8007940:	4824      	ldr	r0, [pc, #144]	; (80079d4 <_printf_i+0x23c>)
 8007942:	e7e4      	b.n	800790e <_printf_i+0x176>
 8007944:	4615      	mov	r5, r2
 8007946:	e7bd      	b.n	80078c4 <_printf_i+0x12c>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	6826      	ldr	r6, [r4, #0]
 800794c:	6961      	ldr	r1, [r4, #20]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6028      	str	r0, [r5, #0]
 8007952:	0635      	lsls	r5, r6, #24
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	d501      	bpl.n	800795c <_printf_i+0x1c4>
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	e002      	b.n	8007962 <_printf_i+0x1ca>
 800795c:	0670      	lsls	r0, r6, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0x1c0>
 8007960:	8019      	strh	r1, [r3, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	4615      	mov	r5, r2
 8007968:	e7bc      	b.n	80078e4 <_printf_i+0x14c>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	1d1a      	adds	r2, r3, #4
 800796e:	602a      	str	r2, [r5, #0]
 8007970:	681d      	ldr	r5, [r3, #0]
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	2100      	movs	r1, #0
 8007976:	4628      	mov	r0, r5
 8007978:	f7f8 fc2a 	bl	80001d0 <memchr>
 800797c:	b108      	cbz	r0, 8007982 <_printf_i+0x1ea>
 800797e:	1b40      	subs	r0, r0, r5
 8007980:	6060      	str	r0, [r4, #4]
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	2300      	movs	r3, #0
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798c:	e7aa      	b.n	80078e4 <_printf_i+0x14c>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	462a      	mov	r2, r5
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d0ad      	beq.n	80078f8 <_printf_i+0x160>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d413      	bmi.n	80079ca <_printf_i+0x232>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	4298      	cmp	r0, r3
 80079a8:	bfb8      	it	lt
 80079aa:	4618      	movlt	r0, r3
 80079ac:	e7a6      	b.n	80078fc <_printf_i+0x164>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d09d      	beq.n	80078f8 <_printf_i+0x160>
 80079bc:	3501      	adds	r5, #1
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	1a5b      	subs	r3, r3, r1
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dcf2      	bgt.n	80079ae <_printf_i+0x216>
 80079c8:	e7eb      	b.n	80079a2 <_printf_i+0x20a>
 80079ca:	2500      	movs	r5, #0
 80079cc:	f104 0619 	add.w	r6, r4, #25
 80079d0:	e7f5      	b.n	80079be <_printf_i+0x226>
 80079d2:	bf00      	nop
 80079d4:	08007e95 	.word	0x08007e95
 80079d8:	08007ea6 	.word	0x08007ea6

080079dc <__sflush_r>:
 80079dc:	898a      	ldrh	r2, [r1, #12]
 80079de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	0710      	lsls	r0, r2, #28
 80079e6:	460c      	mov	r4, r1
 80079e8:	d458      	bmi.n	8007a9c <__sflush_r+0xc0>
 80079ea:	684b      	ldr	r3, [r1, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc05      	bgt.n	80079fc <__sflush_r+0x20>
 80079f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc02      	bgt.n	80079fc <__sflush_r+0x20>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d0f9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a08:	682f      	ldr	r7, [r5, #0]
 8007a0a:	6a21      	ldr	r1, [r4, #32]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	d032      	beq.n	8007a76 <__sflush_r+0x9a>
 8007a10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	075a      	lsls	r2, r3, #29
 8007a16:	d505      	bpl.n	8007a24 <__sflush_r+0x48>
 8007a18:	6863      	ldr	r3, [r4, #4]
 8007a1a:	1ac0      	subs	r0, r0, r3
 8007a1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a1e:	b10b      	cbz	r3, 8007a24 <__sflush_r+0x48>
 8007a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a22:	1ac0      	subs	r0, r0, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	4602      	mov	r2, r0
 8007a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a2a:	6a21      	ldr	r1, [r4, #32]
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b0      	blx	r6
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	d106      	bne.n	8007a44 <__sflush_r+0x68>
 8007a36:	6829      	ldr	r1, [r5, #0]
 8007a38:	291d      	cmp	r1, #29
 8007a3a:	d82b      	bhi.n	8007a94 <__sflush_r+0xb8>
 8007a3c:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <__sflush_r+0x108>)
 8007a3e:	410a      	asrs	r2, r1
 8007a40:	07d6      	lsls	r6, r2, #31
 8007a42:	d427      	bmi.n	8007a94 <__sflush_r+0xb8>
 8007a44:	2200      	movs	r2, #0
 8007a46:	6062      	str	r2, [r4, #4]
 8007a48:	04d9      	lsls	r1, r3, #19
 8007a4a:	6922      	ldr	r2, [r4, #16]
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	d504      	bpl.n	8007a5a <__sflush_r+0x7e>
 8007a50:	1c42      	adds	r2, r0, #1
 8007a52:	d101      	bne.n	8007a58 <__sflush_r+0x7c>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b903      	cbnz	r3, 8007a5a <__sflush_r+0x7e>
 8007a58:	6560      	str	r0, [r4, #84]	; 0x54
 8007a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5c:	602f      	str	r7, [r5, #0]
 8007a5e:	2900      	cmp	r1, #0
 8007a60:	d0c9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a66:	4299      	cmp	r1, r3
 8007a68:	d002      	beq.n	8007a70 <__sflush_r+0x94>
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f7ff fbea 	bl	8007244 <_free_r>
 8007a70:	2000      	movs	r0, #0
 8007a72:	6360      	str	r0, [r4, #52]	; 0x34
 8007a74:	e7c0      	b.n	80079f8 <__sflush_r+0x1c>
 8007a76:	2301      	movs	r3, #1
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b0      	blx	r6
 8007a7c:	1c41      	adds	r1, r0, #1
 8007a7e:	d1c8      	bne.n	8007a12 <__sflush_r+0x36>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0c5      	beq.n	8007a12 <__sflush_r+0x36>
 8007a86:	2b1d      	cmp	r3, #29
 8007a88:	d001      	beq.n	8007a8e <__sflush_r+0xb2>
 8007a8a:	2b16      	cmp	r3, #22
 8007a8c:	d101      	bne.n	8007a92 <__sflush_r+0xb6>
 8007a8e:	602f      	str	r7, [r5, #0]
 8007a90:	e7b1      	b.n	80079f6 <__sflush_r+0x1a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e7ad      	b.n	80079f8 <__sflush_r+0x1c>
 8007a9c:	690f      	ldr	r7, [r1, #16]
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	d0a9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007aa2:	0793      	lsls	r3, r2, #30
 8007aa4:	680e      	ldr	r6, [r1, #0]
 8007aa6:	bf08      	it	eq
 8007aa8:	694b      	ldreq	r3, [r1, #20]
 8007aaa:	600f      	str	r7, [r1, #0]
 8007aac:	bf18      	it	ne
 8007aae:	2300      	movne	r3, #0
 8007ab0:	eba6 0807 	sub.w	r8, r6, r7
 8007ab4:	608b      	str	r3, [r1, #8]
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	dd9c      	ble.n	80079f6 <__sflush_r+0x1a>
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ac0:	4643      	mov	r3, r8
 8007ac2:	463a      	mov	r2, r7
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b0      	blx	r6
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	dc06      	bgt.n	8007ada <__sflush_r+0xfe>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	e78e      	b.n	80079f8 <__sflush_r+0x1c>
 8007ada:	4407      	add	r7, r0
 8007adc:	eba8 0800 	sub.w	r8, r8, r0
 8007ae0:	e7e9      	b.n	8007ab6 <__sflush_r+0xda>
 8007ae2:	bf00      	nop
 8007ae4:	dfbffffe 	.word	0xdfbffffe

08007ae8 <_fflush_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	690b      	ldr	r3, [r1, #16]
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	b913      	cbnz	r3, 8007af8 <_fflush_r+0x10>
 8007af2:	2500      	movs	r5, #0
 8007af4:	4628      	mov	r0, r5
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	b118      	cbz	r0, 8007b02 <_fflush_r+0x1a>
 8007afa:	6a03      	ldr	r3, [r0, #32]
 8007afc:	b90b      	cbnz	r3, 8007b02 <_fflush_r+0x1a>
 8007afe:	f7ff fa37 	bl	8006f70 <__sinit>
 8007b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f3      	beq.n	8007af2 <_fflush_r+0xa>
 8007b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b0c:	07d0      	lsls	r0, r2, #31
 8007b0e:	d404      	bmi.n	8007b1a <_fflush_r+0x32>
 8007b10:	0599      	lsls	r1, r3, #22
 8007b12:	d402      	bmi.n	8007b1a <_fflush_r+0x32>
 8007b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b16:	f7ff fb85 	bl	8007224 <__retarget_lock_acquire_recursive>
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	f7ff ff5d 	bl	80079dc <__sflush_r>
 8007b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b24:	07da      	lsls	r2, r3, #31
 8007b26:	4605      	mov	r5, r0
 8007b28:	d4e4      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	059b      	lsls	r3, r3, #22
 8007b2e:	d4e1      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b32:	f7ff fb78 	bl	8007226 <__retarget_lock_release_recursive>
 8007b36:	e7dd      	b.n	8007af4 <_fflush_r+0xc>

08007b38 <__swbuf_r>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	460e      	mov	r6, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	4605      	mov	r5, r0
 8007b40:	b118      	cbz	r0, 8007b4a <__swbuf_r+0x12>
 8007b42:	6a03      	ldr	r3, [r0, #32]
 8007b44:	b90b      	cbnz	r3, 8007b4a <__swbuf_r+0x12>
 8007b46:	f7ff fa13 	bl	8006f70 <__sinit>
 8007b4a:	69a3      	ldr	r3, [r4, #24]
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	071a      	lsls	r2, r3, #28
 8007b52:	d525      	bpl.n	8007ba0 <__swbuf_r+0x68>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b31b      	cbz	r3, 8007ba0 <__swbuf_r+0x68>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	6922      	ldr	r2, [r4, #16]
 8007b5c:	1a98      	subs	r0, r3, r2
 8007b5e:	6963      	ldr	r3, [r4, #20]
 8007b60:	b2f6      	uxtb	r6, r6
 8007b62:	4283      	cmp	r3, r0
 8007b64:	4637      	mov	r7, r6
 8007b66:	dc04      	bgt.n	8007b72 <__swbuf_r+0x3a>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff ffbc 	bl	8007ae8 <_fflush_r>
 8007b70:	b9e0      	cbnz	r0, 8007bac <__swbuf_r+0x74>
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	60a3      	str	r3, [r4, #8]
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	6022      	str	r2, [r4, #0]
 8007b7e:	701e      	strb	r6, [r3, #0]
 8007b80:	6962      	ldr	r2, [r4, #20]
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d004      	beq.n	8007b92 <__swbuf_r+0x5a>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d506      	bpl.n	8007b9c <__swbuf_r+0x64>
 8007b8e:	2e0a      	cmp	r6, #10
 8007b90:	d104      	bne.n	8007b9c <__swbuf_r+0x64>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f7ff ffa7 	bl	8007ae8 <_fflush_r>
 8007b9a:	b938      	cbnz	r0, 8007bac <__swbuf_r+0x74>
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f806 	bl	8007bb4 <__swsetup_r>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0d5      	beq.n	8007b58 <__swbuf_r+0x20>
 8007bac:	f04f 37ff 	mov.w	r7, #4294967295
 8007bb0:	e7f4      	b.n	8007b9c <__swbuf_r+0x64>
	...

08007bb4 <__swsetup_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <__swsetup_r+0xac>)
 8007bb8:	4605      	mov	r5, r0
 8007bba:	6818      	ldr	r0, [r3, #0]
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	b118      	cbz	r0, 8007bc8 <__swsetup_r+0x14>
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <__swsetup_r+0x14>
 8007bc4:	f7ff f9d4 	bl	8006f70 <__sinit>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bce:	0718      	lsls	r0, r3, #28
 8007bd0:	d422      	bmi.n	8007c18 <__swsetup_r+0x64>
 8007bd2:	06d9      	lsls	r1, r3, #27
 8007bd4:	d407      	bmi.n	8007be6 <__swsetup_r+0x32>
 8007bd6:	2309      	movs	r3, #9
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	e034      	b.n	8007c50 <__swsetup_r+0x9c>
 8007be6:	0758      	lsls	r0, r3, #29
 8007be8:	d512      	bpl.n	8007c10 <__swsetup_r+0x5c>
 8007bea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bec:	b141      	cbz	r1, 8007c00 <__swsetup_r+0x4c>
 8007bee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf2:	4299      	cmp	r1, r3
 8007bf4:	d002      	beq.n	8007bfc <__swsetup_r+0x48>
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f7ff fb24 	bl	8007244 <_free_r>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6363      	str	r3, [r4, #52]	; 0x34
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c06:	81a3      	strh	r3, [r4, #12]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6063      	str	r3, [r4, #4]
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f043 0308 	orr.w	r3, r3, #8
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	b94b      	cbnz	r3, 8007c30 <__swsetup_r+0x7c>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c26:	d003      	beq.n	8007c30 <__swsetup_r+0x7c>
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 f850 	bl	8007cd0 <__smakebuf_r>
 8007c30:	89a0      	ldrh	r0, [r4, #12]
 8007c32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c36:	f010 0301 	ands.w	r3, r0, #1
 8007c3a:	d00a      	beq.n	8007c52 <__swsetup_r+0x9e>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	6963      	ldr	r3, [r4, #20]
 8007c42:	425b      	negs	r3, r3
 8007c44:	61a3      	str	r3, [r4, #24]
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	b943      	cbnz	r3, 8007c5c <__swsetup_r+0xa8>
 8007c4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c4e:	d1c4      	bne.n	8007bda <__swsetup_r+0x26>
 8007c50:	bd38      	pop	{r3, r4, r5, pc}
 8007c52:	0781      	lsls	r1, r0, #30
 8007c54:	bf58      	it	pl
 8007c56:	6963      	ldrpl	r3, [r4, #20]
 8007c58:	60a3      	str	r3, [r4, #8]
 8007c5a:	e7f4      	b.n	8007c46 <__swsetup_r+0x92>
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e7f7      	b.n	8007c50 <__swsetup_r+0x9c>
 8007c60:	20000068 	.word	0x20000068

08007c64 <_sbrk_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_sbrk_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 fabe 	bl	80011f0 <_sbrk>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_sbrk_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_sbrk_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20001d60 	.word	0x20001d60

08007c84 <__swhatbuf_r>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	460c      	mov	r4, r1
 8007c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8c:	2900      	cmp	r1, #0
 8007c8e:	b096      	sub	sp, #88	; 0x58
 8007c90:	4615      	mov	r5, r2
 8007c92:	461e      	mov	r6, r3
 8007c94:	da0d      	bge.n	8007cb2 <__swhatbuf_r+0x2e>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	bf0c      	ite	eq
 8007ca2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ca6:	2340      	movne	r3, #64	; 0x40
 8007ca8:	2000      	movs	r0, #0
 8007caa:	6031      	str	r1, [r6, #0]
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	b016      	add	sp, #88	; 0x58
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	466a      	mov	r2, sp
 8007cb4:	f000 f848 	bl	8007d48 <_fstat_r>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	dbec      	blt.n	8007c96 <__swhatbuf_r+0x12>
 8007cbc:	9901      	ldr	r1, [sp, #4]
 8007cbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cc6:	4259      	negs	r1, r3
 8007cc8:	4159      	adcs	r1, r3
 8007cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cce:	e7eb      	b.n	8007ca8 <__swhatbuf_r+0x24>

08007cd0 <__smakebuf_r>:
 8007cd0:	898b      	ldrh	r3, [r1, #12]
 8007cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cd4:	079d      	lsls	r5, r3, #30
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	d507      	bpl.n	8007cec <__smakebuf_r+0x1c>
 8007cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	6163      	str	r3, [r4, #20]
 8007ce8:	b002      	add	sp, #8
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	ab01      	add	r3, sp, #4
 8007cee:	466a      	mov	r2, sp
 8007cf0:	f7ff ffc8 	bl	8007c84 <__swhatbuf_r>
 8007cf4:	9900      	ldr	r1, [sp, #0]
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7ff fb0f 	bl	800731c <_malloc_r>
 8007cfe:	b948      	cbnz	r0, 8007d14 <__smakebuf_r+0x44>
 8007d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d4ef      	bmi.n	8007ce8 <__smakebuf_r+0x18>
 8007d08:	f023 0303 	bic.w	r3, r3, #3
 8007d0c:	f043 0302 	orr.w	r3, r3, #2
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	e7e3      	b.n	8007cdc <__smakebuf_r+0xc>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	6020      	str	r0, [r4, #0]
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	9b00      	ldr	r3, [sp, #0]
 8007d20:	6163      	str	r3, [r4, #20]
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	6120      	str	r0, [r4, #16]
 8007d26:	b15b      	cbz	r3, 8007d40 <__smakebuf_r+0x70>
 8007d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 f81d 	bl	8007d6c <_isatty_r>
 8007d32:	b128      	cbz	r0, 8007d40 <__smakebuf_r+0x70>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	f043 0301 	orr.w	r3, r3, #1
 8007d3e:	81a3      	strh	r3, [r4, #12]
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	431d      	orrs	r5, r3
 8007d44:	81a5      	strh	r5, [r4, #12]
 8007d46:	e7cf      	b.n	8007ce8 <__smakebuf_r+0x18>

08007d48 <_fstat_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	; (8007d68 <_fstat_r+0x20>)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	f7f9 fa22 	bl	800119e <_fstat>
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	d102      	bne.n	8007d64 <_fstat_r+0x1c>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	b103      	cbz	r3, 8007d64 <_fstat_r+0x1c>
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	bd38      	pop	{r3, r4, r5, pc}
 8007d66:	bf00      	nop
 8007d68:	20001d60 	.word	0x20001d60

08007d6c <_isatty_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d06      	ldr	r5, [pc, #24]	; (8007d88 <_isatty_r+0x1c>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	4604      	mov	r4, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f7f9 fa21 	bl	80011be <_isatty>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_isatty_r+0x1a>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_isatty_r+0x1a>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20001d60 	.word	0x20001d60

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
