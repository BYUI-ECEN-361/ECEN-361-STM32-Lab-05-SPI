
ECEN-361-STM32-Lab-05-SPI-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc8  08007bc8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd0  08007bd0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000385c  2000006c  08007c44  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038c8  08007c44  000238c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d949  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd6  00000000  00000000  0003da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00041700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ec  00000000  00000000  000430a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000295bb  00000000  00000000  00044494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ccd4  00000000  00000000  0006da4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001011db  00000000  00000000  0008a723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073b4  00000000  00000000  0018b900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00192cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007aac 	.word	0x08007aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007aac 	.word	0x08007aac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f8e3 	bl	8001768 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f8d2 	bl	8001768 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f8c7 	bl	8001768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f8c1 	bl	8001768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f8bb 	bl	8001768 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	  // Clear the LED lights
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2120      	movs	r1, #32
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 f8a8 	bl	8001768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f001 f8a2 	bl	8001768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f89c 	bl	8001768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <Clear_LEDs+0x38>)
 8000636:	f001 f897 	bl	8001768 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	48000400 	.word	0x48000400

08000644 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MultiFunctionShield_Clear+0x28>)
 800064c:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MultiFunctionShield_Clear+0x28>)
 8000652:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <MultiFunctionShield_Clear+0x28>)
 8000658:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800065a:	22ff      	movs	r2, #255	; 0xff
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <MultiFunctionShield_Clear+0x28>)
 800065e:	70da      	strb	r2, [r3, #3]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000008c 	.word	0x2000008c

08000670 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000680:	f001 f872 	bl	8001768 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000684:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000688:	5cd3      	ldrb	r3, [r2, r3]
 800068a:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f7ff ff63 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006a6:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f7ff ff53 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2120      	movs	r1, #32
 80006ca:	4803      	ldr	r0, [pc, #12]	; (80006d8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006cc:	f001 f84c 	bl	8001768 <HAL_GPIO_WritePin>
	}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	48000400 	.word	0x48000400
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	08007b24 	.word	0x08007b24

080006e4 <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MultiFunctionShield__ISRFunc+0x60>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MultiFunctionShield__ISRFunc+0x60>)
 80006f4:	4611      	mov	r1, r2
 80006f6:	7019      	strb	r1, [r3, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	3b01      	subs	r3, #1
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d81e      	bhi.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
 8000700:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <MultiFunctionShield__ISRFunc+0x24>)
 8000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000706:	bf00      	nop
 8000708:	08000719 	.word	0x08000719
 800070c:	08000721 	.word	0x08000721
 8000710:	08000729 	.word	0x08000729
 8000714:	08000731 	.word	0x08000731
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ffa9 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	e00e      	b.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ffa5 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 8000726:	e00a      	b.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff ffa1 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 800072e:	e006      	b.n	800073e <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000730:	2003      	movs	r0, #3
 8000732:	f7ff ff9d 	bl	8000670 <MultiFunctionShield_WriteNumberToSegment>
 8000736:	4b03      	ldr	r3, [pc, #12]	; (8000744 <MultiFunctionShield__ISRFunc+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	bf00      	nop
  }
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000088 	.word	0x20000088

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fd40 	bl	80011d0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f830 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f94e 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000758:	f000 f91c 	bl	8000994 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800075c:	f000 f8f4 	bl	8000948 <MX_TIM17_Init>
  MX_SPI2_Init();
 8000760:	f000 f87a 	bl	8000858 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000764:	f000 f8b6 	bl	80008d4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  // HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_Base_Start_IT(&htim17);  // LED SevenSeg cycle thru them
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <main+0x54>)
 800076a:	f002 fc61 	bl	8003030 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();
 800076e:	f7ff ff69 	bl	8000644 <MultiFunctionShield_Clear>
  Clear_LEDs();  // Clear the lights
 8000772:	f7ff ff49 	bl	8000608 <Clear_LEDs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000776:	f003 fc97 	bl	80040a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <main+0x58>)
 800077c:	2100      	movs	r1, #0
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <main+0x5c>)
 8000780:	f003 fcdc 	bl	800413c <osThreadNew>
 8000784:	4603      	mov	r3, r0
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <main+0x60>)
 8000788:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  printf("\033\143");  // clear the terminal before printing
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <main+0x64>)
 800078c:	f006 fab6 	bl	8006cfc <iprintf>
  printf("Hello Lab-05");  // clear the terminal before printing
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <main+0x68>)
 8000792:	f006 fab3 	bl	8006cfc <iprintf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000796:	f003 fcab 	bl	80040f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x52>
 800079c:	20000158 	.word	0x20000158
 80007a0:	08007b28 	.word	0x08007b28
 80007a4:	08000bc9 	.word	0x08000bc9
 80007a8:	2000022c 	.word	0x2000022c
 80007ac:	08007ad0 	.word	0x08007ad0
 80007b0:	08007ad4 	.word	0x08007ad4

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b096      	sub	sp, #88	; 0x58
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2244      	movs	r2, #68	; 0x44
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 faef 	bl	8006da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007da:	f000 ffeb 	bl	80017b4 <HAL_PWREx_ControlVoltageScaling>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007e4:	f000 fa10 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f2:	2310      	movs	r3, #16
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000802:	230a      	movs	r3, #10
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000806:	2307      	movs	r3, #7
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f822 	bl	8001860 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000822:	f000 f9f1 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	2104      	movs	r1, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fbea 	bl	8002018 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f000 f9dd 	bl	8000c08 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3758      	adds	r7, #88	; 0x58
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_SPI2_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_SPI2_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_SPI2_Init+0x74>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_SPI2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_SPI2_Init+0x74>)
 8000872:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000876:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_SPI2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_SPI2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_SPI2_Init+0x74>)
 8000886:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800088a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_SPI2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_SPI2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_SPI2_Init+0x74>)
 80008a6:	2207      	movs	r2, #7
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_SPI2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_SPI2_Init+0x74>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_SPI2_Init+0x74>)
 80008b8:	f002 fac0 	bl	8002e3c <HAL_SPI_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 f9a1 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000090 	.word	0x20000090
 80008d0:	40003800 	.word	0x40003800

080008d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_SPI3_Init+0x6c>)
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <MX_SPI3_Init+0x70>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI3_Init+0x6c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI3_Init+0x6c>)
 80008e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI3_Init+0x6c>)
 80008ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI3_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI3_Init+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI3_Init+0x6c>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI3_Init+0x6c>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI3_Init+0x6c>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI3_Init+0x6c>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI3_Init+0x6c>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI3_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI3_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI3_Init+0x6c>)
 800092c:	f002 fa86 	bl	8002e3c <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8000936:	f000 f967 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000f4 	.word	0x200000f4
 8000944:	40003c00 	.word	0x40003c00

08000948 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_TIM17_Init+0x44>)
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MX_TIM17_Init+0x48>)
 8000950:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_TIM17_Init+0x44>)
 8000954:	f240 321f 	movw	r2, #799	; 0x31f
 8000958:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_TIM17_Init+0x44>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_TIM17_Init+0x44>)
 8000962:	2264      	movs	r2, #100	; 0x64
 8000964:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_TIM17_Init+0x44>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_TIM17_Init+0x44>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_TIM17_Init+0x44>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_TIM17_Init+0x44>)
 800097a:	f002 fb02 	bl	8002f82 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000984:	f000 f940 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000158 	.word	0x20000158
 8000990:	40014800 	.word	0x40014800

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART2_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART2_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d8:	f002 fd7c 	bl	80034d4 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f911 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001a4 	.word	0x200001a4
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b63      	ldr	r3, [pc, #396]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a62      	ldr	r2, [pc, #392]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b5d      	ldr	r3, [pc, #372]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a5c      	ldr	r2, [pc, #368]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a56      	ldr	r2, [pc, #344]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a50      	ldr	r2, [pc, #320]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f000 fe78 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fe72 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2120      	movs	r1, #32
 8000a88:	4844      	ldr	r0, [pc, #272]	; (8000b9c <MX_GPIO_Init+0x1a8>)
 8000a8a:	f000 fe6d 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	4842      	ldr	r0, [pc, #264]	; (8000b9c <MX_GPIO_Init+0x1a8>)
 8000a94:	f000 fe68 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <MX_GPIO_Init+0x1ac>)
 8000ab0:	f000 fcb0 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab8:	230b      	movs	r3, #11
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <MX_GPIO_Init+0x1ac>)
 8000ac8:	f000 fca4 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000acc:	2301      	movs	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fc97 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000ae6:	2312      	movs	r3, #18
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fc8a 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000b00:	23e0      	movs	r3, #224	; 0xe0
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b04:	2311      	movs	r3, #17
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 fc7b 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <MX_GPIO_Init+0x1a8>)
 8000b32:	f000 fc6f 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000b36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 fc5f 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b56:	2320      	movs	r3, #32
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <MX_GPIO_Init+0x1a8>)
 8000b6e:	f000 fc51 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b76:	2311      	movs	r3, #17
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_GPIO_Init+0x1a8>)
 8000b8a:	f000 fc43 	bl	8001414 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	48000800 	.word	0x48000800

08000ba4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000bac:	1d39      	adds	r1, r7, #4
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <__io_putchar+0x20>)
 8000bb6:	f002 fcdb 	bl	8003570 <HAL_UART_Transmit>

  return ch;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200001a4 	.word	0x200001a4

08000bc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f003 fb45 	bl	8004260 <osDelay>
 8000bd6:	e7fb      	b.n	8000bd0 <StartDefaultTask+0x8>

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x14>
 8000be8:	f7ff fd7c 	bl	80006e4 <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000bf6:	f000 fb0b 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000158 	.word	0x20000158

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6613      	str	r3, [r2, #96]	; 0x60
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f06f 0001 	mvn.w	r0, #1
 8000c52:	f000 fbb5 	bl	80013c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a4c      	ldr	r2, [pc, #304]	; (8000db4 <HAL_SPI_MspInit+0x150>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d145      	bne.n	8000d12 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c86:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a4b      	ldr	r2, [pc, #300]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a45      	ldr	r2, [pc, #276]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a3f      	ldr	r2, [pc, #252]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4834      	ldr	r0, [pc, #208]	; (8000dbc <HAL_SPI_MspInit+0x158>)
 8000cea:	f000 fb93 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d00:	2305      	movs	r3, #5
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482d      	ldr	r0, [pc, #180]	; (8000dc0 <HAL_SPI_MspInit+0x15c>)
 8000d0c:	f000 fb82 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d10:	e04b      	b.n	8000daa <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a2b      	ldr	r2, [pc, #172]	; (8000dc4 <HAL_SPI_MspInit+0x160>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d146      	bne.n	8000daa <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d26:	6593      	str	r3, [r2, #88]	; 0x58
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x154>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d76:	2306      	movs	r3, #6
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f000 fb46 	bl	8001414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_SPI_MspInit+0x158>)
 8000da6:	f000 fb35 	bl	8001414 <HAL_GPIO_Init>
}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	; 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40003800 	.word	0x40003800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	40003c00 	.word	0x40003c00

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_TIM_Base_MspInit+0x44>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2105      	movs	r1, #5
 8000df6:	201a      	movs	r0, #26
 8000df8:	f000 fae2 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000dfc:	201a      	movs	r0, #26
 8000dfe:	f000 fafb 	bl	80013f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40014800 	.word	0x40014800
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ac      	sub	sp, #176	; 0xb0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2288      	movs	r2, #136	; 0x88
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 ffb6 	bl	8006da6 <memset>
  if(huart->Instance==USART2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <HAL_UART_MspInit+0xb0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13b      	bne.n	8000ebc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fb37 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e5c:	f7ff fed4 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 faac 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	37b0      	adds	r7, #176	; 0xb0
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_InitTick+0xe0>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <HAL_InitTick+0xe0>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_InitTick+0xe0>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef2:	f107 0210 	add.w	r2, r7, #16
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fa4f 	bl	80023a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d103      	bne.n	8000f14 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f0c:	f001 fa1c 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8000f10:	6378      	str	r0, [r7, #52]	; 0x34
 8000f12:	e004      	b.n	8000f1e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f14:	f001 fa18 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_InitTick+0xe4>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f3a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f40:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000f54:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f56:	f002 f814 	bl	8002f82 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11b      	bne.n	8000fa0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <HAL_InitTick+0xe8>)
 8000f6a:	f002 f861 	bl	8003030 <HAL_TIM_Base_Start_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f7c:	201c      	movs	r0, #28
 8000f7e:	f000 fa3b 	bl	80013f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d808      	bhi.n	8000f9a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	201c      	movs	r0, #28
 8000f8e:	f000 fa17 	bl	80013c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_InitTick+0xec>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e002      	b.n	8000fa0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3738      	adds	r7, #56	; 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	20000230 	.word	0x20000230
 8000fb8:	20000004 	.word	0x20000004

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000fee:	f002 f88f 	bl	8003110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000158 	.word	0x20000158

08000ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM2_IRQHandler+0x10>)
 8001002:	f002 f885 	bl	8003110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000230 	.word	0x20000230

08001010 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e00a      	b.n	8001038 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001022:	f3af 8000 	nop.w
 8001026:	4601      	mov	r1, r0
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	60ba      	str	r2, [r7, #8]
 800102e:	b2ca      	uxtb	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf0      	blt.n	8001022 <_read+0x12>
  }

  return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e009      	b.n	8001070 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd9d 	bl	8000ba4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf1      	blt.n	800105c <_write+0x12>
  }
  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_close>:

int _close(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010aa:	605a      	str	r2, [r3, #4]
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_isatty>:

int _isatty(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f005 fee8 	bl	8006ef0 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20018000 	.word	0x20018000
 800114c:	00000400 	.word	0x00000400
 8001150:	2000027c 	.word	0x2000027c
 8001154:	200038c8 	.word	0x200038c8

08001158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001180:	f7ff ffea 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LoopForever+0xe>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <LoopForever+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011aa:	f005 fea7 	bl	8006efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ae:	f7ff facb 	bl	8000748 <main>

080011b2 <LoopForever>:

LoopForever:
    b LoopForever
 80011b2:	e7fe      	b.n	80011b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011c0:	08007bd8 	.word	0x08007bd8
  ldr r2, =_sbss
 80011c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011c8:	200038c8 	.word	0x200038c8

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_Init+0x3c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_Init+0x3c>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f8df 	bl	80013aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ec:	200f      	movs	r0, #15
 80011ee:	f7ff fe6d 	bl	8000ecc <HAL_InitTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	e001      	b.n	8001202 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fe:	f7ff fd09 	bl	8000c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001202:	79fb      	ldrb	r3, [r7, #7]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000280 	.word	0x20000280

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000280 	.word	0x20000280

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff4c 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d2:	f7ff ff61 	bl	8001298 <__NVIC_GetPriorityGrouping>
 80013d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	6978      	ldr	r0, [r7, #20]
 80013de:	f7ff ffb1 	bl	8001344 <NVIC_EncodePriority>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff80 	bl	80012f0 <__NVIC_SetPriority>
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff54 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e17f      	b.n	8001724 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8171 	beq.w	800171e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x40>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d118      	bne.n	80014f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d017      	beq.n	8001530 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	6939      	ldr	r1, [r7, #16]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80ac 	beq.w	800171e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6613      	str	r3, [r2, #96]	; 0x60
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015de:	4a5a      	ldr	r2, [pc, #360]	; (8001748 <HAL_GPIO_Init+0x334>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001608:	d025      	beq.n	8001656 <HAL_GPIO_Init+0x242>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_GPIO_Init+0x338>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01f      	beq.n	8001652 <HAL_GPIO_Init+0x23e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_GPIO_Init+0x33c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x23a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4d      	ldr	r2, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x340>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x236>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_GPIO_Init+0x344>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x232>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <HAL_GPIO_Init+0x348>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x22e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4a      	ldr	r2, [pc, #296]	; (8001760 <HAL_GPIO_Init+0x34c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x22a>
 800163a:	2306      	movs	r3, #6
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x244>
 800163e:	2307      	movs	r3, #7
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x244>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x244>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x244>
 8001656:	2300      	movs	r3, #0
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_GPIO_Init+0x334>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_GPIO_Init+0x350>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800169a:	4a32      	ldr	r2, [pc, #200]	; (8001764 <HAL_GPIO_Init+0x350>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c4:	4a27      	ldr	r2, [pc, #156]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x350>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_GPIO_Init+0x350>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae78 	bne.w	8001424 <HAL_GPIO_Init+0x10>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	48000400 	.word	0x48000400
 8001750:	48000800 	.word	0x48000800
 8001754:	48000c00 	.word	0x48000c00
 8001758:	48001000 	.word	0x48001000
 800175c:	48001400 	.word	0x48001400
 8001760:	48001800 	.word	0x48001800
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001778:	787b      	ldrb	r3, [r7, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001784:	e002      	b.n	800178c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000

080017b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	d130      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d0:	d038      	beq.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017da:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2232      	movs	r2, #50	; 0x32
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9b      	lsrs	r3, r3, #18
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f8:	e002      	b.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180c:	d102      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x60>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f2      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d110      	bne.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e00f      	b.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d007      	beq.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800183c:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000
 8001858:	20000000 	.word	0x20000000
 800185c:	431bde83 	.word	0x431bde83

08001860 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e3ca      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001872:	4b97      	ldr	r3, [pc, #604]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187c:	4b94      	ldr	r3, [pc, #592]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80e4 	beq.w	8001a5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_RCC_OscConfig+0x4a>
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b0c      	cmp	r3, #12
 800189e:	f040 808b 	bne.w	80019b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	f040 8087 	bne.w	80019b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x62>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e3a2      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <HAL_RCC_OscConfig+0x7c>
 80018d2:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018da:	e005      	b.n	80018e8 <HAL_RCC_OscConfig+0x88>
 80018dc:	4b7c      	ldr	r3, [pc, #496]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d223      	bcs.n	8001934 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd87 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e383      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001900:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a72      	ldr	r2, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	496d      	ldr	r1, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191e:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	4968      	ldr	r1, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	e025      	b.n	8001980 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4960      	ldr	r1, [pc, #384]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	495b      	ldr	r1, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fd47 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e343      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001980:	f000 fc4a 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	4950      	ldr	r1, [pc, #320]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <HAL_RCC_OscConfig+0x278>)
 800199e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019a0:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fa91 	bl	8000ecc <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d052      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	e327      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d032      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc34 	bl	8001238 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc30 	bl	8001238 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e310      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e6:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a36      	ldr	r2, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4931      	ldr	r1, [pc, #196]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	492c      	ldr	r1, [pc, #176]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	e01a      	b.n	8001a5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fc01 	bl	8001238 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fbfd 	bl	8001238 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e2dd      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x1da>
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d074      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x21a>
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d10e      	bne.n	8001a92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d10b      	bne.n	8001a92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d064      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d160      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e2ba      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x24a>
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e026      	b.n	8001af8 <HAL_RCC_OscConfig+0x298>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab2:	d115      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x280>
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a02      	ldr	r2, [pc, #8]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e014      	b.n	8001af8 <HAL_RCC_OscConfig+0x298>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	08007b4c 	.word	0x08007b4c
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a9f      	ldr	r2, [pc, #636]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a9c      	ldr	r2, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fb9a 	bl	8001238 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fb96 	bl	8001238 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e276      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1a:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2a8>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fb86 	bl	8001238 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fb82 	bl	8001238 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e262      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2d0>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d060      	beq.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x310>
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d119      	bne.n	8001b9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d116      	bne.n	8001b9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x328>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e23f      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4973      	ldr	r1, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e040      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d023      	beq.n	8001bee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba6:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fb41 	bl	8001238 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fb3d 	bl	8001238 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e21d      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	495f      	ldr	r1, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	e018      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a5c      	ldr	r2, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fb1d 	bl	8001238 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fb19 	bl	8001238 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1f9      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3a:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff faf8 	bl	8001238 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff faf4 	bl	8001238 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1d4      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x3ec>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c74:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fadb 	bl	8001238 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff fad7 	bl	8001238 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1b7      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80a6 	beq.w	8001e00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d118      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fa9e 	bl	8001238 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff fa9a 	bl	8001238 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e17a      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4d8>
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d36:	e029      	b.n	8001d8c <HAL_RCC_OscConfig+0x52c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d115      	bne.n	8001d6c <HAL_RCC_OscConfig+0x50c>
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x52c>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	4b9c      	ldr	r3, [pc, #624]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a9b      	ldr	r2, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7c:	4b98      	ldr	r3, [pc, #608]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	4a97      	ldr	r2, [pc, #604]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d016      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa50 	bl	8001238 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fa4c 	bl	8001238 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e12a      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ed      	beq.n	8001d9c <HAL_RCC_OscConfig+0x53c>
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fa39 	bl	8001238 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fa35 	bl	8001238 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e113      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de0:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ed      	bne.n	8001dca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80fe 	beq.w	8002006 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	f040 80d0 	bne.w	8001fb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e14:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d130      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	3b01      	subs	r3, #1
 8001e34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d127      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d11f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e54:	2a07      	cmp	r2, #7
 8001e56:	bf14      	ite	ne
 8001e58:	2201      	movne	r2, #1
 8001e5a:	2200      	moveq	r2, #0
 8001e5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d113      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d06e      	beq.n	8001f68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d069      	beq.n	8001f64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0ad      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a4b      	ldr	r2, [pc, #300]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb8:	f7ff f9be 	bl	8001238 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff f9ba 	bl	8001238 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e09a      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed2:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ef8:	0212      	lsls	r2, r2, #8
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f00:	0852      	lsrs	r2, r2, #1
 8001f02:	3a01      	subs	r2, #1
 8001f04:	0552      	lsls	r2, r2, #21
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f0c:	0852      	lsrs	r2, r2, #1
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	0652      	lsls	r2, r2, #25
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f18:	0912      	lsrs	r2, r2, #4
 8001f1a:	0452      	lsls	r2, r2, #17
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	4930      	ldr	r1, [pc, #192]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f3c:	f7ff f97c 	bl	8001238 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f978 	bl	8001238 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e058      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f62:	e050      	b.n	8002006 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e04f      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d148      	bne.n	8002006 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f8c:	f7ff f954 	bl	8001238 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff f950 	bl	8001238 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e030      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x734>
 8001fb2:	e028      	b.n	8002006 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d023      	beq.n	8002002 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <HAL_RCC_OscConfig+0x780>)
 8001fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f937 	bl	8001238 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fcc:	e00c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f933 	bl	8001238 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d905      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e013      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x7b0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ec      	bne.n	8001fce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_OscConfig+0x7b0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4905      	ldr	r1, [pc, #20]	; (8002010 <HAL_RCC_OscConfig+0x7b0>)
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x7b4>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e001      	b.n	8002006 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	feeefffc 	.word	0xfeeefffc

08002018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0e7      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b72      	ldr	r3, [pc, #456]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4970      	ldr	r1, [pc, #448]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cf      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002074:	429a      	cmp	r2, r3
 8002076:	d908      	bls.n	800208a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4960      	ldr	r1, [pc, #384]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d04c      	beq.n	8002130 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0a6      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e09a      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e08e      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e086      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4943      	ldr	r1, [pc, #268]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002100:	f7ff f89a 	bl	8001238 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff f896 	bl	8001238 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e06e      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002148:	429a      	cmp	r2, r3
 800214a:	d208      	bcs.n	800215e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	492b      	ldr	r1, [pc, #172]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d210      	bcs.n	800218e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4923      	ldr	r1, [pc, #140]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e036      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4918      	ldr	r1, [pc, #96]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4910      	ldr	r1, [pc, #64]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021cc:	f000 f824 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	490b      	ldr	r1, [pc, #44]	; (800220c <HAL_RCC_ClockConfig+0x1f4>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1f8>)
 80021ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1fc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fe6b 	bl	8000ecc <HAL_InitTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	08007b4c 	.word	0x08007b4c
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d121      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d11e      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e005      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10d      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d102      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_GetSysClockFreq+0x110>)
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	e004      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_RCC_GetSysClockFreq+0x114>)
 800229e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d134      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0xa6>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d003      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0xac>
 80022bc:	e005      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCC_GetSysClockFreq+0x110>)
 80022c0:	617b      	str	r3, [r7, #20]
      break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0x114>)
 80022c6:	617b      	str	r3, [r7, #20]
      break;
 80022c8:	e002      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	3301      	adds	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	fb03 f202 	mul.w	r2, r3, r2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	0e5b      	lsrs	r3, r3, #25
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	3301      	adds	r3, #1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002310:	69bb      	ldr	r3, [r7, #24]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	08007b64 	.word	0x08007b64
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_GetHCLKFreq+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800234c:	f7ff fff0 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08007b5c 	.word	0x08007b5c

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002378:	f7ff ffda 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4904      	ldr	r1, [pc, #16]	; (800239c <HAL_RCC_GetPCLK2Freq+0x28>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	08007b5c 	.word	0x08007b5c

080023a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	220f      	movs	r2, #15
 80023ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCC_GetClockConfig+0x60>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0207 	and.w	r2, r3, #7
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022000 	.word	0x40022000

08002404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800241c:	f7ff f9bc 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 8002420:	6178      	str	r0, [r7, #20]
 8002422:	e014      	b.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6593      	str	r3, [r2, #88]	; 0x58
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff f9ac 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002454:	d10b      	bne.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d919      	bls.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2ba0      	cmp	r3, #160	; 0xa0
 8002460:	d902      	bls.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e013      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e010      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d902      	bls.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002474:	2303      	movs	r3, #3
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e00a      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d102      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002480:	2302      	movs	r3, #2
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e004      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d101      	bne.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800248c:	2301      	movs	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 0207 	bic.w	r2, r3, #7
 8002498:	4909      	ldr	r1, [pc, #36]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024d0:	2300      	movs	r3, #0
 80024d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d041      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024e8:	d02a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ee:	d824      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024fa:	d81e      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d010      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002506:	e018      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a85      	ldr	r2, [pc, #532]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002514:	e015      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fabb 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002526:	e00c      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3320      	adds	r3, #32
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fba6 	bl	8002c80 <RCCEx_PLLSAI2_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002538:	e003      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	74fb      	strb	r3, [r7, #19]
      break;
 800253e:	e000      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002548:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002556:	4973      	ldr	r1, [pc, #460]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800255e:	e001      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d041      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002578:	d02a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800257a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800257e:	d824      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258a:	d81e      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d010      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002596:	e018      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a61      	ldr	r2, [pc, #388]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa73 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b6:	e00c      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3320      	adds	r3, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fb5e 	bl	8002c80 <RCCEx_PLLSAI2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	74fb      	strb	r3, [r7, #19]
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d8:	4b52      	ldr	r3, [pc, #328]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025e6:	494f      	ldr	r1, [pc, #316]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a0 	beq.w	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	4a40      	ldr	r2, [pc, #256]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	; 0x58
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fdf8 	bl	8001238 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fdf4 	bl	8001238 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
        break;
 800265e:	e005      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d15c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01f      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fdb3 	bl	8001238 <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	e00b      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fdaf 	bl	8001238 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d902      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	74fb      	strb	r3, [r7, #19]
            break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ec      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002712:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800271a:	e009      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002730:	7c7b      	ldrb	r3, [r7, #17]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b9e      	ldr	r3, [pc, #632]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a9d      	ldr	r2, [pc, #628]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274e:	4b98      	ldr	r3, [pc, #608]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 0203 	bic.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	4994      	ldr	r1, [pc, #592]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002770:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 020c 	bic.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	498c      	ldr	r1, [pc, #560]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002792:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4983      	ldr	r1, [pc, #524]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b4:	4b7e      	ldr	r3, [pc, #504]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	497b      	ldr	r1, [pc, #492]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	4972      	ldr	r1, [pc, #456]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f8:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	496a      	ldr	r1, [pc, #424]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	4961      	ldr	r1, [pc, #388]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	4959      	ldr	r1, [pc, #356]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286c:	4950      	ldr	r1, [pc, #320]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	4948      	ldr	r1, [pc, #288]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	493f      	ldr	r1, [pc, #252]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d028      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c4:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d2:	4937      	ldr	r1, [pc, #220]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
 80028f0:	e011      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fa:	d10c      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f8c8 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	491f      	ldr	r1, [pc, #124]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002940:	d106      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294c:	60d3      	str	r3, [r2, #12]
 800294e:	e011      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f899 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d109      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a02      	ldr	r2, [pc, #8]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e014      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f867 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02f      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	4928      	ldr	r1, [pc, #160]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2102      	movs	r1, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f844 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d014      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
 8002a1e:	e011      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f925 	bl	8002c80 <RCCEx_PLLSAI2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5e:	490d      	ldr	r1, [pc, #52]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	4904      	ldr	r1, [pc, #16]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa6:	4b75      	ldr	r3, [pc, #468]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d018      	beq.n	8002ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ab2:	4b72      	ldr	r3, [pc, #456]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d10d      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aca:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d047      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e044      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d018      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x86>
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d825      	bhi.n	8002b3c <RCCEx_PLLSAI1_Config+0xa4>
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d002      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x62>
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d009      	beq.n	8002b0c <RCCEx_PLLSAI1_Config+0x74>
 8002af8:	e020      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002afa:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11d      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0a:	e01a      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b0c:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e013      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1e:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2a:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b3a:	e006      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e004      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b52:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	430b      	orrs	r3, r1
 8002b68:	4944      	ldr	r1, [pc, #272]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d17d      	bne.n	8002c70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b74:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe fb5a 	bl	8001238 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b88:	f7fe fb56 	bl	8001238 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9c:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ef      	bne.n	8002b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d160      	bne.n	8002c70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d111      	bne.n	8002bd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	0912      	lsrs	r2, r2, #4
 8002bcc:	0452      	lsls	r2, r2, #17
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	492a      	ldr	r1, [pc, #168]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	610b      	str	r3, [r1, #16]
 8002bd6:	e027      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d112      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bde:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002be6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6892      	ldr	r2, [r2, #8]
 8002bee:	0211      	lsls	r1, r2, #8
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6912      	ldr	r2, [r2, #16]
 8002bf4:	0852      	lsrs	r2, r2, #1
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0552      	lsls	r2, r2, #21
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	491f      	ldr	r1, [pc, #124]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	610b      	str	r3, [r1, #16]
 8002c02:	e011      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	0211      	lsls	r1, r2, #8
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6952      	ldr	r2, [r2, #20]
 8002c1a:	0852      	lsrs	r2, r2, #1
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0652      	lsls	r2, r2, #25
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4916      	ldr	r1, [pc, #88]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fb00 	bl	8001238 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3a:	e009      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c3c:	f7fe fafc 	bl	8001238 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d902      	bls.n	8002c50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c4e:	e005      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	4904      	ldr	r1, [pc, #16]	; (8002c7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000

08002c80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c8e:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d018      	beq.n	8002ccc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c9a:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d10d      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
       ||
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d047      	beq.n	8002d56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e044      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d018      	beq.n	8002d06 <RCCEx_PLLSAI2_Config+0x86>
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d825      	bhi.n	8002d24 <RCCEx_PLLSAI2_Config+0xa4>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d002      	beq.n	8002ce2 <RCCEx_PLLSAI2_Config+0x62>
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d009      	beq.n	8002cf4 <RCCEx_PLLSAI2_Config+0x74>
 8002ce0:	e020      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11d      	bne.n	8002d2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf2:	e01a      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d116      	bne.n	8002d2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e013      	b.n	8002d2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d06:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d22:	e006      	b.n	8002d32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	e004      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	4939      	ldr	r1, [pc, #228]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d167      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a35      	ldr	r2, [pc, #212]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe fa66 	bl	8001238 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6e:	e009      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d70:	f7fe fa62 	bl	8001238 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	73fb      	strb	r3, [r7, #15]
        break;
 8002d82:	e005      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ef      	bne.n	8002d70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d14a      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d111      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	0211      	lsls	r1, r2, #8
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68d2      	ldr	r2, [r2, #12]
 8002db2:	0912      	lsrs	r2, r2, #4
 8002db4:	0452      	lsls	r2, r2, #17
 8002db6:	430a      	orrs	r2, r1
 8002db8:	491f      	ldr	r1, [pc, #124]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	614b      	str	r3, [r1, #20]
 8002dbe:	e011      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6892      	ldr	r2, [r2, #8]
 8002dd0:	0211      	lsls	r1, r2, #8
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6912      	ldr	r2, [r2, #16]
 8002dd6:	0852      	lsrs	r2, r2, #1
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	0652      	lsls	r2, r2, #25
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	4916      	ldr	r1, [pc, #88]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fe fa22 	bl	8001238 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df6:	e009      	b.n	8002e0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df8:	f7fe fa1e 	bl	8001238 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d902      	bls.n	8002e0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	73fb      	strb	r3, [r7, #15]
          break;
 8002e0a:	e005      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ef      	beq.n	8002df8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4904      	ldr	r1, [pc, #16]	; (8002e38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e095      	b.n	8002f7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5e:	d009      	beq.n	8002e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
 8002e66:	e005      	b.n	8002e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fee8 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eb4:	d902      	bls.n	8002ebc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e002      	b.n	8002ec2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002eca:	d007      	beq.n	8002edc <HAL_SPI_Init+0xa0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	ea42 0103 	orr.w	r1, r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	f003 0204 	and.w	r2, r3, #4
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f58:	ea42 0103 	orr.w	r1, r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e049      	b.n	8003028 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd ff0d 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f000 f9cf 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04f      	b.n	80030e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_TIM_Base_Start_IT+0x76>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d018      	beq.n	80030a6 <HAL_TIM_Base_Start_IT+0x76>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_TIM_Base_Start_IT+0x76>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_TIM_Base_Start_IT+0x76>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_TIM_Base_Start_IT+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_TIM_Base_Start_IT+0x76>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_TIM_Base_Start_IT+0xd4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_TIM_Base_Start_IT+0x76>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_Base_Start_IT+0xd8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d115      	bne.n	80030d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_TIM_Base_Start_IT+0xdc>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	d015      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d011      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d0:	e008      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e000      	b.n	80030e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00
 8003104:	40013400 	.word	0x40013400
 8003108:	40014000 	.word	0x40014000
 800310c:	00010007 	.word	0x00010007

08003110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0202 	mvn.w	r2, #2
 8003144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8e4 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8d6 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8e7 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0204 	mvn.w	r2, #4
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8be 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8b0 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8c1 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0208 	mvn.w	r2, #8
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2204      	movs	r2, #4
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f898 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f88a 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f89b 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2208      	movs	r2, #8
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f872 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f864 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f875 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fcae 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f906 	bl	80034ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8fe 	bl	80034c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f834 	bl	8003350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00c      	beq.n	800330c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0220 	mvn.w	r2, #32
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8c6 	bl	8003498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a40      	ldr	r2, [pc, #256]	; (8003478 <TIM_Base_SetConfig+0x114>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d00f      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3d      	ldr	r2, [pc, #244]	; (800347c <TIM_Base_SetConfig+0x118>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00b      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <TIM_Base_SetConfig+0x11c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <TIM_Base_SetConfig+0x120>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <TIM_Base_SetConfig+0x124>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d108      	bne.n	80033b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <TIM_Base_SetConfig+0x114>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d01b      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2c      	ldr	r2, [pc, #176]	; (800347c <TIM_Base_SetConfig+0x118>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d017      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <TIM_Base_SetConfig+0x11c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <TIM_Base_SetConfig+0x120>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00f      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <TIM_Base_SetConfig+0x124>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00b      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <TIM_Base_SetConfig+0x128>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <TIM_Base_SetConfig+0x12c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_Base_SetConfig+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <TIM_Base_SetConfig+0x130>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d108      	bne.n	8003410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <TIM_Base_SetConfig+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0xf8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <TIM_Base_SetConfig+0x124>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0xf8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <TIM_Base_SetConfig+0x128>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0xf8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <TIM_Base_SetConfig+0x12c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0xf8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <TIM_Base_SetConfig+0x130>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40013400 	.word	0x40013400
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800

08003498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e040      	b.n	8003568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fc8c 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fb6a 	bl	8003bf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8af 	bl	8003684 <UART_SetConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e01b      	b.n	8003568 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fbe9 	bl	8003d38 <UART_CheckIdleState>
 8003566:	4603      	mov	r3, r0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003584:	2b20      	cmp	r3, #32
 8003586:	d178      	bne.n	800367a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_UART_Transmit+0x24>
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e071      	b.n	800367c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2221      	movs	r2, #33	; 0x21
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a6:	f7fd fe47 	bl	8001238 <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Transmit+0x68>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e0:	e030      	b.n	8003644 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fc4b 	bl	8003e88 <UART_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e03c      	b.n	800367c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003614:	b292      	uxth	r2, r2
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	3302      	adds	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e008      	b.n	8003632 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b292      	uxth	r2, r2
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1c8      	bne.n	80035e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2200      	movs	r2, #0
 8003658:	2140      	movs	r1, #64	; 0x40
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fc14 	bl	8003e88 <UART_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e005      	b.n	800367c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b08a      	sub	sp, #40	; 0x28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4ba4      	ldr	r3, [pc, #656]	; (8003944 <UART_SetConfig+0x2c0>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036bc:	430b      	orrs	r3, r1
 80036be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a99      	ldr	r2, [pc, #612]	; (8003948 <UART_SetConfig+0x2c4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	4313      	orrs	r3, r2
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a90      	ldr	r2, [pc, #576]	; (800394c <UART_SetConfig+0x2c8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d126      	bne.n	800375c <UART_SetConfig+0xd8>
 800370e:	4b90      	ldr	r3, [pc, #576]	; (8003950 <UART_SetConfig+0x2cc>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b03      	cmp	r3, #3
 800371a:	d81b      	bhi.n	8003754 <UART_SetConfig+0xd0>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0xa0>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003735 	.word	0x08003735
 8003728:	08003745 	.word	0x08003745
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800374d 	.word	0x0800374d
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e116      	b.n	800396a <UART_SetConfig+0x2e6>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e112      	b.n	800396a <UART_SetConfig+0x2e6>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e10e      	b.n	800396a <UART_SetConfig+0x2e6>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e10a      	b.n	800396a <UART_SetConfig+0x2e6>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e106      	b.n	800396a <UART_SetConfig+0x2e6>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7c      	ldr	r2, [pc, #496]	; (8003954 <UART_SetConfig+0x2d0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d138      	bne.n	80037d8 <UART_SetConfig+0x154>
 8003766:	4b7a      	ldr	r3, [pc, #488]	; (8003950 <UART_SetConfig+0x2cc>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d82d      	bhi.n	80037d0 <UART_SetConfig+0x14c>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0xf8>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037d1 	.word	0x080037d1
 8003784:	080037d1 	.word	0x080037d1
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037d1 	.word	0x080037d1
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e0d8      	b.n	800396a <UART_SetConfig+0x2e6>
 80037b8:	2302      	movs	r3, #2
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e0d4      	b.n	800396a <UART_SetConfig+0x2e6>
 80037c0:	2304      	movs	r3, #4
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e0d0      	b.n	800396a <UART_SetConfig+0x2e6>
 80037c8:	2308      	movs	r3, #8
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e0cc      	b.n	800396a <UART_SetConfig+0x2e6>
 80037d0:	2310      	movs	r3, #16
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e0c8      	b.n	800396a <UART_SetConfig+0x2e6>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5e      	ldr	r2, [pc, #376]	; (8003958 <UART_SetConfig+0x2d4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d125      	bne.n	800382e <UART_SetConfig+0x1aa>
 80037e2:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <UART_SetConfig+0x2cc>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ec:	2b30      	cmp	r3, #48	; 0x30
 80037ee:	d016      	beq.n	800381e <UART_SetConfig+0x19a>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d818      	bhi.n	8003826 <UART_SetConfig+0x1a2>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d00a      	beq.n	800380e <UART_SetConfig+0x18a>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d814      	bhi.n	8003826 <UART_SetConfig+0x1a2>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <UART_SetConfig+0x182>
 8003800:	2b10      	cmp	r3, #16
 8003802:	d008      	beq.n	8003816 <UART_SetConfig+0x192>
 8003804:	e00f      	b.n	8003826 <UART_SetConfig+0x1a2>
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380c:	e0ad      	b.n	800396a <UART_SetConfig+0x2e6>
 800380e:	2302      	movs	r3, #2
 8003810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003814:	e0a9      	b.n	800396a <UART_SetConfig+0x2e6>
 8003816:	2304      	movs	r3, #4
 8003818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381c:	e0a5      	b.n	800396a <UART_SetConfig+0x2e6>
 800381e:	2308      	movs	r3, #8
 8003820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003824:	e0a1      	b.n	800396a <UART_SetConfig+0x2e6>
 8003826:	2310      	movs	r3, #16
 8003828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382c:	e09d      	b.n	800396a <UART_SetConfig+0x2e6>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4a      	ldr	r2, [pc, #296]	; (800395c <UART_SetConfig+0x2d8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d125      	bne.n	8003884 <UART_SetConfig+0x200>
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <UART_SetConfig+0x2cc>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003842:	2bc0      	cmp	r3, #192	; 0xc0
 8003844:	d016      	beq.n	8003874 <UART_SetConfig+0x1f0>
 8003846:	2bc0      	cmp	r3, #192	; 0xc0
 8003848:	d818      	bhi.n	800387c <UART_SetConfig+0x1f8>
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d00a      	beq.n	8003864 <UART_SetConfig+0x1e0>
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d814      	bhi.n	800387c <UART_SetConfig+0x1f8>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <UART_SetConfig+0x1d8>
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d008      	beq.n	800386c <UART_SetConfig+0x1e8>
 800385a:	e00f      	b.n	800387c <UART_SetConfig+0x1f8>
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e082      	b.n	800396a <UART_SetConfig+0x2e6>
 8003864:	2302      	movs	r3, #2
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e07e      	b.n	800396a <UART_SetConfig+0x2e6>
 800386c:	2304      	movs	r3, #4
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e07a      	b.n	800396a <UART_SetConfig+0x2e6>
 8003874:	2308      	movs	r3, #8
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e076      	b.n	800396a <UART_SetConfig+0x2e6>
 800387c:	2310      	movs	r3, #16
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e072      	b.n	800396a <UART_SetConfig+0x2e6>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a35      	ldr	r2, [pc, #212]	; (8003960 <UART_SetConfig+0x2dc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12a      	bne.n	80038e4 <UART_SetConfig+0x260>
 800388e:	4b30      	ldr	r3, [pc, #192]	; (8003950 <UART_SetConfig+0x2cc>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389c:	d01a      	beq.n	80038d4 <UART_SetConfig+0x250>
 800389e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a2:	d81b      	bhi.n	80038dc <UART_SetConfig+0x258>
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d00c      	beq.n	80038c4 <UART_SetConfig+0x240>
 80038aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ae:	d815      	bhi.n	80038dc <UART_SetConfig+0x258>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <UART_SetConfig+0x238>
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d008      	beq.n	80038cc <UART_SetConfig+0x248>
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x258>
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c2:	e052      	b.n	800396a <UART_SetConfig+0x2e6>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ca:	e04e      	b.n	800396a <UART_SetConfig+0x2e6>
 80038cc:	2304      	movs	r3, #4
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d2:	e04a      	b.n	800396a <UART_SetConfig+0x2e6>
 80038d4:	2308      	movs	r3, #8
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038da:	e046      	b.n	800396a <UART_SetConfig+0x2e6>
 80038dc:	2310      	movs	r3, #16
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e042      	b.n	800396a <UART_SetConfig+0x2e6>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <UART_SetConfig+0x2c4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d13a      	bne.n	8003964 <UART_SetConfig+0x2e0>
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <UART_SetConfig+0x2cc>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038fc:	d01a      	beq.n	8003934 <UART_SetConfig+0x2b0>
 80038fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003902:	d81b      	bhi.n	800393c <UART_SetConfig+0x2b8>
 8003904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003908:	d00c      	beq.n	8003924 <UART_SetConfig+0x2a0>
 800390a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390e:	d815      	bhi.n	800393c <UART_SetConfig+0x2b8>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <UART_SetConfig+0x298>
 8003914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003918:	d008      	beq.n	800392c <UART_SetConfig+0x2a8>
 800391a:	e00f      	b.n	800393c <UART_SetConfig+0x2b8>
 800391c:	2300      	movs	r3, #0
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e022      	b.n	800396a <UART_SetConfig+0x2e6>
 8003924:	2302      	movs	r3, #2
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392a:	e01e      	b.n	800396a <UART_SetConfig+0x2e6>
 800392c:	2304      	movs	r3, #4
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003932:	e01a      	b.n	800396a <UART_SetConfig+0x2e6>
 8003934:	2308      	movs	r3, #8
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393a:	e016      	b.n	800396a <UART_SetConfig+0x2e6>
 800393c:	2310      	movs	r3, #16
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e012      	b.n	800396a <UART_SetConfig+0x2e6>
 8003944:	efff69f3 	.word	0xefff69f3
 8003948:	40008000 	.word	0x40008000
 800394c:	40013800 	.word	0x40013800
 8003950:	40021000 	.word	0x40021000
 8003954:	40004400 	.word	0x40004400
 8003958:	40004800 	.word	0x40004800
 800395c:	40004c00 	.word	0x40004c00
 8003960:	40005000 	.word	0x40005000
 8003964:	2310      	movs	r3, #16
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a9f      	ldr	r2, [pc, #636]	; (8003bec <UART_SetConfig+0x568>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d17a      	bne.n	8003a6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003978:	2b08      	cmp	r3, #8
 800397a:	d824      	bhi.n	80039c6 <UART_SetConfig+0x342>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <UART_SetConfig+0x300>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039c7 	.word	0x080039c7
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039b7 	.word	0x080039b7
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039c7 	.word	0x080039c7
 80039a4:	080039bf 	.word	0x080039bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7fe fcce 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80039ac:	61f8      	str	r0, [r7, #28]
        break;
 80039ae:	e010      	b.n	80039d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b0:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <UART_SetConfig+0x56c>)
 80039b2:	61fb      	str	r3, [r7, #28]
        break;
 80039b4:	e00d      	b.n	80039d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b6:	f7fe fc2f 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80039ba:	61f8      	str	r0, [r7, #28]
        break;
 80039bc:	e009      	b.n	80039d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c2:	61fb      	str	r3, [r7, #28]
        break;
 80039c4:	e005      	b.n	80039d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80fb 	beq.w	8003bd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d305      	bcc.n	80039f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d903      	bls.n	80039fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039fc:	e0e8      	b.n	8003bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2200      	movs	r2, #0
 8003a02:	461c      	mov	r4, r3
 8003a04:	4615      	mov	r5, r2
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	022b      	lsls	r3, r5, #8
 8003a10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a14:	0222      	lsls	r2, r4, #8
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	6849      	ldr	r1, [r1, #4]
 8003a1a:	0849      	lsrs	r1, r1, #1
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	4688      	mov	r8, r1
 8003a20:	4681      	mov	r9, r0
 8003a22:	eb12 0a08 	adds.w	sl, r2, r8
 8003a26:	eb43 0b09 	adc.w	fp, r3, r9
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a38:	4650      	mov	r0, sl
 8003a3a:	4659      	mov	r1, fp
 8003a3c:	f7fc fc18 	bl	8000270 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4e:	d308      	bcc.n	8003a62 <UART_SetConfig+0x3de>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a56:	d204      	bcs.n	8003a62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	e0b6      	b.n	8003bd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a68:	e0b2      	b.n	8003bd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a72:	d15e      	bne.n	8003b32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d828      	bhi.n	8003ace <UART_SetConfig+0x44a>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <UART_SetConfig+0x400>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fe fc4e 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003aac:	61f8      	str	r0, [r7, #28]
        break;
 8003aae:	e014      	b.n	8003ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7fe fc60 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	61f8      	str	r0, [r7, #28]
        break;
 8003ab6:	e010      	b.n	8003ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <UART_SetConfig+0x56c>)
 8003aba:	61fb      	str	r3, [r7, #28]
        break;
 8003abc:	e00d      	b.n	8003ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe fbab 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003ac2:	61f8      	str	r0, [r7, #28]
        break;
 8003ac4:	e009      	b.n	8003ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aca:	61fb      	str	r3, [r7, #28]
        break;
 8003acc:	e005      	b.n	8003ada <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d077      	beq.n	8003bd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005a      	lsls	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b0f      	cmp	r3, #15
 8003afa:	d916      	bls.n	8003b2a <UART_SetConfig+0x4a6>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d212      	bcs.n	8003b2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f023 030f 	bic.w	r3, r3, #15
 8003b0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	8afa      	ldrh	r2, [r7, #22]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	e052      	b.n	8003bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b30:	e04e      	b.n	8003bd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d827      	bhi.n	8003b8a <UART_SetConfig+0x506>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <UART_SetConfig+0x4bc>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003b65 	.word	0x08003b65
 8003b44:	08003b6d 	.word	0x08003b6d
 8003b48:	08003b75 	.word	0x08003b75
 8003b4c:	08003b8b 	.word	0x08003b8b
 8003b50:	08003b7b 	.word	0x08003b7b
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b8b 	.word	0x08003b8b
 8003b5c:	08003b8b 	.word	0x08003b8b
 8003b60:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b64:	f7fe fbf0 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003b68:	61f8      	str	r0, [r7, #28]
        break;
 8003b6a:	e014      	b.n	8003b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fc02 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8003b70:	61f8      	str	r0, [r7, #28]
        break;
 8003b72:	e010      	b.n	8003b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <UART_SetConfig+0x56c>)
 8003b76:	61fb      	str	r3, [r7, #28]
        break;
 8003b78:	e00d      	b.n	8003b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7fe fb4d 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003b7e:	61f8      	str	r0, [r7, #28]
        break;
 8003b80:	e009      	b.n	8003b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b86:	61fb      	str	r3, [r7, #28]
        break;
 8003b88:	e005      	b.n	8003b96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b94:	bf00      	nop
    }

    if (pclk != 0U)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d019      	beq.n	8003bd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	085a      	lsrs	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d909      	bls.n	8003bca <UART_SetConfig+0x546>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d205      	bcs.n	8003bca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e002      	b.n	8003bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bea:	bf00      	nop
 8003bec:	40008000 	.word	0x40008000
 8003bf0:	00f42400 	.word	0x00f42400

08003bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01a      	beq.n	8003d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf2:	d10a      	bne.n	8003d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b098      	sub	sp, #96	; 0x60
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d48:	f7fd fa76 	bl	8001238 <HAL_GetTick>
 8003d4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d12e      	bne.n	8003dba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	2200      	movs	r2, #0
 8003d66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f88c 	bl	8003e88 <UART_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d021      	beq.n	8003dba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
 8003d96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e062      	b.n	8003e80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d149      	bne.n	8003e5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f856 	bl	8003e88 <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d03c      	beq.n	8003e5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	623b      	str	r3, [r7, #32]
   return(result);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
 8003e02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e6      	bne.n	8003de2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e34:	61fa      	str	r2, [r7, #28]
 8003e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	69b9      	ldr	r1, [r7, #24]
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	617b      	str	r3, [r7, #20]
   return(result);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e5      	bne.n	8003e14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e011      	b.n	8003e80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3758      	adds	r7, #88	; 0x58
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e98:	e049      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d045      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fd f9c9 	bl	8001238 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e048      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d031      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d110      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2208      	movs	r2, #8
 8003ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f838 	bl	8003f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e029      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f08:	d111      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f81e 	bl	8003f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e00f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d0a6      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b095      	sub	sp, #84	; 0x54
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e6      	bne.n	8003f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d118      	bne.n	8003ffe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e6      	bne.n	8003fcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004012:	bf00      	nop
 8004014:	3754      	adds	r7, #84	; 0x54
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <__NVIC_SetPriority>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004030:	2b00      	cmp	r3, #0
 8004032:	db0a      	blt.n	800404a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	490c      	ldr	r1, [pc, #48]	; (800406c <__NVIC_SetPriority+0x4c>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	0112      	lsls	r2, r2, #4
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	440b      	add	r3, r1
 8004044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004048:	e00a      	b.n	8004060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4908      	ldr	r1, [pc, #32]	; (8004070 <__NVIC_SetPriority+0x50>)
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	3b04      	subs	r3, #4
 8004058:	0112      	lsls	r2, r2, #4
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	440b      	add	r3, r1
 800405e:	761a      	strb	r2, [r3, #24]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000e100 	.word	0xe000e100
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <SysTick_Handler+0x1c>)
 800407a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800407c:	f001 fd28 	bl	8005ad0 <xTaskGetSchedulerState>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004086:	f002 fb0f 	bl	80066a8 <xPortSysTickHandler>
  }
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	e000e010 	.word	0xe000e010

08004094 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004098:	2100      	movs	r1, #0
 800409a:	f06f 0004 	mvn.w	r0, #4
 800409e:	f7ff ffbf 	bl	8004020 <__NVIC_SetPriority>
#endif
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ae:	f3ef 8305 	mrs	r3, IPSR
 80040b2:	603b      	str	r3, [r7, #0]
  return(result);
 80040b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040ba:	f06f 0305 	mvn.w	r3, #5
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	e00c      	b.n	80040dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <osKernelInitialize+0x44>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <osKernelInitialize+0x44>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e002      	b.n	80040dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040dc:	687b      	ldr	r3, [r7, #4]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000284 	.word	0x20000284

080040f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f6:	f3ef 8305 	mrs	r3, IPSR
 80040fa:	603b      	str	r3, [r7, #0]
  return(result);
 80040fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004102:	f06f 0305 	mvn.w	r3, #5
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	e010      	b.n	800412c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <osKernelStart+0x48>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d109      	bne.n	8004126 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004112:	f7ff ffbf 	bl	8004094 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <osKernelStart+0x48>)
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800411c:	f001 f87c 	bl	8005218 <vTaskStartScheduler>
      stat = osOK;
 8004120:	2300      	movs	r3, #0
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	e002      	b.n	800412c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004126:	f04f 33ff 	mov.w	r3, #4294967295
 800412a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800412c:	687b      	ldr	r3, [r7, #4]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000284 	.word	0x20000284

0800413c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af04      	add	r7, sp, #16
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800414c:	f3ef 8305 	mrs	r3, IPSR
 8004150:	617b      	str	r3, [r7, #20]
  return(result);
 8004152:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004154:	2b00      	cmp	r3, #0
 8004156:	d17e      	bne.n	8004256 <osThreadNew+0x11a>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d07b      	beq.n	8004256 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004162:	2318      	movs	r3, #24
 8004164:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d045      	beq.n	8004202 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <osThreadNew+0x48>
        name = attr->name;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <osThreadNew+0x6e>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b38      	cmp	r3, #56	; 0x38
 800419c:	d805      	bhi.n	80041aa <osThreadNew+0x6e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <osThreadNew+0x72>
        return (NULL);
 80041aa:	2300      	movs	r3, #0
 80041ac:	e054      	b.n	8004258 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <osThreadNew+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2ba7      	cmp	r3, #167	; 0xa7
 80041cc:	d90a      	bls.n	80041e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <osThreadNew+0xa8>
        mem = 1;
 80041de:	2301      	movs	r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	e010      	b.n	8004206 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10c      	bne.n	8004206 <osThreadNew+0xca>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d108      	bne.n	8004206 <osThreadNew+0xca>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <osThreadNew+0xca>
          mem = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	e001      	b.n	8004206 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d110      	bne.n	800422e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004214:	9202      	str	r2, [sp, #8]
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fe0c 	bl	8004e40 <xTaskCreateStatic>
 8004228:	4603      	mov	r3, r0
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e013      	b.n	8004256 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d110      	bne.n	8004256 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	b29a      	uxth	r2, r3
 8004238:	f107 0310 	add.w	r3, r7, #16
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fe57 	bl	8004efa <xTaskCreate>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <osThreadNew+0x11a>
            hTask = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004256:	693b      	ldr	r3, [r7, #16]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3728      	adds	r7, #40	; 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004268:	f3ef 8305 	mrs	r3, IPSR
 800426c:	60bb      	str	r3, [r7, #8]
  return(result);
 800426e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <osDelay+0x1c>
    stat = osErrorISR;
 8004274:	f06f 0305 	mvn.w	r3, #5
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e007      	b.n	800428c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 ff92 	bl	80051b0 <vTaskDelay>
    }
  }

  return (stat);
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a06      	ldr	r2, [pc, #24]	; (80042c8 <vApplicationGetIdleTaskMemory+0x30>)
 80042ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	601a      	str	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000288 	.word	0x20000288
 80042c8:	20000330 	.word	0x20000330

080042cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80042dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <vApplicationGetTimerTaskMemory+0x30>)
 80042e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ea:	601a      	str	r2, [r3, #0]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	20000530 	.word	0x20000530
 80042fc:	200005d8 	.word	0x200005d8

08004300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 0208 	add.w	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f103 0208 	add.w	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f103 0208 	add.w	r2, r3, #8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d103      	bne.n	80043c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e00c      	b.n	80043dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3308      	adds	r3, #8
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e002      	b.n	80043d0 <vListInsert+0x2e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d2f6      	bcs.n	80043ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6852      	ldr	r2, [r2, #4]
 8004434:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d103      	bne.n	8004448 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004492:	f002 f877 	bl	8006584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	68f9      	ldr	r1, [r7, #12]
 80044a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	441a      	add	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	3b01      	subs	r3, #1
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	22ff      	movs	r2, #255	; 0xff
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d114      	bne.n	8004512 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3310      	adds	r3, #16
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 f929 	bl	800574c <xTaskRemoveFromEventList>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <xQueueGenericReset+0xcc>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	e009      	b.n	8004526 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3310      	adds	r3, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fef2 	bl	8004300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3324      	adds	r3, #36	; 0x24
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff feed 	bl	8004300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004526:	f002 f85d 	bl	80065e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08e      	sub	sp, #56	; 0x38
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <xQueueGenericCreateStatic+0x52>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <xQueueGenericCreateStatic+0x56>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericCreateStatic+0x58>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	623b      	str	r3, [r7, #32]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <xQueueGenericCreateStatic+0x7e>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueGenericCreateStatic+0x82>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericCreateStatic+0x84>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61fb      	str	r3, [r7, #28]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d6:	2350      	movs	r3, #80	; 0x50
 80045d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b50      	cmp	r3, #80	; 0x50
 80045de:	d00a      	beq.n	80045f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	61bb      	str	r3, [r7, #24]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800460a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f805 	bl	8004628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e002      	b.n	800464a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004656:	2101      	movs	r1, #1
 8004658:	69b8      	ldr	r0, [r7, #24]
 800465a:	f7ff ff05 	bl	8004468 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800467e:	2300      	movs	r3, #0
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueGenericSend+0x32>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <xQueueGenericSend+0x40>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <xQueueGenericSend+0x44>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <xQueueGenericSend+0x46>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <xQueueGenericSend+0x60>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d103      	bne.n	80046de <xQueueGenericSend+0x6e>
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <xQueueGenericSend+0x72>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <xQueueGenericSend+0x74>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <xQueueGenericSend+0x8e>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	623b      	str	r3, [r7, #32]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fe:	f001 f9e7 	bl	8005ad0 <xTaskGetSchedulerState>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <xQueueGenericSend+0x9e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <xQueueGenericSend+0xa2>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <xQueueGenericSend+0xa4>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xQueueGenericSend+0xbe>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	61fb      	str	r3, [r7, #28]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472e:	f001 ff29 	bl	8006584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xQueueGenericSend+0xd4>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d129      	bne.n	8004798 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800474a:	f000 fa0b 	bl	8004b64 <prvCopyDataToQueue>
 800474e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	3324      	adds	r3, #36	; 0x24
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fff5 	bl	800574c <xTaskRemoveFromEventList>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <xQueueGenericSend+0x1f8>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	e00a      	b.n	8004790 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <xQueueGenericSend+0x1f8>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004790:	f001 ff28 	bl	80065e4 <vPortExitCritical>
				return pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	e063      	b.n	8004860 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479e:	f001 ff21 	bl	80065e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e05c      	b.n	8004860 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f82f 	bl	8005814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ba:	f001 ff13 	bl	80065e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047be:	f000 fd9b 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c2:	f001 fedf 	bl	8006584 <vPortEnterCritical>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d103      	bne.n	80047dc <xQueueGenericSend+0x16c>
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d103      	bne.n	80047f2 <xQueueGenericSend+0x182>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f2:	f001 fef7 	bl	80065e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f6:	1d3a      	adds	r2, r7, #4
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f81e 	bl	8005840 <xTaskCheckForTimeOut>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d124      	bne.n	8004854 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800480a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480c:	f000 faa2 	bl	8004d54 <prvIsQueueFull>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	3310      	adds	r3, #16
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff44 	bl	80056ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004826:	f000 fa2d 	bl	8004c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800482a:	f000 fd73 	bl	8005314 <xTaskResumeAll>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	f47f af7c 	bne.w	800472e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <xQueueGenericSend+0x1f8>)
 8004838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	e772      	b.n	800472e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484a:	f000 fa1b 	bl	8004c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484e:	f000 fd61 	bl	8005314 <xTaskResumeAll>
 8004852:	e76c      	b.n	800472e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004856:	f000 fa15 	bl	8004c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800485a:	f000 fd5b 	bl	8005314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800485e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004860:	4618      	mov	r0, r3
 8004862:	3738      	adds	r7, #56	; 0x38
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b090      	sub	sp, #64	; 0x40
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <xQueueGenericSendFromISR+0x3c>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <xQueueGenericSendFromISR+0x40>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <xQueueGenericSendFromISR+0x42>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d103      	bne.n	80048d6 <xQueueGenericSendFromISR+0x6a>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <xQueueGenericSendFromISR+0x6e>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <xQueueGenericSendFromISR+0x70>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	623b      	str	r3, [r7, #32]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048f6:	f001 ff27 	bl	8006748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048fa:	f3ef 8211 	mrs	r2, BASEPRI
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	61fa      	str	r2, [r7, #28]
 8004910:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004912:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <xQueueGenericSendFromISR+0xbc>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d12f      	bne.n	8004988 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800493e:	f000 f911 	bl	8004b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004942:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d112      	bne.n	8004972 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d016      	beq.n	8004982 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	3324      	adds	r3, #36	; 0x24
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fef7 	bl	800574c <xTaskRemoveFromEventList>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00b      	beq.n	8004982 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e007      	b.n	8004982 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004972:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004976:	3301      	adds	r3, #1
 8004978:	b2db      	uxtb	r3, r3
 800497a:	b25a      	sxtb	r2, r3
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004982:	2301      	movs	r3, #1
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004986:	e001      	b.n	800498c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004988:	2300      	movs	r3, #0
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004996:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800499a:	4618      	mov	r0, r3
 800499c:	3740      	adds	r7, #64	; 0x40
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <xQueueReceive+0x30>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	623b      	str	r3, [r7, #32]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <xQueueReceive+0x3e>
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <xQueueReceive+0x42>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <xQueueReceive+0x44>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueReceive+0x5e>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	61fb      	str	r3, [r7, #28]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a02:	f001 f865 	bl	8005ad0 <xTaskGetSchedulerState>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <xQueueReceive+0x6e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <xQueueReceive+0x72>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <xQueueReceive+0x74>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueReceive+0x8e>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	61bb      	str	r3, [r7, #24]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a32:	f001 fda7 	bl	8006584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01f      	beq.n	8004a82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a46:	f000 f8f7 	bl	8004c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00f      	beq.n	8004a7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fe74 	bl	800574c <xTaskRemoveFromEventList>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <xQueueReceive+0x1bc>)
 8004a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a7a:	f001 fdb3 	bl	80065e4 <vPortExitCritical>
				return pdPASS;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e069      	b.n	8004b56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a88:	f001 fdac 	bl	80065e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e062      	b.n	8004b56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a96:	f107 0310 	add.w	r3, r7, #16
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 feba 	bl	8005814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aa4:	f001 fd9e 	bl	80065e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aa8:	f000 fc26 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aac:	f001 fd6a 	bl	8006584 <vPortEnterCritical>
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d103      	bne.n	8004ac6 <xQueueReceive+0x122>
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d103      	bne.n	8004adc <xQueueReceive+0x138>
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004adc:	f001 fd82 	bl	80065e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ae0:	1d3a      	adds	r2, r7, #4
 8004ae2:	f107 0310 	add.w	r3, r7, #16
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fea9 	bl	8005840 <xTaskCheckForTimeOut>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d123      	bne.n	8004b3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af6:	f000 f917 	bl	8004d28 <prvIsQueueEmpty>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fdcf 	bl	80056ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b10:	f000 f8b8 	bl	8004c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b14:	f000 fbfe 	bl	8005314 <xTaskResumeAll>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d189      	bne.n	8004a32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <xQueueReceive+0x1bc>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	e780      	b.n	8004a32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b32:	f000 f8a7 	bl	8004c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b36:	f000 fbed 	bl	8005314 <xTaskResumeAll>
 8004b3a:	e77a      	b.n	8004a32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3e:	f000 f8a1 	bl	8004c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b42:	f000 fbe7 	bl	8005314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b48:	f000 f8ee 	bl	8004d28 <prvIsQueueEmpty>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f43f af6f 	beq.w	8004a32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3730      	adds	r7, #48	; 0x30
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d14d      	bne.n	8004c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 ffbc 	bl	8005b0c <xTaskPriorityDisinherit>
 8004b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	e043      	b.n	8004c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d119      	bne.n	8004bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6858      	ldr	r0, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	461a      	mov	r2, r3
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	f002 f9ca 	bl	8006f48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d32b      	bcc.n	8004c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]
 8004bd6:	e026      	b.n	8004c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68d8      	ldr	r0, [r3, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	461a      	mov	r2, r3
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	f002 f9b0 	bl	8006f48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	441a      	add	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d207      	bcs.n	8004c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	425b      	negs	r3, r3
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d105      	bne.n	8004c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c2e:	697b      	ldr	r3, [r7, #20]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d018      	beq.n	8004c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	441a      	add	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d303      	bcc.n	8004c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68d9      	ldr	r1, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	461a      	mov	r2, r3
 8004c76:	6838      	ldr	r0, [r7, #0]
 8004c78:	f002 f966 	bl	8006f48 <memcpy>
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c8c:	f001 fc7a 	bl	8006584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c98:	e011      	b.n	8004cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3324      	adds	r3, #36	; 0x24
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd50 	bl	800574c <xTaskRemoveFromEventList>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cb2:	f000 fe27 	bl	8005904 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dce9      	bgt.n	8004c9a <prvUnlockQueue+0x16>
 8004cc6:	e000      	b.n	8004cca <prvUnlockQueue+0x46>
					break;
 8004cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	22ff      	movs	r2, #255	; 0xff
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cd2:	f001 fc87 	bl	80065e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cd6:	f001 fc55 	bl	8006584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ce2:	e011      	b.n	8004d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d012      	beq.n	8004d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3310      	adds	r3, #16
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fd2b 	bl	800574c <xTaskRemoveFromEventList>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cfc:	f000 fe02 	bl	8005904 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dce9      	bgt.n	8004ce4 <prvUnlockQueue+0x60>
 8004d10:	e000      	b.n	8004d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	22ff      	movs	r2, #255	; 0xff
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d1c:	f001 fc62 	bl	80065e4 <vPortExitCritical>
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d30:	f001 fc28 	bl	8006584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e001      	b.n	8004d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d46:	f001 fc4d 	bl	80065e4 <vPortExitCritical>

	return xReturn;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d5c:	f001 fc12 	bl	8006584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d102      	bne.n	8004d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e001      	b.n	8004d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d76:	f001 fc35 	bl	80065e4 <vPortExitCritical>

	return xReturn;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e014      	b.n	8004dbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d94:	4a0f      	ldr	r2, [pc, #60]	; (8004dd4 <vQueueAddToRegistry+0x50>)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004da0:	490c      	ldr	r1, [pc, #48]	; (8004dd4 <vQueueAddToRegistry+0x50>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004daa:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <vQueueAddToRegistry+0x50>)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004db6:	e006      	b.n	8004dc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b07      	cmp	r3, #7
 8004dc2:	d9e7      	bls.n	8004d94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	200009d8 	.word	0x200009d8

08004dd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004de8:	f001 fbcc 	bl	8006584 <vPortEnterCritical>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d103      	bne.n	8004e02 <vQueueWaitForMessageRestricted+0x2a>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e08:	b25b      	sxtb	r3, r3
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d103      	bne.n	8004e18 <vQueueWaitForMessageRestricted+0x40>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e18:	f001 fbe4 	bl	80065e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fc61 	bl	80056f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f7ff ff26 	bl	8004c84 <prvUnlockQueue>
	}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	; 0x38
 8004e44:	af04      	add	r7, sp, #16
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	623b      	str	r3, [r7, #32]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	61fb      	str	r3, [r7, #28]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e86:	23a8      	movs	r3, #168	; 0xa8
 8004e88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2ba8      	cmp	r3, #168	; 0xa8
 8004e8e:	d00a      	beq.n	8004ea6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	61bb      	str	r3, [r7, #24]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ea6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01e      	beq.n	8004eec <xTaskCreateStatic+0xac>
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9303      	str	r3, [sp, #12]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	9302      	str	r3, [sp, #8]
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f850 	bl	8004f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ee6:	f000 f8f3 	bl	80050d0 <prvAddNewTaskToReadyList>
 8004eea:	e001      	b.n	8004ef0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef0:	697b      	ldr	r3, [r7, #20]
	}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3728      	adds	r7, #40	; 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b08c      	sub	sp, #48	; 0x30
 8004efe:	af04      	add	r7, sp, #16
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f001 fc5a 	bl	80067c8 <pvPortMalloc>
 8004f14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f1c:	20a8      	movs	r0, #168	; 0xa8
 8004f1e:	f001 fc53 	bl	80067c8 <pvPortMalloc>
 8004f22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f30:	e005      	b.n	8004f3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f001 fd14 	bl	8006960 <vPortFree>
 8004f38:	e001      	b.n	8004f3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f4c:	88fa      	ldrh	r2, [r7, #6]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9303      	str	r3, [sp, #12]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	9302      	str	r3, [sp, #8]
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f80e 	bl	8004f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f68:	69f8      	ldr	r0, [r7, #28]
 8004f6a:	f000 f8b1 	bl	80050d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	e002      	b.n	8004f7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f74:	f04f 33ff 	mov.w	r3, #4294967295
 8004f78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	21a5      	movs	r1, #165	; 0xa5
 8004f9e:	f001 ff02 	bl	8006da6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fac:	3b01      	subs	r3, #1
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	617b      	str	r3, [r7, #20]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01f      	beq.n	8005022 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	e012      	b.n	800500e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	7819      	ldrb	r1, [r3, #0]
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3334      	adds	r3, #52	; 0x34
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d006      	beq.n	8005016 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b0f      	cmp	r3, #15
 8005012:	d9e9      	bls.n	8004fe8 <prvInitialiseNewTask+0x64>
 8005014:	e000      	b.n	8005018 <prvInitialiseNewTask+0x94>
			{
				break;
 8005016:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005020:	e003      	b.n	800502a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	2b37      	cmp	r3, #55	; 0x37
 800502e:	d901      	bls.n	8005034 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005030:	2337      	movs	r3, #55	; 0x37
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005038:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	3304      	adds	r3, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff f978 	bl	8004340 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	3318      	adds	r3, #24
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff f973 	bl	8004340 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2200      	movs	r2, #0
 800507c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	3354      	adds	r3, #84	; 0x54
 8005084:	224c      	movs	r2, #76	; 0x4c
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f001 fe8c 	bl	8006da6 <memset>
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <prvInitialiseNewTask+0x140>)
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <prvInitialiseNewTask+0x144>)
 8005098:	65da      	str	r2, [r3, #92]	; 0x5c
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <prvInitialiseNewTask+0x148>)
 800509e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	69b8      	ldr	r0, [r7, #24]
 80050a6:	f001 f941 	bl	800632c <pxPortInitialiseStack>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050bc:	bf00      	nop
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	2000377c 	.word	0x2000377c
 80050c8:	200037e4 	.word	0x200037e4
 80050cc:	2000384c 	.word	0x2000384c

080050d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050d8:	f001 fa54 	bl	8006584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050dc:	4b2d      	ldr	r3, [pc, #180]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050e6:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ee:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d110      	bne.n	800511e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050fc:	f000 fc26 	bl	800594c <prvInitialiseTaskLists>
 8005100:	e00d      	b.n	800511e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005102:	4b26      	ldr	r3, [pc, #152]	; (800519c <prvAddNewTaskToReadyList+0xcc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800510a:	4b23      	ldr	r3, [pc, #140]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	429a      	cmp	r2, r3
 8005116:	d802      	bhi.n	800511e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005118:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 8005126:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <prvAddNewTaskToReadyList+0xd4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d903      	bls.n	8005144 <prvAddNewTaskToReadyList+0x74>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <prvAddNewTaskToReadyList+0xd4>)
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <prvAddNewTaskToReadyList+0xd8>)
 8005152:	441a      	add	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7ff f8fd 	bl	800435a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005160:	f001 fa40 	bl	80065e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <prvAddNewTaskToReadyList+0xcc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	429a      	cmp	r2, r3
 8005178:	d207      	bcs.n	800518a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <prvAddNewTaskToReadyList+0xdc>)
 800517c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000eec 	.word	0x20000eec
 8005198:	20000a18 	.word	0x20000a18
 800519c:	20000ef8 	.word	0x20000ef8
 80051a0:	20000f08 	.word	0x20000f08
 80051a4:	20000ef4 	.word	0x20000ef4
 80051a8:	20000a1c 	.word	0x20000a1c
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <vTaskDelay+0x60>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <vTaskDelay+0x30>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60bb      	str	r3, [r7, #8]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051e0:	f000 f88a 	bl	80052f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051e4:	2100      	movs	r1, #0
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fcfe 	bl	8005be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051ec:	f000 f892 	bl	8005314 <xTaskResumeAll>
 80051f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <vTaskDelay+0x64>)
 80051fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000f14 	.word	0x20000f14
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005226:	463a      	mov	r2, r7
 8005228:	1d39      	adds	r1, r7, #4
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff f832 	bl	8004298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	9202      	str	r2, [sp, #8]
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	460a      	mov	r2, r1
 8005246:	4924      	ldr	r1, [pc, #144]	; (80052d8 <vTaskStartScheduler+0xc0>)
 8005248:	4824      	ldr	r0, [pc, #144]	; (80052dc <vTaskStartScheduler+0xc4>)
 800524a:	f7ff fdf9 	bl	8004e40 <xTaskCreateStatic>
 800524e:	4603      	mov	r3, r0
 8005250:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <vTaskStartScheduler+0xc8>)
 8005252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005254:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <vTaskStartScheduler+0xc8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800525c:	2301      	movs	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e001      	b.n	8005266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800526c:	f000 fd10 	bl	8005c90 <xTimerCreateTimerTask>
 8005270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d11b      	bne.n	80052b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <vTaskStartScheduler+0xcc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3354      	adds	r3, #84	; 0x54
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <vTaskStartScheduler+0xd0>)
 8005294:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <vTaskStartScheduler+0xd4>)
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <vTaskStartScheduler+0xd8>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <vTaskStartScheduler+0xdc>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052aa:	f001 f8c9 	bl	8006440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ae:	e00e      	b.n	80052ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d10a      	bne.n	80052ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <vTaskStartScheduler+0xb4>
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08007b0c 	.word	0x08007b0c
 80052dc:	0800591d 	.word	0x0800591d
 80052e0:	20000f10 	.word	0x20000f10
 80052e4:	20000a18 	.word	0x20000a18
 80052e8:	20000068 	.word	0x20000068
 80052ec:	20000f0c 	.word	0x20000f0c
 80052f0:	20000ef8 	.word	0x20000ef8
 80052f4:	20000ef0 	.word	0x20000ef0

080052f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <vTaskSuspendAll+0x18>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	4a03      	ldr	r2, [pc, #12]	; (8005310 <vTaskSuspendAll+0x18>)
 8005304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000f14 	.word	0x20000f14

08005314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <xTaskResumeAll+0x118>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xTaskResumeAll+0x2c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	603b      	str	r3, [r7, #0]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005340:	f001 f920 	bl	8006584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <xTaskResumeAll+0x118>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	4a38      	ldr	r2, [pc, #224]	; (800542c <xTaskResumeAll+0x118>)
 800534c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534e:	4b37      	ldr	r3, [pc, #220]	; (800542c <xTaskResumeAll+0x118>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d162      	bne.n	800541c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <xTaskResumeAll+0x11c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d05e      	beq.n	800541c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800535e:	e02f      	b.n	80053c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <xTaskResumeAll+0x120>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f851 	bl	8004414 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f84c 	bl	8004414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <xTaskResumeAll+0x124>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d903      	bls.n	8005390 <xTaskResumeAll+0x7c>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <xTaskResumeAll+0x124>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a27      	ldr	r2, [pc, #156]	; (800543c <xTaskResumeAll+0x128>)
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fe ffd7 	bl	800435a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <xTaskResumeAll+0x12c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80053ba:	4b22      	ldr	r3, [pc, #136]	; (8005444 <xTaskResumeAll+0x130>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <xTaskResumeAll+0x120>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1cb      	bne.n	8005360 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053ce:	f000 fb5f 	bl	8005a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <xTaskResumeAll+0x134>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053de:	f000 f847 	bl	8005470 <xTaskIncrementTick>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053e8:	4b16      	ldr	r3, [pc, #88]	; (8005444 <xTaskResumeAll+0x130>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f1      	bne.n	80053de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <xTaskResumeAll+0x134>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <xTaskResumeAll+0x130>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <xTaskResumeAll+0x138>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800541c:	f001 f8e2 	bl	80065e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005420:	68bb      	ldr	r3, [r7, #8]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000f14 	.word	0x20000f14
 8005430:	20000eec 	.word	0x20000eec
 8005434:	20000eac 	.word	0x20000eac
 8005438:	20000ef4 	.word	0x20000ef4
 800543c:	20000a1c 	.word	0x20000a1c
 8005440:	20000a18 	.word	0x20000a18
 8005444:	20000f00 	.word	0x20000f00
 8005448:	20000efc 	.word	0x20000efc
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <xTaskGetTickCount+0x1c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800545c:	687b      	ldr	r3, [r7, #4]
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000ef0 	.word	0x20000ef0

08005470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547a:	4b4f      	ldr	r3, [pc, #316]	; (80055b8 <xTaskIncrementTick+0x148>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f040 808f 	bne.w	80055a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005484:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <xTaskIncrementTick+0x14c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800548c:	4a4b      	ldr	r2, [pc, #300]	; (80055bc <xTaskIncrementTick+0x14c>)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d120      	bne.n	80054da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005498:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <xTaskIncrementTick+0x150>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	603b      	str	r3, [r7, #0]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xTaskIncrementTick+0x46>
 80054b8:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <xTaskIncrementTick+0x150>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <xTaskIncrementTick+0x154>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a3f      	ldr	r2, [pc, #252]	; (80055c0 <xTaskIncrementTick+0x150>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4a3f      	ldr	r2, [pc, #252]	; (80055c4 <xTaskIncrementTick+0x154>)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	4b3e      	ldr	r3, [pc, #248]	; (80055c8 <xTaskIncrementTick+0x158>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	4a3d      	ldr	r2, [pc, #244]	; (80055c8 <xTaskIncrementTick+0x158>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	f000 fadb 	bl	8005a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054da:	4b3c      	ldr	r3, [pc, #240]	; (80055cc <xTaskIncrementTick+0x15c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d349      	bcc.n	8005578 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <xTaskIncrementTick+0x150>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ee:	4b37      	ldr	r3, [pc, #220]	; (80055cc <xTaskIncrementTick+0x15c>)
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	601a      	str	r2, [r3, #0]
					break;
 80054f6:	e03f      	b.n	8005578 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <xTaskIncrementTick+0x150>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d203      	bcs.n	8005518 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005510:	4a2e      	ldr	r2, [pc, #184]	; (80055cc <xTaskIncrementTick+0x15c>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005516:	e02f      	b.n	8005578 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe ff79 	bl	8004414 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	3318      	adds	r3, #24
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe ff70 	bl	8004414 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <xTaskIncrementTick+0x160>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d903      	bls.n	8005548 <xTaskIncrementTick+0xd8>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <xTaskIncrementTick+0x160>)
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <xTaskIncrementTick+0x164>)
 8005556:	441a      	add	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f7fe fefb 	bl	800435a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <xTaskIncrementTick+0x168>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	429a      	cmp	r2, r3
 8005570:	d3b8      	bcc.n	80054e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005576:	e7b5      	b.n	80054e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <xTaskIncrementTick+0x168>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4915      	ldr	r1, [pc, #84]	; (80055d4 <xTaskIncrementTick+0x164>)
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d901      	bls.n	8005594 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <xTaskIncrementTick+0x16c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e004      	b.n	80055ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055a2:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <xTaskIncrementTick+0x170>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <xTaskIncrementTick+0x170>)
 80055aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055ac:	697b      	ldr	r3, [r7, #20]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000f14 	.word	0x20000f14
 80055bc:	20000ef0 	.word	0x20000ef0
 80055c0:	20000ea4 	.word	0x20000ea4
 80055c4:	20000ea8 	.word	0x20000ea8
 80055c8:	20000f04 	.word	0x20000f04
 80055cc:	20000f0c 	.word	0x20000f0c
 80055d0:	20000ef4 	.word	0x20000ef4
 80055d4:	20000a1c 	.word	0x20000a1c
 80055d8:	20000a18 	.word	0x20000a18
 80055dc:	20000f00 	.word	0x20000f00
 80055e0:	20000efc 	.word	0x20000efc

080055e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055ea:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <vTaskSwitchContext+0xb0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055f2:	4b29      	ldr	r3, [pc, #164]	; (8005698 <vTaskSwitchContext+0xb4>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055f8:	e046      	b.n	8005688 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80055fa:	4b27      	ldr	r3, [pc, #156]	; (8005698 <vTaskSwitchContext+0xb4>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	4b26      	ldr	r3, [pc, #152]	; (800569c <vTaskSwitchContext+0xb8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e010      	b.n	800562a <vTaskSwitchContext+0x46>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <vTaskSwitchContext+0x40>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <vTaskSwitchContext+0x3e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3b01      	subs	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	491d      	ldr	r1, [pc, #116]	; (80056a0 <vTaskSwitchContext+0xbc>)
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0e4      	beq.n	8005608 <vTaskSwitchContext+0x24>
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <vTaskSwitchContext+0xbc>)
 800564a:	4413      	add	r3, r2
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	3308      	adds	r3, #8
 8005660:	429a      	cmp	r2, r3
 8005662:	d104      	bne.n	800566e <vTaskSwitchContext+0x8a>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a0b      	ldr	r2, [pc, #44]	; (80056a4 <vTaskSwitchContext+0xc0>)
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	4a08      	ldr	r2, [pc, #32]	; (800569c <vTaskSwitchContext+0xb8>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <vTaskSwitchContext+0xc0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3354      	adds	r3, #84	; 0x54
 8005684:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <vTaskSwitchContext+0xc4>)
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	20000f14 	.word	0x20000f14
 8005698:	20000f00 	.word	0x20000f00
 800569c:	20000ef4 	.word	0x20000ef4
 80056a0:	20000a1c 	.word	0x20000a1c
 80056a4:	20000a18 	.word	0x20000a18
 80056a8:	20000068 	.word	0x20000068

080056ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <vTaskPlaceOnEventList+0x44>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3318      	adds	r3, #24
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fe fe61 	bl	80043a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056e0:	2101      	movs	r1, #1
 80056e2:	6838      	ldr	r0, [r7, #0]
 80056e4:	f000 fa80 	bl	8005be8 <prvAddCurrentTaskToDelayedList>
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000a18 	.word	0x20000a18

080056f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	617b      	str	r3, [r7, #20]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <vTaskPlaceOnEventListRestricted+0x54>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3318      	adds	r3, #24
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7fe fe18 	bl	800435a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	68b8      	ldr	r0, [r7, #8]
 800573a:	f000 fa55 	bl	8005be8 <prvAddCurrentTaskToDelayedList>
	}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000a18 	.word	0x20000a18

0800574c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60fb      	str	r3, [r7, #12]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3318      	adds	r3, #24
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fe49 	bl	8004414 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005782:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <xTaskRemoveFromEventList+0xb0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11d      	bne.n	80057c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3304      	adds	r3, #4
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe fe40 	bl	8004414 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005798:	4b19      	ldr	r3, [pc, #100]	; (8005800 <xTaskRemoveFromEventList+0xb4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d903      	bls.n	80057a8 <xTaskRemoveFromEventList+0x5c>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <xTaskRemoveFromEventList+0xb4>)
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4a13      	ldr	r2, [pc, #76]	; (8005804 <xTaskRemoveFromEventList+0xb8>)
 80057b6:	441a      	add	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fe fdcb 	bl	800435a <vListInsertEnd>
 80057c4:	e005      	b.n	80057d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3318      	adds	r3, #24
 80057ca:	4619      	mov	r1, r3
 80057cc:	480e      	ldr	r0, [pc, #56]	; (8005808 <xTaskRemoveFromEventList+0xbc>)
 80057ce:	f7fe fdc4 	bl	800435a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <xTaskRemoveFromEventList+0xc0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	429a      	cmp	r2, r3
 80057de:	d905      	bls.n	80057ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <xTaskRemoveFromEventList+0xc4>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e001      	b.n	80057f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000f14 	.word	0x20000f14
 8005800:	20000ef4 	.word	0x20000ef4
 8005804:	20000a1c 	.word	0x20000a1c
 8005808:	20000eac 	.word	0x20000eac
 800580c:	20000a18 	.word	0x20000a18
 8005810:	20000f00 	.word	0x20000f00

08005814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <vTaskInternalSetTimeOutState+0x24>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <vTaskInternalSetTimeOutState+0x28>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	20000f04 	.word	0x20000f04
 800583c:	20000ef0 	.word	0x20000ef0

08005840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005882:	f000 fe7f 	bl	8006584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <xTaskCheckForTimeOut+0xbc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	d102      	bne.n	80058a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e023      	b.n	80058ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <xTaskCheckForTimeOut+0xc0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d007      	beq.n	80058c2 <xTaskCheckForTimeOut+0x82>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	e015      	b.n	80058ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d20b      	bcs.n	80058e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ff9b 	bl	8005814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e004      	b.n	80058ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058ee:	f000 fe79 	bl	80065e4 <vPortExitCritical>

	return xReturn;
 80058f2:	69fb      	ldr	r3, [r7, #28]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000ef0 	.word	0x20000ef0
 8005900:	20000f04 	.word	0x20000f04

08005904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <vTaskMissedYield+0x14>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	20000f00 	.word	0x20000f00

0800591c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005924:	f000 f852 	bl	80059cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <prvIdleTask+0x28>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d9f9      	bls.n	8005924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <prvIdleTask+0x2c>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005940:	e7f0      	b.n	8005924 <prvIdleTask+0x8>
 8005942:	bf00      	nop
 8005944:	20000a1c 	.word	0x20000a1c
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	e00c      	b.n	8005972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <prvInitialiseTaskLists+0x60>)
 8005964:	4413      	add	r3, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fcca 	bl	8004300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3301      	adds	r3, #1
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b37      	cmp	r3, #55	; 0x37
 8005976:	d9ef      	bls.n	8005958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005978:	480d      	ldr	r0, [pc, #52]	; (80059b0 <prvInitialiseTaskLists+0x64>)
 800597a:	f7fe fcc1 	bl	8004300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800597e:	480d      	ldr	r0, [pc, #52]	; (80059b4 <prvInitialiseTaskLists+0x68>)
 8005980:	f7fe fcbe 	bl	8004300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005984:	480c      	ldr	r0, [pc, #48]	; (80059b8 <prvInitialiseTaskLists+0x6c>)
 8005986:	f7fe fcbb 	bl	8004300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800598a:	480c      	ldr	r0, [pc, #48]	; (80059bc <prvInitialiseTaskLists+0x70>)
 800598c:	f7fe fcb8 	bl	8004300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005990:	480b      	ldr	r0, [pc, #44]	; (80059c0 <prvInitialiseTaskLists+0x74>)
 8005992:	f7fe fcb5 	bl	8004300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <prvInitialiseTaskLists+0x78>)
 8005998:	4a05      	ldr	r2, [pc, #20]	; (80059b0 <prvInitialiseTaskLists+0x64>)
 800599a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <prvInitialiseTaskLists+0x7c>)
 800599e:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <prvInitialiseTaskLists+0x68>)
 80059a0:	601a      	str	r2, [r3, #0]
}
 80059a2:	bf00      	nop
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000a1c 	.word	0x20000a1c
 80059b0:	20000e7c 	.word	0x20000e7c
 80059b4:	20000e90 	.word	0x20000e90
 80059b8:	20000eac 	.word	0x20000eac
 80059bc:	20000ec0 	.word	0x20000ec0
 80059c0:	20000ed8 	.word	0x20000ed8
 80059c4:	20000ea4 	.word	0x20000ea4
 80059c8:	20000ea8 	.word	0x20000ea8

080059cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059d2:	e019      	b.n	8005a08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059d4:	f000 fdd6 	bl	8006584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d8:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <prvCheckTasksWaitingTermination+0x50>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe fd15 	bl	8004414 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059ea:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <prvCheckTasksWaitingTermination+0x54>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <prvCheckTasksWaitingTermination+0x54>)
 80059f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059f4:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <prvCheckTasksWaitingTermination+0x58>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <prvCheckTasksWaitingTermination+0x58>)
 80059fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059fe:	f000 fdf1 	bl	80065e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f810 	bl	8005a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <prvCheckTasksWaitingTermination+0x58>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e1      	bne.n	80059d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000ec0 	.word	0x20000ec0
 8005a20:	20000eec 	.word	0x20000eec
 8005a24:	20000ed4 	.word	0x20000ed4

08005a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3354      	adds	r3, #84	; 0x54
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 f9cf 	bl	8006dd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d108      	bne.n	8005a56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 ff89 	bl	8006960 <vPortFree>
				vPortFree( pxTCB );
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 ff86 	bl	8006960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a54:	e018      	b.n	8005a88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d103      	bne.n	8005a68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 ff7d 	bl	8006960 <vPortFree>
	}
 8005a66:	e00f      	b.n	8005a88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d00a      	beq.n	8005a88 <prvDeleteTCB+0x60>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <prvDeleteTCB+0x5e>
	}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvResetNextTaskUnblockTime+0x38>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvResetNextTaskUnblockTime+0x3c>)
 8005aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005aa8:	e008      	b.n	8005abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <prvResetNextTaskUnblockTime+0x38>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	; (8005acc <prvResetNextTaskUnblockTime+0x3c>)
 8005aba:	6013      	str	r3, [r2, #0]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000ea4 	.word	0x20000ea4
 8005acc:	20000f0c 	.word	0x20000f0c

08005ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <xTaskGetSchedulerState+0x34>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	e008      	b.n	8005af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <xTaskGetSchedulerState+0x38>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005aec:	2302      	movs	r3, #2
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	e001      	b.n	8005af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005af6:	687b      	ldr	r3, [r7, #4]
	}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000ef8 	.word	0x20000ef8
 8005b08:	20000f14 	.word	0x20000f14

08005b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d056      	beq.n	8005bd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b22:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <xTaskPriorityDisinherit+0xd0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d00a      	beq.n	8005b42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	60bb      	str	r3, [r7, #8]
}
 8005b5c:	bf00      	nop
 8005b5e:	e7fe      	b.n	8005b5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	1e5a      	subs	r2, r3, #1
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d02c      	beq.n	8005bd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d128      	bne.n	8005bd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fc46 	bl	8004414 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <xTaskPriorityDisinherit+0xd4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d903      	bls.n	8005bb0 <xTaskPriorityDisinherit+0xa4>
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <xTaskPriorityDisinherit+0xd4>)
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <xTaskPriorityDisinherit+0xd8>)
 8005bbe:	441a      	add	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe fbc7 	bl	800435a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bd0:	697b      	ldr	r3, [r7, #20]
	}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000a18 	.word	0x20000a18
 8005be0:	20000ef4 	.word	0x20000ef4
 8005be4:	20000a1c 	.word	0x20000a1c

08005be8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bf2:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <prvAddCurrentTaskToDelayedList+0x90>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bf8:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fc08 	bl	8004414 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d10a      	bne.n	8005c22 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4819      	ldr	r0, [pc, #100]	; (8005c80 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c1c:	f7fe fb9d 	bl	800435a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c20:	e026      	b.n	8005c70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4413      	add	r3, r2
 8005c28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c2a:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d209      	bcs.n	8005c4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe fbab 	bl	80043a2 <vListInsert>
}
 8005c4c:	e010      	b.n	8005c70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fe fba1 	bl	80043a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d202      	bcs.n	8005c70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c6a:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6013      	str	r3, [r2, #0]
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000ef0 	.word	0x20000ef0
 8005c7c:	20000a18 	.word	0x20000a18
 8005c80:	20000ed8 	.word	0x20000ed8
 8005c84:	20000ea8 	.word	0x20000ea8
 8005c88:	20000ea4 	.word	0x20000ea4
 8005c8c:	20000f0c 	.word	0x20000f0c

08005c90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c9a:	f000 fb07 	bl	80062ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <xTimerCreateTimerTask+0x80>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d021      	beq.n	8005cea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cae:	1d3a      	adds	r2, r7, #4
 8005cb0:	f107 0108 	add.w	r1, r7, #8
 8005cb4:	f107 030c 	add.w	r3, r7, #12
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fb07 	bl	80042cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	9202      	str	r2, [sp, #8]
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	2302      	movs	r3, #2
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	460a      	mov	r2, r1
 8005cd0:	4910      	ldr	r1, [pc, #64]	; (8005d14 <xTimerCreateTimerTask+0x84>)
 8005cd2:	4811      	ldr	r0, [pc, #68]	; (8005d18 <xTimerCreateTimerTask+0x88>)
 8005cd4:	f7ff f8b4 	bl	8004e40 <xTaskCreateStatic>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <xTimerCreateTimerTask+0x8c>)
 8005cdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <xTimerCreateTimerTask+0x8c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d06:	697b      	ldr	r3, [r7, #20]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000f48 	.word	0x20000f48
 8005d14:	08007b14 	.word	0x08007b14
 8005d18:	08005e55 	.word	0x08005e55
 8005d1c:	20000f4c 	.word	0x20000f4c

08005d20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	623b      	str	r3, [r7, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d4e:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <xTimerGenericCommand+0x98>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02a      	beq.n	8005dac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b05      	cmp	r3, #5
 8005d66:	dc18      	bgt.n	8005d9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d68:	f7ff feb2 	bl	8005ad0 <xTaskGetSchedulerState>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d109      	bne.n	8005d86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <xTimerGenericCommand+0x98>)
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f107 0110 	add.w	r1, r7, #16
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	f7fe fc77 	bl	8004670 <xQueueGenericSend>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24
 8005d84:	e012      	b.n	8005dac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <xTimerGenericCommand+0x98>)
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	f107 0110 	add.w	r1, r7, #16
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2200      	movs	r2, #0
 8005d92:	f7fe fc6d 	bl	8004670 <xQueueGenericSend>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24
 8005d98:	e008      	b.n	8005dac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <xTimerGenericCommand+0x98>)
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f107 0110 	add.w	r1, r7, #16
 8005da2:	2300      	movs	r3, #0
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	f7fe fd61 	bl	800486c <xQueueGenericSendFromISR>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000f48 	.word	0x20000f48

08005dbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc6:	4b22      	ldr	r3, [pc, #136]	; (8005e50 <prvProcessExpiredTimer+0x94>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fb1d 	bl	8004414 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d022      	beq.n	8005e2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	18d1      	adds	r1, r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	6978      	ldr	r0, [r7, #20]
 8005df6:	f000 f8d1 	bl	8005f9c <prvInsertTimerInActiveList>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01f      	beq.n	8005e40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e00:	2300      	movs	r3, #0
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6978      	ldr	r0, [r7, #20]
 8005e0c:	f7ff ff88 	bl	8005d20 <xTimerGenericCommand>
 8005e10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d113      	bne.n	8005e40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	6978      	ldr	r0, [r7, #20]
 8005e46:	4798      	blx	r3
}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000f40 	.word	0x20000f40

08005e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e5c:	f107 0308 	add.w	r3, r7, #8
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 f857 	bl	8005f14 <prvGetNextExpireTime>
 8005e66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f803 	bl	8005e78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e72:	f000 f8d5 	bl	8006020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e76:	e7f1      	b.n	8005e5c <prvTimerTask+0x8>

08005e78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e82:	f7ff fa39 	bl	80052f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e86:	f107 0308 	add.w	r3, r7, #8
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f866 	bl	8005f5c <prvSampleTimeNow>
 8005e90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d130      	bne.n	8005efa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <prvProcessTimerOrBlockTask+0x3c>
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d806      	bhi.n	8005eb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ea6:	f7ff fa35 	bl	8005314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ff85 	bl	8005dbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eb2:	e024      	b.n	8005efe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <prvProcessTimerOrBlockTask+0x90>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <prvProcessTimerOrBlockTask+0x50>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <prvProcessTimerOrBlockTask+0x52>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <prvProcessTimerOrBlockTask+0x94>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f7fe ff7d 	bl	8004dd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ede:	f7ff fa19 	bl	8005314 <xTaskResumeAll>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <prvProcessTimerOrBlockTask+0x98>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
}
 8005ef8:	e001      	b.n	8005efe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005efa:	f7ff fa0b 	bl	8005314 <xTaskResumeAll>
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000f44 	.word	0x20000f44
 8005f0c:	20000f48 	.word	0x20000f48
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <prvGetNextExpireTime+0x44>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <prvGetNextExpireTime+0x16>
 8005f26:	2201      	movs	r2, #1
 8005f28:	e000      	b.n	8005f2c <prvGetNextExpireTime+0x18>
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <prvGetNextExpireTime+0x44>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e001      	b.n	8005f48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000f40 	.word	0x20000f40

08005f5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f64:	f7ff fa74 	bl	8005450 <xTaskGetTickCount>
 8005f68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <prvSampleTimeNow+0x3c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d205      	bcs.n	8005f80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f74:	f000 f936 	bl	80061e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e002      	b.n	8005f86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f86:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <prvSampleTimeNow+0x3c>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000f50 	.word	0x20000f50

08005f9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d812      	bhi.n	8005fe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e01b      	b.n	800600e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <prvInsertTimerInActiveList+0x7c>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f7fe f9de 	bl	80043a2 <vListInsert>
 8005fe6:	e012      	b.n	800600e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d206      	bcs.n	8005ffe <prvInsertTimerInActiveList+0x62>
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e007      	b.n	800600e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <prvInsertTimerInActiveList+0x80>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f7fe f9ca 	bl	80043a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800600e:	697b      	ldr	r3, [r7, #20]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000f44 	.word	0x20000f44
 800601c:	20000f40 	.word	0x20000f40

08006020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	; 0x38
 8006024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006026:	e0ca      	b.n	80061be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	da18      	bge.n	8006060 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	3304      	adds	r3, #4
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	61fb      	str	r3, [r7, #28]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006056:	6850      	ldr	r0, [r2, #4]
 8006058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605a:	6892      	ldr	r2, [r2, #8]
 800605c:	4611      	mov	r1, r2
 800605e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f2c0 80ab 	blt.w	80061be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe f9cb 	bl	8004414 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800607e:	463b      	mov	r3, r7
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ff6b 	bl	8005f5c <prvSampleTimeNow>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b09      	cmp	r3, #9
 800608c:	f200 8096 	bhi.w	80061bc <prvProcessReceivedCommands+0x19c>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <prvProcessReceivedCommands+0x78>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c1 	.word	0x080060c1
 80060a4:	08006135 	.word	0x08006135
 80060a8:	08006149 	.word	0x08006149
 80060ac:	08006193 	.word	0x08006193
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060c1 	.word	0x080060c1
 80060b8:	08006135 	.word	0x08006135
 80060bc:	08006149 	.word	0x08006149
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c6:	f043 0301 	orr.w	r3, r3, #1
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	18d1      	adds	r1, r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e0:	f7ff ff5c 	bl	8005f9c <prvInsertTimerInActiveList>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d069      	beq.n	80061be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05e      	beq.n	80061be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	441a      	add	r2, r3
 8006108:	2300      	movs	r3, #0
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	2100      	movs	r1, #0
 8006110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006112:	f7ff fe05 	bl	8005d20 <xTimerGenericCommand>
 8006116:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d14f      	bne.n	80061be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	61bb      	str	r3, [r7, #24]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006146:	e03a      	b.n	80061be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	617b      	str	r3, [r7, #20]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	18d1      	adds	r1, r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618c:	f7ff ff06 	bl	8005f9c <prvInsertTimerInActiveList>
					break;
 8006190:	e015      	b.n	80061be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a2:	f000 fbdd 	bl	8006960 <vPortFree>
 80061a6:	e00a      	b.n	80061be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061ba:	e000      	b.n	80061be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80061bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061be:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <prvProcessReceivedCommands+0x1c0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	1d39      	adds	r1, r7, #4
 80061c4:	2200      	movs	r2, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fbec 	bl	80049a4 <xQueueReceive>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f47f af2a 	bne.w	8006028 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000f48 	.word	0x20000f48

080061e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ea:	e048      	b.n	800627e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <prvSwitchTimerLists+0xc0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f6:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <prvSwitchTimerLists+0xc0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe f905 	bl	8004414 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02e      	beq.n	800627e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d90e      	bls.n	8006250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800623e:	4b19      	ldr	r3, [pc, #100]	; (80062a4 <prvSwitchTimerLists+0xc0>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe f8aa 	bl	80043a2 <vListInsert>
 800624e:	e016      	b.n	800627e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006250:	2300      	movs	r3, #0
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	2100      	movs	r1, #0
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff fd60 	bl	8005d20 <xTimerGenericCommand>
 8006260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	603b      	str	r3, [r7, #0]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <prvSwitchTimerLists+0xc0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1b1      	bne.n	80061ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <prvSwitchTimerLists+0xc0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <prvSwitchTimerLists+0xc4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <prvSwitchTimerLists+0xc0>)
 8006294:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006296:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <prvSwitchTimerLists+0xc4>)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	6013      	str	r3, [r2, #0]
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000f40 	.word	0x20000f40
 80062a8:	20000f44 	.word	0x20000f44

080062ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062b2:	f000 f967 	bl	8006584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062b6:	4b15      	ldr	r3, [pc, #84]	; (800630c <prvCheckForValidListAndQueue+0x60>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d120      	bne.n	8006300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062be:	4814      	ldr	r0, [pc, #80]	; (8006310 <prvCheckForValidListAndQueue+0x64>)
 80062c0:	f7fe f81e 	bl	8004300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062c4:	4813      	ldr	r0, [pc, #76]	; (8006314 <prvCheckForValidListAndQueue+0x68>)
 80062c6:	f7fe f81b 	bl	8004300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062ca:	4b13      	ldr	r3, [pc, #76]	; (8006318 <prvCheckForValidListAndQueue+0x6c>)
 80062cc:	4a10      	ldr	r2, [pc, #64]	; (8006310 <prvCheckForValidListAndQueue+0x64>)
 80062ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062d0:	4b12      	ldr	r3, [pc, #72]	; (800631c <prvCheckForValidListAndQueue+0x70>)
 80062d2:	4a10      	ldr	r2, [pc, #64]	; (8006314 <prvCheckForValidListAndQueue+0x68>)
 80062d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062d6:	2300      	movs	r3, #0
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <prvCheckForValidListAndQueue+0x74>)
 80062dc:	4a11      	ldr	r2, [pc, #68]	; (8006324 <prvCheckForValidListAndQueue+0x78>)
 80062de:	2110      	movs	r1, #16
 80062e0:	200a      	movs	r0, #10
 80062e2:	f7fe f929 	bl	8004538 <xQueueGenericCreateStatic>
 80062e6:	4603      	mov	r3, r0
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <prvCheckForValidListAndQueue+0x60>)
 80062ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062ec:	4b07      	ldr	r3, [pc, #28]	; (800630c <prvCheckForValidListAndQueue+0x60>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <prvCheckForValidListAndQueue+0x60>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	490b      	ldr	r1, [pc, #44]	; (8006328 <prvCheckForValidListAndQueue+0x7c>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fd42 	bl	8004d84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006300:	f000 f970 	bl	80065e4 <vPortExitCritical>
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000f48 	.word	0x20000f48
 8006310:	20000f18 	.word	0x20000f18
 8006314:	20000f2c 	.word	0x20000f2c
 8006318:	20000f40 	.word	0x20000f40
 800631c:	20000f44 	.word	0x20000f44
 8006320:	20000ff4 	.word	0x20000ff4
 8006324:	20000f54 	.word	0x20000f54
 8006328:	08007b1c 	.word	0x08007b1c

0800632c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3b04      	subs	r3, #4
 800633c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3b04      	subs	r3, #4
 800634a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f023 0201 	bic.w	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3b04      	subs	r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800635c:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <pxPortInitialiseStack+0x64>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3b14      	subs	r3, #20
 8006366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b04      	subs	r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f06f 0202 	mvn.w	r2, #2
 800637a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3b20      	subs	r3, #32
 8006380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	08006395 	.word	0x08006395

08006394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <prvTaskExitError+0x54>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d00a      	beq.n	80063be <prvTaskExitError+0x2a>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	60fb      	str	r3, [r7, #12]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <prvTaskExitError+0x28>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	60bb      	str	r3, [r7, #8]
}
 80063d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063d2:	bf00      	nop
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0fc      	beq.n	80063d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	2000000c 	.word	0x2000000c
 80063ec:	00000000 	.word	0x00000000

080063f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <pxCurrentTCBConst2>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	f380 8809 	msr	PSP, r0
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8811 	msr	BASEPRI, r0
 800640a:	4770      	bx	lr
 800640c:	f3af 8000 	nop.w

08006410 <pxCurrentTCBConst2>:
 8006410:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006418:	4808      	ldr	r0, [pc, #32]	; (800643c <prvPortStartFirstTask+0x24>)
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f380 8808 	msr	MSP, r0
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8814 	msr	CONTROL, r0
 800642a:	b662      	cpsie	i
 800642c:	b661      	cpsie	f
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	df00      	svc	0
 8006438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800643a:	bf00      	nop
 800643c:	e000ed08 	.word	0xe000ed08

08006440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006446:	4b46      	ldr	r3, [pc, #280]	; (8006560 <xPortStartScheduler+0x120>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a46      	ldr	r2, [pc, #280]	; (8006564 <xPortStartScheduler+0x124>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10a      	bne.n	8006466 <xPortStartScheduler+0x26>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	613b      	str	r3, [r7, #16]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006466:	4b3e      	ldr	r3, [pc, #248]	; (8006560 <xPortStartScheduler+0x120>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3f      	ldr	r2, [pc, #252]	; (8006568 <xPortStartScheduler+0x128>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10a      	bne.n	8006486 <xPortStartScheduler+0x46>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	60fb      	str	r3, [r7, #12]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006486:	4b39      	ldr	r3, [pc, #228]	; (800656c <xPortStartScheduler+0x12c>)
 8006488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4b31      	ldr	r3, [pc, #196]	; (8006570 <xPortStartScheduler+0x130>)
 80064ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ae:	4b31      	ldr	r3, [pc, #196]	; (8006574 <xPortStartScheduler+0x134>)
 80064b0:	2207      	movs	r2, #7
 80064b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064b4:	e009      	b.n	80064ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <xPortStartScheduler+0x134>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	4a2d      	ldr	r2, [pc, #180]	; (8006574 <xPortStartScheduler+0x134>)
 80064be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b80      	cmp	r3, #128	; 0x80
 80064d4:	d0ef      	beq.n	80064b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <xPortStartScheduler+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1c3 0307 	rsb	r3, r3, #7
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d00a      	beq.n	80064f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60bb      	str	r3, [r7, #8]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064f8:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <xPortStartScheduler+0x134>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <xPortStartScheduler+0x134>)
 8006500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006502:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <xPortStartScheduler+0x134>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800650a:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <xPortStartScheduler+0x134>)
 800650c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006516:	4b18      	ldr	r3, [pc, #96]	; (8006578 <xPortStartScheduler+0x138>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <xPortStartScheduler+0x138>)
 800651c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <xPortStartScheduler+0x138>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a14      	ldr	r2, [pc, #80]	; (8006578 <xPortStartScheduler+0x138>)
 8006528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800652c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800652e:	f000 f8dd 	bl	80066ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <xPortStartScheduler+0x13c>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006538:	f000 f8fc 	bl	8006734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <xPortStartScheduler+0x140>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a0f      	ldr	r2, [pc, #60]	; (8006580 <xPortStartScheduler+0x140>)
 8006542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006548:	f7ff ff66 	bl	8006418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800654c:	f7ff f84a 	bl	80055e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006550:	f7ff ff20 	bl	8006394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	e000ed00 	.word	0xe000ed00
 8006564:	410fc271 	.word	0x410fc271
 8006568:	410fc270 	.word	0x410fc270
 800656c:	e000e400 	.word	0xe000e400
 8006570:	20001044 	.word	0x20001044
 8006574:	20001048 	.word	0x20001048
 8006578:	e000ed20 	.word	0xe000ed20
 800657c:	2000000c 	.word	0x2000000c
 8006580:	e000ef34 	.word	0xe000ef34

08006584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	607b      	str	r3, [r7, #4]
}
 800659c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <vPortEnterCritical+0x58>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	4a0d      	ldr	r2, [pc, #52]	; (80065dc <vPortEnterCritical+0x58>)
 80065a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <vPortEnterCritical+0x58>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d10f      	bne.n	80065d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortEnterCritical+0x5c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	603b      	str	r3, [r7, #0]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <vPortEnterCritical+0x4a>
	}
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	2000000c 	.word	0x2000000c
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ea:	4b12      	ldr	r3, [pc, #72]	; (8006634 <vPortExitCritical+0x50>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <vPortExitCritical+0x24>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	607b      	str	r3, [r7, #4]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <vPortExitCritical+0x50>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <vPortExitCritical+0x50>)
 8006610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <vPortExitCritical+0x50>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <vPortExitCritical+0x42>
 800661a:	2300      	movs	r3, #0
 800661c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f383 8811 	msr	BASEPRI, r3
}
 8006624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c
	...

08006640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006640:	f3ef 8009 	mrs	r0, PSP
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <pxCurrentTCBConst>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f01e 0f10 	tst.w	lr, #16
 8006650:	bf08      	it	eq
 8006652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	6010      	str	r0, [r2, #0]
 800665c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006664:	f380 8811 	msr	BASEPRI, r0
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f7fe ffb8 	bl	80055e4 <vTaskSwitchContext>
 8006674:	f04f 0000 	mov.w	r0, #0
 8006678:	f380 8811 	msr	BASEPRI, r0
 800667c:	bc09      	pop	{r0, r3}
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	6808      	ldr	r0, [r1, #0]
 8006682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006686:	f01e 0f10 	tst.w	lr, #16
 800668a:	bf08      	it	eq
 800668c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006690:	f380 8809 	msr	PSP, r0
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst>:
 80066a0:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
}
 80066c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066c2:	f7fe fed5 	bl	8005470 <xTaskIncrementTick>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <xPortSysTickHandler+0x40>)
 80066ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	2300      	movs	r3, #0
 80066d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortSetupTimerInterrupt+0x34>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <vPortSetupTimerInterrupt+0x38>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <vPortSetupTimerInterrupt+0x3c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <vPortSetupTimerInterrupt+0x40>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	099b      	lsrs	r3, r3, #6
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <vPortSetupTimerInterrupt+0x44>)
 800670a:	3b01      	subs	r3, #1
 800670c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <vPortSetupTimerInterrupt+0x34>)
 8006710:	2207      	movs	r2, #7
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	e000e010 	.word	0xe000e010
 8006724:	e000e018 	.word	0xe000e018
 8006728:	20000000 	.word	0x20000000
 800672c:	10624dd3 	.word	0x10624dd3
 8006730:	e000e014 	.word	0xe000e014

08006734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006744 <vPortEnableVFP+0x10>
 8006738:	6801      	ldr	r1, [r0, #0]
 800673a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800673e:	6001      	str	r1, [r0, #0]
 8006740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006742:	bf00      	nop
 8006744:	e000ed88 	.word	0xe000ed88

08006748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b0f      	cmp	r3, #15
 8006758:	d914      	bls.n	8006784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <vPortValidateInterruptPriority+0x70>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <vPortValidateInterruptPriority+0x74>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	7afa      	ldrb	r2, [r7, #11]
 800676a:	429a      	cmp	r2, r3
 800676c:	d20a      	bcs.n	8006784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	607b      	str	r3, [r7, #4]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006784:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <vPortValidateInterruptPriority+0x78>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <vPortValidateInterruptPriority+0x7c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d90a      	bls.n	80067aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	603b      	str	r3, [r7, #0]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <vPortValidateInterruptPriority+0x60>
	}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	e000e3f0 	.word	0xe000e3f0
 80067bc:	20001044 	.word	0x20001044
 80067c0:	e000ed0c 	.word	0xe000ed0c
 80067c4:	20001048 	.word	0x20001048

080067c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	; 0x28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067d4:	f7fe fd90 	bl	80052f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067d8:	4b5b      	ldr	r3, [pc, #364]	; (8006948 <pvPortMalloc+0x180>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067e0:	f000 f920 	bl	8006a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067e4:	4b59      	ldr	r3, [pc, #356]	; (800694c <pvPortMalloc+0x184>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4013      	ands	r3, r2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 8093 	bne.w	8006918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01d      	beq.n	8006834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067f8:	2208      	movs	r2, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d014      	beq.n	8006834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	3308      	adds	r3, #8
 8006812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <pvPortMalloc+0x6c>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	617b      	str	r3, [r7, #20]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d06e      	beq.n	8006918 <pvPortMalloc+0x150>
 800683a:	4b45      	ldr	r3, [pc, #276]	; (8006950 <pvPortMalloc+0x188>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d869      	bhi.n	8006918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006844:	4b43      	ldr	r3, [pc, #268]	; (8006954 <pvPortMalloc+0x18c>)
 8006846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006848:	4b42      	ldr	r3, [pc, #264]	; (8006954 <pvPortMalloc+0x18c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684e:	e004      	b.n	800685a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d903      	bls.n	800686c <pvPortMalloc+0xa4>
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f1      	bne.n	8006850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800686c:	4b36      	ldr	r3, [pc, #216]	; (8006948 <pvPortMalloc+0x180>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	429a      	cmp	r2, r3
 8006874:	d050      	beq.n	8006918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2208      	movs	r2, #8
 800687c:	4413      	add	r3, r2
 800687e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	2308      	movs	r3, #8
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d91f      	bls.n	80068d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <pvPortMalloc+0xf8>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	613b      	str	r3, [r7, #16]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1ad2      	subs	r2, r2, r3
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068d2:	69b8      	ldr	r0, [r7, #24]
 80068d4:	f000 f908 	bl	8006ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <pvPortMalloc+0x188>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <pvPortMalloc+0x188>)
 80068e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <pvPortMalloc+0x188>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <pvPortMalloc+0x190>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d203      	bcs.n	80068fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068f2:	4b17      	ldr	r3, [pc, #92]	; (8006950 <pvPortMalloc+0x188>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <pvPortMalloc+0x190>)
 80068f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <pvPortMalloc+0x184>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	431a      	orrs	r2, r3
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <pvPortMalloc+0x194>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a11      	ldr	r2, [pc, #68]	; (800695c <pvPortMalloc+0x194>)
 8006916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006918:	f7fe fcfc 	bl	8005314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <pvPortMalloc+0x174>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60fb      	str	r3, [r7, #12]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <pvPortMalloc+0x172>
	return pvReturn;
 800693c:	69fb      	ldr	r3, [r7, #28]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3728      	adds	r7, #40	; 0x28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20003764 	.word	0x20003764
 800694c:	20003778 	.word	0x20003778
 8006950:	20003768 	.word	0x20003768
 8006954:	2000375c 	.word	0x2000375c
 8006958:	2000376c 	.word	0x2000376c
 800695c:	20003770 	.word	0x20003770

08006960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04d      	beq.n	8006a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006972:	2308      	movs	r3, #8
 8006974:	425b      	negs	r3, r3
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <vPortFree+0xb8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4013      	ands	r3, r2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <vPortFree+0x44>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60fb      	str	r3, [r7, #12]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <vPortFree+0x62>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60bb      	str	r3, [r7, #8]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <vPortFree+0xb8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01e      	beq.n	8006a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <vPortFree+0xb8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069e8:	f7fe fc86 	bl	80052f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <vPortFree+0xbc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <vPortFree+0xbc>)
 80069f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f000 f874 	bl	8006ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <vPortFree+0xc0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <vPortFree+0xc0>)
 8006a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a0a:	f7fe fc83 	bl	8005314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20003778 	.word	0x20003778
 8006a1c:	20003768 	.word	0x20003768
 8006a20:	20003774 	.word	0x20003774

08006a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a2a:	f242 7310 	movw	r3, #10000	; 0x2710
 8006a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <prvHeapInit+0xac>)
 8006a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3307      	adds	r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0307 	bic.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <prvHeapInit+0xac>)
 8006a54:	4413      	add	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <prvHeapInit+0xb0>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a62:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <prvHeapInit+0xb0>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a70:	2208      	movs	r2, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvHeapInit+0xb4>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <prvHeapInit+0xb8>)
 8006ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <prvHeapInit+0xbc>)
 8006aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <prvHeapInit+0xc0>)
 8006abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	2000104c 	.word	0x2000104c
 8006ad4:	2000375c 	.word	0x2000375c
 8006ad8:	20003764 	.word	0x20003764
 8006adc:	2000376c 	.word	0x2000376c
 8006ae0:	20003768 	.word	0x20003768
 8006ae4:	20003778 	.word	0x20003778

08006ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <prvInsertBlockIntoFreeList+0xac>)
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e002      	b.n	8006afc <prvInsertBlockIntoFreeList+0x14>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d8f7      	bhi.n	8006af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d108      	bne.n	8006b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	441a      	add	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d118      	bne.n	8006b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <prvInsertBlockIntoFreeList+0xb0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d00d      	beq.n	8006b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	441a      	add	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e008      	b.n	8006b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <prvInsertBlockIntoFreeList+0xb0>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e003      	b.n	8006b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d002      	beq.n	8006b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000375c 	.word	0x2000375c
 8006b98:	20003764 	.word	0x20003764

08006b9c <std>:
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006baa:	6083      	str	r3, [r0, #8]
 8006bac:	8181      	strh	r1, [r0, #12]
 8006bae:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb0:	81c2      	strh	r2, [r0, #14]
 8006bb2:	6183      	str	r3, [r0, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	305c      	adds	r0, #92	; 0x5c
 8006bba:	f000 f8f4 	bl	8006da6 <memset>
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <std+0x38>)
 8006bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <std+0x3c>)
 8006bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <std+0x40>)
 8006bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <std+0x44>)
 8006bcc:	6224      	str	r4, [r4, #32]
 8006bce:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08006d21 	.word	0x08006d21
 8006bd8:	08006d43 	.word	0x08006d43
 8006bdc:	08006d7b 	.word	0x08006d7b
 8006be0:	08006d9f 	.word	0x08006d9f

08006be4 <stdio_exit_handler>:
 8006be4:	4a02      	ldr	r2, [pc, #8]	; (8006bf0 <stdio_exit_handler+0xc>)
 8006be6:	4903      	ldr	r1, [pc, #12]	; (8006bf4 <stdio_exit_handler+0x10>)
 8006be8:	4803      	ldr	r0, [pc, #12]	; (8006bf8 <stdio_exit_handler+0x14>)
 8006bea:	f000 b869 	b.w	8006cc0 <_fwalk_sglue>
 8006bee:	bf00      	nop
 8006bf0:	20000010 	.word	0x20000010
 8006bf4:	08007809 	.word	0x08007809
 8006bf8:	2000001c 	.word	0x2000001c

08006bfc <cleanup_stdio>:
 8006bfc:	6841      	ldr	r1, [r0, #4]
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <cleanup_stdio+0x34>)
 8006c00:	4299      	cmp	r1, r3
 8006c02:	b510      	push	{r4, lr}
 8006c04:	4604      	mov	r4, r0
 8006c06:	d001      	beq.n	8006c0c <cleanup_stdio+0x10>
 8006c08:	f000 fdfe 	bl	8007808 <_fflush_r>
 8006c0c:	68a1      	ldr	r1, [r4, #8]
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <cleanup_stdio+0x38>)
 8006c10:	4299      	cmp	r1, r3
 8006c12:	d002      	beq.n	8006c1a <cleanup_stdio+0x1e>
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fdf7 	bl	8007808 <_fflush_r>
 8006c1a:	68e1      	ldr	r1, [r4, #12]
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <cleanup_stdio+0x3c>)
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	d004      	beq.n	8006c2c <cleanup_stdio+0x30>
 8006c22:	4620      	mov	r0, r4
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f000 bdee 	b.w	8007808 <_fflush_r>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000377c 	.word	0x2000377c
 8006c34:	200037e4 	.word	0x200037e4
 8006c38:	2000384c 	.word	0x2000384c

08006c3c <global_stdio_init.part.0>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <global_stdio_init.part.0+0x30>)
 8006c40:	4c0b      	ldr	r4, [pc, #44]	; (8006c70 <global_stdio_init.part.0+0x34>)
 8006c42:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <global_stdio_init.part.0+0x38>)
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	4620      	mov	r0, r4
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2104      	movs	r1, #4
 8006c4c:	f7ff ffa6 	bl	8006b9c <std>
 8006c50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c54:	2201      	movs	r2, #1
 8006c56:	2109      	movs	r1, #9
 8006c58:	f7ff ffa0 	bl	8006b9c <std>
 8006c5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c60:	2202      	movs	r2, #2
 8006c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c66:	2112      	movs	r1, #18
 8006c68:	f7ff bf98 	b.w	8006b9c <std>
 8006c6c:	200038b4 	.word	0x200038b4
 8006c70:	2000377c 	.word	0x2000377c
 8006c74:	08006be5 	.word	0x08006be5

08006c78 <__sfp_lock_acquire>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__sfp_lock_acquire+0x8>)
 8006c7a:	f000 b963 	b.w	8006f44 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	200038bd 	.word	0x200038bd

08006c84 <__sfp_lock_release>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sfp_lock_release+0x8>)
 8006c86:	f000 b95e 	b.w	8006f46 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	200038bd 	.word	0x200038bd

08006c90 <__sinit>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	f7ff fff0 	bl	8006c78 <__sfp_lock_acquire>
 8006c98:	6a23      	ldr	r3, [r4, #32]
 8006c9a:	b11b      	cbz	r3, 8006ca4 <__sinit+0x14>
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	f7ff bff0 	b.w	8006c84 <__sfp_lock_release>
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <__sinit+0x28>)
 8006ca6:	6223      	str	r3, [r4, #32]
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <__sinit+0x2c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f5      	bne.n	8006c9c <__sinit+0xc>
 8006cb0:	f7ff ffc4 	bl	8006c3c <global_stdio_init.part.0>
 8006cb4:	e7f2      	b.n	8006c9c <__sinit+0xc>
 8006cb6:	bf00      	nop
 8006cb8:	08006bfd 	.word	0x08006bfd
 8006cbc:	200038b4 	.word	0x200038b4

08006cc0 <_fwalk_sglue>:
 8006cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	4688      	mov	r8, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	2600      	movs	r6, #0
 8006ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006cd4:	d505      	bpl.n	8006ce2 <_fwalk_sglue+0x22>
 8006cd6:	6824      	ldr	r4, [r4, #0]
 8006cd8:	2c00      	cmp	r4, #0
 8006cda:	d1f7      	bne.n	8006ccc <_fwalk_sglue+0xc>
 8006cdc:	4630      	mov	r0, r6
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d907      	bls.n	8006cf8 <_fwalk_sglue+0x38>
 8006ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cec:	3301      	adds	r3, #1
 8006cee:	d003      	beq.n	8006cf8 <_fwalk_sglue+0x38>
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	47c0      	blx	r8
 8006cf6:	4306      	orrs	r6, r0
 8006cf8:	3568      	adds	r5, #104	; 0x68
 8006cfa:	e7e9      	b.n	8006cd0 <_fwalk_sglue+0x10>

08006cfc <iprintf>:
 8006cfc:	b40f      	push	{r0, r1, r2, r3}
 8006cfe:	b507      	push	{r0, r1, r2, lr}
 8006d00:	4906      	ldr	r1, [pc, #24]	; (8006d1c <iprintf+0x20>)
 8006d02:	ab04      	add	r3, sp, #16
 8006d04:	6808      	ldr	r0, [r1, #0]
 8006d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0a:	6881      	ldr	r1, [r0, #8]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	f000 fa4b 	bl	80071a8 <_vfiprintf_r>
 8006d12:	b003      	add	sp, #12
 8006d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d18:	b004      	add	sp, #16
 8006d1a:	4770      	bx	lr
 8006d1c:	20000068 	.word	0x20000068

08006d20 <__sread>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	460c      	mov	r4, r1
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	f000 f8be 	bl	8006ea8 <_read_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	bfab      	itete	ge
 8006d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d32:	89a3      	ldrhlt	r3, [r4, #12]
 8006d34:	181b      	addge	r3, r3, r0
 8006d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d3a:	bfac      	ite	ge
 8006d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d3e:	81a3      	strhlt	r3, [r4, #12]
 8006d40:	bd10      	pop	{r4, pc}

08006d42 <__swrite>:
 8006d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	461f      	mov	r7, r3
 8006d48:	898b      	ldrh	r3, [r1, #12]
 8006d4a:	05db      	lsls	r3, r3, #23
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4616      	mov	r6, r2
 8006d52:	d505      	bpl.n	8006d60 <__swrite+0x1e>
 8006d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f000 f892 	bl	8006e84 <_lseek_r>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	463b      	mov	r3, r7
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d76:	f000 b8a9 	b.w	8006ecc <_write_r>

08006d7a <__sseek>:
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d82:	f000 f87f 	bl	8006e84 <_lseek_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	bf15      	itete	ne
 8006d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d96:	81a3      	strheq	r3, [r4, #12]
 8006d98:	bf18      	it	ne
 8006d9a:	81a3      	strhne	r3, [r4, #12]
 8006d9c:	bd10      	pop	{r4, pc}

08006d9e <__sclose>:
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 b809 	b.w	8006db8 <_close_r>

08006da6 <memset>:
 8006da6:	4402      	add	r2, r0
 8006da8:	4603      	mov	r3, r0
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d100      	bne.n	8006db0 <memset+0xa>
 8006dae:	4770      	bx	lr
 8006db0:	f803 1b01 	strb.w	r1, [r3], #1
 8006db4:	e7f9      	b.n	8006daa <memset+0x4>
	...

08006db8 <_close_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d06      	ldr	r5, [pc, #24]	; (8006dd4 <_close_r+0x1c>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fa f95d 	bl	8001082 <_close>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_close_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_close_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	200038b8 	.word	0x200038b8

08006dd8 <_reclaim_reent>:
 8006dd8:	4b29      	ldr	r3, [pc, #164]	; (8006e80 <_reclaim_reent+0xa8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4283      	cmp	r3, r0
 8006dde:	b570      	push	{r4, r5, r6, lr}
 8006de0:	4604      	mov	r4, r0
 8006de2:	d04b      	beq.n	8006e7c <_reclaim_reent+0xa4>
 8006de4:	69c3      	ldr	r3, [r0, #28]
 8006de6:	b143      	cbz	r3, 8006dfa <_reclaim_reent+0x22>
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d144      	bne.n	8006e78 <_reclaim_reent+0xa0>
 8006dee:	69e3      	ldr	r3, [r4, #28]
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x22>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f8b5 	bl	8006f64 <_free_r>
 8006dfa:	6961      	ldr	r1, [r4, #20]
 8006dfc:	b111      	cbz	r1, 8006e04 <_reclaim_reent+0x2c>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f8b0 	bl	8006f64 <_free_r>
 8006e04:	69e1      	ldr	r1, [r4, #28]
 8006e06:	b111      	cbz	r1, 8006e0e <_reclaim_reent+0x36>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f8ab 	bl	8006f64 <_free_r>
 8006e0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e10:	b111      	cbz	r1, 8006e18 <_reclaim_reent+0x40>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f8a6 	bl	8006f64 <_free_r>
 8006e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e1a:	b111      	cbz	r1, 8006e22 <_reclaim_reent+0x4a>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f8a1 	bl	8006f64 <_free_r>
 8006e22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e24:	b111      	cbz	r1, 8006e2c <_reclaim_reent+0x54>
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f89c 	bl	8006f64 <_free_r>
 8006e2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e2e:	b111      	cbz	r1, 8006e36 <_reclaim_reent+0x5e>
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 f897 	bl	8006f64 <_free_r>
 8006e36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e38:	b111      	cbz	r1, 8006e40 <_reclaim_reent+0x68>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 f892 	bl	8006f64 <_free_r>
 8006e40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e42:	b111      	cbz	r1, 8006e4a <_reclaim_reent+0x72>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 f88d 	bl	8006f64 <_free_r>
 8006e4a:	6a23      	ldr	r3, [r4, #32]
 8006e4c:	b1b3      	cbz	r3, 8006e7c <_reclaim_reent+0xa4>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e54:	4718      	bx	r3
 8006e56:	5949      	ldr	r1, [r1, r5]
 8006e58:	b941      	cbnz	r1, 8006e6c <_reclaim_reent+0x94>
 8006e5a:	3504      	adds	r5, #4
 8006e5c:	69e3      	ldr	r3, [r4, #28]
 8006e5e:	2d80      	cmp	r5, #128	; 0x80
 8006e60:	68d9      	ldr	r1, [r3, #12]
 8006e62:	d1f8      	bne.n	8006e56 <_reclaim_reent+0x7e>
 8006e64:	4620      	mov	r0, r4
 8006e66:	f000 f87d 	bl	8006f64 <_free_r>
 8006e6a:	e7c0      	b.n	8006dee <_reclaim_reent+0x16>
 8006e6c:	680e      	ldr	r6, [r1, #0]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 f878 	bl	8006f64 <_free_r>
 8006e74:	4631      	mov	r1, r6
 8006e76:	e7ef      	b.n	8006e58 <_reclaim_reent+0x80>
 8006e78:	2500      	movs	r5, #0
 8006e7a:	e7ef      	b.n	8006e5c <_reclaim_reent+0x84>
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000068 	.word	0x20000068

08006e84 <_lseek_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d07      	ldr	r5, [pc, #28]	; (8006ea4 <_lseek_r+0x20>)
 8006e88:	4604      	mov	r4, r0
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	602a      	str	r2, [r5, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f7fa f91c 	bl	80010d0 <_lseek>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_lseek_r+0x1e>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_lseek_r+0x1e>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	200038b8 	.word	0x200038b8

08006ea8 <_read_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	; (8006ec8 <_read_r+0x20>)
 8006eac:	4604      	mov	r4, r0
 8006eae:	4608      	mov	r0, r1
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f7fa f8aa 	bl	8001010 <_read>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_read_r+0x1e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_read_r+0x1e>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	200038b8 	.word	0x200038b8

08006ecc <_write_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d07      	ldr	r5, [pc, #28]	; (8006eec <_write_r+0x20>)
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	602a      	str	r2, [r5, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f7fa f8b5 	bl	800104a <_write>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_write_r+0x1e>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_write_r+0x1e>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	200038b8 	.word	0x200038b8

08006ef0 <__errno>:
 8006ef0:	4b01      	ldr	r3, [pc, #4]	; (8006ef8 <__errno+0x8>)
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000068 	.word	0x20000068

08006efc <__libc_init_array>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	4d0d      	ldr	r5, [pc, #52]	; (8006f34 <__libc_init_array+0x38>)
 8006f00:	4c0d      	ldr	r4, [pc, #52]	; (8006f38 <__libc_init_array+0x3c>)
 8006f02:	1b64      	subs	r4, r4, r5
 8006f04:	10a4      	asrs	r4, r4, #2
 8006f06:	2600      	movs	r6, #0
 8006f08:	42a6      	cmp	r6, r4
 8006f0a:	d109      	bne.n	8006f20 <__libc_init_array+0x24>
 8006f0c:	4d0b      	ldr	r5, [pc, #44]	; (8006f3c <__libc_init_array+0x40>)
 8006f0e:	4c0c      	ldr	r4, [pc, #48]	; (8006f40 <__libc_init_array+0x44>)
 8006f10:	f000 fdcc 	bl	8007aac <_init>
 8006f14:	1b64      	subs	r4, r4, r5
 8006f16:	10a4      	asrs	r4, r4, #2
 8006f18:	2600      	movs	r6, #0
 8006f1a:	42a6      	cmp	r6, r4
 8006f1c:	d105      	bne.n	8006f2a <__libc_init_array+0x2e>
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f24:	4798      	blx	r3
 8006f26:	3601      	adds	r6, #1
 8006f28:	e7ee      	b.n	8006f08 <__libc_init_array+0xc>
 8006f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2e:	4798      	blx	r3
 8006f30:	3601      	adds	r6, #1
 8006f32:	e7f2      	b.n	8006f1a <__libc_init_array+0x1e>
 8006f34:	08007bd0 	.word	0x08007bd0
 8006f38:	08007bd0 	.word	0x08007bd0
 8006f3c:	08007bd0 	.word	0x08007bd0
 8006f40:	08007bd4 	.word	0x08007bd4

08006f44 <__retarget_lock_acquire_recursive>:
 8006f44:	4770      	bx	lr

08006f46 <__retarget_lock_release_recursive>:
 8006f46:	4770      	bx	lr

08006f48 <memcpy>:
 8006f48:	440a      	add	r2, r1
 8006f4a:	4291      	cmp	r1, r2
 8006f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f50:	d100      	bne.n	8006f54 <memcpy+0xc>
 8006f52:	4770      	bx	lr
 8006f54:	b510      	push	{r4, lr}
 8006f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5e:	4291      	cmp	r1, r2
 8006f60:	d1f9      	bne.n	8006f56 <memcpy+0xe>
 8006f62:	bd10      	pop	{r4, pc}

08006f64 <_free_r>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d044      	beq.n	8006ff4 <_free_r+0x90>
 8006f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6e:	9001      	str	r0, [sp, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f1a1 0404 	sub.w	r4, r1, #4
 8006f76:	bfb8      	it	lt
 8006f78:	18e4      	addlt	r4, r4, r3
 8006f7a:	f000 f8df 	bl	800713c <__malloc_lock>
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <_free_r+0x94>)
 8006f80:	9801      	ldr	r0, [sp, #4]
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	b933      	cbnz	r3, 8006f94 <_free_r+0x30>
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	b003      	add	sp, #12
 8006f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f90:	f000 b8da 	b.w	8007148 <__malloc_unlock>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d908      	bls.n	8006faa <_free_r+0x46>
 8006f98:	6825      	ldr	r5, [r4, #0]
 8006f9a:	1961      	adds	r1, r4, r5
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	1949      	addeq	r1, r1, r5
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	e7ed      	b.n	8006f86 <_free_r+0x22>
 8006faa:	461a      	mov	r2, r3
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	b10b      	cbz	r3, 8006fb4 <_free_r+0x50>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d9fa      	bls.n	8006faa <_free_r+0x46>
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	1855      	adds	r5, r2, r1
 8006fb8:	42a5      	cmp	r5, r4
 8006fba:	d10b      	bne.n	8006fd4 <_free_r+0x70>
 8006fbc:	6824      	ldr	r4, [r4, #0]
 8006fbe:	4421      	add	r1, r4
 8006fc0:	1854      	adds	r4, r2, r1
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	d1e0      	bne.n	8006f8a <_free_r+0x26>
 8006fc8:	681c      	ldr	r4, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	6053      	str	r3, [r2, #4]
 8006fce:	440c      	add	r4, r1
 8006fd0:	6014      	str	r4, [r2, #0]
 8006fd2:	e7da      	b.n	8006f8a <_free_r+0x26>
 8006fd4:	d902      	bls.n	8006fdc <_free_r+0x78>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	e7d6      	b.n	8006f8a <_free_r+0x26>
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	1961      	adds	r1, r4, r5
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf04      	itt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	6063      	str	r3, [r4, #4]
 8006fea:	bf04      	itt	eq
 8006fec:	1949      	addeq	r1, r1, r5
 8006fee:	6021      	streq	r1, [r4, #0]
 8006ff0:	6054      	str	r4, [r2, #4]
 8006ff2:	e7ca      	b.n	8006f8a <_free_r+0x26>
 8006ff4:	b003      	add	sp, #12
 8006ff6:	bd30      	pop	{r4, r5, pc}
 8006ff8:	200038c0 	.word	0x200038c0

08006ffc <sbrk_aligned>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4e0e      	ldr	r6, [pc, #56]	; (8007038 <sbrk_aligned+0x3c>)
 8007000:	460c      	mov	r4, r1
 8007002:	6831      	ldr	r1, [r6, #0]
 8007004:	4605      	mov	r5, r0
 8007006:	b911      	cbnz	r1, 800700e <sbrk_aligned+0x12>
 8007008:	f000 fcbc 	bl	8007984 <_sbrk_r>
 800700c:	6030      	str	r0, [r6, #0]
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 fcb7 	bl	8007984 <_sbrk_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d00a      	beq.n	8007030 <sbrk_aligned+0x34>
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d007      	beq.n	8007034 <sbrk_aligned+0x38>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fcac 	bl	8007984 <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d101      	bne.n	8007034 <sbrk_aligned+0x38>
 8007030:	f04f 34ff 	mov.w	r4, #4294967295
 8007034:	4620      	mov	r0, r4
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	200038c4 	.word	0x200038c4

0800703c <_malloc_r>:
 800703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007040:	1ccd      	adds	r5, r1, #3
 8007042:	f025 0503 	bic.w	r5, r5, #3
 8007046:	3508      	adds	r5, #8
 8007048:	2d0c      	cmp	r5, #12
 800704a:	bf38      	it	cc
 800704c:	250c      	movcc	r5, #12
 800704e:	2d00      	cmp	r5, #0
 8007050:	4607      	mov	r7, r0
 8007052:	db01      	blt.n	8007058 <_malloc_r+0x1c>
 8007054:	42a9      	cmp	r1, r5
 8007056:	d905      	bls.n	8007064 <_malloc_r+0x28>
 8007058:	230c      	movs	r3, #12
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	2600      	movs	r6, #0
 800705e:	4630      	mov	r0, r6
 8007060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007064:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007138 <_malloc_r+0xfc>
 8007068:	f000 f868 	bl	800713c <__malloc_lock>
 800706c:	f8d8 3000 	ldr.w	r3, [r8]
 8007070:	461c      	mov	r4, r3
 8007072:	bb5c      	cbnz	r4, 80070cc <_malloc_r+0x90>
 8007074:	4629      	mov	r1, r5
 8007076:	4638      	mov	r0, r7
 8007078:	f7ff ffc0 	bl	8006ffc <sbrk_aligned>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	4604      	mov	r4, r0
 8007080:	d155      	bne.n	800712e <_malloc_r+0xf2>
 8007082:	f8d8 4000 	ldr.w	r4, [r8]
 8007086:	4626      	mov	r6, r4
 8007088:	2e00      	cmp	r6, #0
 800708a:	d145      	bne.n	8007118 <_malloc_r+0xdc>
 800708c:	2c00      	cmp	r4, #0
 800708e:	d048      	beq.n	8007122 <_malloc_r+0xe6>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	4631      	mov	r1, r6
 8007094:	4638      	mov	r0, r7
 8007096:	eb04 0903 	add.w	r9, r4, r3
 800709a:	f000 fc73 	bl	8007984 <_sbrk_r>
 800709e:	4581      	cmp	r9, r0
 80070a0:	d13f      	bne.n	8007122 <_malloc_r+0xe6>
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	1a6d      	subs	r5, r5, r1
 80070a6:	4629      	mov	r1, r5
 80070a8:	4638      	mov	r0, r7
 80070aa:	f7ff ffa7 	bl	8006ffc <sbrk_aligned>
 80070ae:	3001      	adds	r0, #1
 80070b0:	d037      	beq.n	8007122 <_malloc_r+0xe6>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	442b      	add	r3, r5
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	f8d8 3000 	ldr.w	r3, [r8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d038      	beq.n	8007132 <_malloc_r+0xf6>
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	42a2      	cmp	r2, r4
 80070c4:	d12b      	bne.n	800711e <_malloc_r+0xe2>
 80070c6:	2200      	movs	r2, #0
 80070c8:	605a      	str	r2, [r3, #4]
 80070ca:	e00f      	b.n	80070ec <_malloc_r+0xb0>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	1b52      	subs	r2, r2, r5
 80070d0:	d41f      	bmi.n	8007112 <_malloc_r+0xd6>
 80070d2:	2a0b      	cmp	r2, #11
 80070d4:	d917      	bls.n	8007106 <_malloc_r+0xca>
 80070d6:	1961      	adds	r1, r4, r5
 80070d8:	42a3      	cmp	r3, r4
 80070da:	6025      	str	r5, [r4, #0]
 80070dc:	bf18      	it	ne
 80070de:	6059      	strne	r1, [r3, #4]
 80070e0:	6863      	ldr	r3, [r4, #4]
 80070e2:	bf08      	it	eq
 80070e4:	f8c8 1000 	streq.w	r1, [r8]
 80070e8:	5162      	str	r2, [r4, r5]
 80070ea:	604b      	str	r3, [r1, #4]
 80070ec:	4638      	mov	r0, r7
 80070ee:	f104 060b 	add.w	r6, r4, #11
 80070f2:	f000 f829 	bl	8007148 <__malloc_unlock>
 80070f6:	f026 0607 	bic.w	r6, r6, #7
 80070fa:	1d23      	adds	r3, r4, #4
 80070fc:	1af2      	subs	r2, r6, r3
 80070fe:	d0ae      	beq.n	800705e <_malloc_r+0x22>
 8007100:	1b9b      	subs	r3, r3, r6
 8007102:	50a3      	str	r3, [r4, r2]
 8007104:	e7ab      	b.n	800705e <_malloc_r+0x22>
 8007106:	42a3      	cmp	r3, r4
 8007108:	6862      	ldr	r2, [r4, #4]
 800710a:	d1dd      	bne.n	80070c8 <_malloc_r+0x8c>
 800710c:	f8c8 2000 	str.w	r2, [r8]
 8007110:	e7ec      	b.n	80070ec <_malloc_r+0xb0>
 8007112:	4623      	mov	r3, r4
 8007114:	6864      	ldr	r4, [r4, #4]
 8007116:	e7ac      	b.n	8007072 <_malloc_r+0x36>
 8007118:	4634      	mov	r4, r6
 800711a:	6876      	ldr	r6, [r6, #4]
 800711c:	e7b4      	b.n	8007088 <_malloc_r+0x4c>
 800711e:	4613      	mov	r3, r2
 8007120:	e7cc      	b.n	80070bc <_malloc_r+0x80>
 8007122:	230c      	movs	r3, #12
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	4638      	mov	r0, r7
 8007128:	f000 f80e 	bl	8007148 <__malloc_unlock>
 800712c:	e797      	b.n	800705e <_malloc_r+0x22>
 800712e:	6025      	str	r5, [r4, #0]
 8007130:	e7dc      	b.n	80070ec <_malloc_r+0xb0>
 8007132:	605b      	str	r3, [r3, #4]
 8007134:	deff      	udf	#255	; 0xff
 8007136:	bf00      	nop
 8007138:	200038c0 	.word	0x200038c0

0800713c <__malloc_lock>:
 800713c:	4801      	ldr	r0, [pc, #4]	; (8007144 <__malloc_lock+0x8>)
 800713e:	f7ff bf01 	b.w	8006f44 <__retarget_lock_acquire_recursive>
 8007142:	bf00      	nop
 8007144:	200038bc 	.word	0x200038bc

08007148 <__malloc_unlock>:
 8007148:	4801      	ldr	r0, [pc, #4]	; (8007150 <__malloc_unlock+0x8>)
 800714a:	f7ff befc 	b.w	8006f46 <__retarget_lock_release_recursive>
 800714e:	bf00      	nop
 8007150:	200038bc 	.word	0x200038bc

08007154 <__sfputc_r>:
 8007154:	6893      	ldr	r3, [r2, #8]
 8007156:	3b01      	subs	r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	b410      	push	{r4}
 800715c:	6093      	str	r3, [r2, #8]
 800715e:	da08      	bge.n	8007172 <__sfputc_r+0x1e>
 8007160:	6994      	ldr	r4, [r2, #24]
 8007162:	42a3      	cmp	r3, r4
 8007164:	db01      	blt.n	800716a <__sfputc_r+0x16>
 8007166:	290a      	cmp	r1, #10
 8007168:	d103      	bne.n	8007172 <__sfputc_r+0x1e>
 800716a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800716e:	f000 bb73 	b.w	8007858 <__swbuf_r>
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	1c58      	adds	r0, r3, #1
 8007176:	6010      	str	r0, [r2, #0]
 8007178:	7019      	strb	r1, [r3, #0]
 800717a:	4608      	mov	r0, r1
 800717c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007180:	4770      	bx	lr

08007182 <__sfputs_r>:
 8007182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007184:	4606      	mov	r6, r0
 8007186:	460f      	mov	r7, r1
 8007188:	4614      	mov	r4, r2
 800718a:	18d5      	adds	r5, r2, r3
 800718c:	42ac      	cmp	r4, r5
 800718e:	d101      	bne.n	8007194 <__sfputs_r+0x12>
 8007190:	2000      	movs	r0, #0
 8007192:	e007      	b.n	80071a4 <__sfputs_r+0x22>
 8007194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007198:	463a      	mov	r2, r7
 800719a:	4630      	mov	r0, r6
 800719c:	f7ff ffda 	bl	8007154 <__sfputc_r>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d1f3      	bne.n	800718c <__sfputs_r+0xa>
 80071a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071a8 <_vfiprintf_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	460d      	mov	r5, r1
 80071ae:	b09d      	sub	sp, #116	; 0x74
 80071b0:	4614      	mov	r4, r2
 80071b2:	4698      	mov	r8, r3
 80071b4:	4606      	mov	r6, r0
 80071b6:	b118      	cbz	r0, 80071c0 <_vfiprintf_r+0x18>
 80071b8:	6a03      	ldr	r3, [r0, #32]
 80071ba:	b90b      	cbnz	r3, 80071c0 <_vfiprintf_r+0x18>
 80071bc:	f7ff fd68 	bl	8006c90 <__sinit>
 80071c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c2:	07d9      	lsls	r1, r3, #31
 80071c4:	d405      	bmi.n	80071d2 <_vfiprintf_r+0x2a>
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	059a      	lsls	r2, r3, #22
 80071ca:	d402      	bmi.n	80071d2 <_vfiprintf_r+0x2a>
 80071cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ce:	f7ff feb9 	bl	8006f44 <__retarget_lock_acquire_recursive>
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	071b      	lsls	r3, r3, #28
 80071d6:	d501      	bpl.n	80071dc <_vfiprintf_r+0x34>
 80071d8:	692b      	ldr	r3, [r5, #16]
 80071da:	b99b      	cbnz	r3, 8007204 <_vfiprintf_r+0x5c>
 80071dc:	4629      	mov	r1, r5
 80071de:	4630      	mov	r0, r6
 80071e0:	f000 fb78 	bl	80078d4 <__swsetup_r>
 80071e4:	b170      	cbz	r0, 8007204 <_vfiprintf_r+0x5c>
 80071e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e8:	07dc      	lsls	r4, r3, #31
 80071ea:	d504      	bpl.n	80071f6 <_vfiprintf_r+0x4e>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b01d      	add	sp, #116	; 0x74
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	0598      	lsls	r0, r3, #22
 80071fa:	d4f7      	bmi.n	80071ec <_vfiprintf_r+0x44>
 80071fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fe:	f7ff fea2 	bl	8006f46 <__retarget_lock_release_recursive>
 8007202:	e7f3      	b.n	80071ec <_vfiprintf_r+0x44>
 8007204:	2300      	movs	r3, #0
 8007206:	9309      	str	r3, [sp, #36]	; 0x24
 8007208:	2320      	movs	r3, #32
 800720a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073c8 <_vfiprintf_r+0x220>
 8007218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721c:	f04f 0901 	mov.w	r9, #1
 8007220:	4623      	mov	r3, r4
 8007222:	469a      	mov	sl, r3
 8007224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007228:	b10a      	cbz	r2, 800722e <_vfiprintf_r+0x86>
 800722a:	2a25      	cmp	r2, #37	; 0x25
 800722c:	d1f9      	bne.n	8007222 <_vfiprintf_r+0x7a>
 800722e:	ebba 0b04 	subs.w	fp, sl, r4
 8007232:	d00b      	beq.n	800724c <_vfiprintf_r+0xa4>
 8007234:	465b      	mov	r3, fp
 8007236:	4622      	mov	r2, r4
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ffa1 	bl	8007182 <__sfputs_r>
 8007240:	3001      	adds	r0, #1
 8007242:	f000 80a9 	beq.w	8007398 <_vfiprintf_r+0x1f0>
 8007246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007248:	445a      	add	r2, fp
 800724a:	9209      	str	r2, [sp, #36]	; 0x24
 800724c:	f89a 3000 	ldrb.w	r3, [sl]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80a1 	beq.w	8007398 <_vfiprintf_r+0x1f0>
 8007256:	2300      	movs	r3, #0
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007260:	f10a 0a01 	add.w	sl, sl, #1
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726c:	931a      	str	r3, [sp, #104]	; 0x68
 800726e:	4654      	mov	r4, sl
 8007270:	2205      	movs	r2, #5
 8007272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007276:	4854      	ldr	r0, [pc, #336]	; (80073c8 <_vfiprintf_r+0x220>)
 8007278:	f7f8 ffaa 	bl	80001d0 <memchr>
 800727c:	9a04      	ldr	r2, [sp, #16]
 800727e:	b9d8      	cbnz	r0, 80072b8 <_vfiprintf_r+0x110>
 8007280:	06d1      	lsls	r1, r2, #27
 8007282:	bf44      	itt	mi
 8007284:	2320      	movmi	r3, #32
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728a:	0713      	lsls	r3, r2, #28
 800728c:	bf44      	itt	mi
 800728e:	232b      	movmi	r3, #43	; 0x2b
 8007290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007294:	f89a 3000 	ldrb.w	r3, [sl]
 8007298:	2b2a      	cmp	r3, #42	; 0x2a
 800729a:	d015      	beq.n	80072c8 <_vfiprintf_r+0x120>
 800729c:	9a07      	ldr	r2, [sp, #28]
 800729e:	4654      	mov	r4, sl
 80072a0:	2000      	movs	r0, #0
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4621      	mov	r1, r4
 80072a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ac:	3b30      	subs	r3, #48	; 0x30
 80072ae:	2b09      	cmp	r3, #9
 80072b0:	d94d      	bls.n	800734e <_vfiprintf_r+0x1a6>
 80072b2:	b1b0      	cbz	r0, 80072e2 <_vfiprintf_r+0x13a>
 80072b4:	9207      	str	r2, [sp, #28]
 80072b6:	e014      	b.n	80072e2 <_vfiprintf_r+0x13a>
 80072b8:	eba0 0308 	sub.w	r3, r0, r8
 80072bc:	fa09 f303 	lsl.w	r3, r9, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	46a2      	mov	sl, r4
 80072c6:	e7d2      	b.n	800726e <_vfiprintf_r+0xc6>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	1d19      	adds	r1, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	9103      	str	r1, [sp, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfbb      	ittet	lt
 80072d4:	425b      	neglt	r3, r3
 80072d6:	f042 0202 	orrlt.w	r2, r2, #2
 80072da:	9307      	strge	r3, [sp, #28]
 80072dc:	9307      	strlt	r3, [sp, #28]
 80072de:	bfb8      	it	lt
 80072e0:	9204      	strlt	r2, [sp, #16]
 80072e2:	7823      	ldrb	r3, [r4, #0]
 80072e4:	2b2e      	cmp	r3, #46	; 0x2e
 80072e6:	d10c      	bne.n	8007302 <_vfiprintf_r+0x15a>
 80072e8:	7863      	ldrb	r3, [r4, #1]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d134      	bne.n	8007358 <_vfiprintf_r+0x1b0>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	1d1a      	adds	r2, r3, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	9203      	str	r2, [sp, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bfb8      	it	lt
 80072fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fe:	3402      	adds	r4, #2
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073d8 <_vfiprintf_r+0x230>
 8007306:	7821      	ldrb	r1, [r4, #0]
 8007308:	2203      	movs	r2, #3
 800730a:	4650      	mov	r0, sl
 800730c:	f7f8 ff60 	bl	80001d0 <memchr>
 8007310:	b138      	cbz	r0, 8007322 <_vfiprintf_r+0x17a>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	eba0 000a 	sub.w	r0, r0, sl
 8007318:	2240      	movs	r2, #64	; 0x40
 800731a:	4082      	lsls	r2, r0
 800731c:	4313      	orrs	r3, r2
 800731e:	3401      	adds	r4, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4829      	ldr	r0, [pc, #164]	; (80073cc <_vfiprintf_r+0x224>)
 8007328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732c:	2206      	movs	r2, #6
 800732e:	f7f8 ff4f 	bl	80001d0 <memchr>
 8007332:	2800      	cmp	r0, #0
 8007334:	d03f      	beq.n	80073b6 <_vfiprintf_r+0x20e>
 8007336:	4b26      	ldr	r3, [pc, #152]	; (80073d0 <_vfiprintf_r+0x228>)
 8007338:	bb1b      	cbnz	r3, 8007382 <_vfiprintf_r+0x1da>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	3308      	adds	r3, #8
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	443b      	add	r3, r7
 800734a:	9309      	str	r3, [sp, #36]	; 0x24
 800734c:	e768      	b.n	8007220 <_vfiprintf_r+0x78>
 800734e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2001      	movs	r0, #1
 8007356:	e7a6      	b.n	80072a6 <_vfiprintf_r+0xfe>
 8007358:	2300      	movs	r3, #0
 800735a:	3401      	adds	r4, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736a:	3a30      	subs	r2, #48	; 0x30
 800736c:	2a09      	cmp	r2, #9
 800736e:	d903      	bls.n	8007378 <_vfiprintf_r+0x1d0>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0c6      	beq.n	8007302 <_vfiprintf_r+0x15a>
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	e7c4      	b.n	8007302 <_vfiprintf_r+0x15a>
 8007378:	fb0c 2101 	mla	r1, ip, r1, r2
 800737c:	4604      	mov	r4, r0
 800737e:	2301      	movs	r3, #1
 8007380:	e7f0      	b.n	8007364 <_vfiprintf_r+0x1bc>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <_vfiprintf_r+0x22c>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4630      	mov	r0, r6
 800738e:	f3af 8000 	nop.w
 8007392:	4607      	mov	r7, r0
 8007394:	1c78      	adds	r0, r7, #1
 8007396:	d1d6      	bne.n	8007346 <_vfiprintf_r+0x19e>
 8007398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d405      	bmi.n	80073aa <_vfiprintf_r+0x202>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	059a      	lsls	r2, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_vfiprintf_r+0x202>
 80073a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a6:	f7ff fdce 	bl	8006f46 <__retarget_lock_release_recursive>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	065b      	lsls	r3, r3, #25
 80073ae:	f53f af1d 	bmi.w	80071ec <_vfiprintf_r+0x44>
 80073b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b4:	e71c      	b.n	80071f0 <_vfiprintf_r+0x48>
 80073b6:	ab03      	add	r3, sp, #12
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	462a      	mov	r2, r5
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <_vfiprintf_r+0x22c>)
 80073be:	a904      	add	r1, sp, #16
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f879 	bl	80074b8 <_printf_i>
 80073c6:	e7e4      	b.n	8007392 <_vfiprintf_r+0x1ea>
 80073c8:	08007b94 	.word	0x08007b94
 80073cc:	08007b9e 	.word	0x08007b9e
 80073d0:	00000000 	.word	0x00000000
 80073d4:	08007183 	.word	0x08007183
 80073d8:	08007b9a 	.word	0x08007b9a

080073dc <_printf_common>:
 80073dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	4616      	mov	r6, r2
 80073e2:	4699      	mov	r9, r3
 80073e4:	688a      	ldr	r2, [r1, #8]
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073ec:	4293      	cmp	r3, r2
 80073ee:	bfb8      	it	lt
 80073f0:	4613      	movlt	r3, r2
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f8:	4607      	mov	r7, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	b10a      	cbz	r2, 8007402 <_printf_common+0x26>
 80073fe:	3301      	adds	r3, #1
 8007400:	6033      	str	r3, [r6, #0]
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	0699      	lsls	r1, r3, #26
 8007406:	bf42      	ittt	mi
 8007408:	6833      	ldrmi	r3, [r6, #0]
 800740a:	3302      	addmi	r3, #2
 800740c:	6033      	strmi	r3, [r6, #0]
 800740e:	6825      	ldr	r5, [r4, #0]
 8007410:	f015 0506 	ands.w	r5, r5, #6
 8007414:	d106      	bne.n	8007424 <_printf_common+0x48>
 8007416:	f104 0a19 	add.w	sl, r4, #25
 800741a:	68e3      	ldr	r3, [r4, #12]
 800741c:	6832      	ldr	r2, [r6, #0]
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	42ab      	cmp	r3, r5
 8007422:	dc26      	bgt.n	8007472 <_printf_common+0x96>
 8007424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007428:	1e13      	subs	r3, r2, #0
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	bf18      	it	ne
 800742e:	2301      	movne	r3, #1
 8007430:	0692      	lsls	r2, r2, #26
 8007432:	d42b      	bmi.n	800748c <_printf_common+0xb0>
 8007434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007438:	4649      	mov	r1, r9
 800743a:	4638      	mov	r0, r7
 800743c:	47c0      	blx	r8
 800743e:	3001      	adds	r0, #1
 8007440:	d01e      	beq.n	8007480 <_printf_common+0xa4>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	f003 0306 	and.w	r3, r3, #6
 800744a:	2b04      	cmp	r3, #4
 800744c:	bf02      	ittt	eq
 800744e:	68e5      	ldreq	r5, [r4, #12]
 8007450:	6833      	ldreq	r3, [r6, #0]
 8007452:	1aed      	subeq	r5, r5, r3
 8007454:	68a3      	ldr	r3, [r4, #8]
 8007456:	bf0c      	ite	eq
 8007458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800745c:	2500      	movne	r5, #0
 800745e:	4293      	cmp	r3, r2
 8007460:	bfc4      	itt	gt
 8007462:	1a9b      	subgt	r3, r3, r2
 8007464:	18ed      	addgt	r5, r5, r3
 8007466:	2600      	movs	r6, #0
 8007468:	341a      	adds	r4, #26
 800746a:	42b5      	cmp	r5, r6
 800746c:	d11a      	bne.n	80074a4 <_printf_common+0xc8>
 800746e:	2000      	movs	r0, #0
 8007470:	e008      	b.n	8007484 <_printf_common+0xa8>
 8007472:	2301      	movs	r3, #1
 8007474:	4652      	mov	r2, sl
 8007476:	4649      	mov	r1, r9
 8007478:	4638      	mov	r0, r7
 800747a:	47c0      	blx	r8
 800747c:	3001      	adds	r0, #1
 800747e:	d103      	bne.n	8007488 <_printf_common+0xac>
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	3501      	adds	r5, #1
 800748a:	e7c6      	b.n	800741a <_printf_common+0x3e>
 800748c:	18e1      	adds	r1, r4, r3
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	2030      	movs	r0, #48	; 0x30
 8007492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007496:	4422      	add	r2, r4
 8007498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800749c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074a0:	3302      	adds	r3, #2
 80074a2:	e7c7      	b.n	8007434 <_printf_common+0x58>
 80074a4:	2301      	movs	r3, #1
 80074a6:	4622      	mov	r2, r4
 80074a8:	4649      	mov	r1, r9
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c0      	blx	r8
 80074ae:	3001      	adds	r0, #1
 80074b0:	d0e6      	beq.n	8007480 <_printf_common+0xa4>
 80074b2:	3601      	adds	r6, #1
 80074b4:	e7d9      	b.n	800746a <_printf_common+0x8e>
	...

080074b8 <_printf_i>:
 80074b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	7e0f      	ldrb	r7, [r1, #24]
 80074be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074c0:	2f78      	cmp	r7, #120	; 0x78
 80074c2:	4691      	mov	r9, r2
 80074c4:	4680      	mov	r8, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	469a      	mov	sl, r3
 80074ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ce:	d807      	bhi.n	80074e0 <_printf_i+0x28>
 80074d0:	2f62      	cmp	r7, #98	; 0x62
 80074d2:	d80a      	bhi.n	80074ea <_printf_i+0x32>
 80074d4:	2f00      	cmp	r7, #0
 80074d6:	f000 80d4 	beq.w	8007682 <_printf_i+0x1ca>
 80074da:	2f58      	cmp	r7, #88	; 0x58
 80074dc:	f000 80c0 	beq.w	8007660 <_printf_i+0x1a8>
 80074e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e8:	e03a      	b.n	8007560 <_printf_i+0xa8>
 80074ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ee:	2b15      	cmp	r3, #21
 80074f0:	d8f6      	bhi.n	80074e0 <_printf_i+0x28>
 80074f2:	a101      	add	r1, pc, #4	; (adr r1, 80074f8 <_printf_i+0x40>)
 80074f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f8:	08007551 	.word	0x08007551
 80074fc:	08007565 	.word	0x08007565
 8007500:	080074e1 	.word	0x080074e1
 8007504:	080074e1 	.word	0x080074e1
 8007508:	080074e1 	.word	0x080074e1
 800750c:	080074e1 	.word	0x080074e1
 8007510:	08007565 	.word	0x08007565
 8007514:	080074e1 	.word	0x080074e1
 8007518:	080074e1 	.word	0x080074e1
 800751c:	080074e1 	.word	0x080074e1
 8007520:	080074e1 	.word	0x080074e1
 8007524:	08007669 	.word	0x08007669
 8007528:	08007591 	.word	0x08007591
 800752c:	08007623 	.word	0x08007623
 8007530:	080074e1 	.word	0x080074e1
 8007534:	080074e1 	.word	0x080074e1
 8007538:	0800768b 	.word	0x0800768b
 800753c:	080074e1 	.word	0x080074e1
 8007540:	08007591 	.word	0x08007591
 8007544:	080074e1 	.word	0x080074e1
 8007548:	080074e1 	.word	0x080074e1
 800754c:	0800762b 	.word	0x0800762b
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	1d1a      	adds	r2, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	602a      	str	r2, [r5, #0]
 8007558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800755c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007560:	2301      	movs	r3, #1
 8007562:	e09f      	b.n	80076a4 <_printf_i+0x1ec>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	0607      	lsls	r7, r0, #24
 800756a:	f103 0104 	add.w	r1, r3, #4
 800756e:	6029      	str	r1, [r5, #0]
 8007570:	d501      	bpl.n	8007576 <_printf_i+0xbe>
 8007572:	681e      	ldr	r6, [r3, #0]
 8007574:	e003      	b.n	800757e <_printf_i+0xc6>
 8007576:	0646      	lsls	r6, r0, #25
 8007578:	d5fb      	bpl.n	8007572 <_printf_i+0xba>
 800757a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800757e:	2e00      	cmp	r6, #0
 8007580:	da03      	bge.n	800758a <_printf_i+0xd2>
 8007582:	232d      	movs	r3, #45	; 0x2d
 8007584:	4276      	negs	r6, r6
 8007586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758a:	485a      	ldr	r0, [pc, #360]	; (80076f4 <_printf_i+0x23c>)
 800758c:	230a      	movs	r3, #10
 800758e:	e012      	b.n	80075b6 <_printf_i+0xfe>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	6820      	ldr	r0, [r4, #0]
 8007594:	1d19      	adds	r1, r3, #4
 8007596:	6029      	str	r1, [r5, #0]
 8007598:	0605      	lsls	r5, r0, #24
 800759a:	d501      	bpl.n	80075a0 <_printf_i+0xe8>
 800759c:	681e      	ldr	r6, [r3, #0]
 800759e:	e002      	b.n	80075a6 <_printf_i+0xee>
 80075a0:	0641      	lsls	r1, r0, #25
 80075a2:	d5fb      	bpl.n	800759c <_printf_i+0xe4>
 80075a4:	881e      	ldrh	r6, [r3, #0]
 80075a6:	4853      	ldr	r0, [pc, #332]	; (80076f4 <_printf_i+0x23c>)
 80075a8:	2f6f      	cmp	r7, #111	; 0x6f
 80075aa:	bf0c      	ite	eq
 80075ac:	2308      	moveq	r3, #8
 80075ae:	230a      	movne	r3, #10
 80075b0:	2100      	movs	r1, #0
 80075b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075b6:	6865      	ldr	r5, [r4, #4]
 80075b8:	60a5      	str	r5, [r4, #8]
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	bfa2      	ittt	ge
 80075be:	6821      	ldrge	r1, [r4, #0]
 80075c0:	f021 0104 	bicge.w	r1, r1, #4
 80075c4:	6021      	strge	r1, [r4, #0]
 80075c6:	b90e      	cbnz	r6, 80075cc <_printf_i+0x114>
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	d04b      	beq.n	8007664 <_printf_i+0x1ac>
 80075cc:	4615      	mov	r5, r2
 80075ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80075d2:	fb03 6711 	mls	r7, r3, r1, r6
 80075d6:	5dc7      	ldrb	r7, [r0, r7]
 80075d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075dc:	4637      	mov	r7, r6
 80075de:	42bb      	cmp	r3, r7
 80075e0:	460e      	mov	r6, r1
 80075e2:	d9f4      	bls.n	80075ce <_printf_i+0x116>
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10b      	bne.n	8007600 <_printf_i+0x148>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07de      	lsls	r6, r3, #31
 80075ec:	d508      	bpl.n	8007600 <_printf_i+0x148>
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6861      	ldr	r1, [r4, #4]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	bfde      	ittt	le
 80075f6:	2330      	movle	r3, #48	; 0x30
 80075f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007600:	1b52      	subs	r2, r2, r5
 8007602:	6122      	str	r2, [r4, #16]
 8007604:	f8cd a000 	str.w	sl, [sp]
 8007608:	464b      	mov	r3, r9
 800760a:	aa03      	add	r2, sp, #12
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff fee4 	bl	80073dc <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	d14a      	bne.n	80076ae <_printf_i+0x1f6>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b004      	add	sp, #16
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	f043 0320 	orr.w	r3, r3, #32
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	4833      	ldr	r0, [pc, #204]	; (80076f8 <_printf_i+0x240>)
 800762c:	2778      	movs	r7, #120	; 0x78
 800762e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	6829      	ldr	r1, [r5, #0]
 8007636:	061f      	lsls	r7, r3, #24
 8007638:	f851 6b04 	ldr.w	r6, [r1], #4
 800763c:	d402      	bmi.n	8007644 <_printf_i+0x18c>
 800763e:	065f      	lsls	r7, r3, #25
 8007640:	bf48      	it	mi
 8007642:	b2b6      	uxthmi	r6, r6
 8007644:	07df      	lsls	r7, r3, #31
 8007646:	bf48      	it	mi
 8007648:	f043 0320 	orrmi.w	r3, r3, #32
 800764c:	6029      	str	r1, [r5, #0]
 800764e:	bf48      	it	mi
 8007650:	6023      	strmi	r3, [r4, #0]
 8007652:	b91e      	cbnz	r6, 800765c <_printf_i+0x1a4>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	f023 0320 	bic.w	r3, r3, #32
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	2310      	movs	r3, #16
 800765e:	e7a7      	b.n	80075b0 <_printf_i+0xf8>
 8007660:	4824      	ldr	r0, [pc, #144]	; (80076f4 <_printf_i+0x23c>)
 8007662:	e7e4      	b.n	800762e <_printf_i+0x176>
 8007664:	4615      	mov	r5, r2
 8007666:	e7bd      	b.n	80075e4 <_printf_i+0x12c>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	6826      	ldr	r6, [r4, #0]
 800766c:	6961      	ldr	r1, [r4, #20]
 800766e:	1d18      	adds	r0, r3, #4
 8007670:	6028      	str	r0, [r5, #0]
 8007672:	0635      	lsls	r5, r6, #24
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	d501      	bpl.n	800767c <_printf_i+0x1c4>
 8007678:	6019      	str	r1, [r3, #0]
 800767a:	e002      	b.n	8007682 <_printf_i+0x1ca>
 800767c:	0670      	lsls	r0, r6, #25
 800767e:	d5fb      	bpl.n	8007678 <_printf_i+0x1c0>
 8007680:	8019      	strh	r1, [r3, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	4615      	mov	r5, r2
 8007688:	e7bc      	b.n	8007604 <_printf_i+0x14c>
 800768a:	682b      	ldr	r3, [r5, #0]
 800768c:	1d1a      	adds	r2, r3, #4
 800768e:	602a      	str	r2, [r5, #0]
 8007690:	681d      	ldr	r5, [r3, #0]
 8007692:	6862      	ldr	r2, [r4, #4]
 8007694:	2100      	movs	r1, #0
 8007696:	4628      	mov	r0, r5
 8007698:	f7f8 fd9a 	bl	80001d0 <memchr>
 800769c:	b108      	cbz	r0, 80076a2 <_printf_i+0x1ea>
 800769e:	1b40      	subs	r0, r0, r5
 80076a0:	6060      	str	r0, [r4, #4]
 80076a2:	6863      	ldr	r3, [r4, #4]
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	2300      	movs	r3, #0
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ac:	e7aa      	b.n	8007604 <_printf_i+0x14c>
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	462a      	mov	r2, r5
 80076b2:	4649      	mov	r1, r9
 80076b4:	4640      	mov	r0, r8
 80076b6:	47d0      	blx	sl
 80076b8:	3001      	adds	r0, #1
 80076ba:	d0ad      	beq.n	8007618 <_printf_i+0x160>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	079b      	lsls	r3, r3, #30
 80076c0:	d413      	bmi.n	80076ea <_printf_i+0x232>
 80076c2:	68e0      	ldr	r0, [r4, #12]
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	4298      	cmp	r0, r3
 80076c8:	bfb8      	it	lt
 80076ca:	4618      	movlt	r0, r3
 80076cc:	e7a6      	b.n	800761c <_printf_i+0x164>
 80076ce:	2301      	movs	r3, #1
 80076d0:	4632      	mov	r2, r6
 80076d2:	4649      	mov	r1, r9
 80076d4:	4640      	mov	r0, r8
 80076d6:	47d0      	blx	sl
 80076d8:	3001      	adds	r0, #1
 80076da:	d09d      	beq.n	8007618 <_printf_i+0x160>
 80076dc:	3501      	adds	r5, #1
 80076de:	68e3      	ldr	r3, [r4, #12]
 80076e0:	9903      	ldr	r1, [sp, #12]
 80076e2:	1a5b      	subs	r3, r3, r1
 80076e4:	42ab      	cmp	r3, r5
 80076e6:	dcf2      	bgt.n	80076ce <_printf_i+0x216>
 80076e8:	e7eb      	b.n	80076c2 <_printf_i+0x20a>
 80076ea:	2500      	movs	r5, #0
 80076ec:	f104 0619 	add.w	r6, r4, #25
 80076f0:	e7f5      	b.n	80076de <_printf_i+0x226>
 80076f2:	bf00      	nop
 80076f4:	08007ba5 	.word	0x08007ba5
 80076f8:	08007bb6 	.word	0x08007bb6

080076fc <__sflush_r>:
 80076fc:	898a      	ldrh	r2, [r1, #12]
 80076fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	4605      	mov	r5, r0
 8007704:	0710      	lsls	r0, r2, #28
 8007706:	460c      	mov	r4, r1
 8007708:	d458      	bmi.n	80077bc <__sflush_r+0xc0>
 800770a:	684b      	ldr	r3, [r1, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc05      	bgt.n	800771c <__sflush_r+0x20>
 8007710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	dc02      	bgt.n	800771c <__sflush_r+0x20>
 8007716:	2000      	movs	r0, #0
 8007718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771e:	2e00      	cmp	r6, #0
 8007720:	d0f9      	beq.n	8007716 <__sflush_r+0x1a>
 8007722:	2300      	movs	r3, #0
 8007724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007728:	682f      	ldr	r7, [r5, #0]
 800772a:	6a21      	ldr	r1, [r4, #32]
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	d032      	beq.n	8007796 <__sflush_r+0x9a>
 8007730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	075a      	lsls	r2, r3, #29
 8007736:	d505      	bpl.n	8007744 <__sflush_r+0x48>
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	1ac0      	subs	r0, r0, r3
 800773c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800773e:	b10b      	cbz	r3, 8007744 <__sflush_r+0x48>
 8007740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007742:	1ac0      	subs	r0, r0, r3
 8007744:	2300      	movs	r3, #0
 8007746:	4602      	mov	r2, r0
 8007748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800774a:	6a21      	ldr	r1, [r4, #32]
 800774c:	4628      	mov	r0, r5
 800774e:	47b0      	blx	r6
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	d106      	bne.n	8007764 <__sflush_r+0x68>
 8007756:	6829      	ldr	r1, [r5, #0]
 8007758:	291d      	cmp	r1, #29
 800775a:	d82b      	bhi.n	80077b4 <__sflush_r+0xb8>
 800775c:	4a29      	ldr	r2, [pc, #164]	; (8007804 <__sflush_r+0x108>)
 800775e:	410a      	asrs	r2, r1
 8007760:	07d6      	lsls	r6, r2, #31
 8007762:	d427      	bmi.n	80077b4 <__sflush_r+0xb8>
 8007764:	2200      	movs	r2, #0
 8007766:	6062      	str	r2, [r4, #4]
 8007768:	04d9      	lsls	r1, r3, #19
 800776a:	6922      	ldr	r2, [r4, #16]
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	d504      	bpl.n	800777a <__sflush_r+0x7e>
 8007770:	1c42      	adds	r2, r0, #1
 8007772:	d101      	bne.n	8007778 <__sflush_r+0x7c>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b903      	cbnz	r3, 800777a <__sflush_r+0x7e>
 8007778:	6560      	str	r0, [r4, #84]	; 0x54
 800777a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777c:	602f      	str	r7, [r5, #0]
 800777e:	2900      	cmp	r1, #0
 8007780:	d0c9      	beq.n	8007716 <__sflush_r+0x1a>
 8007782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007786:	4299      	cmp	r1, r3
 8007788:	d002      	beq.n	8007790 <__sflush_r+0x94>
 800778a:	4628      	mov	r0, r5
 800778c:	f7ff fbea 	bl	8006f64 <_free_r>
 8007790:	2000      	movs	r0, #0
 8007792:	6360      	str	r0, [r4, #52]	; 0x34
 8007794:	e7c0      	b.n	8007718 <__sflush_r+0x1c>
 8007796:	2301      	movs	r3, #1
 8007798:	4628      	mov	r0, r5
 800779a:	47b0      	blx	r6
 800779c:	1c41      	adds	r1, r0, #1
 800779e:	d1c8      	bne.n	8007732 <__sflush_r+0x36>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0c5      	beq.n	8007732 <__sflush_r+0x36>
 80077a6:	2b1d      	cmp	r3, #29
 80077a8:	d001      	beq.n	80077ae <__sflush_r+0xb2>
 80077aa:	2b16      	cmp	r3, #22
 80077ac:	d101      	bne.n	80077b2 <__sflush_r+0xb6>
 80077ae:	602f      	str	r7, [r5, #0]
 80077b0:	e7b1      	b.n	8007716 <__sflush_r+0x1a>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	e7ad      	b.n	8007718 <__sflush_r+0x1c>
 80077bc:	690f      	ldr	r7, [r1, #16]
 80077be:	2f00      	cmp	r7, #0
 80077c0:	d0a9      	beq.n	8007716 <__sflush_r+0x1a>
 80077c2:	0793      	lsls	r3, r2, #30
 80077c4:	680e      	ldr	r6, [r1, #0]
 80077c6:	bf08      	it	eq
 80077c8:	694b      	ldreq	r3, [r1, #20]
 80077ca:	600f      	str	r7, [r1, #0]
 80077cc:	bf18      	it	ne
 80077ce:	2300      	movne	r3, #0
 80077d0:	eba6 0807 	sub.w	r8, r6, r7
 80077d4:	608b      	str	r3, [r1, #8]
 80077d6:	f1b8 0f00 	cmp.w	r8, #0
 80077da:	dd9c      	ble.n	8007716 <__sflush_r+0x1a>
 80077dc:	6a21      	ldr	r1, [r4, #32]
 80077de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077e0:	4643      	mov	r3, r8
 80077e2:	463a      	mov	r2, r7
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b0      	blx	r6
 80077e8:	2800      	cmp	r0, #0
 80077ea:	dc06      	bgt.n	80077fa <__sflush_r+0xfe>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e78e      	b.n	8007718 <__sflush_r+0x1c>
 80077fa:	4407      	add	r7, r0
 80077fc:	eba8 0800 	sub.w	r8, r8, r0
 8007800:	e7e9      	b.n	80077d6 <__sflush_r+0xda>
 8007802:	bf00      	nop
 8007804:	dfbffffe 	.word	0xdfbffffe

08007808 <_fflush_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	4605      	mov	r5, r0
 800780e:	460c      	mov	r4, r1
 8007810:	b913      	cbnz	r3, 8007818 <_fflush_r+0x10>
 8007812:	2500      	movs	r5, #0
 8007814:	4628      	mov	r0, r5
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	b118      	cbz	r0, 8007822 <_fflush_r+0x1a>
 800781a:	6a03      	ldr	r3, [r0, #32]
 800781c:	b90b      	cbnz	r3, 8007822 <_fflush_r+0x1a>
 800781e:	f7ff fa37 	bl	8006c90 <__sinit>
 8007822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0f3      	beq.n	8007812 <_fflush_r+0xa>
 800782a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800782c:	07d0      	lsls	r0, r2, #31
 800782e:	d404      	bmi.n	800783a <_fflush_r+0x32>
 8007830:	0599      	lsls	r1, r3, #22
 8007832:	d402      	bmi.n	800783a <_fflush_r+0x32>
 8007834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007836:	f7ff fb85 	bl	8006f44 <__retarget_lock_acquire_recursive>
 800783a:	4628      	mov	r0, r5
 800783c:	4621      	mov	r1, r4
 800783e:	f7ff ff5d 	bl	80076fc <__sflush_r>
 8007842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007844:	07da      	lsls	r2, r3, #31
 8007846:	4605      	mov	r5, r0
 8007848:	d4e4      	bmi.n	8007814 <_fflush_r+0xc>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	059b      	lsls	r3, r3, #22
 800784e:	d4e1      	bmi.n	8007814 <_fflush_r+0xc>
 8007850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007852:	f7ff fb78 	bl	8006f46 <__retarget_lock_release_recursive>
 8007856:	e7dd      	b.n	8007814 <_fflush_r+0xc>

08007858 <__swbuf_r>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	460e      	mov	r6, r1
 800785c:	4614      	mov	r4, r2
 800785e:	4605      	mov	r5, r0
 8007860:	b118      	cbz	r0, 800786a <__swbuf_r+0x12>
 8007862:	6a03      	ldr	r3, [r0, #32]
 8007864:	b90b      	cbnz	r3, 800786a <__swbuf_r+0x12>
 8007866:	f7ff fa13 	bl	8006c90 <__sinit>
 800786a:	69a3      	ldr	r3, [r4, #24]
 800786c:	60a3      	str	r3, [r4, #8]
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	071a      	lsls	r2, r3, #28
 8007872:	d525      	bpl.n	80078c0 <__swbuf_r+0x68>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	b31b      	cbz	r3, 80078c0 <__swbuf_r+0x68>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	6922      	ldr	r2, [r4, #16]
 800787c:	1a98      	subs	r0, r3, r2
 800787e:	6963      	ldr	r3, [r4, #20]
 8007880:	b2f6      	uxtb	r6, r6
 8007882:	4283      	cmp	r3, r0
 8007884:	4637      	mov	r7, r6
 8007886:	dc04      	bgt.n	8007892 <__swbuf_r+0x3a>
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f7ff ffbc 	bl	8007808 <_fflush_r>
 8007890:	b9e0      	cbnz	r0, 80078cc <__swbuf_r+0x74>
 8007892:	68a3      	ldr	r3, [r4, #8]
 8007894:	3b01      	subs	r3, #1
 8007896:	60a3      	str	r3, [r4, #8]
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	6022      	str	r2, [r4, #0]
 800789e:	701e      	strb	r6, [r3, #0]
 80078a0:	6962      	ldr	r2, [r4, #20]
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d004      	beq.n	80078b2 <__swbuf_r+0x5a>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	07db      	lsls	r3, r3, #31
 80078ac:	d506      	bpl.n	80078bc <__swbuf_r+0x64>
 80078ae:	2e0a      	cmp	r6, #10
 80078b0:	d104      	bne.n	80078bc <__swbuf_r+0x64>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff ffa7 	bl	8007808 <_fflush_r>
 80078ba:	b938      	cbnz	r0, 80078cc <__swbuf_r+0x74>
 80078bc:	4638      	mov	r0, r7
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f806 	bl	80078d4 <__swsetup_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d0d5      	beq.n	8007878 <__swbuf_r+0x20>
 80078cc:	f04f 37ff 	mov.w	r7, #4294967295
 80078d0:	e7f4      	b.n	80078bc <__swbuf_r+0x64>
	...

080078d4 <__swsetup_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4b2a      	ldr	r3, [pc, #168]	; (8007980 <__swsetup_r+0xac>)
 80078d8:	4605      	mov	r5, r0
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	460c      	mov	r4, r1
 80078de:	b118      	cbz	r0, 80078e8 <__swsetup_r+0x14>
 80078e0:	6a03      	ldr	r3, [r0, #32]
 80078e2:	b90b      	cbnz	r3, 80078e8 <__swsetup_r+0x14>
 80078e4:	f7ff f9d4 	bl	8006c90 <__sinit>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ee:	0718      	lsls	r0, r3, #28
 80078f0:	d422      	bmi.n	8007938 <__swsetup_r+0x64>
 80078f2:	06d9      	lsls	r1, r3, #27
 80078f4:	d407      	bmi.n	8007906 <__swsetup_r+0x32>
 80078f6:	2309      	movs	r3, #9
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	e034      	b.n	8007970 <__swsetup_r+0x9c>
 8007906:	0758      	lsls	r0, r3, #29
 8007908:	d512      	bpl.n	8007930 <__swsetup_r+0x5c>
 800790a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800790c:	b141      	cbz	r1, 8007920 <__swsetup_r+0x4c>
 800790e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007912:	4299      	cmp	r1, r3
 8007914:	d002      	beq.n	800791c <__swsetup_r+0x48>
 8007916:	4628      	mov	r0, r5
 8007918:	f7ff fb24 	bl	8006f64 <_free_r>
 800791c:	2300      	movs	r3, #0
 800791e:	6363      	str	r3, [r4, #52]	; 0x34
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	2300      	movs	r3, #0
 800792a:	6063      	str	r3, [r4, #4]
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	6023      	str	r3, [r4, #0]
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f043 0308 	orr.w	r3, r3, #8
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	b94b      	cbnz	r3, 8007950 <__swsetup_r+0x7c>
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d003      	beq.n	8007950 <__swsetup_r+0x7c>
 8007948:	4621      	mov	r1, r4
 800794a:	4628      	mov	r0, r5
 800794c:	f000 f850 	bl	80079f0 <__smakebuf_r>
 8007950:	89a0      	ldrh	r0, [r4, #12]
 8007952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007956:	f010 0301 	ands.w	r3, r0, #1
 800795a:	d00a      	beq.n	8007972 <__swsetup_r+0x9e>
 800795c:	2300      	movs	r3, #0
 800795e:	60a3      	str	r3, [r4, #8]
 8007960:	6963      	ldr	r3, [r4, #20]
 8007962:	425b      	negs	r3, r3
 8007964:	61a3      	str	r3, [r4, #24]
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	b943      	cbnz	r3, 800797c <__swsetup_r+0xa8>
 800796a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800796e:	d1c4      	bne.n	80078fa <__swsetup_r+0x26>
 8007970:	bd38      	pop	{r3, r4, r5, pc}
 8007972:	0781      	lsls	r1, r0, #30
 8007974:	bf58      	it	pl
 8007976:	6963      	ldrpl	r3, [r4, #20]
 8007978:	60a3      	str	r3, [r4, #8]
 800797a:	e7f4      	b.n	8007966 <__swsetup_r+0x92>
 800797c:	2000      	movs	r0, #0
 800797e:	e7f7      	b.n	8007970 <__swsetup_r+0x9c>
 8007980:	20000068 	.word	0x20000068

08007984 <_sbrk_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d06      	ldr	r5, [pc, #24]	; (80079a0 <_sbrk_r+0x1c>)
 8007988:	2300      	movs	r3, #0
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7f9 fbac 	bl	80010ec <_sbrk>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_sbrk_r+0x1a>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_sbrk_r+0x1a>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	200038b8 	.word	0x200038b8

080079a4 <__swhatbuf_r>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2900      	cmp	r1, #0
 80079ae:	b096      	sub	sp, #88	; 0x58
 80079b0:	4615      	mov	r5, r2
 80079b2:	461e      	mov	r6, r3
 80079b4:	da0d      	bge.n	80079d2 <__swhatbuf_r+0x2e>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079bc:	f04f 0100 	mov.w	r1, #0
 80079c0:	bf0c      	ite	eq
 80079c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80079c6:	2340      	movne	r3, #64	; 0x40
 80079c8:	2000      	movs	r0, #0
 80079ca:	6031      	str	r1, [r6, #0]
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	b016      	add	sp, #88	; 0x58
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
 80079d2:	466a      	mov	r2, sp
 80079d4:	f000 f848 	bl	8007a68 <_fstat_r>
 80079d8:	2800      	cmp	r0, #0
 80079da:	dbec      	blt.n	80079b6 <__swhatbuf_r+0x12>
 80079dc:	9901      	ldr	r1, [sp, #4]
 80079de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079e6:	4259      	negs	r1, r3
 80079e8:	4159      	adcs	r1, r3
 80079ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ee:	e7eb      	b.n	80079c8 <__swhatbuf_r+0x24>

080079f0 <__smakebuf_r>:
 80079f0:	898b      	ldrh	r3, [r1, #12]
 80079f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079f4:	079d      	lsls	r5, r3, #30
 80079f6:	4606      	mov	r6, r0
 80079f8:	460c      	mov	r4, r1
 80079fa:	d507      	bpl.n	8007a0c <__smakebuf_r+0x1c>
 80079fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	2301      	movs	r3, #1
 8007a06:	6163      	str	r3, [r4, #20]
 8007a08:	b002      	add	sp, #8
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	ab01      	add	r3, sp, #4
 8007a0e:	466a      	mov	r2, sp
 8007a10:	f7ff ffc8 	bl	80079a4 <__swhatbuf_r>
 8007a14:	9900      	ldr	r1, [sp, #0]
 8007a16:	4605      	mov	r5, r0
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff fb0f 	bl	800703c <_malloc_r>
 8007a1e:	b948      	cbnz	r0, 8007a34 <__smakebuf_r+0x44>
 8007a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a24:	059a      	lsls	r2, r3, #22
 8007a26:	d4ef      	bmi.n	8007a08 <__smakebuf_r+0x18>
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	e7e3      	b.n	80079fc <__smakebuf_r+0xc>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	6020      	str	r0, [r4, #0]
 8007a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	9b00      	ldr	r3, [sp, #0]
 8007a40:	6163      	str	r3, [r4, #20]
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	6120      	str	r0, [r4, #16]
 8007a46:	b15b      	cbz	r3, 8007a60 <__smakebuf_r+0x70>
 8007a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f000 f81d 	bl	8007a8c <_isatty_r>
 8007a52:	b128      	cbz	r0, 8007a60 <__smakebuf_r+0x70>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	431d      	orrs	r5, r3
 8007a64:	81a5      	strh	r5, [r4, #12]
 8007a66:	e7cf      	b.n	8007a08 <__smakebuf_r+0x18>

08007a68 <_fstat_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	; (8007a88 <_fstat_r+0x20>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	f7f9 fb10 	bl	800109a <_fstat>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d102      	bne.n	8007a84 <_fstat_r+0x1c>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b103      	cbz	r3, 8007a84 <_fstat_r+0x1c>
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	200038b8 	.word	0x200038b8

08007a8c <_isatty_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d06      	ldr	r5, [pc, #24]	; (8007aa8 <_isatty_r+0x1c>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7f9 fb0f 	bl	80010ba <_isatty>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_isatty_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_isatty_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	200038b8 	.word	0x200038b8

08007aac <_init>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	bf00      	nop
 8007ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab2:	bc08      	pop	{r3}
 8007ab4:	469e      	mov	lr, r3
 8007ab6:	4770      	bx	lr

08007ab8 <_fini>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	bf00      	nop
 8007abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007abe:	bc08      	pop	{r3}
 8007ac0:	469e      	mov	lr, r3
 8007ac2:	4770      	bx	lr
