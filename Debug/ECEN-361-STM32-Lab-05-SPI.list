
ECEN-361-STM32-Lab-05-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f34  08005f34  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f3c  08005f3c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000068  08005fac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08005fac  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164d3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3b  00000000  00000000  000365ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109e  00000000  00000000  0003a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cf0  00000000  00000000  0003b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019df5  00000000  00000000  000645ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f98e6  00000000  00000000  0007e3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006154  00000000  00000000  00177c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e38 	.word	0x08005e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005e38 	.word	0x08005e38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fae1 	bl	8001b64 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fad0 	bl	8001b64 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fac5 	bl	8001b64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fabf 	bl	8001b64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fab9 	bl	8001b64 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 faa6 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 faa1 	bl	8001b64 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 fa7c 	bl	8001b64 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 fa56 	bl	8001b64 <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	20000088 	.word	0x20000088
 80006c8:	08005eb4 	.word	0x08005eb4

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000084 	.word	0x20000084

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t bytes_in =0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fee1 	bl	8001500 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f851 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f9df 	bl	8000b04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f97d 	bl	8000a44 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800074a:	f000 f955 	bl	80009f8 <MX_TIM17_Init>
  MX_SPI2_Init();
 800074e:	f000 f919 	bl	8000984 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000752:	f000 f8d9 	bl	8000908 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000756:	f000 f897 	bl	8000888 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800075a:	f000 f9a3 	bl	8000aa4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 800075e:	481b      	ldr	r0, [pc, #108]	; (80007cc <main+0x9c>)
 8000760:	f003 fb84 	bl	8003e6c <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 8000764:	f7ff ff62 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 8000768:	f7ff ff4e 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f001 f9f5 	bl	8001b64 <HAL_GPIO_WritePin>
  printf("\033\143");
 800077a:	4815      	ldr	r0, [pc, #84]	; (80007d0 <main+0xa0>)
 800077c:	f004 fce8 	bl	8005150 <iprintf>
  printf("Welcome to ECEN-361 Lab-05 SPI/UART & Logic Analyzer \n\r");
 8000780:	4814      	ldr	r0, [pc, #80]	; (80007d4 <main+0xa4>)
 8000782:	f004 fce5 	bl	8005150 <iprintf>
  while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bytes_in = Read_and_Transmit_Task();
 8000786:	f000 fa8f 	bl	8000ca8 <Read_and_Transmit_Task>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]

    /**************** STEP 1:  Send it SPI-1 *********************/
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f001 f9e4 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RX_Buffer, bytes_in , HAL_MAX_DELAY);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <main+0xa8>)
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <main+0xac>)
 80007a8:	f002 ff1b 	bl	80035e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f001 f9d5 	bl	8001b64 <HAL_GPIO_WritePin>
	       if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF) Error_Handler();
	      }
	  */

    /**************** STEP 3:  Send it USART-3 *********************/
	HAL_UART_Transmit(&huart3, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	4905      	ldr	r1, [pc, #20]	; (80007d8 <main+0xa8>)
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <main+0xb0>)
 80007c6:	f003 fdf1 	bl	80043ac <HAL_UART_Transmit>
    bytes_in = Read_and_Transmit_Task();
 80007ca:	e7dc      	b.n	8000786 <main+0x56>
 80007cc:	200001a8 	.word	0x200001a8
 80007d0:	08005e50 	.word	0x08005e50
 80007d4:	08005e54 	.word	0x08005e54
 80007d8:	20000304 	.word	0x20000304
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	2000027c 	.word	0x2000027c

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2244      	movs	r2, #68	; 0x44
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fd01 	bl	80051fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000806:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080a:	f001 fb03 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000814:	f000 fae6 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000820:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2310      	movs	r3, #16
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000832:	230a      	movs	r3, #10
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000836:	2307      	movs	r3, #7
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fb3a 	bl	8001ec0 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000852:	f000 fac7 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2303      	movs	r3, #3
 800085c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2104      	movs	r1, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ff02 	bl	8002678 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087a:	f000 fab3 	bl	8000de4 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3758      	adds	r7, #88	; 0x58
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_I2C2_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_I2C2_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_I2C2_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_I2C2_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_I2C2_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_I2C2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_I2C2_Init+0x74>)
 80008c4:	f001 f966 	bl	8001b94 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 fa89 	bl	8000de4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_I2C2_Init+0x74>)
 80008d6:	f001 f9f8 	bl	8001cca <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fa80 	bl	8000de4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2C2_Init+0x74>)
 80008e8:	f001 fa3a 	bl	8001d60 <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fa77 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	40005800 	.word	0x40005800
 8000904:	10909cec 	.word	0x10909cec

08000908 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /*   625KHz == SPI_BAUDRATEPRESCALER_128 ==> 80Mhz / 128
   *   40Mhz == SPI_BAUDRATEPRESCALER_2    ==> 80Mhz / 2
   */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_SPI1_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_SPI1_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_SPI1_Init+0x74>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_SPI1_Init+0x74>)
 8000922:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000926:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_SPI1_Init+0x74>)
 8000936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SPI1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SPI1_Init+0x74>)
 8000956:	2207      	movs	r2, #7
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SPI1_Init+0x74>)
 8000962:	2208      	movs	r2, #8
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_SPI1_Init+0x74>)
 8000968:	f002 fd98 	bl	800349c <HAL_SPI_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fa37 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000e0 	.word	0x200000e0
 8000980:	40013000 	.word	0x40013000

08000984 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_SPI2_Init+0x6c>)
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <MX_SPI2_Init+0x70>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_SPI2_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI2_Init+0x6c>)
 8000996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800099a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI2_Init+0x6c>)
 800099e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_SPI2_Init+0x6c>)
 80009dc:	f002 fd5e 	bl	800349c <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009e6:	f000 f9fd 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000144 	.word	0x20000144
 80009f4:	40003800 	.word	0x40003800

080009f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_TIM17_Init+0x44>)
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a04:	f240 321f 	movw	r2, #799	; 0x31f
 8000a08:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a12:	2264      	movs	r2, #100	; 0x64
 8000a14:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_TIM17_Init+0x44>)
 8000a2a:	f003 f9c7 	bl	8003dbc <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000a34:	f000 f9d6 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001a8 	.word	0x200001a8
 8000a40:	40014800 	.word	0x40014800

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART2_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a88:	f003 fc42 	bl	8004310 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f9a7 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001f4 	.word	0x200001f4
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART3_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ae8:	f003 fc12 	bl	8004310 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f977 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000027c 	.word	0x2000027c
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a5f      	ldr	r2, [pc, #380]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a59      	ldr	r2, [pc, #356]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b57      	ldr	r3, [pc, #348]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a53      	ldr	r2, [pc, #332]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b4e      	ldr	r3, [pc, #312]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a4d      	ldr	r2, [pc, #308]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 ffee 	bl	8001b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	4844      	ldr	r0, [pc, #272]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000b8e:	f000 ffe9 	bl	8001b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	4842      	ldr	r0, [pc, #264]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000b98:	f000 ffe4 	bl	8001b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <MX_GPIO_Init+0x1a0>)
 8000bb4:	f000 fe2c 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <MX_GPIO_Init+0x1a0>)
 8000bcc:	f000 fe20 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f000 fe13 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000bea:	2312      	movs	r3, #18
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f000 fe06 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000c04:	2340      	movs	r3, #64	; 0x40
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c08:	2311      	movs	r3, #17
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fdf7 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c36:	f000 fdeb 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000c3a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f000 fddb 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c72:	f000 fdcd 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c7a:	2311      	movs	r3, #17
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c8e:	f000 fdbf 	bl	8001810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <Read_and_Transmit_Task>:
		}
	}


uint8_t Read_and_Transmit_Task()
	{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
	/* Return the number of bytes */
	uint8_t receive_byte;
	// uint8_t receive_buffer[BUFFER_SIZE] = {0};
	// uint8_t *receive_buffer_ptr = receive_buffer;
	uint8_t bytes_in =0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <Read_and_Transmit_Task+0xd8>)
 8000cb6:	f107 0410 	add.w	r4, r7, #16
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cc4:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <Read_and_Transmit_Task+0xdc>)
 8000cca:	463c      	mov	r4, r7
 8000ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cce:	c407      	stmia	r4!, {r0, r1, r2}
 8000cd0:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t *sndmsg_ptr = sndmsg;
 8000cd8:	463b      	mov	r3, r7
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c

		bytes_in = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		receive_byte = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	2217      	movs	r2, #23
 8000cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <Read_and_Transmit_Task+0xe0>)
 8000cf2:	f003 fb5b 	bl	80043ac <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000cf6:	e020      	b.n	8000d3a <Read_and_Transmit_Task+0x92>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fc41 	bl	8001580 <HAL_Delay>
 8000cfe:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8000d02:	230a      	movs	r3, #10
 8000d04:	2201      	movs	r2, #1
 8000d06:	4820      	ldr	r0, [pc, #128]	; (8000d88 <Read_and_Transmit_Task+0xe0>)
 8000d08:	f003 fbda 	bl	80044c0 <HAL_UART_Receive>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f2      	bne.n	8000cf8 <Read_and_Transmit_Task+0x50>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			RX_Buffer[bytes_in] = receive_byte;
 8000d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d16:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <Read_and_Transmit_Task+0xe4>)
 8000d1c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &RX_Buffer[bytes_in++] , 1, HAL_MAX_DELAY);  //echo each one as it's typed
 8000d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <Read_and_Transmit_Task+0xe4>)
 8000d2c:	18d1      	adds	r1, r2, r3
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	2201      	movs	r2, #1
 8000d34:	4814      	ldr	r0, [pc, #80]	; (8000d88 <Read_and_Transmit_Task+0xe0>)
 8000d36:	f003 fb39 	bl	80043ac <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d3e:	2b0d      	cmp	r3, #13
 8000d40:	d1dd      	bne.n	8000cfe <Read_and_Transmit_Task+0x56>
		}

		RX_Buffer[bytes_in++] = '\n'; // Add a line_feed
 8000d42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <Read_and_Transmit_Task+0xe4>)
 8000d50:	210a      	movs	r1, #10
 8000d52:	5499      	strb	r1, [r3, r2]
		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	220d      	movs	r2, #13
 8000d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d5c:	480a      	ldr	r0, [pc, #40]	; (8000d88 <Read_and_Transmit_Task+0xe0>)
 8000d5e:	f003 fb25 	bl	80043ac <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 8000d62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <Read_and_Transmit_Task+0xe4>)
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <Read_and_Transmit_Task+0xe0>)
 8000d70:	f003 fb1c 	bl	80043ac <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)
		return bytes_in;
 8000d74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3738      	adds	r7, #56	; 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d80:	08005e8c 	.word	0x08005e8c
 8000d84:	08005ea4 	.word	0x08005ea4
 8000d88:	200001f4 	.word	0x200001f4
 8000d8c:	20000304 	.word	0x20000304

08000d90 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d98:	1d39      	adds	r1, r7, #4
 8000d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <__io_putchar+0x20>)
 8000da2:	f003 fb03 	bl	80043ac <HAL_UART_Transmit>

  return ch;
 8000da6:	687b      	ldr	r3, [r7, #4]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001f4 	.word	0x200001f4

08000db4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d101      	bne.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000dc4:	f7ff fc82 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd0:	d101      	bne.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000dd2:	f000 fbb5 	bl	8001540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001a8 	.word	0x200001a8

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dec:	e7fe      	b.n	8000dec <Error_Handler+0x8>
	...

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x44>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_MspInit+0x44>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6613      	str	r3, [r2, #96]	; 0x60
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x44>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x44>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x44>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ac      	sub	sp, #176	; 0xb0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2288      	movs	r2, #136	; 0x88
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 f9ce 	bl	80051fa <memset>
  if(hi2c->Instance==I2C2)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_I2C_MspInit+0xb0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13b      	bne.n	8000ee0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fe55 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e80:	f7ff ffb0 	bl	8000de4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <HAL_I2C_MspInit+0xb8>)
 8000ec4:	f000 fca4 	bl	8001810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	37b0      	adds	r7, #176	; 0xb0
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40005800 	.word	0x40005800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a41      	ldr	r2, [pc, #260]	; (8001018 <HAL_SPI_MspInit+0x124>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d129      	bne.n	8000f6a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f16:	4b41      	ldr	r3, [pc, #260]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	4a40      	ldr	r2, [pc, #256]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	6613      	str	r3, [r2, #96]	; 0x60
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f46:	23a0      	movs	r3, #160	; 0xa0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f000 fc54 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f68:	e051      	b.n	800100e <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d14c      	bne.n	800100e <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <HAL_SPI_MspInit+0x130>)
 8000fd8:	f000 fc1a 	bl	8001810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <HAL_SPI_MspInit+0x134>)
 8000ffa:	f000 fc09 	bl	8001810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2024      	movs	r0, #36	; 0x24
 8001004:	f000 fb98 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001008:	2024      	movs	r0, #36	; 0x24
 800100a:	f000 fbb1 	bl	8001770 <HAL_NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40013000 	.word	0x40013000
 800101c:	40021000 	.word	0x40021000
 8001020:	40003800 	.word	0x40003800
 8001024:	48000800 	.word	0x48000800
 8001028:	48000400 	.word	0x48000400

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_TIM_Base_MspInit+0x44>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d113      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6613      	str	r3, [r2, #96]	; 0x60
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	201a      	movs	r0, #26
 800105c:	f000 fb6c 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001060:	201a      	movs	r0, #26
 8001062:	f000 fb85 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40014800 	.word	0x40014800
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ae      	sub	sp, #184	; 0xb8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2288      	movs	r2, #136	; 0x88
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f004 f8ae 	bl	80051fa <memset>
  if(huart->Instance==USART2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a42      	ldr	r2, [pc, #264]	; (80011ac <HAL_UART_MspInit+0x134>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d13c      	bne.n	8001122 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fd35 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c0:	f7ff fe90 	bl	8000de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_UART_MspInit+0x138>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <HAL_UART_MspInit+0x138>)
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	6593      	str	r3, [r2, #88]	; 0x58
 80010d0:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <HAL_UART_MspInit+0x138>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_UART_MspInit+0x138>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <HAL_UART_MspInit+0x138>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_UART_MspInit+0x138>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f4:	230c      	movs	r3, #12
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f000 fb78 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001120:	e03f      	b.n	80011a2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_UART_MspInit+0x13c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d13a      	bne.n	80011a2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800112c:	2304      	movs	r3, #4
 800112e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fcf3 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001144:	f7ff fe4e 	bl	8000de4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_UART_MspInit+0x138>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0x138>)
 800114e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001152:	6593      	str	r3, [r2, #88]	; 0x58
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_UART_MspInit+0x138>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_UART_MspInit+0x138>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <HAL_UART_MspInit+0x138>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x138>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001178:	2330      	movs	r3, #48	; 0x30
 800117a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800119a:	4619      	mov	r1, r3
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <HAL_UART_MspInit+0x140>)
 800119e:	f000 fb37 	bl	8001810 <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	37b8      	adds	r7, #184	; 0xb8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004400 	.word	0x40004400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40004800 	.word	0x40004800
 80011b8:	48000800 	.word	0x48000800

080011bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	; 0x38
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_InitTick+0xe0>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a33      	ldr	r2, [pc, #204]	; (800129c <HAL_InitTick+0xe0>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_InitTick+0xe0>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e2:	f107 0210 	add.w	r2, r7, #16
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fc07 	bl	8002a00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011fc:	f001 fbd4 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001200:	6378      	str	r0, [r7, #52]	; 0x34
 8001202:	e004      	b.n	800120e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001204:	f001 fbd0 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001208:	4603      	mov	r3, r0
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001210:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <HAL_InitTick+0xe4>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	3b01      	subs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <HAL_InitTick+0xe8>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_InitTick+0xe8>)
 8001226:	f240 32e7 	movw	r2, #999	; 0x3e7
 800122a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_InitTick+0xe8>)
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_InitTick+0xe8>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_InitTick+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_InitTick+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <HAL_InitTick+0xe8>)
 8001246:	f002 fdb9 	bl	8003dbc <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001250:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001254:	2b00      	cmp	r3, #0
 8001256:	d11b      	bne.n	8001290 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <HAL_InitTick+0xe8>)
 800125a:	f002 fe07 	bl	8003e6c <HAL_TIM_Base_Start_IT>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001264:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800126c:	201c      	movs	r0, #28
 800126e:	f000 fa7f 	bl	8001770 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d808      	bhi.n	800128a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	201c      	movs	r0, #28
 800127e:	f000 fa5b 	bl	8001738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_InitTick+0xec>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e002      	b.n	8001290 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001294:	4618      	mov	r0, r3
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	431bde83 	.word	0x431bde83
 80012a4:	20000338 	.word	0x20000338
 80012a8:	20000004 	.word	0x20000004

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800130a:	f002 fe1f 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001a8 	.word	0x200001a8

08001318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM2_IRQHandler+0x10>)
 800131e:	f002 fe15 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000338 	.word	0x20000338

0800132c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <SPI2_IRQHandler+0x10>)
 8001332:	f002 facb 	bl	80038cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000144 	.word	0x20000144

08001340 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
  }

  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fcfb 	bl	8000d90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
  }
  return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013da:	605a      	str	r2, [r3, #4]
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_isatty>:

int _isatty(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f003 ff24 	bl	8005298 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20018000 	.word	0x20018000
 800147c:	00000400 	.word	0x00000400
 8001480:	20000384 	.word	0x20000384
 8001484:	200004d8 	.word	0x200004d8

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b0:	f7ff ffea 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f003 fee3 	bl	80052a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014de:	f7ff f927 	bl	8000730 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014f0:	08005f44 	.word	0x08005f44
  ldr r2, =_sbss
 80014f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014f8:	200004d8 	.word	0x200004d8

080014fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>
	...

08001500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_Init+0x3c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_Init+0x3c>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
 8001518:	f000 f903 	bl	8001722 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151c:	200f      	movs	r0, #15
 800151e:	f7ff fe4d 	bl	80011bc <HAL_InitTick>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	e001      	b.n	8001532 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152e:	f7ff fc5f 	bl	8000df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001532:	79fb      	ldrb	r3, [r7, #7]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40022000 	.word	0x40022000

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008
 8001564:	20000388 	.word	0x20000388

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000388 	.word	0x20000388

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff4c 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174a:	f7ff ff61 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800174e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff ffb1 	bl	80016bc <NVIC_EncodePriority>
 800175a:	4602      	mov	r2, r0
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff80 	bl	8001668 <__NVIC_SetPriority>
}
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff54 	bl	800162c <__NVIC_EnableIRQ>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d005      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2204      	movs	r2, #4
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e029      	b.n	8001804 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020e 	bic.w	r2, r2, #14
 80017be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f003 021c 	and.w	r2, r3, #28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
    }
  }
  return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e17f      	b.n	8001b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8171 	beq.w	8001b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d005      	beq.n	8001850 <HAL_GPIO_Init+0x40>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	f003 0201 	and.w	r2, r3, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d118      	bne.n	80018f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	6939      	ldr	r1, [r7, #16]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ac 	beq.w	8001b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_GPIO_Init+0x330>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	4a5e      	ldr	r2, [pc, #376]	; (8001b40 <HAL_GPIO_Init+0x330>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6613      	str	r3, [r2, #96]	; 0x60
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <HAL_GPIO_Init+0x330>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019da:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <HAL_GPIO_Init+0x334>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x242>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	; (8001b48 <HAL_GPIO_Init+0x338>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x23e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4e      	ldr	r2, [pc, #312]	; (8001b4c <HAL_GPIO_Init+0x33c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x23a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4d      	ldr	r2, [pc, #308]	; (8001b50 <HAL_GPIO_Init+0x340>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x236>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	; (8001b54 <HAL_GPIO_Init+0x344>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x232>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	; (8001b58 <HAL_GPIO_Init+0x348>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x22e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4a      	ldr	r2, [pc, #296]	; (8001b5c <HAL_GPIO_Init+0x34c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x22a>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a52:	2300      	movs	r3, #0
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a64:	4937      	ldr	r1, [pc, #220]	; (8001b44 <HAL_GPIO_Init+0x334>)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <HAL_GPIO_Init+0x350>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae78 	bne.w	8001820 <HAL_GPIO_Init+0x10>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	48001800 	.word	0x48001800
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
 8001b70:	4613      	mov	r3, r2
 8001b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e08d      	b.n	8001cc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f93c 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e006      	b.n	8001c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d108      	bne.n	8001c36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	e007      	b.n	8001c46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69d9      	ldr	r1, [r3, #28]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d138      	bne.n	8001d52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e032      	b.n	8001d54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2224      	movs	r2, #36	; 0x24
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d139      	bne.n	8001dea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e033      	b.n	8001dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001db2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e22:	d130      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e30:	d038      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2232      	movs	r2, #50	; 0x32
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e58:	e002      	b.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6c:	d102      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f2      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d110      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d007      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9c:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e3ca      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b97      	ldr	r3, [pc, #604]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b94      	ldr	r3, [pc, #592]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80e4 	beq.w	80020bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4a>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	f040 808b 	bne.w	8002018 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f040 8087 	bne.w	8002018 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0a:	4b89      	ldr	r3, [pc, #548]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e3a2      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4b82      	ldr	r3, [pc, #520]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <HAL_RCC_OscConfig+0x7c>
 8001f32:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3a:	e005      	b.n	8001f48 <HAL_RCC_OscConfig+0x88>
 8001f3c:	4b7c      	ldr	r3, [pc, #496]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d223      	bcs.n	8001f94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fd87 	bl	8002a64 <RCC_SetFlashLatencyFromMSIRange>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e383      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f60:	4b73      	ldr	r3, [pc, #460]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a72      	ldr	r2, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b70      	ldr	r3, [pc, #448]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	496d      	ldr	r1, [pc, #436]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	4968      	ldr	r1, [pc, #416]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
 8001f92:	e025      	b.n	8001fe0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4b66      	ldr	r3, [pc, #408]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a65      	ldr	r2, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4960      	ldr	r1, [pc, #384]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	495b      	ldr	r1, [pc, #364]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fd47 	bl	8002a64 <RCC_SetFlashLatencyFromMSIRange>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e343      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe0:	f000 fc4a 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	4950      	ldr	r1, [pc, #320]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002000:	4b4e      	ldr	r3, [pc, #312]	; (800213c <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f8d9 	bl	80011bc <HAL_InitTick>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d052      	beq.n	80020ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	e327      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202c:	f7ff fa9c 	bl	8001568 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7ff fa98 	bl	8001568 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e310      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a36      	ldr	r2, [pc, #216]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4931      	ldr	r1, [pc, #196]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	492c      	ldr	r1, [pc, #176]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e01a      	b.n	80020bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002092:	f7ff fa69 	bl	8001568 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209a:	f7ff fa65 	bl	8001568 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e2dd      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x1da>
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d074      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x21a>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d10e      	bne.n	80020f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d064      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d160      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e2ba      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x24a>
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e026      	b.n	8002158 <HAL_RCC_OscConfig+0x298>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002112:	d115      	bne.n	8002140 <HAL_RCC_OscConfig+0x280>
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 800211a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a02      	ldr	r2, [pc, #8]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x298>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	08005eb8 	.word	0x08005eb8
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004
 8002140:	4ba0      	ldr	r3, [pc, #640]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a9f      	ldr	r2, [pc, #636]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b9d      	ldr	r3, [pc, #628]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a9c      	ldr	r2, [pc, #624]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fa02 	bl	8001568 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f9fe 	bl	8001568 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e276      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2a8>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f9ee 	bl	8001568 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f9ea 	bl	8001568 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e262      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d0>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d060      	beq.n	8002280 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x310>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d0:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x328>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e23f      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4973      	ldr	r1, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	e040      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f9a9 	bl	8001568 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff f9a5 	bl	8001568 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e21d      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b62      	ldr	r3, [pc, #392]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	495f      	ldr	r1, [pc, #380]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5c      	ldr	r2, [pc, #368]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f985 	bl	8001568 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff f981 	bl	8001568 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e1f9      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002294:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	4a4a      	ldr	r2, [pc, #296]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff f960 	bl	8001568 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff f95c 	bl	8001568 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1d4      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d4:	4a3b      	ldr	r2, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f943 	bl	8001568 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff f93f 	bl	8001568 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1b7      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a6 	beq.w	8002460 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	; 0x58
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_RCC_OscConfig+0x508>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002358:	f7ff f906 	bl	8001568 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7ff f902 	bl	8001568 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e17a      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002396:	e029      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d115      	bne.n	80023cc <HAL_RCC_OscConfig+0x50c>
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	4b9c      	ldr	r3, [pc, #624]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a9b      	ldr	r2, [pc, #620]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023dc:	4b98      	ldr	r3, [pc, #608]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a97      	ldr	r2, [pc, #604]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7ff f8b8 	bl	8001568 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7ff f8b4 	bl	8001568 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e12a      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ed      	beq.n	80023fc <HAL_RCC_OscConfig+0x53c>
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7ff f8a1 	bl	8001568 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff f89d 	bl	8001568 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e113      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ed      	bne.n	800242a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b7a      	ldr	r3, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a79      	ldr	r2, [pc, #484]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80fe 	beq.w	8002666 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	2b02      	cmp	r3, #2
 8002470:	f040 80d0 	bne.w	8002614 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002474:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d130      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d127      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d11f      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b4:	2a07      	cmp	r2, #7
 80024b6:	bf14      	ite	ne
 80024b8:	2201      	movne	r2, #1
 80024ba:	2200      	moveq	r2, #0
 80024bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	4293      	cmp	r3, r2
 80024c0:	d113      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d06e      	beq.n	80025c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d069      	beq.n	80025c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0ad      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002518:	f7ff f826 	bl	8001568 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7ff f822 	bl	8001568 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e09a      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b40      	ldr	r3, [pc, #256]	; (8002644 <HAL_RCC_OscConfig+0x784>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800254e:	3a01      	subs	r2, #1
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002560:	0852      	lsrs	r2, r2, #1
 8002562:	3a01      	subs	r2, #1
 8002564:	0552      	lsls	r2, r2, #21
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800256c:	0852      	lsrs	r2, r2, #1
 800256e:	3a01      	subs	r2, #1
 8002570:	0652      	lsls	r2, r2, #25
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002578:	0912      	lsrs	r2, r2, #4
 800257a:	0452      	lsls	r2, r2, #17
 800257c:	430a      	orrs	r2, r1
 800257e:	4930      	ldr	r1, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002584:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800259c:	f7fe ffe4 	bl	8001568 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe ffe0 	bl	8001568 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e058      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c2:	e050      	b.n	8002666 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e04f      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d148      	bne.n	8002666 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ec:	f7fe ffbc 	bl	8001568 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe ffb8 	bl	8001568 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e030      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x734>
 8002612:	e028      	b.n	8002666 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d023      	beq.n	8002662 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_RCC_OscConfig+0x780>)
 8002620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe ff9f 	bl	8001568 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	e00c      	b.n	8002648 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe ff9b 	bl	8001568 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d905      	bls.n	8002648 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e013      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
 8002640:	40021000 	.word	0x40021000
 8002644:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x7b0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ec      	bne.n	800262e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_OscConfig+0x7b0>)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4905      	ldr	r1, [pc, #20]	; (8002670 <HAL_RCC_OscConfig+0x7b0>)
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_RCC_OscConfig+0x7b4>)
 800265c:	4013      	ands	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
 8002660:	e001      	b.n	8002666 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	feeefffc 	.word	0xfeeefffc

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0e7      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b72      	ldr	r3, [pc, #456]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4970      	ldr	r1, [pc, #448]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b6e      	ldr	r3, [pc, #440]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0cf      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d908      	bls.n	80026ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4960      	ldr	r1, [pc, #384]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04c      	beq.n	8002790 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	4b5a      	ldr	r3, [pc, #360]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d121      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0a6      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	4b54      	ldr	r3, [pc, #336]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e09a      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272e:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08e      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273e:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e086      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b46      	ldr	r3, [pc, #280]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4943      	ldr	r1, [pc, #268]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe ff02 	bl	8001568 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fefe 	bl	8001568 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e06e      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d208      	bcs.n	80027be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	492b      	ldr	r1, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d210      	bcs.n	80027ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 0207 	bic.w	r2, r3, #7
 80027d4:	4923      	ldr	r1, [pc, #140]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027dc:	4b21      	ldr	r3, [pc, #132]	; (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e036      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4918      	ldr	r1, [pc, #96]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4910      	ldr	r1, [pc, #64]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800282c:	f000 f824 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	490b      	ldr	r1, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1f4>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1f8>)
 800284a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1fc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fcb3 	bl	80011bc <HAL_InitTick>
 8002856:	4603      	mov	r3, r0
 8002858:	72fb      	strb	r3, [r7, #11]

  return status;
 800285a:	7afb      	ldrb	r3, [r7, #11]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08005eb8 	.word	0x08005eb8
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002886:	4b3e      	ldr	r3, [pc, #248]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d11e      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ac:	4b34      	ldr	r3, [pc, #208]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e005      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028d4:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_GetSysClockFreq+0x110>)
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e004      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_RCC_GetSysClockFreq+0x114>)
 80028fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d134      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0xa6>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d003      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0xac>
 800291c:	e005      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_RCC_GetSysClockFreq+0x110>)
 8002920:	617b      	str	r3, [r7, #20]
      break;
 8002922:	e005      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_GetSysClockFreq+0x114>)
 8002926:	617b      	str	r3, [r7, #20]
      break;
 8002928:	e002      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	617b      	str	r3, [r7, #20]
      break;
 800292e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	fb03 f202 	mul.w	r2, r3, r2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	0e5b      	lsrs	r3, r3, #25
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	3301      	adds	r3, #1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002970:	69bb      	ldr	r3, [r7, #24]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	08005ed0 	.word	0x08005ed0
 8002988:	00f42400 	.word	0x00f42400
 800298c:	007a1200 	.word	0x007a1200

08002990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029ac:	f7ff fff0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08005ec8 	.word	0x08005ec8

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029d8:	f7ff ffda 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0adb      	lsrs	r3, r3, #11
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4904      	ldr	r1, [pc, #16]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08005ec8 	.word	0x08005ec8

08002a00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCC_GetClockConfig+0x60>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0207 	and.w	r2, r3, #7
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40022000 	.word	0x40022000

08002a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a7c:	f7ff f9bc 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a80:	6178      	str	r0, [r7, #20]
 8002a82:	e014      	b.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a9c:	f7ff f9ac 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002aa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab4:	d10b      	bne.n	8002ace <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	d919      	bls.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac0:	d902      	bls.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e013      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e010      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d902      	bls.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e00a      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d102      	bne.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	e004      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b70      	cmp	r3, #112	; 0x70
 8002aea:	d101      	bne.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aec:	2301      	movs	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0207 	bic.w	r2, r3, #7
 8002af8:	4909      	ldr	r1, [pc, #36]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40022000 	.word	0x40022000

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b30:	2300      	movs	r3, #0
 8002b32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d041      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b48:	d02a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b4e:	d824      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b54:	d008      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b5a:	d81e      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b64:	d010      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b66:	e018      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b68:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a85      	ldr	r2, [pc, #532]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b74:	e015      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fabb 	bl	80030f8 <RCCEx_PLLSAI1_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b86:	e00c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fba6 	bl	80032e0 <RCCEx_PLLSAI2_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba8:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb6:	4973      	ldr	r1, [pc, #460]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bbe:	e001      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d041      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bd8:	d02a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bde:	d824      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bea:	d81e      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bf6:	e018      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bf8:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c04:	e015      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fa73 	bl	80030f8 <RCCEx_PLLSAI1_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c16:	e00c      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3320      	adds	r3, #32
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fb5e 	bl	80032e0 <RCCEx_PLLSAI2_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c28:	e003      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c2e:	e000      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c38:	4b52      	ldr	r3, [pc, #328]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c46:	494f      	ldr	r1, [pc, #316]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c4e:	e001      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a0 	beq.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c86:	6593      	str	r3, [r2, #88]	; 0x58
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fc60 	bl	8001568 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002caa:	e009      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe fc5c 	bl	8001568 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	74fb      	strb	r3, [r7, #19]
        break;
 8002cbe:	e005      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d15c      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01f      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d019      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fc1b 	bl	8001568 <HAL_GetTick>
 8002d32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d34:	e00b      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fc17 	bl	8001568 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d902      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d4c:	e006      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ec      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d72:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d7a:	e009      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
 8002d80:	e006      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d90:	7c7b      	ldrb	r3, [r7, #17]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b9e      	ldr	r3, [pc, #632]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	4a9d      	ldr	r2, [pc, #628]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dae:	4b98      	ldr	r3, [pc, #608]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f023 0203 	bic.w	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	4994      	ldr	r1, [pc, #592]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dd0:	4b8f      	ldr	r3, [pc, #572]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f023 020c 	bic.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	498c      	ldr	r1, [pc, #560]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002df2:	4b87      	ldr	r3, [pc, #540]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4983      	ldr	r1, [pc, #524]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e14:	4b7e      	ldr	r3, [pc, #504]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	497b      	ldr	r1, [pc, #492]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	4972      	ldr	r1, [pc, #456]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e58:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	496a      	ldr	r1, [pc, #424]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	4961      	ldr	r1, [pc, #388]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e9c:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	4959      	ldr	r1, [pc, #356]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebe:	4b54      	ldr	r3, [pc, #336]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ecc:	4950      	ldr	r1, [pc, #320]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee0:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	4948      	ldr	r1, [pc, #288]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f02:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	493f      	ldr	r1, [pc, #252]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d028      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f24:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f32:	4937      	ldr	r1, [pc, #220]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f42:	d106      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a31      	ldr	r2, [pc, #196]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4e:	60d3      	str	r3, [r2, #12]
 8002f50:	e011      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f8c8 	bl	80030f8 <RCCEx_PLLSAI1_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	491f      	ldr	r1, [pc, #124]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fac:	60d3      	str	r3, [r2, #12]
 8002fae:	e011      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f899 	bl	80030f8 <RCCEx_PLLSAI1_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	4908      	ldr	r1, [pc, #32]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffe:	d109      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a02      	ldr	r2, [pc, #8]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300a:	60d3      	str	r3, [r2, #12]
 800300c:	e014      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301c:	d10c      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f867 	bl	80030f8 <RCCEx_PLLSAI1_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02f      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003052:	4928      	ldr	r1, [pc, #160]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003062:	d10d      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	2102      	movs	r1, #2
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f844 	bl	80030f8 <RCCEx_PLLSAI1_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d014      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	74bb      	strb	r3, [r7, #18]
 800307e:	e011      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3320      	adds	r3, #32
 800308e:	2102      	movs	r1, #2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f925 	bl	80032e0 <RCCEx_PLLSAI2_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800309a:	7cfb      	ldrb	r3, [r7, #19]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030be:	490d      	ldr	r1, [pc, #52]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e2:	4904      	ldr	r1, [pc, #16]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000

080030f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003106:	4b75      	ldr	r3, [pc, #468]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003112:	4b72      	ldr	r3, [pc, #456]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0203 	and.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d10d      	bne.n	800313e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
       ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800312a:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
       ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d047      	beq.n	80031ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e044      	b.n	80031ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d018      	beq.n	800317e <RCCEx_PLLSAI1_Config+0x86>
 800314c:	2b03      	cmp	r3, #3
 800314e:	d825      	bhi.n	800319c <RCCEx_PLLSAI1_Config+0xa4>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d002      	beq.n	800315a <RCCEx_PLLSAI1_Config+0x62>
 8003154:	2b02      	cmp	r3, #2
 8003156:	d009      	beq.n	800316c <RCCEx_PLLSAI1_Config+0x74>
 8003158:	e020      	b.n	800319c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800315a:	4b60      	ldr	r3, [pc, #384]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11d      	bne.n	80031a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316a:	e01a      	b.n	80031a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800316c:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317c:	e013      	b.n	80031a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800317e:	4b57      	ldr	r3, [pc, #348]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800319a:	e006      	b.n	80031aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e004      	b.n	80031ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031a2:	bf00      	nop
 80031a4:	e002      	b.n	80031ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	430b      	orrs	r3, r1
 80031c8:	4944      	ldr	r1, [pc, #272]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d17d      	bne.n	80032d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a40      	ldr	r2, [pc, #256]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e0:	f7fe f9c2 	bl	8001568 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e6:	e009      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e8:	f7fe f9be 	bl	8001568 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d902      	bls.n	80031fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	73fb      	strb	r3, [r7, #15]
        break;
 80031fa:	e005      	b.n	8003208 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031fc:	4b37      	ldr	r3, [pc, #220]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ef      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d160      	bne.n	80032d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800321c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6892      	ldr	r2, [r2, #8]
 8003224:	0211      	lsls	r1, r2, #8
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	0912      	lsrs	r2, r2, #4
 800322c:	0452      	lsls	r2, r2, #17
 800322e:	430a      	orrs	r2, r1
 8003230:	492a      	ldr	r1, [pc, #168]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	610b      	str	r3, [r1, #16]
 8003236:	e027      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d112      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003246:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6892      	ldr	r2, [r2, #8]
 800324e:	0211      	lsls	r1, r2, #8
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6912      	ldr	r2, [r2, #16]
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0552      	lsls	r2, r2, #21
 800325a:	430a      	orrs	r2, r1
 800325c:	491f      	ldr	r1, [pc, #124]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	610b      	str	r3, [r1, #16]
 8003262:	e011      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800326c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	0211      	lsls	r1, r2, #8
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6952      	ldr	r2, [r2, #20]
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0652      	lsls	r2, r2, #25
 8003280:	430a      	orrs	r2, r1
 8003282:	4916      	ldr	r1, [pc, #88]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a13      	ldr	r2, [pc, #76]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800328e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe f968 	bl	8001568 <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800329a:	e009      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800329c:	f7fe f964 	bl	8001568 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d902      	bls.n	80032b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	73fb      	strb	r3, [r7, #15]
          break;
 80032ae:	e005      	b.n	80032bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ef      	beq.n	800329c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	4904      	ldr	r1, [pc, #16]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000

080032e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ee:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d018      	beq.n	800332c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d10d      	bne.n	8003326 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
       ||
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003312:	4b61      	ldr	r3, [pc, #388]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
       ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d047      	beq.n	80033b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e044      	b.n	80033b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d018      	beq.n	8003366 <RCCEx_PLLSAI2_Config+0x86>
 8003334:	2b03      	cmp	r3, #3
 8003336:	d825      	bhi.n	8003384 <RCCEx_PLLSAI2_Config+0xa4>
 8003338:	2b01      	cmp	r3, #1
 800333a:	d002      	beq.n	8003342 <RCCEx_PLLSAI2_Config+0x62>
 800333c:	2b02      	cmp	r3, #2
 800333e:	d009      	beq.n	8003354 <RCCEx_PLLSAI2_Config+0x74>
 8003340:	e020      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003342:	4b55      	ldr	r3, [pc, #340]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11d      	bne.n	800338a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003352:	e01a      	b.n	800338a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d116      	bne.n	800338e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003364:	e013      	b.n	800338e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003366:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003372:	4b49      	ldr	r3, [pc, #292]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003382:	e006      	b.n	8003392 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      break;
 8003388:	e004      	b.n	8003394 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003392:	bf00      	nop
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800339a:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	430b      	orrs	r3, r1
 80033b0:	4939      	ldr	r1, [pc, #228]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d167      	bne.n	800348c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a35      	ldr	r2, [pc, #212]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fe f8ce 	bl	8001568 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033ce:	e009      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033d0:	f7fe f8ca 	bl	8001568 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d902      	bls.n	80033e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	73fb      	strb	r3, [r7, #15]
        break;
 80033e2:	e005      	b.n	80033f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ef      	bne.n	80033d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d14a      	bne.n	800348c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d111      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	0211      	lsls	r1, r2, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68d2      	ldr	r2, [r2, #12]
 8003412:	0912      	lsrs	r2, r2, #4
 8003414:	0452      	lsls	r2, r2, #17
 8003416:	430a      	orrs	r2, r1
 8003418:	491f      	ldr	r1, [pc, #124]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	614b      	str	r3, [r1, #20]
 800341e:	e011      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	0211      	lsls	r1, r2, #8
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6912      	ldr	r2, [r2, #16]
 8003436:	0852      	lsrs	r2, r2, #1
 8003438:	3a01      	subs	r2, #1
 800343a:	0652      	lsls	r2, r2, #25
 800343c:	430a      	orrs	r2, r1
 800343e:	4916      	ldr	r1, [pc, #88]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003440:	4313      	orrs	r3, r2
 8003442:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a13      	ldr	r2, [pc, #76]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe f88a 	bl	8001568 <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003456:	e009      	b.n	800346c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003458:	f7fe f886 	bl	8001568 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	73fb      	strb	r3, [r7, #15]
          break;
 800346a:	e005      	b.n	8003478 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4904      	ldr	r1, [pc, #16]	; (8003498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003488:	4313      	orrs	r3, r2
 800348a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000

0800349c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e095      	b.n	80035da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d108      	bne.n	80034c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034be:	d009      	beq.n	80034d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]
 80034c6:	e005      	b.n	80034d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fd00 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003514:	d902      	bls.n	800351c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e002      	b.n	8003522 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800351c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003520:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800352a:	d007      	beq.n	800353c <HAL_SPI_Init+0xa0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003534:	d002      	beq.n	800353c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	ea42 0103 	orr.w	r1, r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	f003 0204 	and.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035b8:	ea42 0103 	orr.w	r1, r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_Transmit+0x22>
 8003600:	2302      	movs	r3, #2
 8003602:	e15f      	b.n	80038c4 <HAL_SPI_Transmit+0x2e2>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360c:	f7fd ffac 	bl	8001568 <HAL_GetTick>
 8003610:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003626:	e148      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x52>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003638:	e13f      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2203      	movs	r2, #3
 800363e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003684:	d10f      	bne.n	80036a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d007      	beq.n	80036c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036cc:	d94f      	bls.n	800376e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Transmit+0xfa>
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d142      	bne.n	8003762 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003700:	e02f      	b.n	8003762 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d112      	bne.n	8003736 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003734:	e015      	b.n	8003762 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003736:	f7fd ff17 	bl	8001568 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d803      	bhi.n	800374e <HAL_SPI_Transmit+0x16c>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d102      	bne.n	8003754 <HAL_SPI_Transmit+0x172>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003760:	e0ab      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ca      	bne.n	8003702 <HAL_SPI_Transmit+0x120>
 800376c:	e080      	b.n	8003870 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Transmit+0x19a>
 8003776:	8afb      	ldrh	r3, [r7, #22]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d174      	bne.n	8003866 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d912      	bls.n	80037ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	1c9a      	adds	r2, r3, #2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b02      	subs	r3, #2
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037aa:	e05c      	b.n	8003866 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037d2:	e048      	b.n	8003866 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d12b      	bne.n	800383a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d912      	bls.n	8003812 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b02      	subs	r3, #2
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003810:	e029      	b.n	8003866 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003838:	e015      	b.n	8003866 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800383a:	f7fd fe95 	bl	8001568 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d803      	bhi.n	8003852 <HAL_SPI_Transmit+0x270>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d102      	bne.n	8003858 <HAL_SPI_Transmit+0x276>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003864:	e029      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1b1      	bne.n	80037d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	6839      	ldr	r1, [r7, #0]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa5b 	bl	8003d30 <SPI_EndRxTxTransaction>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e003      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10e      	bne.n	800390c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
    return;
 800390a:	e0ce      	b.n	8003aaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_SPI_IRQHandler+0x5e>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
    return;
 8003928:	e0bf      	b.n	8003aaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_SPI_IRQHandler+0x7e>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d105      	bne.n	800394a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80b0 	beq.w	8003aaa <HAL_SPI_IRQHandler+0x1de>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80aa 	beq.w	8003aaa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d023      	beq.n	80039a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d011      	beq.n	8003990 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	e00b      	b.n	80039a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
        return;
 80039a6:	e080      	b.n	8003aaa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d014      	beq.n	80039dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d04f      	beq.n	8003aa8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_SPI_IRQHandler+0x168>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d034      	beq.n	8003a9e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0203 	bic.w	r2, r2, #3
 8003a42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_SPI_IRQHandler+0x1e4>)
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd fe97 	bl	800178c <HAL_DMA_Abort_IT>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d016      	beq.n	8003aa6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_SPI_IRQHandler+0x1e4>)
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fe81 	bl	800178c <HAL_DMA_Abort_IT>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003a9c:	e003      	b.n	8003aa6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f808 	bl	8003ab4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003aa4:	e000      	b.n	8003aa8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003aa6:	bf00      	nop
    return;
 8003aa8:	bf00      	nop
  }
}
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	08003ac9 	.word	0x08003ac9

08003ab4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff ffe5 	bl	8003ab4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b04:	f7fd fd30 	bl	8001568 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b14:	f7fd fd28 	bl	8001568 <HAL_GetTick>
 8003b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	015b      	lsls	r3, r3, #5
 8003b20:	0d1b      	lsrs	r3, r3, #20
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b2a:	e054      	b.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d050      	beq.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b34:	f7fd fd18 	bl	8001568 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d902      	bls.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d13d      	bne.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b62:	d111      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6c:	d004      	beq.n	8003b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b76:	d107      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d10f      	bne.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e017      	b.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d19b      	bne.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c16:	f7fd fca7 	bl	8001568 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c26:	f7fd fc9f 	bl	8001568 <HAL_GetTick>
 8003c2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c34:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	0d1b      	lsrs	r3, r3, #20
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c4c:	e060      	b.n	8003d10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c54:	d107      	bne.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d050      	beq.n	8003d10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c6e:	f7fd fc7b 	bl	8001568 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d902      	bls.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d13d      	bne.n	8003d00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9c:	d111      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca6:	d004      	beq.n	8003cb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d107      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cca:	d10f      	bne.n	8003cec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e010      	b.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d196      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000000 	.word	0x20000000

08003d30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff ff5b 	bl	8003c04 <SPI_WaitFifoStateUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e027      	b.n	8003db4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff fec0 	bl	8003af4 <SPI_WaitFlagStateUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e014      	b.n	8003db4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff ff34 	bl	8003c04 <SPI_WaitFifoStateUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e000      	b.n	8003db4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e049      	b.n	8003e62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f922 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 f9d0 	bl	80041a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d001      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e04f      	b.n	8003f24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x76>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d018      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x76>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x76>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x76>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x76>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d115      	bne.n	8003f0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d015      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0xb4>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efa:	d011      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	e008      	b.n	8003f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e000      	b.n	8003f22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	00010007 	.word	0x00010007

08003f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0202 	mvn.w	r2, #2
 8003f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8e4 	bl	8004164 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8d6 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8e7 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0204 	mvn.w	r2, #4
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8be 	bl	8004164 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8b0 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8c1 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f898 	bl	8004164 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f88a 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f89b 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2208      	movs	r2, #8
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f872 	bl	8004164 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f864 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f875 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fe7e 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f906 	bl	80042e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8fe 	bl	80042fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f834 	bl	800418c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0220 	mvn.w	r2, #32
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8c6 	bl	80042d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <TIM_Base_SetConfig+0x114>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041be:	d00f      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3d      	ldr	r2, [pc, #244]	; (80042b8 <TIM_Base_SetConfig+0x118>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a3c      	ldr	r2, [pc, #240]	; (80042bc <TIM_Base_SetConfig+0x11c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a3b      	ldr	r2, [pc, #236]	; (80042c0 <TIM_Base_SetConfig+0x120>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a3a      	ldr	r2, [pc, #232]	; (80042c4 <TIM_Base_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <TIM_Base_SetConfig+0x114>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01f      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d01b      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <TIM_Base_SetConfig+0x118>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d017      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <TIM_Base_SetConfig+0x11c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <TIM_Base_SetConfig+0x120>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <TIM_Base_SetConfig+0x124>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <TIM_Base_SetConfig+0x128>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <TIM_Base_SetConfig+0x12c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_Base_SetConfig+0x9a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <TIM_Base_SetConfig+0x130>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <TIM_Base_SetConfig+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00f      	beq.n	8004298 <TIM_Base_SetConfig+0xf8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <TIM_Base_SetConfig+0x124>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00b      	beq.n	8004298 <TIM_Base_SetConfig+0xf8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <TIM_Base_SetConfig+0x128>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d007      	beq.n	8004298 <TIM_Base_SetConfig+0xf8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a10      	ldr	r2, [pc, #64]	; (80042cc <TIM_Base_SetConfig+0x12c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_Base_SetConfig+0xf8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <TIM_Base_SetConfig+0x130>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d103      	bne.n	80042a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	615a      	str	r2, [r3, #20]
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e040      	b.n	80043a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fea0 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fc34 	bl	8004bc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f979 	bl	8004654 <UART_SetConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e01b      	b.n	80043a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fcb3 	bl	8004d08 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d178      	bne.n	80044b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_UART_Transmit+0x24>
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e071      	b.n	80044b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2221      	movs	r2, #33	; 0x21
 80043e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e2:	f7fd f8c1 	bl	8001568 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d108      	bne.n	8004414 <HAL_UART_Transmit+0x68>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e003      	b.n	800441c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800441c:	e030      	b.n	8004480 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2200      	movs	r2, #0
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fd15 	bl	8004e58 <UART_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e03c      	b.n	80044b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004450:	b292      	uxth	r2, r2
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	3302      	adds	r3, #2
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e008      	b.n	800446e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b292      	uxth	r2, r2
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1c8      	bne.n	800441e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2200      	movs	r2, #0
 8004494:	2140      	movs	r1, #64	; 0x40
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fcde 	bl	8004e58 <UART_WaitOnFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e005      	b.n	80044b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	f040 80b6 	bne.w	8004648 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Receive+0x28>
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0ae      	b.n	800464a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2222      	movs	r2, #34	; 0x22
 80044f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004502:	f7fd f831 	bl	8001568 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004520:	d10e      	bne.n	8004540 <HAL_UART_Receive+0x80>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d105      	bne.n	8004536 <HAL_UART_Receive+0x76>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004534:	e02d      	b.n	8004592 <HAL_UART_Receive+0xd2>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	22ff      	movs	r2, #255	; 0xff
 800453a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800453e:	e028      	b.n	8004592 <HAL_UART_Receive+0xd2>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10d      	bne.n	8004564 <HAL_UART_Receive+0xa4>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d104      	bne.n	800455a <HAL_UART_Receive+0x9a>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	22ff      	movs	r2, #255	; 0xff
 8004554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004558:	e01b      	b.n	8004592 <HAL_UART_Receive+0xd2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	227f      	movs	r2, #127	; 0x7f
 800455e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004562:	e016      	b.n	8004592 <HAL_UART_Receive+0xd2>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456c:	d10d      	bne.n	800458a <HAL_UART_Receive+0xca>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_UART_Receive+0xc0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	227f      	movs	r2, #127	; 0x7f
 800457a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800457e:	e008      	b.n	8004592 <HAL_UART_Receive+0xd2>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	223f      	movs	r2, #63	; 0x3f
 8004584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004588:	e003      	b.n	8004592 <HAL_UART_Receive+0xd2>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004598:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d108      	bne.n	80045b6 <HAL_UART_Receive+0xf6>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e003      	b.n	80045be <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045be:	e037      	b.n	8004630 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2120      	movs	r1, #32
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fc44 	bl	8004e58 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e033      	b.n	800464a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	8a7b      	ldrh	r3, [r7, #18]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	3302      	adds	r3, #2
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	e00d      	b.n	800461e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004608:	b29b      	uxth	r3, r3
 800460a:	b2da      	uxtb	r2, r3
 800460c:	8a7b      	ldrh	r3, [r7, #18]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4013      	ands	r3, r2
 8004612:	b2da      	uxtb	r2, r3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	3301      	adds	r3, #1
 800461c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1c1      	bne.n	80045c0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004658:	b08a      	sub	sp, #40	; 0x28
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	431a      	orrs	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	431a      	orrs	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	4313      	orrs	r3, r2
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4ba4      	ldr	r3, [pc, #656]	; (8004914 <UART_SetConfig+0x2c0>)
 8004684:	4013      	ands	r3, r2
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800468c:	430b      	orrs	r3, r1
 800468e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a99      	ldr	r2, [pc, #612]	; (8004918 <UART_SetConfig+0x2c4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	4313      	orrs	r3, r2
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a90      	ldr	r2, [pc, #576]	; (800491c <UART_SetConfig+0x2c8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d126      	bne.n	800472c <UART_SetConfig+0xd8>
 80046de:	4b90      	ldr	r3, [pc, #576]	; (8004920 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d81b      	bhi.n	8004724 <UART_SetConfig+0xd0>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0xa0>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004705 	.word	0x08004705
 80046f8:	08004715 	.word	0x08004715
 80046fc:	0800470d 	.word	0x0800470d
 8004700:	0800471d 	.word	0x0800471d
 8004704:	2301      	movs	r3, #1
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e116      	b.n	800493a <UART_SetConfig+0x2e6>
 800470c:	2302      	movs	r3, #2
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e112      	b.n	800493a <UART_SetConfig+0x2e6>
 8004714:	2304      	movs	r3, #4
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e10e      	b.n	800493a <UART_SetConfig+0x2e6>
 800471c:	2308      	movs	r3, #8
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e10a      	b.n	800493a <UART_SetConfig+0x2e6>
 8004724:	2310      	movs	r3, #16
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e106      	b.n	800493a <UART_SetConfig+0x2e6>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a7c      	ldr	r2, [pc, #496]	; (8004924 <UART_SetConfig+0x2d0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d138      	bne.n	80047a8 <UART_SetConfig+0x154>
 8004736:	4b7a      	ldr	r3, [pc, #488]	; (8004920 <UART_SetConfig+0x2cc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b0c      	cmp	r3, #12
 8004742:	d82d      	bhi.n	80047a0 <UART_SetConfig+0x14c>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0xf8>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	08004781 	.word	0x08004781
 8004750:	080047a1 	.word	0x080047a1
 8004754:	080047a1 	.word	0x080047a1
 8004758:	080047a1 	.word	0x080047a1
 800475c:	08004791 	.word	0x08004791
 8004760:	080047a1 	.word	0x080047a1
 8004764:	080047a1 	.word	0x080047a1
 8004768:	080047a1 	.word	0x080047a1
 800476c:	08004789 	.word	0x08004789
 8004770:	080047a1 	.word	0x080047a1
 8004774:	080047a1 	.word	0x080047a1
 8004778:	080047a1 	.word	0x080047a1
 800477c:	08004799 	.word	0x08004799
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e0d8      	b.n	800493a <UART_SetConfig+0x2e6>
 8004788:	2302      	movs	r3, #2
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e0d4      	b.n	800493a <UART_SetConfig+0x2e6>
 8004790:	2304      	movs	r3, #4
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e0d0      	b.n	800493a <UART_SetConfig+0x2e6>
 8004798:	2308      	movs	r3, #8
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e0cc      	b.n	800493a <UART_SetConfig+0x2e6>
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e0c8      	b.n	800493a <UART_SetConfig+0x2e6>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a5e      	ldr	r2, [pc, #376]	; (8004928 <UART_SetConfig+0x2d4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d125      	bne.n	80047fe <UART_SetConfig+0x1aa>
 80047b2:	4b5b      	ldr	r3, [pc, #364]	; (8004920 <UART_SetConfig+0x2cc>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d016      	beq.n	80047ee <UART_SetConfig+0x19a>
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	d818      	bhi.n	80047f6 <UART_SetConfig+0x1a2>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d00a      	beq.n	80047de <UART_SetConfig+0x18a>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d814      	bhi.n	80047f6 <UART_SetConfig+0x1a2>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <UART_SetConfig+0x182>
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d008      	beq.n	80047e6 <UART_SetConfig+0x192>
 80047d4:	e00f      	b.n	80047f6 <UART_SetConfig+0x1a2>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047dc:	e0ad      	b.n	800493a <UART_SetConfig+0x2e6>
 80047de:	2302      	movs	r3, #2
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e4:	e0a9      	b.n	800493a <UART_SetConfig+0x2e6>
 80047e6:	2304      	movs	r3, #4
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ec:	e0a5      	b.n	800493a <UART_SetConfig+0x2e6>
 80047ee:	2308      	movs	r3, #8
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f4:	e0a1      	b.n	800493a <UART_SetConfig+0x2e6>
 80047f6:	2310      	movs	r3, #16
 80047f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fc:	e09d      	b.n	800493a <UART_SetConfig+0x2e6>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a4a      	ldr	r2, [pc, #296]	; (800492c <UART_SetConfig+0x2d8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d125      	bne.n	8004854 <UART_SetConfig+0x200>
 8004808:	4b45      	ldr	r3, [pc, #276]	; (8004920 <UART_SetConfig+0x2cc>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004812:	2bc0      	cmp	r3, #192	; 0xc0
 8004814:	d016      	beq.n	8004844 <UART_SetConfig+0x1f0>
 8004816:	2bc0      	cmp	r3, #192	; 0xc0
 8004818:	d818      	bhi.n	800484c <UART_SetConfig+0x1f8>
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d00a      	beq.n	8004834 <UART_SetConfig+0x1e0>
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d814      	bhi.n	800484c <UART_SetConfig+0x1f8>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <UART_SetConfig+0x1d8>
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d008      	beq.n	800483c <UART_SetConfig+0x1e8>
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x1f8>
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e082      	b.n	800493a <UART_SetConfig+0x2e6>
 8004834:	2302      	movs	r3, #2
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e07e      	b.n	800493a <UART_SetConfig+0x2e6>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e07a      	b.n	800493a <UART_SetConfig+0x2e6>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e076      	b.n	800493a <UART_SetConfig+0x2e6>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e072      	b.n	800493a <UART_SetConfig+0x2e6>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a35      	ldr	r2, [pc, #212]	; (8004930 <UART_SetConfig+0x2dc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d12a      	bne.n	80048b4 <UART_SetConfig+0x260>
 800485e:	4b30      	ldr	r3, [pc, #192]	; (8004920 <UART_SetConfig+0x2cc>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486c:	d01a      	beq.n	80048a4 <UART_SetConfig+0x250>
 800486e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004872:	d81b      	bhi.n	80048ac <UART_SetConfig+0x258>
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d00c      	beq.n	8004894 <UART_SetConfig+0x240>
 800487a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487e:	d815      	bhi.n	80048ac <UART_SetConfig+0x258>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <UART_SetConfig+0x238>
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d008      	beq.n	800489c <UART_SetConfig+0x248>
 800488a:	e00f      	b.n	80048ac <UART_SetConfig+0x258>
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e052      	b.n	800493a <UART_SetConfig+0x2e6>
 8004894:	2302      	movs	r3, #2
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e04e      	b.n	800493a <UART_SetConfig+0x2e6>
 800489c:	2304      	movs	r3, #4
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e04a      	b.n	800493a <UART_SetConfig+0x2e6>
 80048a4:	2308      	movs	r3, #8
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e046      	b.n	800493a <UART_SetConfig+0x2e6>
 80048ac:	2310      	movs	r3, #16
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e042      	b.n	800493a <UART_SetConfig+0x2e6>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <UART_SetConfig+0x2c4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d13a      	bne.n	8004934 <UART_SetConfig+0x2e0>
 80048be:	4b18      	ldr	r3, [pc, #96]	; (8004920 <UART_SetConfig+0x2cc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048cc:	d01a      	beq.n	8004904 <UART_SetConfig+0x2b0>
 80048ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d2:	d81b      	bhi.n	800490c <UART_SetConfig+0x2b8>
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d8:	d00c      	beq.n	80048f4 <UART_SetConfig+0x2a0>
 80048da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048de:	d815      	bhi.n	800490c <UART_SetConfig+0x2b8>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <UART_SetConfig+0x298>
 80048e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e8:	d008      	beq.n	80048fc <UART_SetConfig+0x2a8>
 80048ea:	e00f      	b.n	800490c <UART_SetConfig+0x2b8>
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e022      	b.n	800493a <UART_SetConfig+0x2e6>
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e01e      	b.n	800493a <UART_SetConfig+0x2e6>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e01a      	b.n	800493a <UART_SetConfig+0x2e6>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e016      	b.n	800493a <UART_SetConfig+0x2e6>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e012      	b.n	800493a <UART_SetConfig+0x2e6>
 8004914:	efff69f3 	.word	0xefff69f3
 8004918:	40008000 	.word	0x40008000
 800491c:	40013800 	.word	0x40013800
 8004920:	40021000 	.word	0x40021000
 8004924:	40004400 	.word	0x40004400
 8004928:	40004800 	.word	0x40004800
 800492c:	40004c00 	.word	0x40004c00
 8004930:	40005000 	.word	0x40005000
 8004934:	2310      	movs	r3, #16
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a9f      	ldr	r2, [pc, #636]	; (8004bbc <UART_SetConfig+0x568>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d17a      	bne.n	8004a3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004948:	2b08      	cmp	r3, #8
 800494a:	d824      	bhi.n	8004996 <UART_SetConfig+0x342>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0x300>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004979 	.word	0x08004979
 8004958:	08004997 	.word	0x08004997
 800495c:	08004981 	.word	0x08004981
 8004960:	08004997 	.word	0x08004997
 8004964:	08004987 	.word	0x08004987
 8004968:	08004997 	.word	0x08004997
 800496c:	08004997 	.word	0x08004997
 8004970:	08004997 	.word	0x08004997
 8004974:	0800498f 	.word	0x0800498f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004978:	f7fe f816 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 800497c:	61f8      	str	r0, [r7, #28]
        break;
 800497e:	e010      	b.n	80049a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004980:	4b8f      	ldr	r3, [pc, #572]	; (8004bc0 <UART_SetConfig+0x56c>)
 8004982:	61fb      	str	r3, [r7, #28]
        break;
 8004984:	e00d      	b.n	80049a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004986:	f7fd ff77 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800498a:	61f8      	str	r0, [r7, #28]
        break;
 800498c:	e009      	b.n	80049a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80fb 	beq.w	8004ba0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d305      	bcc.n	80049c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d903      	bls.n	80049ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049cc:	e0e8      	b.n	8004ba0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2200      	movs	r2, #0
 80049d2:	461c      	mov	r4, r3
 80049d4:	4615      	mov	r5, r2
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	022b      	lsls	r3, r5, #8
 80049e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049e4:	0222      	lsls	r2, r4, #8
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	6849      	ldr	r1, [r1, #4]
 80049ea:	0849      	lsrs	r1, r1, #1
 80049ec:	2000      	movs	r0, #0
 80049ee:	4688      	mov	r8, r1
 80049f0:	4681      	mov	r9, r0
 80049f2:	eb12 0a08 	adds.w	sl, r2, r8
 80049f6:	eb43 0b09 	adc.w	fp, r3, r9
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a08:	4650      	mov	r0, sl
 8004a0a:	4659      	mov	r1, fp
 8004a0c:	f7fb fc30 	bl	8000270 <__aeabi_uldivmod>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4613      	mov	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1e:	d308      	bcc.n	8004a32 <UART_SetConfig+0x3de>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a26:	d204      	bcs.n	8004a32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	e0b6      	b.n	8004ba0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a38:	e0b2      	b.n	8004ba0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a42:	d15e      	bne.n	8004b02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x44a>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x400>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fd ff96 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	61f8      	str	r0, [r7, #28]
        break;
 8004a7e:	e014      	b.n	8004aaa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fd ffa8 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004a84:	61f8      	str	r0, [r7, #28]
        break;
 8004a86:	e010      	b.n	8004aaa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b4d      	ldr	r3, [pc, #308]	; (8004bc0 <UART_SetConfig+0x56c>)
 8004a8a:	61fb      	str	r3, [r7, #28]
        break;
 8004a8c:	e00d      	b.n	8004aaa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fd fef3 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8004a92:	61f8      	str	r0, [r7, #28]
        break;
 8004a94:	e009      	b.n	8004aaa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	61fb      	str	r3, [r7, #28]
        break;
 8004a9c:	e005      	b.n	8004aaa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004aa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d077      	beq.n	8004ba0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005a      	lsls	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	441a      	add	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b0f      	cmp	r3, #15
 8004aca:	d916      	bls.n	8004afa <UART_SetConfig+0x4a6>
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad2:	d212      	bcs.n	8004afa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f023 030f 	bic.w	r3, r3, #15
 8004adc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	8afb      	ldrh	r3, [r7, #22]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	8afa      	ldrh	r2, [r7, #22]
 8004af6:	60da      	str	r2, [r3, #12]
 8004af8:	e052      	b.n	8004ba0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b00:	e04e      	b.n	8004ba0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d827      	bhi.n	8004b5a <UART_SetConfig+0x506>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x4bc>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b4b 	.word	0x08004b4b
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b5b 	.word	0x08004b5b
 8004b2c:	08004b5b 	.word	0x08004b5b
 8004b30:	08004b53 	.word	0x08004b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fd ff38 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004b38:	61f8      	str	r0, [r7, #28]
        break;
 8004b3a:	e014      	b.n	8004b66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fd ff4a 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004b40:	61f8      	str	r0, [r7, #28]
        break;
 8004b42:	e010      	b.n	8004b66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <UART_SetConfig+0x56c>)
 8004b46:	61fb      	str	r3, [r7, #28]
        break;
 8004b48:	e00d      	b.n	8004b66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fd fe95 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8004b4e:	61f8      	str	r0, [r7, #28]
        break;
 8004b50:	e009      	b.n	8004b66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b56:	61fb      	str	r3, [r7, #28]
        break;
 8004b58:	e005      	b.n	8004b66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b64:	bf00      	nop
    }

    if (pclk != 0U)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d019      	beq.n	8004ba0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	085a      	lsrs	r2, r3, #1
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d909      	bls.n	8004b9a <UART_SetConfig+0x546>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d205      	bcs.n	8004b9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
 8004b98:	e002      	b.n	8004ba0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bba:	bf00      	nop
 8004bbc:	40008000 	.word	0x40008000
 8004bc0:	00f42400 	.word	0x00f42400

08004bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01a      	beq.n	8004cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc2:	d10a      	bne.n	8004cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b098      	sub	sp, #96	; 0x60
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d18:	f7fc fc26 	bl	8001568 <HAL_GetTick>
 8004d1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d12e      	bne.n	8004d8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d34:	2200      	movs	r2, #0
 8004d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f88c 	bl	8004e58 <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d021      	beq.n	8004d8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d64:	647b      	str	r3, [r7, #68]	; 0x44
 8004d66:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e062      	b.n	8004e50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d149      	bne.n	8004e2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da0:	2200      	movs	r2, #0
 8004da2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f856 	bl	8004e58 <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03c      	beq.n	8004e2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e04:	61fa      	str	r2, [r7, #28]
 8004e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	617b      	str	r3, [r7, #20]
   return(result);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e011      	b.n	8004e50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3758      	adds	r7, #88	; 0x58
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e68:	e049      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d045      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fc fb79 	bl	8001568 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e048      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d031      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d110      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2208      	movs	r2, #8
 8004eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f838 	bl	8004f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e029      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed8:	d111      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f81e 	bl	8004f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e00f      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4013      	ands	r3, r2
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d0a6      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b095      	sub	sp, #84	; 0x54
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e6      	bne.n	8004f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d118      	bne.n	8004fce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e6      	bne.n	8004f9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fe2:	bf00      	nop
 8004fe4:	3754      	adds	r7, #84	; 0x54
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <std>:
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8004ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ffe:	6083      	str	r3, [r0, #8]
 8005000:	8181      	strh	r1, [r0, #12]
 8005002:	6643      	str	r3, [r0, #100]	; 0x64
 8005004:	81c2      	strh	r2, [r0, #14]
 8005006:	6183      	str	r3, [r0, #24]
 8005008:	4619      	mov	r1, r3
 800500a:	2208      	movs	r2, #8
 800500c:	305c      	adds	r0, #92	; 0x5c
 800500e:	f000 f8f4 	bl	80051fa <memset>
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <std+0x38>)
 8005014:	6263      	str	r3, [r4, #36]	; 0x24
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <std+0x3c>)
 8005018:	62a3      	str	r3, [r4, #40]	; 0x28
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <std+0x40>)
 800501c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <std+0x44>)
 8005020:	6224      	str	r4, [r4, #32]
 8005022:	6323      	str	r3, [r4, #48]	; 0x30
 8005024:	bd10      	pop	{r4, pc}
 8005026:	bf00      	nop
 8005028:	08005175 	.word	0x08005175
 800502c:	08005197 	.word	0x08005197
 8005030:	080051cf 	.word	0x080051cf
 8005034:	080051f3 	.word	0x080051f3

08005038 <stdio_exit_handler>:
 8005038:	4a02      	ldr	r2, [pc, #8]	; (8005044 <stdio_exit_handler+0xc>)
 800503a:	4903      	ldr	r1, [pc, #12]	; (8005048 <stdio_exit_handler+0x10>)
 800503c:	4803      	ldr	r0, [pc, #12]	; (800504c <stdio_exit_handler+0x14>)
 800503e:	f000 b869 	b.w	8005114 <_fwalk_sglue>
 8005042:	bf00      	nop
 8005044:	2000000c 	.word	0x2000000c
 8005048:	08005b95 	.word	0x08005b95
 800504c:	20000018 	.word	0x20000018

08005050 <cleanup_stdio>:
 8005050:	6841      	ldr	r1, [r0, #4]
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <cleanup_stdio+0x34>)
 8005054:	4299      	cmp	r1, r3
 8005056:	b510      	push	{r4, lr}
 8005058:	4604      	mov	r4, r0
 800505a:	d001      	beq.n	8005060 <cleanup_stdio+0x10>
 800505c:	f000 fd9a 	bl	8005b94 <_fflush_r>
 8005060:	68a1      	ldr	r1, [r4, #8]
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <cleanup_stdio+0x38>)
 8005064:	4299      	cmp	r1, r3
 8005066:	d002      	beq.n	800506e <cleanup_stdio+0x1e>
 8005068:	4620      	mov	r0, r4
 800506a:	f000 fd93 	bl	8005b94 <_fflush_r>
 800506e:	68e1      	ldr	r1, [r4, #12]
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <cleanup_stdio+0x3c>)
 8005072:	4299      	cmp	r1, r3
 8005074:	d004      	beq.n	8005080 <cleanup_stdio+0x30>
 8005076:	4620      	mov	r0, r4
 8005078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800507c:	f000 bd8a 	b.w	8005b94 <_fflush_r>
 8005080:	bd10      	pop	{r4, pc}
 8005082:	bf00      	nop
 8005084:	2000038c 	.word	0x2000038c
 8005088:	200003f4 	.word	0x200003f4
 800508c:	2000045c 	.word	0x2000045c

08005090 <global_stdio_init.part.0>:
 8005090:	b510      	push	{r4, lr}
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <global_stdio_init.part.0+0x30>)
 8005094:	4c0b      	ldr	r4, [pc, #44]	; (80050c4 <global_stdio_init.part.0+0x34>)
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <global_stdio_init.part.0+0x38>)
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	4620      	mov	r0, r4
 800509c:	2200      	movs	r2, #0
 800509e:	2104      	movs	r1, #4
 80050a0:	f7ff ffa6 	bl	8004ff0 <std>
 80050a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050a8:	2201      	movs	r2, #1
 80050aa:	2109      	movs	r1, #9
 80050ac:	f7ff ffa0 	bl	8004ff0 <std>
 80050b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050b4:	2202      	movs	r2, #2
 80050b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ba:	2112      	movs	r1, #18
 80050bc:	f7ff bf98 	b.w	8004ff0 <std>
 80050c0:	200004c4 	.word	0x200004c4
 80050c4:	2000038c 	.word	0x2000038c
 80050c8:	08005039 	.word	0x08005039

080050cc <__sfp_lock_acquire>:
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <__sfp_lock_acquire+0x8>)
 80050ce:	f000 b90d 	b.w	80052ec <__retarget_lock_acquire_recursive>
 80050d2:	bf00      	nop
 80050d4:	200004cd 	.word	0x200004cd

080050d8 <__sfp_lock_release>:
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__sfp_lock_release+0x8>)
 80050da:	f000 b908 	b.w	80052ee <__retarget_lock_release_recursive>
 80050de:	bf00      	nop
 80050e0:	200004cd 	.word	0x200004cd

080050e4 <__sinit>:
 80050e4:	b510      	push	{r4, lr}
 80050e6:	4604      	mov	r4, r0
 80050e8:	f7ff fff0 	bl	80050cc <__sfp_lock_acquire>
 80050ec:	6a23      	ldr	r3, [r4, #32]
 80050ee:	b11b      	cbz	r3, 80050f8 <__sinit+0x14>
 80050f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f4:	f7ff bff0 	b.w	80050d8 <__sfp_lock_release>
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <__sinit+0x28>)
 80050fa:	6223      	str	r3, [r4, #32]
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <__sinit+0x2c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f5      	bne.n	80050f0 <__sinit+0xc>
 8005104:	f7ff ffc4 	bl	8005090 <global_stdio_init.part.0>
 8005108:	e7f2      	b.n	80050f0 <__sinit+0xc>
 800510a:	bf00      	nop
 800510c:	08005051 	.word	0x08005051
 8005110:	200004c4 	.word	0x200004c4

08005114 <_fwalk_sglue>:
 8005114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005118:	4607      	mov	r7, r0
 800511a:	4688      	mov	r8, r1
 800511c:	4614      	mov	r4, r2
 800511e:	2600      	movs	r6, #0
 8005120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005124:	f1b9 0901 	subs.w	r9, r9, #1
 8005128:	d505      	bpl.n	8005136 <_fwalk_sglue+0x22>
 800512a:	6824      	ldr	r4, [r4, #0]
 800512c:	2c00      	cmp	r4, #0
 800512e:	d1f7      	bne.n	8005120 <_fwalk_sglue+0xc>
 8005130:	4630      	mov	r0, r6
 8005132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d907      	bls.n	800514c <_fwalk_sglue+0x38>
 800513c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005140:	3301      	adds	r3, #1
 8005142:	d003      	beq.n	800514c <_fwalk_sglue+0x38>
 8005144:	4629      	mov	r1, r5
 8005146:	4638      	mov	r0, r7
 8005148:	47c0      	blx	r8
 800514a:	4306      	orrs	r6, r0
 800514c:	3568      	adds	r5, #104	; 0x68
 800514e:	e7e9      	b.n	8005124 <_fwalk_sglue+0x10>

08005150 <iprintf>:
 8005150:	b40f      	push	{r0, r1, r2, r3}
 8005152:	b507      	push	{r0, r1, r2, lr}
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <iprintf+0x20>)
 8005156:	ab04      	add	r3, sp, #16
 8005158:	6808      	ldr	r0, [r1, #0]
 800515a:	f853 2b04 	ldr.w	r2, [r3], #4
 800515e:	6881      	ldr	r1, [r0, #8]
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	f000 f9e7 	bl	8005534 <_vfiprintf_r>
 8005166:	b003      	add	sp, #12
 8005168:	f85d eb04 	ldr.w	lr, [sp], #4
 800516c:	b004      	add	sp, #16
 800516e:	4770      	bx	lr
 8005170:	20000064 	.word	0x20000064

08005174 <__sread>:
 8005174:	b510      	push	{r4, lr}
 8005176:	460c      	mov	r4, r1
 8005178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517c:	f000 f868 	bl	8005250 <_read_r>
 8005180:	2800      	cmp	r0, #0
 8005182:	bfab      	itete	ge
 8005184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005186:	89a3      	ldrhlt	r3, [r4, #12]
 8005188:	181b      	addge	r3, r3, r0
 800518a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800518e:	bfac      	ite	ge
 8005190:	6563      	strge	r3, [r4, #84]	; 0x54
 8005192:	81a3      	strhlt	r3, [r4, #12]
 8005194:	bd10      	pop	{r4, pc}

08005196 <__swrite>:
 8005196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519a:	461f      	mov	r7, r3
 800519c:	898b      	ldrh	r3, [r1, #12]
 800519e:	05db      	lsls	r3, r3, #23
 80051a0:	4605      	mov	r5, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	4616      	mov	r6, r2
 80051a6:	d505      	bpl.n	80051b4 <__swrite+0x1e>
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	2302      	movs	r3, #2
 80051ae:	2200      	movs	r2, #0
 80051b0:	f000 f83c 	bl	800522c <_lseek_r>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	4632      	mov	r2, r6
 80051c2:	463b      	mov	r3, r7
 80051c4:	4628      	mov	r0, r5
 80051c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ca:	f000 b853 	b.w	8005274 <_write_r>

080051ce <__sseek>:
 80051ce:	b510      	push	{r4, lr}
 80051d0:	460c      	mov	r4, r1
 80051d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d6:	f000 f829 	bl	800522c <_lseek_r>
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	bf15      	itete	ne
 80051e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80051e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051ea:	81a3      	strheq	r3, [r4, #12]
 80051ec:	bf18      	it	ne
 80051ee:	81a3      	strhne	r3, [r4, #12]
 80051f0:	bd10      	pop	{r4, pc}

080051f2 <__sclose>:
 80051f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f6:	f000 b809 	b.w	800520c <_close_r>

080051fa <memset>:
 80051fa:	4402      	add	r2, r0
 80051fc:	4603      	mov	r3, r0
 80051fe:	4293      	cmp	r3, r2
 8005200:	d100      	bne.n	8005204 <memset+0xa>
 8005202:	4770      	bx	lr
 8005204:	f803 1b01 	strb.w	r1, [r3], #1
 8005208:	e7f9      	b.n	80051fe <memset+0x4>
	...

0800520c <_close_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d06      	ldr	r5, [pc, #24]	; (8005228 <_close_r+0x1c>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	f7fc f8cb 	bl	80013b2 <_close>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_close_r+0x1a>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_close_r+0x1a>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	200004c8 	.word	0x200004c8

0800522c <_lseek_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	; (800524c <_lseek_r+0x20>)
 8005230:	4604      	mov	r4, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	602a      	str	r2, [r5, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fc f8e0 	bl	8001400 <_lseek>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_lseek_r+0x1e>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_lseek_r+0x1e>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	200004c8 	.word	0x200004c8

08005250 <_read_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d07      	ldr	r5, [pc, #28]	; (8005270 <_read_r+0x20>)
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	2200      	movs	r2, #0
 800525c:	602a      	str	r2, [r5, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	f7fc f86e 	bl	8001340 <_read>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_read_r+0x1e>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_read_r+0x1e>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200004c8 	.word	0x200004c8

08005274 <_write_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	; (8005294 <_write_r+0x20>)
 8005278:	4604      	mov	r4, r0
 800527a:	4608      	mov	r0, r1
 800527c:	4611      	mov	r1, r2
 800527e:	2200      	movs	r2, #0
 8005280:	602a      	str	r2, [r5, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f7fc f879 	bl	800137a <_write>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_write_r+0x1e>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_write_r+0x1e>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	200004c8 	.word	0x200004c8

08005298 <__errno>:
 8005298:	4b01      	ldr	r3, [pc, #4]	; (80052a0 <__errno+0x8>)
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000064 	.word	0x20000064

080052a4 <__libc_init_array>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4d0d      	ldr	r5, [pc, #52]	; (80052dc <__libc_init_array+0x38>)
 80052a8:	4c0d      	ldr	r4, [pc, #52]	; (80052e0 <__libc_init_array+0x3c>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	2600      	movs	r6, #0
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	d109      	bne.n	80052c8 <__libc_init_array+0x24>
 80052b4:	4d0b      	ldr	r5, [pc, #44]	; (80052e4 <__libc_init_array+0x40>)
 80052b6:	4c0c      	ldr	r4, [pc, #48]	; (80052e8 <__libc_init_array+0x44>)
 80052b8:	f000 fdbe 	bl	8005e38 <_init>
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	2600      	movs	r6, #0
 80052c2:	42a6      	cmp	r6, r4
 80052c4:	d105      	bne.n	80052d2 <__libc_init_array+0x2e>
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052cc:	4798      	blx	r3
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7ee      	b.n	80052b0 <__libc_init_array+0xc>
 80052d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d6:	4798      	blx	r3
 80052d8:	3601      	adds	r6, #1
 80052da:	e7f2      	b.n	80052c2 <__libc_init_array+0x1e>
 80052dc:	08005f3c 	.word	0x08005f3c
 80052e0:	08005f3c 	.word	0x08005f3c
 80052e4:	08005f3c 	.word	0x08005f3c
 80052e8:	08005f40 	.word	0x08005f40

080052ec <__retarget_lock_acquire_recursive>:
 80052ec:	4770      	bx	lr

080052ee <__retarget_lock_release_recursive>:
 80052ee:	4770      	bx	lr

080052f0 <_free_r>:
 80052f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d044      	beq.n	8005380 <_free_r+0x90>
 80052f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fa:	9001      	str	r0, [sp, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005302:	bfb8      	it	lt
 8005304:	18e4      	addlt	r4, r4, r3
 8005306:	f000 f8df 	bl	80054c8 <__malloc_lock>
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <_free_r+0x94>)
 800530c:	9801      	ldr	r0, [sp, #4]
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	b933      	cbnz	r3, 8005320 <_free_r+0x30>
 8005312:	6063      	str	r3, [r4, #4]
 8005314:	6014      	str	r4, [r2, #0]
 8005316:	b003      	add	sp, #12
 8005318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800531c:	f000 b8da 	b.w	80054d4 <__malloc_unlock>
 8005320:	42a3      	cmp	r3, r4
 8005322:	d908      	bls.n	8005336 <_free_r+0x46>
 8005324:	6825      	ldr	r5, [r4, #0]
 8005326:	1961      	adds	r1, r4, r5
 8005328:	428b      	cmp	r3, r1
 800532a:	bf01      	itttt	eq
 800532c:	6819      	ldreq	r1, [r3, #0]
 800532e:	685b      	ldreq	r3, [r3, #4]
 8005330:	1949      	addeq	r1, r1, r5
 8005332:	6021      	streq	r1, [r4, #0]
 8005334:	e7ed      	b.n	8005312 <_free_r+0x22>
 8005336:	461a      	mov	r2, r3
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	b10b      	cbz	r3, 8005340 <_free_r+0x50>
 800533c:	42a3      	cmp	r3, r4
 800533e:	d9fa      	bls.n	8005336 <_free_r+0x46>
 8005340:	6811      	ldr	r1, [r2, #0]
 8005342:	1855      	adds	r5, r2, r1
 8005344:	42a5      	cmp	r5, r4
 8005346:	d10b      	bne.n	8005360 <_free_r+0x70>
 8005348:	6824      	ldr	r4, [r4, #0]
 800534a:	4421      	add	r1, r4
 800534c:	1854      	adds	r4, r2, r1
 800534e:	42a3      	cmp	r3, r4
 8005350:	6011      	str	r1, [r2, #0]
 8005352:	d1e0      	bne.n	8005316 <_free_r+0x26>
 8005354:	681c      	ldr	r4, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	6053      	str	r3, [r2, #4]
 800535a:	440c      	add	r4, r1
 800535c:	6014      	str	r4, [r2, #0]
 800535e:	e7da      	b.n	8005316 <_free_r+0x26>
 8005360:	d902      	bls.n	8005368 <_free_r+0x78>
 8005362:	230c      	movs	r3, #12
 8005364:	6003      	str	r3, [r0, #0]
 8005366:	e7d6      	b.n	8005316 <_free_r+0x26>
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	1961      	adds	r1, r4, r5
 800536c:	428b      	cmp	r3, r1
 800536e:	bf04      	itt	eq
 8005370:	6819      	ldreq	r1, [r3, #0]
 8005372:	685b      	ldreq	r3, [r3, #4]
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	bf04      	itt	eq
 8005378:	1949      	addeq	r1, r1, r5
 800537a:	6021      	streq	r1, [r4, #0]
 800537c:	6054      	str	r4, [r2, #4]
 800537e:	e7ca      	b.n	8005316 <_free_r+0x26>
 8005380:	b003      	add	sp, #12
 8005382:	bd30      	pop	{r4, r5, pc}
 8005384:	200004d0 	.word	0x200004d0

08005388 <sbrk_aligned>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4e0e      	ldr	r6, [pc, #56]	; (80053c4 <sbrk_aligned+0x3c>)
 800538c:	460c      	mov	r4, r1
 800538e:	6831      	ldr	r1, [r6, #0]
 8005390:	4605      	mov	r5, r0
 8005392:	b911      	cbnz	r1, 800539a <sbrk_aligned+0x12>
 8005394:	f000 fcbc 	bl	8005d10 <_sbrk_r>
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f000 fcb7 	bl	8005d10 <_sbrk_r>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d00a      	beq.n	80053bc <sbrk_aligned+0x34>
 80053a6:	1cc4      	adds	r4, r0, #3
 80053a8:	f024 0403 	bic.w	r4, r4, #3
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	d007      	beq.n	80053c0 <sbrk_aligned+0x38>
 80053b0:	1a21      	subs	r1, r4, r0
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 fcac 	bl	8005d10 <_sbrk_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d101      	bne.n	80053c0 <sbrk_aligned+0x38>
 80053bc:	f04f 34ff 	mov.w	r4, #4294967295
 80053c0:	4620      	mov	r0, r4
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	200004d4 	.word	0x200004d4

080053c8 <_malloc_r>:
 80053c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	1ccd      	adds	r5, r1, #3
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	2d00      	cmp	r5, #0
 80053dc:	4607      	mov	r7, r0
 80053de:	db01      	blt.n	80053e4 <_malloc_r+0x1c>
 80053e0:	42a9      	cmp	r1, r5
 80053e2:	d905      	bls.n	80053f0 <_malloc_r+0x28>
 80053e4:	230c      	movs	r3, #12
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	2600      	movs	r6, #0
 80053ea:	4630      	mov	r0, r6
 80053ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054c4 <_malloc_r+0xfc>
 80053f4:	f000 f868 	bl	80054c8 <__malloc_lock>
 80053f8:	f8d8 3000 	ldr.w	r3, [r8]
 80053fc:	461c      	mov	r4, r3
 80053fe:	bb5c      	cbnz	r4, 8005458 <_malloc_r+0x90>
 8005400:	4629      	mov	r1, r5
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ffc0 	bl	8005388 <sbrk_aligned>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	4604      	mov	r4, r0
 800540c:	d155      	bne.n	80054ba <_malloc_r+0xf2>
 800540e:	f8d8 4000 	ldr.w	r4, [r8]
 8005412:	4626      	mov	r6, r4
 8005414:	2e00      	cmp	r6, #0
 8005416:	d145      	bne.n	80054a4 <_malloc_r+0xdc>
 8005418:	2c00      	cmp	r4, #0
 800541a:	d048      	beq.n	80054ae <_malloc_r+0xe6>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	4631      	mov	r1, r6
 8005420:	4638      	mov	r0, r7
 8005422:	eb04 0903 	add.w	r9, r4, r3
 8005426:	f000 fc73 	bl	8005d10 <_sbrk_r>
 800542a:	4581      	cmp	r9, r0
 800542c:	d13f      	bne.n	80054ae <_malloc_r+0xe6>
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	1a6d      	subs	r5, r5, r1
 8005432:	4629      	mov	r1, r5
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ffa7 	bl	8005388 <sbrk_aligned>
 800543a:	3001      	adds	r0, #1
 800543c:	d037      	beq.n	80054ae <_malloc_r+0xe6>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	442b      	add	r3, r5
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	f8d8 3000 	ldr.w	r3, [r8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d038      	beq.n	80054be <_malloc_r+0xf6>
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	42a2      	cmp	r2, r4
 8005450:	d12b      	bne.n	80054aa <_malloc_r+0xe2>
 8005452:	2200      	movs	r2, #0
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	e00f      	b.n	8005478 <_malloc_r+0xb0>
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	1b52      	subs	r2, r2, r5
 800545c:	d41f      	bmi.n	800549e <_malloc_r+0xd6>
 800545e:	2a0b      	cmp	r2, #11
 8005460:	d917      	bls.n	8005492 <_malloc_r+0xca>
 8005462:	1961      	adds	r1, r4, r5
 8005464:	42a3      	cmp	r3, r4
 8005466:	6025      	str	r5, [r4, #0]
 8005468:	bf18      	it	ne
 800546a:	6059      	strne	r1, [r3, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	bf08      	it	eq
 8005470:	f8c8 1000 	streq.w	r1, [r8]
 8005474:	5162      	str	r2, [r4, r5]
 8005476:	604b      	str	r3, [r1, #4]
 8005478:	4638      	mov	r0, r7
 800547a:	f104 060b 	add.w	r6, r4, #11
 800547e:	f000 f829 	bl	80054d4 <__malloc_unlock>
 8005482:	f026 0607 	bic.w	r6, r6, #7
 8005486:	1d23      	adds	r3, r4, #4
 8005488:	1af2      	subs	r2, r6, r3
 800548a:	d0ae      	beq.n	80053ea <_malloc_r+0x22>
 800548c:	1b9b      	subs	r3, r3, r6
 800548e:	50a3      	str	r3, [r4, r2]
 8005490:	e7ab      	b.n	80053ea <_malloc_r+0x22>
 8005492:	42a3      	cmp	r3, r4
 8005494:	6862      	ldr	r2, [r4, #4]
 8005496:	d1dd      	bne.n	8005454 <_malloc_r+0x8c>
 8005498:	f8c8 2000 	str.w	r2, [r8]
 800549c:	e7ec      	b.n	8005478 <_malloc_r+0xb0>
 800549e:	4623      	mov	r3, r4
 80054a0:	6864      	ldr	r4, [r4, #4]
 80054a2:	e7ac      	b.n	80053fe <_malloc_r+0x36>
 80054a4:	4634      	mov	r4, r6
 80054a6:	6876      	ldr	r6, [r6, #4]
 80054a8:	e7b4      	b.n	8005414 <_malloc_r+0x4c>
 80054aa:	4613      	mov	r3, r2
 80054ac:	e7cc      	b.n	8005448 <_malloc_r+0x80>
 80054ae:	230c      	movs	r3, #12
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	4638      	mov	r0, r7
 80054b4:	f000 f80e 	bl	80054d4 <__malloc_unlock>
 80054b8:	e797      	b.n	80053ea <_malloc_r+0x22>
 80054ba:	6025      	str	r5, [r4, #0]
 80054bc:	e7dc      	b.n	8005478 <_malloc_r+0xb0>
 80054be:	605b      	str	r3, [r3, #4]
 80054c0:	deff      	udf	#255	; 0xff
 80054c2:	bf00      	nop
 80054c4:	200004d0 	.word	0x200004d0

080054c8 <__malloc_lock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_lock+0x8>)
 80054ca:	f7ff bf0f 	b.w	80052ec <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	200004cc 	.word	0x200004cc

080054d4 <__malloc_unlock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	; (80054dc <__malloc_unlock+0x8>)
 80054d6:	f7ff bf0a 	b.w	80052ee <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	200004cc 	.word	0x200004cc

080054e0 <__sfputc_r>:
 80054e0:	6893      	ldr	r3, [r2, #8]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	b410      	push	{r4}
 80054e8:	6093      	str	r3, [r2, #8]
 80054ea:	da08      	bge.n	80054fe <__sfputc_r+0x1e>
 80054ec:	6994      	ldr	r4, [r2, #24]
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	db01      	blt.n	80054f6 <__sfputc_r+0x16>
 80054f2:	290a      	cmp	r1, #10
 80054f4:	d103      	bne.n	80054fe <__sfputc_r+0x1e>
 80054f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054fa:	f000 bb73 	b.w	8005be4 <__swbuf_r>
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	1c58      	adds	r0, r3, #1
 8005502:	6010      	str	r0, [r2, #0]
 8005504:	7019      	strb	r1, [r3, #0]
 8005506:	4608      	mov	r0, r1
 8005508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550c:	4770      	bx	lr

0800550e <__sfputs_r>:
 800550e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	4614      	mov	r4, r2
 8005516:	18d5      	adds	r5, r2, r3
 8005518:	42ac      	cmp	r4, r5
 800551a:	d101      	bne.n	8005520 <__sfputs_r+0x12>
 800551c:	2000      	movs	r0, #0
 800551e:	e007      	b.n	8005530 <__sfputs_r+0x22>
 8005520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005524:	463a      	mov	r2, r7
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ffda 	bl	80054e0 <__sfputc_r>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d1f3      	bne.n	8005518 <__sfputs_r+0xa>
 8005530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005534 <_vfiprintf_r>:
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	460d      	mov	r5, r1
 800553a:	b09d      	sub	sp, #116	; 0x74
 800553c:	4614      	mov	r4, r2
 800553e:	4698      	mov	r8, r3
 8005540:	4606      	mov	r6, r0
 8005542:	b118      	cbz	r0, 800554c <_vfiprintf_r+0x18>
 8005544:	6a03      	ldr	r3, [r0, #32]
 8005546:	b90b      	cbnz	r3, 800554c <_vfiprintf_r+0x18>
 8005548:	f7ff fdcc 	bl	80050e4 <__sinit>
 800554c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800554e:	07d9      	lsls	r1, r3, #31
 8005550:	d405      	bmi.n	800555e <_vfiprintf_r+0x2a>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	059a      	lsls	r2, r3, #22
 8005556:	d402      	bmi.n	800555e <_vfiprintf_r+0x2a>
 8005558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800555a:	f7ff fec7 	bl	80052ec <__retarget_lock_acquire_recursive>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	071b      	lsls	r3, r3, #28
 8005562:	d501      	bpl.n	8005568 <_vfiprintf_r+0x34>
 8005564:	692b      	ldr	r3, [r5, #16]
 8005566:	b99b      	cbnz	r3, 8005590 <_vfiprintf_r+0x5c>
 8005568:	4629      	mov	r1, r5
 800556a:	4630      	mov	r0, r6
 800556c:	f000 fb78 	bl	8005c60 <__swsetup_r>
 8005570:	b170      	cbz	r0, 8005590 <_vfiprintf_r+0x5c>
 8005572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005574:	07dc      	lsls	r4, r3, #31
 8005576:	d504      	bpl.n	8005582 <_vfiprintf_r+0x4e>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	b01d      	add	sp, #116	; 0x74
 800557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	0598      	lsls	r0, r3, #22
 8005586:	d4f7      	bmi.n	8005578 <_vfiprintf_r+0x44>
 8005588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800558a:	f7ff feb0 	bl	80052ee <__retarget_lock_release_recursive>
 800558e:	e7f3      	b.n	8005578 <_vfiprintf_r+0x44>
 8005590:	2300      	movs	r3, #0
 8005592:	9309      	str	r3, [sp, #36]	; 0x24
 8005594:	2320      	movs	r3, #32
 8005596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800559a:	f8cd 800c 	str.w	r8, [sp, #12]
 800559e:	2330      	movs	r3, #48	; 0x30
 80055a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005754 <_vfiprintf_r+0x220>
 80055a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055a8:	f04f 0901 	mov.w	r9, #1
 80055ac:	4623      	mov	r3, r4
 80055ae:	469a      	mov	sl, r3
 80055b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b4:	b10a      	cbz	r2, 80055ba <_vfiprintf_r+0x86>
 80055b6:	2a25      	cmp	r2, #37	; 0x25
 80055b8:	d1f9      	bne.n	80055ae <_vfiprintf_r+0x7a>
 80055ba:	ebba 0b04 	subs.w	fp, sl, r4
 80055be:	d00b      	beq.n	80055d8 <_vfiprintf_r+0xa4>
 80055c0:	465b      	mov	r3, fp
 80055c2:	4622      	mov	r2, r4
 80055c4:	4629      	mov	r1, r5
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff ffa1 	bl	800550e <__sfputs_r>
 80055cc:	3001      	adds	r0, #1
 80055ce:	f000 80a9 	beq.w	8005724 <_vfiprintf_r+0x1f0>
 80055d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d4:	445a      	add	r2, fp
 80055d6:	9209      	str	r2, [sp, #36]	; 0x24
 80055d8:	f89a 3000 	ldrb.w	r3, [sl]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80a1 	beq.w	8005724 <_vfiprintf_r+0x1f0>
 80055e2:	2300      	movs	r3, #0
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ec:	f10a 0a01 	add.w	sl, sl, #1
 80055f0:	9304      	str	r3, [sp, #16]
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055f8:	931a      	str	r3, [sp, #104]	; 0x68
 80055fa:	4654      	mov	r4, sl
 80055fc:	2205      	movs	r2, #5
 80055fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005602:	4854      	ldr	r0, [pc, #336]	; (8005754 <_vfiprintf_r+0x220>)
 8005604:	f7fa fde4 	bl	80001d0 <memchr>
 8005608:	9a04      	ldr	r2, [sp, #16]
 800560a:	b9d8      	cbnz	r0, 8005644 <_vfiprintf_r+0x110>
 800560c:	06d1      	lsls	r1, r2, #27
 800560e:	bf44      	itt	mi
 8005610:	2320      	movmi	r3, #32
 8005612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005616:	0713      	lsls	r3, r2, #28
 8005618:	bf44      	itt	mi
 800561a:	232b      	movmi	r3, #43	; 0x2b
 800561c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005620:	f89a 3000 	ldrb.w	r3, [sl]
 8005624:	2b2a      	cmp	r3, #42	; 0x2a
 8005626:	d015      	beq.n	8005654 <_vfiprintf_r+0x120>
 8005628:	9a07      	ldr	r2, [sp, #28]
 800562a:	4654      	mov	r4, sl
 800562c:	2000      	movs	r0, #0
 800562e:	f04f 0c0a 	mov.w	ip, #10
 8005632:	4621      	mov	r1, r4
 8005634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005638:	3b30      	subs	r3, #48	; 0x30
 800563a:	2b09      	cmp	r3, #9
 800563c:	d94d      	bls.n	80056da <_vfiprintf_r+0x1a6>
 800563e:	b1b0      	cbz	r0, 800566e <_vfiprintf_r+0x13a>
 8005640:	9207      	str	r2, [sp, #28]
 8005642:	e014      	b.n	800566e <_vfiprintf_r+0x13a>
 8005644:	eba0 0308 	sub.w	r3, r0, r8
 8005648:	fa09 f303 	lsl.w	r3, r9, r3
 800564c:	4313      	orrs	r3, r2
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	46a2      	mov	sl, r4
 8005652:	e7d2      	b.n	80055fa <_vfiprintf_r+0xc6>
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	1d19      	adds	r1, r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	9103      	str	r1, [sp, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	bfbb      	ittet	lt
 8005660:	425b      	neglt	r3, r3
 8005662:	f042 0202 	orrlt.w	r2, r2, #2
 8005666:	9307      	strge	r3, [sp, #28]
 8005668:	9307      	strlt	r3, [sp, #28]
 800566a:	bfb8      	it	lt
 800566c:	9204      	strlt	r2, [sp, #16]
 800566e:	7823      	ldrb	r3, [r4, #0]
 8005670:	2b2e      	cmp	r3, #46	; 0x2e
 8005672:	d10c      	bne.n	800568e <_vfiprintf_r+0x15a>
 8005674:	7863      	ldrb	r3, [r4, #1]
 8005676:	2b2a      	cmp	r3, #42	; 0x2a
 8005678:	d134      	bne.n	80056e4 <_vfiprintf_r+0x1b0>
 800567a:	9b03      	ldr	r3, [sp, #12]
 800567c:	1d1a      	adds	r2, r3, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	9203      	str	r2, [sp, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfb8      	it	lt
 8005686:	f04f 33ff 	movlt.w	r3, #4294967295
 800568a:	3402      	adds	r4, #2
 800568c:	9305      	str	r3, [sp, #20]
 800568e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005764 <_vfiprintf_r+0x230>
 8005692:	7821      	ldrb	r1, [r4, #0]
 8005694:	2203      	movs	r2, #3
 8005696:	4650      	mov	r0, sl
 8005698:	f7fa fd9a 	bl	80001d0 <memchr>
 800569c:	b138      	cbz	r0, 80056ae <_vfiprintf_r+0x17a>
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	eba0 000a 	sub.w	r0, r0, sl
 80056a4:	2240      	movs	r2, #64	; 0x40
 80056a6:	4082      	lsls	r2, r0
 80056a8:	4313      	orrs	r3, r2
 80056aa:	3401      	adds	r4, #1
 80056ac:	9304      	str	r3, [sp, #16]
 80056ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b2:	4829      	ldr	r0, [pc, #164]	; (8005758 <_vfiprintf_r+0x224>)
 80056b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056b8:	2206      	movs	r2, #6
 80056ba:	f7fa fd89 	bl	80001d0 <memchr>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d03f      	beq.n	8005742 <_vfiprintf_r+0x20e>
 80056c2:	4b26      	ldr	r3, [pc, #152]	; (800575c <_vfiprintf_r+0x228>)
 80056c4:	bb1b      	cbnz	r3, 800570e <_vfiprintf_r+0x1da>
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	3307      	adds	r3, #7
 80056ca:	f023 0307 	bic.w	r3, r3, #7
 80056ce:	3308      	adds	r3, #8
 80056d0:	9303      	str	r3, [sp, #12]
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	443b      	add	r3, r7
 80056d6:	9309      	str	r3, [sp, #36]	; 0x24
 80056d8:	e768      	b.n	80055ac <_vfiprintf_r+0x78>
 80056da:	fb0c 3202 	mla	r2, ip, r2, r3
 80056de:	460c      	mov	r4, r1
 80056e0:	2001      	movs	r0, #1
 80056e2:	e7a6      	b.n	8005632 <_vfiprintf_r+0xfe>
 80056e4:	2300      	movs	r3, #0
 80056e6:	3401      	adds	r4, #1
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	4619      	mov	r1, r3
 80056ec:	f04f 0c0a 	mov.w	ip, #10
 80056f0:	4620      	mov	r0, r4
 80056f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f6:	3a30      	subs	r2, #48	; 0x30
 80056f8:	2a09      	cmp	r2, #9
 80056fa:	d903      	bls.n	8005704 <_vfiprintf_r+0x1d0>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0c6      	beq.n	800568e <_vfiprintf_r+0x15a>
 8005700:	9105      	str	r1, [sp, #20]
 8005702:	e7c4      	b.n	800568e <_vfiprintf_r+0x15a>
 8005704:	fb0c 2101 	mla	r1, ip, r1, r2
 8005708:	4604      	mov	r4, r0
 800570a:	2301      	movs	r3, #1
 800570c:	e7f0      	b.n	80056f0 <_vfiprintf_r+0x1bc>
 800570e:	ab03      	add	r3, sp, #12
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	462a      	mov	r2, r5
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <_vfiprintf_r+0x22c>)
 8005716:	a904      	add	r1, sp, #16
 8005718:	4630      	mov	r0, r6
 800571a:	f3af 8000 	nop.w
 800571e:	4607      	mov	r7, r0
 8005720:	1c78      	adds	r0, r7, #1
 8005722:	d1d6      	bne.n	80056d2 <_vfiprintf_r+0x19e>
 8005724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005726:	07d9      	lsls	r1, r3, #31
 8005728:	d405      	bmi.n	8005736 <_vfiprintf_r+0x202>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	059a      	lsls	r2, r3, #22
 800572e:	d402      	bmi.n	8005736 <_vfiprintf_r+0x202>
 8005730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005732:	f7ff fddc 	bl	80052ee <__retarget_lock_release_recursive>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	065b      	lsls	r3, r3, #25
 800573a:	f53f af1d 	bmi.w	8005578 <_vfiprintf_r+0x44>
 800573e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005740:	e71c      	b.n	800557c <_vfiprintf_r+0x48>
 8005742:	ab03      	add	r3, sp, #12
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	462a      	mov	r2, r5
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <_vfiprintf_r+0x22c>)
 800574a:	a904      	add	r1, sp, #16
 800574c:	4630      	mov	r0, r6
 800574e:	f000 f879 	bl	8005844 <_printf_i>
 8005752:	e7e4      	b.n	800571e <_vfiprintf_r+0x1ea>
 8005754:	08005f00 	.word	0x08005f00
 8005758:	08005f0a 	.word	0x08005f0a
 800575c:	00000000 	.word	0x00000000
 8005760:	0800550f 	.word	0x0800550f
 8005764:	08005f06 	.word	0x08005f06

08005768 <_printf_common>:
 8005768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	4616      	mov	r6, r2
 800576e:	4699      	mov	r9, r3
 8005770:	688a      	ldr	r2, [r1, #8]
 8005772:	690b      	ldr	r3, [r1, #16]
 8005774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005778:	4293      	cmp	r3, r2
 800577a:	bfb8      	it	lt
 800577c:	4613      	movlt	r3, r2
 800577e:	6033      	str	r3, [r6, #0]
 8005780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005784:	4607      	mov	r7, r0
 8005786:	460c      	mov	r4, r1
 8005788:	b10a      	cbz	r2, 800578e <_printf_common+0x26>
 800578a:	3301      	adds	r3, #1
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	0699      	lsls	r1, r3, #26
 8005792:	bf42      	ittt	mi
 8005794:	6833      	ldrmi	r3, [r6, #0]
 8005796:	3302      	addmi	r3, #2
 8005798:	6033      	strmi	r3, [r6, #0]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	f015 0506 	ands.w	r5, r5, #6
 80057a0:	d106      	bne.n	80057b0 <_printf_common+0x48>
 80057a2:	f104 0a19 	add.w	sl, r4, #25
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	6832      	ldr	r2, [r6, #0]
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dc26      	bgt.n	80057fe <_printf_common+0x96>
 80057b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057b4:	1e13      	subs	r3, r2, #0
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	bf18      	it	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	0692      	lsls	r2, r2, #26
 80057be:	d42b      	bmi.n	8005818 <_printf_common+0xb0>
 80057c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c4:	4649      	mov	r1, r9
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d01e      	beq.n	800580c <_printf_common+0xa4>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	f003 0306 	and.w	r3, r3, #6
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	bf02      	ittt	eq
 80057da:	68e5      	ldreq	r5, [r4, #12]
 80057dc:	6833      	ldreq	r3, [r6, #0]
 80057de:	1aed      	subeq	r5, r5, r3
 80057e0:	68a3      	ldr	r3, [r4, #8]
 80057e2:	bf0c      	ite	eq
 80057e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e8:	2500      	movne	r5, #0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bfc4      	itt	gt
 80057ee:	1a9b      	subgt	r3, r3, r2
 80057f0:	18ed      	addgt	r5, r5, r3
 80057f2:	2600      	movs	r6, #0
 80057f4:	341a      	adds	r4, #26
 80057f6:	42b5      	cmp	r5, r6
 80057f8:	d11a      	bne.n	8005830 <_printf_common+0xc8>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e008      	b.n	8005810 <_printf_common+0xa8>
 80057fe:	2301      	movs	r3, #1
 8005800:	4652      	mov	r2, sl
 8005802:	4649      	mov	r1, r9
 8005804:	4638      	mov	r0, r7
 8005806:	47c0      	blx	r8
 8005808:	3001      	adds	r0, #1
 800580a:	d103      	bne.n	8005814 <_printf_common+0xac>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005814:	3501      	adds	r5, #1
 8005816:	e7c6      	b.n	80057a6 <_printf_common+0x3e>
 8005818:	18e1      	adds	r1, r4, r3
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	2030      	movs	r0, #48	; 0x30
 800581e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005822:	4422      	add	r2, r4
 8005824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800582c:	3302      	adds	r3, #2
 800582e:	e7c7      	b.n	80057c0 <_printf_common+0x58>
 8005830:	2301      	movs	r3, #1
 8005832:	4622      	mov	r2, r4
 8005834:	4649      	mov	r1, r9
 8005836:	4638      	mov	r0, r7
 8005838:	47c0      	blx	r8
 800583a:	3001      	adds	r0, #1
 800583c:	d0e6      	beq.n	800580c <_printf_common+0xa4>
 800583e:	3601      	adds	r6, #1
 8005840:	e7d9      	b.n	80057f6 <_printf_common+0x8e>
	...

08005844 <_printf_i>:
 8005844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	7e0f      	ldrb	r7, [r1, #24]
 800584a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800584c:	2f78      	cmp	r7, #120	; 0x78
 800584e:	4691      	mov	r9, r2
 8005850:	4680      	mov	r8, r0
 8005852:	460c      	mov	r4, r1
 8005854:	469a      	mov	sl, r3
 8005856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800585a:	d807      	bhi.n	800586c <_printf_i+0x28>
 800585c:	2f62      	cmp	r7, #98	; 0x62
 800585e:	d80a      	bhi.n	8005876 <_printf_i+0x32>
 8005860:	2f00      	cmp	r7, #0
 8005862:	f000 80d4 	beq.w	8005a0e <_printf_i+0x1ca>
 8005866:	2f58      	cmp	r7, #88	; 0x58
 8005868:	f000 80c0 	beq.w	80059ec <_printf_i+0x1a8>
 800586c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005874:	e03a      	b.n	80058ec <_printf_i+0xa8>
 8005876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800587a:	2b15      	cmp	r3, #21
 800587c:	d8f6      	bhi.n	800586c <_printf_i+0x28>
 800587e:	a101      	add	r1, pc, #4	; (adr r1, 8005884 <_printf_i+0x40>)
 8005880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058f1 	.word	0x080058f1
 800588c:	0800586d 	.word	0x0800586d
 8005890:	0800586d 	.word	0x0800586d
 8005894:	0800586d 	.word	0x0800586d
 8005898:	0800586d 	.word	0x0800586d
 800589c:	080058f1 	.word	0x080058f1
 80058a0:	0800586d 	.word	0x0800586d
 80058a4:	0800586d 	.word	0x0800586d
 80058a8:	0800586d 	.word	0x0800586d
 80058ac:	0800586d 	.word	0x0800586d
 80058b0:	080059f5 	.word	0x080059f5
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	080059af 	.word	0x080059af
 80058bc:	0800586d 	.word	0x0800586d
 80058c0:	0800586d 	.word	0x0800586d
 80058c4:	08005a17 	.word	0x08005a17
 80058c8:	0800586d 	.word	0x0800586d
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800586d 	.word	0x0800586d
 80058d4:	0800586d 	.word	0x0800586d
 80058d8:	080059b7 	.word	0x080059b7
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	602a      	str	r2, [r5, #0]
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ec:	2301      	movs	r3, #1
 80058ee:	e09f      	b.n	8005a30 <_printf_i+0x1ec>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	0607      	lsls	r7, r0, #24
 80058f6:	f103 0104 	add.w	r1, r3, #4
 80058fa:	6029      	str	r1, [r5, #0]
 80058fc:	d501      	bpl.n	8005902 <_printf_i+0xbe>
 80058fe:	681e      	ldr	r6, [r3, #0]
 8005900:	e003      	b.n	800590a <_printf_i+0xc6>
 8005902:	0646      	lsls	r6, r0, #25
 8005904:	d5fb      	bpl.n	80058fe <_printf_i+0xba>
 8005906:	f9b3 6000 	ldrsh.w	r6, [r3]
 800590a:	2e00      	cmp	r6, #0
 800590c:	da03      	bge.n	8005916 <_printf_i+0xd2>
 800590e:	232d      	movs	r3, #45	; 0x2d
 8005910:	4276      	negs	r6, r6
 8005912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005916:	485a      	ldr	r0, [pc, #360]	; (8005a80 <_printf_i+0x23c>)
 8005918:	230a      	movs	r3, #10
 800591a:	e012      	b.n	8005942 <_printf_i+0xfe>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	6820      	ldr	r0, [r4, #0]
 8005920:	1d19      	adds	r1, r3, #4
 8005922:	6029      	str	r1, [r5, #0]
 8005924:	0605      	lsls	r5, r0, #24
 8005926:	d501      	bpl.n	800592c <_printf_i+0xe8>
 8005928:	681e      	ldr	r6, [r3, #0]
 800592a:	e002      	b.n	8005932 <_printf_i+0xee>
 800592c:	0641      	lsls	r1, r0, #25
 800592e:	d5fb      	bpl.n	8005928 <_printf_i+0xe4>
 8005930:	881e      	ldrh	r6, [r3, #0]
 8005932:	4853      	ldr	r0, [pc, #332]	; (8005a80 <_printf_i+0x23c>)
 8005934:	2f6f      	cmp	r7, #111	; 0x6f
 8005936:	bf0c      	ite	eq
 8005938:	2308      	moveq	r3, #8
 800593a:	230a      	movne	r3, #10
 800593c:	2100      	movs	r1, #0
 800593e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005942:	6865      	ldr	r5, [r4, #4]
 8005944:	60a5      	str	r5, [r4, #8]
 8005946:	2d00      	cmp	r5, #0
 8005948:	bfa2      	ittt	ge
 800594a:	6821      	ldrge	r1, [r4, #0]
 800594c:	f021 0104 	bicge.w	r1, r1, #4
 8005950:	6021      	strge	r1, [r4, #0]
 8005952:	b90e      	cbnz	r6, 8005958 <_printf_i+0x114>
 8005954:	2d00      	cmp	r5, #0
 8005956:	d04b      	beq.n	80059f0 <_printf_i+0x1ac>
 8005958:	4615      	mov	r5, r2
 800595a:	fbb6 f1f3 	udiv	r1, r6, r3
 800595e:	fb03 6711 	mls	r7, r3, r1, r6
 8005962:	5dc7      	ldrb	r7, [r0, r7]
 8005964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005968:	4637      	mov	r7, r6
 800596a:	42bb      	cmp	r3, r7
 800596c:	460e      	mov	r6, r1
 800596e:	d9f4      	bls.n	800595a <_printf_i+0x116>
 8005970:	2b08      	cmp	r3, #8
 8005972:	d10b      	bne.n	800598c <_printf_i+0x148>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	07de      	lsls	r6, r3, #31
 8005978:	d508      	bpl.n	800598c <_printf_i+0x148>
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	6861      	ldr	r1, [r4, #4]
 800597e:	4299      	cmp	r1, r3
 8005980:	bfde      	ittt	le
 8005982:	2330      	movle	r3, #48	; 0x30
 8005984:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005988:	f105 35ff 	addle.w	r5, r5, #4294967295
 800598c:	1b52      	subs	r2, r2, r5
 800598e:	6122      	str	r2, [r4, #16]
 8005990:	f8cd a000 	str.w	sl, [sp]
 8005994:	464b      	mov	r3, r9
 8005996:	aa03      	add	r2, sp, #12
 8005998:	4621      	mov	r1, r4
 800599a:	4640      	mov	r0, r8
 800599c:	f7ff fee4 	bl	8005768 <_printf_common>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d14a      	bne.n	8005a3a <_printf_i+0x1f6>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b004      	add	sp, #16
 80059aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f043 0320 	orr.w	r3, r3, #32
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	4833      	ldr	r0, [pc, #204]	; (8005a84 <_printf_i+0x240>)
 80059b8:	2778      	movs	r7, #120	; 0x78
 80059ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	6829      	ldr	r1, [r5, #0]
 80059c2:	061f      	lsls	r7, r3, #24
 80059c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059c8:	d402      	bmi.n	80059d0 <_printf_i+0x18c>
 80059ca:	065f      	lsls	r7, r3, #25
 80059cc:	bf48      	it	mi
 80059ce:	b2b6      	uxthmi	r6, r6
 80059d0:	07df      	lsls	r7, r3, #31
 80059d2:	bf48      	it	mi
 80059d4:	f043 0320 	orrmi.w	r3, r3, #32
 80059d8:	6029      	str	r1, [r5, #0]
 80059da:	bf48      	it	mi
 80059dc:	6023      	strmi	r3, [r4, #0]
 80059de:	b91e      	cbnz	r6, 80059e8 <_printf_i+0x1a4>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	f023 0320 	bic.w	r3, r3, #32
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	2310      	movs	r3, #16
 80059ea:	e7a7      	b.n	800593c <_printf_i+0xf8>
 80059ec:	4824      	ldr	r0, [pc, #144]	; (8005a80 <_printf_i+0x23c>)
 80059ee:	e7e4      	b.n	80059ba <_printf_i+0x176>
 80059f0:	4615      	mov	r5, r2
 80059f2:	e7bd      	b.n	8005970 <_printf_i+0x12c>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	6826      	ldr	r6, [r4, #0]
 80059f8:	6961      	ldr	r1, [r4, #20]
 80059fa:	1d18      	adds	r0, r3, #4
 80059fc:	6028      	str	r0, [r5, #0]
 80059fe:	0635      	lsls	r5, r6, #24
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0x1c4>
 8005a04:	6019      	str	r1, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0x1ca>
 8005a08:	0670      	lsls	r0, r6, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0x1c0>
 8005a0c:	8019      	strh	r1, [r3, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	4615      	mov	r5, r2
 8005a14:	e7bc      	b.n	8005990 <_printf_i+0x14c>
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	1d1a      	adds	r2, r3, #4
 8005a1a:	602a      	str	r2, [r5, #0]
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	2100      	movs	r1, #0
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7fa fbd4 	bl	80001d0 <memchr>
 8005a28:	b108      	cbz	r0, 8005a2e <_printf_i+0x1ea>
 8005a2a:	1b40      	subs	r0, r0, r5
 8005a2c:	6060      	str	r0, [r4, #4]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	e7aa      	b.n	8005990 <_printf_i+0x14c>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d0ad      	beq.n	80059a4 <_printf_i+0x160>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	079b      	lsls	r3, r3, #30
 8005a4c:	d413      	bmi.n	8005a76 <_printf_i+0x232>
 8005a4e:	68e0      	ldr	r0, [r4, #12]
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	4298      	cmp	r0, r3
 8005a54:	bfb8      	it	lt
 8005a56:	4618      	movlt	r0, r3
 8005a58:	e7a6      	b.n	80059a8 <_printf_i+0x164>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	47d0      	blx	sl
 8005a64:	3001      	adds	r0, #1
 8005a66:	d09d      	beq.n	80059a4 <_printf_i+0x160>
 8005a68:	3501      	adds	r5, #1
 8005a6a:	68e3      	ldr	r3, [r4, #12]
 8005a6c:	9903      	ldr	r1, [sp, #12]
 8005a6e:	1a5b      	subs	r3, r3, r1
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	dcf2      	bgt.n	8005a5a <_printf_i+0x216>
 8005a74:	e7eb      	b.n	8005a4e <_printf_i+0x20a>
 8005a76:	2500      	movs	r5, #0
 8005a78:	f104 0619 	add.w	r6, r4, #25
 8005a7c:	e7f5      	b.n	8005a6a <_printf_i+0x226>
 8005a7e:	bf00      	nop
 8005a80:	08005f11 	.word	0x08005f11
 8005a84:	08005f22 	.word	0x08005f22

08005a88 <__sflush_r>:
 8005a88:	898a      	ldrh	r2, [r1, #12]
 8005a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8e:	4605      	mov	r5, r0
 8005a90:	0710      	lsls	r0, r2, #28
 8005a92:	460c      	mov	r4, r1
 8005a94:	d458      	bmi.n	8005b48 <__sflush_r+0xc0>
 8005a96:	684b      	ldr	r3, [r1, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dc05      	bgt.n	8005aa8 <__sflush_r+0x20>
 8005a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	dc02      	bgt.n	8005aa8 <__sflush_r+0x20>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aaa:	2e00      	cmp	r6, #0
 8005aac:	d0f9      	beq.n	8005aa2 <__sflush_r+0x1a>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ab4:	682f      	ldr	r7, [r5, #0]
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	d032      	beq.n	8005b22 <__sflush_r+0x9a>
 8005abc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	075a      	lsls	r2, r3, #29
 8005ac2:	d505      	bpl.n	8005ad0 <__sflush_r+0x48>
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	1ac0      	subs	r0, r0, r3
 8005ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aca:	b10b      	cbz	r3, 8005ad0 <__sflush_r+0x48>
 8005acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ace:	1ac0      	subs	r0, r0, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ad6:	6a21      	ldr	r1, [r4, #32]
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b0      	blx	r6
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	d106      	bne.n	8005af0 <__sflush_r+0x68>
 8005ae2:	6829      	ldr	r1, [r5, #0]
 8005ae4:	291d      	cmp	r1, #29
 8005ae6:	d82b      	bhi.n	8005b40 <__sflush_r+0xb8>
 8005ae8:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <__sflush_r+0x108>)
 8005aea:	410a      	asrs	r2, r1
 8005aec:	07d6      	lsls	r6, r2, #31
 8005aee:	d427      	bmi.n	8005b40 <__sflush_r+0xb8>
 8005af0:	2200      	movs	r2, #0
 8005af2:	6062      	str	r2, [r4, #4]
 8005af4:	04d9      	lsls	r1, r3, #19
 8005af6:	6922      	ldr	r2, [r4, #16]
 8005af8:	6022      	str	r2, [r4, #0]
 8005afa:	d504      	bpl.n	8005b06 <__sflush_r+0x7e>
 8005afc:	1c42      	adds	r2, r0, #1
 8005afe:	d101      	bne.n	8005b04 <__sflush_r+0x7c>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b903      	cbnz	r3, 8005b06 <__sflush_r+0x7e>
 8005b04:	6560      	str	r0, [r4, #84]	; 0x54
 8005b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b08:	602f      	str	r7, [r5, #0]
 8005b0a:	2900      	cmp	r1, #0
 8005b0c:	d0c9      	beq.n	8005aa2 <__sflush_r+0x1a>
 8005b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b12:	4299      	cmp	r1, r3
 8005b14:	d002      	beq.n	8005b1c <__sflush_r+0x94>
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7ff fbea 	bl	80052f0 <_free_r>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8005b20:	e7c0      	b.n	8005aa4 <__sflush_r+0x1c>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b0      	blx	r6
 8005b28:	1c41      	adds	r1, r0, #1
 8005b2a:	d1c8      	bne.n	8005abe <__sflush_r+0x36>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0c5      	beq.n	8005abe <__sflush_r+0x36>
 8005b32:	2b1d      	cmp	r3, #29
 8005b34:	d001      	beq.n	8005b3a <__sflush_r+0xb2>
 8005b36:	2b16      	cmp	r3, #22
 8005b38:	d101      	bne.n	8005b3e <__sflush_r+0xb6>
 8005b3a:	602f      	str	r7, [r5, #0]
 8005b3c:	e7b1      	b.n	8005aa2 <__sflush_r+0x1a>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	e7ad      	b.n	8005aa4 <__sflush_r+0x1c>
 8005b48:	690f      	ldr	r7, [r1, #16]
 8005b4a:	2f00      	cmp	r7, #0
 8005b4c:	d0a9      	beq.n	8005aa2 <__sflush_r+0x1a>
 8005b4e:	0793      	lsls	r3, r2, #30
 8005b50:	680e      	ldr	r6, [r1, #0]
 8005b52:	bf08      	it	eq
 8005b54:	694b      	ldreq	r3, [r1, #20]
 8005b56:	600f      	str	r7, [r1, #0]
 8005b58:	bf18      	it	ne
 8005b5a:	2300      	movne	r3, #0
 8005b5c:	eba6 0807 	sub.w	r8, r6, r7
 8005b60:	608b      	str	r3, [r1, #8]
 8005b62:	f1b8 0f00 	cmp.w	r8, #0
 8005b66:	dd9c      	ble.n	8005aa2 <__sflush_r+0x1a>
 8005b68:	6a21      	ldr	r1, [r4, #32]
 8005b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	463a      	mov	r2, r7
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b0      	blx	r6
 8005b74:	2800      	cmp	r0, #0
 8005b76:	dc06      	bgt.n	8005b86 <__sflush_r+0xfe>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e78e      	b.n	8005aa4 <__sflush_r+0x1c>
 8005b86:	4407      	add	r7, r0
 8005b88:	eba8 0800 	sub.w	r8, r8, r0
 8005b8c:	e7e9      	b.n	8005b62 <__sflush_r+0xda>
 8005b8e:	bf00      	nop
 8005b90:	dfbffffe 	.word	0xdfbffffe

08005b94 <_fflush_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	690b      	ldr	r3, [r1, #16]
 8005b98:	4605      	mov	r5, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b913      	cbnz	r3, 8005ba4 <_fflush_r+0x10>
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	b118      	cbz	r0, 8005bae <_fflush_r+0x1a>
 8005ba6:	6a03      	ldr	r3, [r0, #32]
 8005ba8:	b90b      	cbnz	r3, 8005bae <_fflush_r+0x1a>
 8005baa:	f7ff fa9b 	bl	80050e4 <__sinit>
 8005bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f3      	beq.n	8005b9e <_fflush_r+0xa>
 8005bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bb8:	07d0      	lsls	r0, r2, #31
 8005bba:	d404      	bmi.n	8005bc6 <_fflush_r+0x32>
 8005bbc:	0599      	lsls	r1, r3, #22
 8005bbe:	d402      	bmi.n	8005bc6 <_fflush_r+0x32>
 8005bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bc2:	f7ff fb93 	bl	80052ec <__retarget_lock_acquire_recursive>
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	4621      	mov	r1, r4
 8005bca:	f7ff ff5d 	bl	8005a88 <__sflush_r>
 8005bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd0:	07da      	lsls	r2, r3, #31
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	d4e4      	bmi.n	8005ba0 <_fflush_r+0xc>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	059b      	lsls	r3, r3, #22
 8005bda:	d4e1      	bmi.n	8005ba0 <_fflush_r+0xc>
 8005bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bde:	f7ff fb86 	bl	80052ee <__retarget_lock_release_recursive>
 8005be2:	e7dd      	b.n	8005ba0 <_fflush_r+0xc>

08005be4 <__swbuf_r>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	460e      	mov	r6, r1
 8005be8:	4614      	mov	r4, r2
 8005bea:	4605      	mov	r5, r0
 8005bec:	b118      	cbz	r0, 8005bf6 <__swbuf_r+0x12>
 8005bee:	6a03      	ldr	r3, [r0, #32]
 8005bf0:	b90b      	cbnz	r3, 8005bf6 <__swbuf_r+0x12>
 8005bf2:	f7ff fa77 	bl	80050e4 <__sinit>
 8005bf6:	69a3      	ldr	r3, [r4, #24]
 8005bf8:	60a3      	str	r3, [r4, #8]
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	071a      	lsls	r2, r3, #28
 8005bfe:	d525      	bpl.n	8005c4c <__swbuf_r+0x68>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	b31b      	cbz	r3, 8005c4c <__swbuf_r+0x68>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	1a98      	subs	r0, r3, r2
 8005c0a:	6963      	ldr	r3, [r4, #20]
 8005c0c:	b2f6      	uxtb	r6, r6
 8005c0e:	4283      	cmp	r3, r0
 8005c10:	4637      	mov	r7, r6
 8005c12:	dc04      	bgt.n	8005c1e <__swbuf_r+0x3a>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	f7ff ffbc 	bl	8005b94 <_fflush_r>
 8005c1c:	b9e0      	cbnz	r0, 8005c58 <__swbuf_r+0x74>
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	60a3      	str	r3, [r4, #8]
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	701e      	strb	r6, [r3, #0]
 8005c2c:	6962      	ldr	r2, [r4, #20]
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d004      	beq.n	8005c3e <__swbuf_r+0x5a>
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	07db      	lsls	r3, r3, #31
 8005c38:	d506      	bpl.n	8005c48 <__swbuf_r+0x64>
 8005c3a:	2e0a      	cmp	r6, #10
 8005c3c:	d104      	bne.n	8005c48 <__swbuf_r+0x64>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f7ff ffa7 	bl	8005b94 <_fflush_r>
 8005c46:	b938      	cbnz	r0, 8005c58 <__swbuf_r+0x74>
 8005c48:	4638      	mov	r0, r7
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f806 	bl	8005c60 <__swsetup_r>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d0d5      	beq.n	8005c04 <__swbuf_r+0x20>
 8005c58:	f04f 37ff 	mov.w	r7, #4294967295
 8005c5c:	e7f4      	b.n	8005c48 <__swbuf_r+0x64>
	...

08005c60 <__swsetup_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <__swsetup_r+0xac>)
 8005c64:	4605      	mov	r5, r0
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	460c      	mov	r4, r1
 8005c6a:	b118      	cbz	r0, 8005c74 <__swsetup_r+0x14>
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <__swsetup_r+0x14>
 8005c70:	f7ff fa38 	bl	80050e4 <__sinit>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c7a:	0718      	lsls	r0, r3, #28
 8005c7c:	d422      	bmi.n	8005cc4 <__swsetup_r+0x64>
 8005c7e:	06d9      	lsls	r1, r3, #27
 8005c80:	d407      	bmi.n	8005c92 <__swsetup_r+0x32>
 8005c82:	2309      	movs	r3, #9
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e034      	b.n	8005cfc <__swsetup_r+0x9c>
 8005c92:	0758      	lsls	r0, r3, #29
 8005c94:	d512      	bpl.n	8005cbc <__swsetup_r+0x5c>
 8005c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c98:	b141      	cbz	r1, 8005cac <__swsetup_r+0x4c>
 8005c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	d002      	beq.n	8005ca8 <__swsetup_r+0x48>
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f7ff fb24 	bl	80052f0 <_free_r>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6363      	str	r3, [r4, #52]	; 0x34
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f043 0308 	orr.w	r3, r3, #8
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	6923      	ldr	r3, [r4, #16]
 8005cc6:	b94b      	cbnz	r3, 8005cdc <__swsetup_r+0x7c>
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd2:	d003      	beq.n	8005cdc <__swsetup_r+0x7c>
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f000 f850 	bl	8005d7c <__smakebuf_r>
 8005cdc:	89a0      	ldrh	r0, [r4, #12]
 8005cde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ce2:	f010 0301 	ands.w	r3, r0, #1
 8005ce6:	d00a      	beq.n	8005cfe <__swsetup_r+0x9e>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	6963      	ldr	r3, [r4, #20]
 8005cee:	425b      	negs	r3, r3
 8005cf0:	61a3      	str	r3, [r4, #24]
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	b943      	cbnz	r3, 8005d08 <__swsetup_r+0xa8>
 8005cf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cfa:	d1c4      	bne.n	8005c86 <__swsetup_r+0x26>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	0781      	lsls	r1, r0, #30
 8005d00:	bf58      	it	pl
 8005d02:	6963      	ldrpl	r3, [r4, #20]
 8005d04:	60a3      	str	r3, [r4, #8]
 8005d06:	e7f4      	b.n	8005cf2 <__swsetup_r+0x92>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e7f7      	b.n	8005cfc <__swsetup_r+0x9c>
 8005d0c:	20000064 	.word	0x20000064

08005d10 <_sbrk_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	; (8005d2c <_sbrk_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb fb7e 	bl	800141c <_sbrk>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_sbrk_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_sbrk_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	200004c8 	.word	0x200004c8

08005d30 <__swhatbuf_r>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	460c      	mov	r4, r1
 8005d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	b096      	sub	sp, #88	; 0x58
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	461e      	mov	r6, r3
 8005d40:	da0d      	bge.n	8005d5e <__swhatbuf_r+0x2e>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	bf0c      	ite	eq
 8005d4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d52:	2340      	movne	r3, #64	; 0x40
 8005d54:	2000      	movs	r0, #0
 8005d56:	6031      	str	r1, [r6, #0]
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	b016      	add	sp, #88	; 0x58
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	466a      	mov	r2, sp
 8005d60:	f000 f848 	bl	8005df4 <_fstat_r>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	dbec      	blt.n	8005d42 <__swhatbuf_r+0x12>
 8005d68:	9901      	ldr	r1, [sp, #4]
 8005d6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d72:	4259      	negs	r1, r3
 8005d74:	4159      	adcs	r1, r3
 8005d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7a:	e7eb      	b.n	8005d54 <__swhatbuf_r+0x24>

08005d7c <__smakebuf_r>:
 8005d7c:	898b      	ldrh	r3, [r1, #12]
 8005d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d80:	079d      	lsls	r5, r3, #30
 8005d82:	4606      	mov	r6, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	d507      	bpl.n	8005d98 <__smakebuf_r+0x1c>
 8005d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	2301      	movs	r3, #1
 8005d92:	6163      	str	r3, [r4, #20]
 8005d94:	b002      	add	sp, #8
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	ab01      	add	r3, sp, #4
 8005d9a:	466a      	mov	r2, sp
 8005d9c:	f7ff ffc8 	bl	8005d30 <__swhatbuf_r>
 8005da0:	9900      	ldr	r1, [sp, #0]
 8005da2:	4605      	mov	r5, r0
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff fb0f 	bl	80053c8 <_malloc_r>
 8005daa:	b948      	cbnz	r0, 8005dc0 <__smakebuf_r+0x44>
 8005dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db0:	059a      	lsls	r2, r3, #22
 8005db2:	d4ef      	bmi.n	8005d94 <__smakebuf_r+0x18>
 8005db4:	f023 0303 	bic.w	r3, r3, #3
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	81a3      	strh	r3, [r4, #12]
 8005dbe:	e7e3      	b.n	8005d88 <__smakebuf_r+0xc>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	6020      	str	r0, [r4, #0]
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	6163      	str	r3, [r4, #20]
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	6120      	str	r0, [r4, #16]
 8005dd2:	b15b      	cbz	r3, 8005dec <__smakebuf_r+0x70>
 8005dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 f81d 	bl	8005e18 <_isatty_r>
 8005dde:	b128      	cbz	r0, 8005dec <__smakebuf_r+0x70>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	431d      	orrs	r5, r3
 8005df0:	81a5      	strh	r5, [r4, #12]
 8005df2:	e7cf      	b.n	8005d94 <__smakebuf_r+0x18>

08005df4 <_fstat_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4d07      	ldr	r5, [pc, #28]	; (8005e14 <_fstat_r+0x20>)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	f7fb fae2 	bl	80013ca <_fstat>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d102      	bne.n	8005e10 <_fstat_r+0x1c>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	b103      	cbz	r3, 8005e10 <_fstat_r+0x1c>
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	bd38      	pop	{r3, r4, r5, pc}
 8005e12:	bf00      	nop
 8005e14:	200004c8 	.word	0x200004c8

08005e18 <_isatty_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d06      	ldr	r5, [pc, #24]	; (8005e34 <_isatty_r+0x1c>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fb fae1 	bl	80013ea <_isatty>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_isatty_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_isatty_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	200004c8 	.word	0x200004c8

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
