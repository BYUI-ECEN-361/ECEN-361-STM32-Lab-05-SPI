
ECEN-361-STM32-Lab-05-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000639c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006610  08006610  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006618  08006618  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  20000068  08006688  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  08006688  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4e2  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003598  00000000  00000000  0003a5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0003db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124f  00000000  00000000  0003f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d4e  00000000  00000000  0004052f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9cd  00000000  00000000  0006927d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffb3a  00000000  00000000  00083c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a88  00000000  00000000  00183784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0018a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006514 	.word	0x08006514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006514 	.word	0x08006514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f9d1 	bl	8001944 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f9c0 	bl	8001944 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f9b5 	bl	8001944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f9af 	bl	8001944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f9a9 	bl	8001944 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 f996 	bl	8001944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 f991 	bl	8001944 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 f96c 	bl	8001944 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 f946 	bl	8001944 <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	20000088 	.word	0x20000088
 80006c8:	08006590 	.word	0x08006590

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000084 	.word	0x20000084

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t bytes_in =0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fdd1 	bl	80012e0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f84b 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f969 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f937 	bl	80009b8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800074a:	f000 f90f 	bl	800096c <MX_TIM17_Init>
  MX_SPI2_Init();
 800074e:	f000 f8d3 	bl	80008f8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000752:	f000 f893 	bl	800087c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000756:	481a      	ldr	r0, [pc, #104]	; (80007c0 <main+0x90>)
 8000758:	f003 fcce 	bl	80040f8 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 800075c:	f7ff ff66 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 8000760:	f7ff ff52 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 f8e9 	bl	8001944 <HAL_GPIO_WritePin>
  printf("\033\143");
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <main+0x94>)
 8000774:	f005 f85a 	bl	800582c <iprintf>
  printf("Welcome to ECEN-361 Lab-05 SPI/UART & Logic Analyzer \n\r");
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <main+0x98>)
 800077a:	f005 f857 	bl	800582c <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bytes_in = Read_and_Transmit_Task();
 800077e:	f000 fa1d 	bl	8000bbc <Read_and_Transmit_Task>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

    /**************** Send it SPI *********************/
    /* Set up the receive to happen with an interrupt */
    /* The Buffer is global:  RX_Buffer */

	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, 10);
 8000786:	220a      	movs	r2, #10
 8000788:	4910      	ldr	r1, [pc, #64]	; (80007cc <main+0x9c>)
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <main+0xa0>)
 800078c:	f002 fe5c 	bl	8003448 <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f8d3 	bl	8001944 <HAL_GPIO_WritePin>
	// HAL_Delay(5); // wait a bit before transmitting so the process can start the read
	HAL_SPI_Transmit(&hspi1, RX_Buffer, bytes_in , HAL_MAX_DELAY);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4909      	ldr	r1, [pc, #36]	; (80007cc <main+0x9c>)
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <main+0xa4>)
 80007aa:	f002 fcd8 	bl	800315e <HAL_SPI_Transmit>
	// HAL_Delay(5); // wait a bit before transmitting so the process can start the read
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f001 f8c4 	bl	8001944 <HAL_GPIO_WritePin>
    bytes_in = Read_and_Transmit_Task();
 80007bc:	e7df      	b.n	800077e <main+0x4e>
 80007be:	bf00      	nop
 80007c0:	20000154 	.word	0x20000154
 80007c4:	0800652c 	.word	0x0800652c
 80007c8:	08006530 	.word	0x08006530
 80007cc:	20000228 	.word	0x20000228
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 f875 	bl	80058d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fe:	f001 f8c7 	bl	8001990 <HAL_PWREx_ControlVoltageScaling>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fa92 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081e:	2302      	movs	r3, #2
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f8fe 	bl	8001a3c <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 fa73 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2104      	movs	r1, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fcc6 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 fa5f 	bl	8000d30 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	; 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /*   625KHz == SPI_BAUDRATEPRESCALER_128 ==> 80Mhz / 128
   *   40Mhz == SPI_BAUDRATEPRESCALER_2    ==> 80Mhz / 2
   */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b2:	2230      	movs	r2, #48	; 0x30
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008dc:	f002 fb9c 	bl	8003018 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa23 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_SPI2_Init+0x6c>)
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <MX_SPI2_Init+0x70>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI2_Init+0x6c>)
 800090a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000912:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000916:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI2_Init+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_SPI2_Init+0x6c>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI2_Init+0x6c>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000940:	2207      	movs	r2, #7
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI2_Init+0x6c>)
 800094c:	2200      	movs	r2, #0
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000952:	f002 fb61 	bl	8003018 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 800095c:	f000 f9e8 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000f0 	.word	0x200000f0
 8000968:	40003800 	.word	0x40003800

0800096c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MX_TIM17_Init+0x48>)
 8000974:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000978:	f240 321f 	movw	r2, #799	; 0x31f
 800097c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_TIM17_Init+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_TIM17_Init+0x44>)
 800099e:	f003 fb53 	bl	8004048 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009a8:	f000 f9c2 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000154 	.word	0x20000154
 80009b4:	40014800 	.word	0x40014800

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART2_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009fc:	f003 fdce 	bl	800459c <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f993 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001a0 	.word	0x200001a0
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a5f      	ldr	r2, [pc, #380]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b54      	ldr	r3, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 ff54 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000aa2:	f000 ff4f 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4842      	ldr	r0, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000aac:	f000 ff4a 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <MX_GPIO_Init+0x1a0>)
 8000ac8:	f000 fd92 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <MX_GPIO_Init+0x1a0>)
 8000ae0:	f000 fd86 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fd79 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000afe:	2312      	movs	r3, #18
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fd6c 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b1c:	2311      	movs	r3, #17
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fd5d 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000b4a:	f000 fd51 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000b4e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fd41 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000b86:	f000 fd33 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b8e:	2311      	movs	r3, #17
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000ba2:	f000 fd25 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800

08000bbc <Read_and_Transmit_Task>:
		}
	}


uint8_t Read_and_Transmit_Task()
	{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
	/* Return the number of bytes */

	uint8_t receive_byte;
	// uint8_t receive_buffer[BUFFER_SIZE] = {0};
	// uint8_t *receive_buffer_ptr = receive_buffer;
	uint8_t bytes_in =0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <Read_and_Transmit_Task+0xd8>)
 8000bca:	f107 0410 	add.w	r4, r7, #16
 8000bce:	461d      	mov	r5, r3
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bd8:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <Read_and_Transmit_Task+0xdc>)
 8000bde:	463c      	mov	r4, r7
 8000be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be2:	c407      	stmia	r4!, {r0, r1, r2}
 8000be4:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t *sndmsg_ptr = sndmsg;
 8000bec:	463b      	mov	r3, r7
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c

		bytes_in = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		receive_byte = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2217      	movs	r2, #23
 8000c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c04:	4825      	ldr	r0, [pc, #148]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c06:	f003 fd17 	bl	8004638 <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000c0a:	e020      	b.n	8000c4e <Read_and_Transmit_Task+0x92>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fba7 	bl	8001360 <HAL_Delay>
 8000c12:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8000c16:	230a      	movs	r3, #10
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4820      	ldr	r0, [pc, #128]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c1c:	f003 fd96 	bl	800474c <HAL_UART_Receive>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f2      	bne.n	8000c0c <Read_and_Transmit_Task+0x50>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			RX_Buffer[bytes_in] = receive_byte;
 8000c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c30:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &RX_Buffer[bytes_in++] , 1, HAL_MAX_DELAY);  //echo each one as it's typed
 8000c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c40:	18d1      	adds	r1, r2, r3
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	2201      	movs	r2, #1
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c4a:	f003 fcf5 	bl	8004638 <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c52:	2b0d      	cmp	r3, #13
 8000c54:	d1dd      	bne.n	8000c12 <Read_and_Transmit_Task+0x56>
		}

		RX_Buffer[bytes_in++] = '\n'; // Add a line_feed
 8000c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c64:	210a      	movs	r1, #10
 8000c66:	5499      	strb	r1, [r3, r2]
		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	220d      	movs	r2, #13
 8000c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c72:	f003 fce1 	bl	8004638 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 8000c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c84:	f003 fcd8 	bl	8004638 <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)
		return bytes_in;
 8000c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bdb0      	pop	{r4, r5, r7, pc}
 8000c94:	08006568 	.word	0x08006568
 8000c98:	08006580 	.word	0x08006580
 8000c9c:	200001a0 	.word	0x200001a0
 8000ca0:	20000228 	.word	0x20000228

08000ca4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cac:	1d39      	adds	r1, r7, #4
 8000cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <__io_putchar+0x20>)
 8000cb6:	f003 fcbf 	bl	8004638 <HAL_UART_Transmit>

  return ch;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001a0 	.word	0x200001a0

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x14>
 8000cd8:	f7ff fcf8 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000ce6:	f000 fb1b 	bl	8001320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000154 	.word	0x20000154

08000cf8 <HAL_SPI_RxCpltCallback>:

  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
  {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
      // printf("here at the spi receive\n\r");
	  if (hspi == &hspi2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_SPI_RxCpltCallback+0x2c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d108      	bne.n	8000d1a <HAL_SPI_RxCpltCallback+0x22>
	  {
      // HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
      HAL_UART_Transmit(&huart2, RX_Buffer, BUFFER_SIZE,1000);
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	22ff      	movs	r2, #255	; 0xff
 8000d0e:	4906      	ldr	r1, [pc, #24]	; (8000d28 <HAL_SPI_RxCpltCallback+0x30>)
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <HAL_SPI_RxCpltCallback+0x34>)
 8000d12:	f003 fc91 	bl	8004638 <HAL_UART_Transmit>
	  MX_SPI2_Init();  // Buffer has the data so start over
 8000d16:	f7ff fdef 	bl	80008f8 <MX_SPI2_Init>
	  }

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000f0 	.word	0x200000f0
 8000d28:	20000228 	.word	0x20000228
 8000d2c:	200001a0 	.word	0x200001a0

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 fbcd 	bl	8001518 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <HAL_SPI_MspInit+0x124>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d129      	bne.n	8000e02 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a3a      	ldr	r2, [pc, #232]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dde:	23a0      	movs	r3, #160	; 0xa0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 fbf8 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e00:	e051      	b.n	8000ea6 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a2c      	ldr	r2, [pc, #176]	; (8000eb8 <HAL_SPI_MspInit+0x12c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d14c      	bne.n	8000ea6 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e16:	6593      	str	r3, [r2, #88]	; 0x58
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_SPI_MspInit+0x128>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e54:	2308      	movs	r3, #8
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e64:	2305      	movs	r3, #5
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4813      	ldr	r0, [pc, #76]	; (8000ebc <HAL_SPI_MspInit+0x130>)
 8000e70:	f000 fbbe 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e86:	2305      	movs	r3, #5
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_SPI_MspInit+0x134>)
 8000e92:	f000 fbad 	bl	80015f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2105      	movs	r1, #5
 8000e9a:	2024      	movs	r0, #36	; 0x24
 8000e9c:	f000 fb3c 	bl	8001518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ea0:	2024      	movs	r0, #36	; 0x24
 8000ea2:	f000 fb55 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3730      	adds	r7, #48	; 0x30
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40003800 	.word	0x40003800
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_TIM_Base_MspInit+0x44>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d113      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_Base_MspInit+0x48>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_TIM_Base_MspInit+0x48>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_TIM_Base_MspInit+0x48>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	201a      	movs	r0, #26
 8000ef4:	f000 fb10 	bl	8001518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ef8:	201a      	movs	r0, #26
 8000efa:	f000 fb29 	bl	8001550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40014800 	.word	0x40014800
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ac      	sub	sp, #176	; 0xb0
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2288      	movs	r2, #136	; 0x88
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fcd0 	bl	80058d6 <memset>
  if(huart->Instance==USART2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <HAL_UART_MspInit+0xb0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d13b      	bne.n	8000fb8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fba7 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff feea 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f66:	6593      	str	r3, [r2, #88]	; 0x58
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f000 fb1c 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	37b0      	adds	r7, #176	; 0xb0
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_InitTick+0xe0>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <HAL_InitTick+0xe0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_InitTick+0xe0>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fee:	f107 0210 	add.w	r2, r7, #16
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fabf 	bl	800257c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001004:	2b00      	cmp	r3, #0
 8001006:	d103      	bne.n	8001010 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001008:	f001 fa8c 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 800100c:	6378      	str	r0, [r7, #52]	; 0x34
 800100e:	e004      	b.n	800101a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001010:	f001 fa88 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8001014:	4603      	mov	r3, r0
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800101a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101c:	4a23      	ldr	r2, [pc, #140]	; (80010ac <HAL_InitTick+0xe4>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9b      	lsrs	r3, r3, #18
 8001024:	3b01      	subs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_InitTick+0xe8>)
 800102a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_InitTick+0xe8>)
 8001032:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_InitTick+0xe8>)
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_InitTick+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_InitTick+0xe8>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_InitTick+0xe8>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_InitTick+0xe8>)
 8001052:	f002 fff9 	bl	8004048 <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800105c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11b      	bne.n	800109c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <HAL_InitTick+0xe8>)
 8001066:	f003 f847 	bl	80040f8 <HAL_TIM_Base_Start_IT>
 800106a:	4603      	mov	r3, r0
 800106c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001070:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001074:	2b00      	cmp	r3, #0
 8001076:	d111      	bne.n	800109c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001078:	201c      	movs	r0, #28
 800107a:	f000 fa69 	bl	8001550 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d808      	bhi.n	8001096 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	201c      	movs	r0, #28
 800108a:	f000 fa45 	bl	8001518 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_InitTick+0xec>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e002      	b.n	800109c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	20000328 	.word	0x20000328
 80010b4:	20000004 	.word	0x20000004

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80010ea:	f003 f875 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000154 	.word	0x20000154

080010f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TIM2_IRQHandler+0x10>)
 80010fe:	f003 f86b 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000328 	.word	0x20000328

0800110c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <SPI2_IRQHandler+0x10>)
 8001112:	f002 faf5 	bl	8003700 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000f0 	.word	0x200000f0

08001120 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
  }

  return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e009      	b.n	8001180 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fd95 	bl	8000ca4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf1      	blt.n	800116c <_write+0x12>
  }
  return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_close>:

int _close(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ba:	605a      	str	r2, [r3, #4]
  return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_isatty>:

int _isatty(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f004 fba2 	bl	8005974 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20018000 	.word	0x20018000
 800125c:	00000400 	.word	0x00000400
 8001260:	20000374 	.word	0x20000374
 8001264:	20000958 	.word	0x20000958

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	; (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LoopForever+0xe>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	; (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f004 fb61 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012be:	f7ff fa37 	bl	8000730 <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012d0:	08006620 	.word	0x08006620
  ldr r2, =_sbss
 80012d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012d8:	20000954 	.word	0x20000954

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_Init+0x3c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_Init+0x3c>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f000 f903 	bl	8001502 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fc:	200f      	movs	r0, #15
 80012fe:	f7ff fe63 	bl	8000fc8 <HAL_InitTick>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	e001      	b.n	8001312 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800130e:	f7ff fd15 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001312:	79fb      	ldrb	r3, [r7, #7]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000378 	.word	0x20000378

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000378 	.word	0x20000378

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff4c 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800152a:	f7ff ff61 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 800152e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7ff ffb1 	bl	800149c <NVIC_EncodePriority>
 800153a:	4602      	mov	r2, r0
 800153c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff80 	bl	8001448 <__NVIC_SetPriority>
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff54 	bl	800140c <__NVIC_EnableIRQ>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d005      	beq.n	8001590 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e029      	b.n	80015e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020e 	bic.w	r2, r2, #14
 800159e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f003 021c 	and.w	r2, r3, #28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2101      	movs	r1, #1
 80015be:	fa01 f202 	lsl.w	r2, r1, r2
 80015c2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
    }
  }
  return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e17f      	b.n	8001900 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8171 	beq.w	80018fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d118      	bne.n	80016d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	6939      	ldr	r1, [r7, #16]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80ac 	beq.w	80018fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_GPIO_Init+0x330>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_GPIO_Init+0x330>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6613      	str	r3, [r2, #96]	; 0x60
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_GPIO_Init+0x330>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ba:	4a5a      	ldr	r2, [pc, #360]	; (8001924 <HAL_GPIO_Init+0x334>)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e4:	d025      	beq.n	8001832 <HAL_GPIO_Init+0x242>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_GPIO_Init+0x338>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x23e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4e      	ldr	r2, [pc, #312]	; (800192c <HAL_GPIO_Init+0x33c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x23a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x340>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x236>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x344>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x232>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_GPIO_Init+0x348>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x22e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_GPIO_Init+0x34c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x22a>
 8001816:	2306      	movs	r3, #6
 8001818:	e00c      	b.n	8001834 <HAL_GPIO_Init+0x244>
 800181a:	2307      	movs	r3, #7
 800181c:	e00a      	b.n	8001834 <HAL_GPIO_Init+0x244>
 800181e:	2305      	movs	r3, #5
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x244>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x244>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x244>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x244>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x244>
 8001832:	2300      	movs	r3, #0
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001844:	4937      	ldr	r1, [pc, #220]	; (8001924 <HAL_GPIO_Init+0x334>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_GPIO_Init+0x350>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001876:	4a32      	ldr	r2, [pc, #200]	; (8001940 <HAL_GPIO_Init+0x350>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_GPIO_Init+0x350>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a0:	4a27      	ldr	r2, [pc, #156]	; (8001940 <HAL_GPIO_Init+0x350>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_GPIO_Init+0x350>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ca:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_GPIO_Init+0x350>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_GPIO_Init+0x350>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f4:	4a12      	ldr	r2, [pc, #72]	; (8001940 <HAL_GPIO_Init+0x350>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	f47f ae78 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	40010000 	.word	0x40010000
 8001928:	48000400 	.word	0x48000400
 800192c:	48000800 	.word	0x48000800
 8001930:	48000c00 	.word	0x48000c00
 8001934:	48001000 	.word	0x48001000
 8001938:	48001400 	.word	0x48001400
 800193c:	48001800 	.word	0x48001800
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
 8001950:	4613      	mov	r3, r2
 8001952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001954:	787b      	ldrb	r3, [r7, #1]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001960:	e002      	b.n	8001968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_PWREx_GetVoltageRange+0x18>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40007000 	.word	0x40007000

08001990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199e:	d130      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ac:	d038      	beq.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2232      	movs	r2, #50	; 0x32
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d4:	e002      	b.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d102      	bne.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f2      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d110      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e00f      	b.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d007      	beq.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40007000 	.word	0x40007000
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e3ca      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4e:	4b97      	ldr	r3, [pc, #604]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a58:	4b94      	ldr	r3, [pc, #592]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80e4 	beq.w	8001c38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4a>
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	f040 808b 	bne.w	8001b94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f040 8087 	bne.w	8001b94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x62>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e3a2      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x7c>
 8001aae:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_OscConfig+0x88>
 8001ab8:	4b7c      	ldr	r3, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d223      	bcs.n	8001b10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fd87 	bl	80025e0 <RCC_SetFlashLatencyFromMSIRange>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e383      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a72      	ldr	r2, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	496d      	ldr	r1, [pc, #436]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	4968      	ldr	r1, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e025      	b.n	8001b5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4960      	ldr	r1, [pc, #384]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	495b      	ldr	r1, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fd47 	bl	80025e0 <RCC_SetFlashLatencyFromMSIRange>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e343      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5c:	f000 fc4a 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4950      	ldr	r1, [pc, #320]	; (8001cb0 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	4a4e      	ldr	r2, [pc, #312]	; (8001cb4 <HAL_RCC_OscConfig+0x278>)
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fa21 	bl	8000fc8 <HAL_InitTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d052      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	e327      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d032      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9c:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a42      	ldr	r2, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fbce 	bl	8001348 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fbca 	bl	8001348 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e310      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a36      	ldr	r2, [pc, #216]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4931      	ldr	r1, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	492c      	ldr	r1, [pc, #176]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
 8001c00:	e01a      	b.n	8001c38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fb9b 	bl	8001348 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c16:	f7ff fb97 	bl	8001348 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e2dd      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1da>
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d074      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x21a>
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d10e      	bne.n	8001c6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d064      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d160      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e2ba      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x24a>
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e026      	b.n	8001cd4 <HAL_RCC_OscConfig+0x298>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8e:	d115      	bne.n	8001cbc <HAL_RCC_OscConfig+0x280>
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a02      	ldr	r2, [pc, #8]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x298>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08006594 	.word	0x08006594
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	4ba0      	ldr	r3, [pc, #640]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a9f      	ldr	r2, [pc, #636]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b9d      	ldr	r3, [pc, #628]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a9c      	ldr	r2, [pc, #624]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fb34 	bl	8001348 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fb30 	bl	8001348 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e276      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2a8>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb20 	bl	8001348 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fb1c 	bl	8001348 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e262      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2d0>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d060      	beq.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x310>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d119      	bne.n	8001d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d116      	bne.n	8001d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4c:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x328>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e23f      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	4973      	ldr	r1, [pc, #460]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d78:	e040      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d023      	beq.n	8001dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d82:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6e      	ldr	r2, [pc, #440]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fadb 	bl	8001348 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fad7 	bl	8001348 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e21d      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da8:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b62      	ldr	r3, [pc, #392]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	495f      	ldr	r1, [pc, #380]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	e018      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fab7 	bl	8001348 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff fab3 	bl	8001348 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1f9      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d03c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff fa92 	bl	8001348 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fa8e 	bl	8001348 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1d4      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ef      	beq.n	8001e28 <HAL_RCC_OscConfig+0x3ec>
 8001e48:	e01b      	b.n	8001e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fa75 	bl	8001348 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff fa71 	bl	8001348 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1b7      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ef      	bne.n	8001e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80a6 	beq.w	8001fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10d      	bne.n	8001ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d118      	bne.n	8001efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fa38 	bl	8001348 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff fa34 	bl	8001348 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e17a      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d8>
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f12:	e029      	b.n	8001f68 <HAL_RCC_OscConfig+0x52c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d115      	bne.n	8001f48 <HAL_RCC_OscConfig+0x50c>
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x52c>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	4b9c      	ldr	r3, [pc, #624]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a9b      	ldr	r2, [pc, #620]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	4b98      	ldr	r3, [pc, #608]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a97      	ldr	r2, [pc, #604]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f9ea 	bl	8001348 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff f9e6 	bl	8001348 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e12a      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ed      	beq.n	8001f78 <HAL_RCC_OscConfig+0x53c>
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f9d3 	bl	8001348 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff f9cf 	bl	8001348 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e113      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a79      	ldr	r2, [pc, #484]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80fe 	beq.w	80021e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	f040 80d0 	bne.w	8002190 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ff0:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
 8002002:	d130      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	3b01      	subs	r3, #1
 8002010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d127      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11f      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002030:	2a07      	cmp	r2, #7
 8002032:	bf14      	ite	ne
 8002034:	2201      	movne	r2, #1
 8002036:	2200      	moveq	r2, #0
 8002038:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	4293      	cmp	r3, r2
 800203c:	d113      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d109      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d06e      	beq.n	8002144 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d069      	beq.n	8002140 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0ad      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800208e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002094:	f7ff f958 	bl	8001348 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f954 	bl	8001348 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e09a      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ba:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_RCC_OscConfig+0x784>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ca:	3a01      	subs	r2, #1
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d4:	0212      	lsls	r2, r2, #8
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020dc:	0852      	lsrs	r2, r2, #1
 80020de:	3a01      	subs	r2, #1
 80020e0:	0552      	lsls	r2, r2, #21
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020e8:	0852      	lsrs	r2, r2, #1
 80020ea:	3a01      	subs	r2, #1
 80020ec:	0652      	lsls	r2, r2, #25
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f4:	0912      	lsrs	r2, r2, #4
 80020f6:	0452      	lsls	r2, r2, #17
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4930      	ldr	r1, [pc, #192]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002118:	f7ff f916 	bl	8001348 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f912 	bl	8001348 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e058      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213e:	e050      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e04f      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d148      	bne.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002168:	f7ff f8ee 	bl	8001348 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8ea 	bl	8001348 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e030      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x734>
 800218e:	e028      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d023      	beq.n	80021de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800219c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f8d1 	bl	8001348 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e00c      	b.n	80021c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff f8cd 	bl	8001348 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d905      	bls.n	80021c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x7b0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ec      	bne.n	80021aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_OscConfig+0x7b0>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4905      	ldr	r1, [pc, #20]	; (80021ec <HAL_RCC_OscConfig+0x7b0>)
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x7b4>)
 80021d8:	4013      	ands	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e001      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	feeefffc 	.word	0xfeeefffc

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0e7      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4970      	ldr	r1, [pc, #448]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b6e      	ldr	r3, [pc, #440]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0cf      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	429a      	cmp	r2, r3
 8002252:	d908      	bls.n	8002266 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4960      	ldr	r1, [pc, #384]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d04c      	beq.n	800230c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0a6      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e09a      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022aa:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e08e      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e086      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4943      	ldr	r1, [pc, #268]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022dc:	f7ff f834 	bl	8001348 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff f830 	bl	8001348 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e06e      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	429a      	cmp	r2, r3
 8002326:	d208      	bcs.n	800233a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	492b      	ldr	r1, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d210      	bcs.n	800236a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0207 	bic.w	r2, r3, #7
 8002350:	4923      	ldr	r1, [pc, #140]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e036      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	4918      	ldr	r1, [pc, #96]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4910      	ldr	r1, [pc, #64]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a8:	f000 f824 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	490b      	ldr	r1, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1f4>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1fc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fdfb 	bl	8000fc8 <HAL_InitTick>
 80023d2:	4603      	mov	r3, r0
 80023d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80023d6:	7afb      	ldrb	r3, [r7, #11]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08006594 	.word	0x08006594
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x34>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d121      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d11e      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002428:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002434:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002450:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002464:	e00a      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d102      	bne.n	8002472 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCC_GetSysClockFreq+0x110>)
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e004      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d101      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002478:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCC_GetSysClockFreq+0x114>)
 800247a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d134      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0xa6>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d003      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002498:	e005      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_GetSysClockFreq+0x110>)
 800249c:	617b      	str	r3, [r7, #20]
      break;
 800249e:	e005      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_GetSysClockFreq+0x114>)
 80024a2:	617b      	str	r3, [r7, #20]
      break;
 80024a4:	e002      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	617b      	str	r3, [r7, #20]
      break;
 80024aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	3301      	adds	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	fb03 f202 	mul.w	r2, r3, r2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	0e5b      	lsrs	r3, r3, #25
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	3301      	adds	r3, #1
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024ec:	69bb      	ldr	r3, [r7, #24]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	080065ac 	.word	0x080065ac
 8002504:	00f42400 	.word	0x00f42400
 8002508:	007a1200 	.word	0x007a1200

0800250c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_GetHCLKFreq+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002528:	f7ff fff0 	bl	800250c <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	080065a4 	.word	0x080065a4

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002554:	f7ff ffda 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	080065a4 	.word	0x080065a4

0800257c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	220f      	movs	r2, #15
 800258a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_RCC_GetClockConfig+0x60>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40022000 	.word	0x40022000

080025e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025f8:	f7ff f9bc 	bl	8001974 <HAL_PWREx_GetVoltageRange>
 80025fc:	6178      	str	r0, [r7, #20]
 80025fe:	e014      	b.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	4a24      	ldr	r2, [pc, #144]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	6593      	str	r3, [r2, #88]	; 0x58
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002618:	f7ff f9ac 	bl	8001974 <HAL_PWREx_GetVoltageRange>
 800261c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002630:	d10b      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d919      	bls.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2ba0      	cmp	r3, #160	; 0xa0
 800263c:	d902      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800263e:	2302      	movs	r3, #2
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e013      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e010      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d902      	bls.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002650:	2303      	movs	r3, #3
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e00a      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d102      	bne.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800265c:	2302      	movs	r3, #2
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e004      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b70      	cmp	r3, #112	; 0x70
 8002666:	d101      	bne.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002668:	2301      	movs	r3, #1
 800266a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 0207 	bic.w	r2, r3, #7
 8002674:	4909      	ldr	r1, [pc, #36]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	40022000 	.word	0x40022000

080026a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a8:	2300      	movs	r3, #0
 80026aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d041      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026c4:	d02a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ca:	d824      	bhi.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026d6:	d81e      	bhi.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e0:	d010      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026e2:	e018      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e4:	4b86      	ldr	r3, [pc, #536]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a85      	ldr	r2, [pc, #532]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f0:	e015      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fabb 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002702:	e00c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3320      	adds	r3, #32
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fba6 	bl	8002e5c <RCCEx_PLLSAI2_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002714:	e003      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	74fb      	strb	r3, [r7, #19]
      break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800271c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002724:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002732:	4973      	ldr	r1, [pc, #460]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d041      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002754:	d02a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002756:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800275a:	d824      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800275c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002766:	d81e      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d010      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002772:	e018      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002774:	4b62      	ldr	r3, [pc, #392]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a61      	ldr	r2, [pc, #388]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002780:	e015      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fa73 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002792:	e00c      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3320      	adds	r3, #32
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fb5e 	bl	8002e5c <RCCEx_PLLSAI2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a4:	e003      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	74fb      	strb	r3, [r7, #19]
      break;
 80027aa:	e000      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b4:	4b52      	ldr	r3, [pc, #328]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c2:	494f      	ldr	r1, [pc, #316]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ca:	e001      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a0 	beq.w	800291e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a40      	ldr	r2, [pc, #256]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002810:	2301      	movs	r3, #1
 8002812:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002820:	f7fe fd92 	bl	8001348 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002826:	e009      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fd8e 	bl	8001348 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d902      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	74fb      	strb	r3, [r7, #19]
        break;
 800283a:	e005      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d15c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002858:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01f      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	d019      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a20      	ldr	r2, [pc, #128]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002898:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fd4d 	bl	8001348 <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b0:	e00b      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fd49 	bl	8001348 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d902      	bls.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	74fb      	strb	r3, [r7, #19]
            break;
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ec      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ee:	4904      	ldr	r1, [pc, #16]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028f6:	e009      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290c:	7c7b      	ldrb	r3, [r7, #17]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	4a9d      	ldr	r2, [pc, #628]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292a:	4b98      	ldr	r3, [pc, #608]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f023 0203 	bic.w	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	4994      	ldr	r1, [pc, #592]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800294c:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 020c 	bic.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	498c      	ldr	r1, [pc, #560]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800296e:	4b87      	ldr	r3, [pc, #540]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4983      	ldr	r1, [pc, #524]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	497b      	ldr	r1, [pc, #492]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c0:	4972      	ldr	r1, [pc, #456]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d4:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	496a      	ldr	r1, [pc, #424]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	4961      	ldr	r1, [pc, #388]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a18:	4b5c      	ldr	r3, [pc, #368]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a26:	4959      	ldr	r1, [pc, #356]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a48:	4950      	ldr	r1, [pc, #320]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	4948      	ldr	r1, [pc, #288]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a7e:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	493f      	ldr	r1, [pc, #252]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d028      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aae:	4937      	ldr	r1, [pc, #220]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abe:	d106      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac0:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a31      	ldr	r2, [pc, #196]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aca:	60d3      	str	r3, [r2, #12]
 8002acc:	e011      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f8c8 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d028      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	491f      	ldr	r1, [pc, #124]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b28:	60d3      	str	r3, [r2, #12]
 8002b2a:	e011      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f899 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d02b      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a02      	ldr	r2, [pc, #8]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b86:	60d3      	str	r3, [r2, #12]
 8002b88:	e014      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f867 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d02f      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bce:	4928      	ldr	r1, [pc, #160]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bde:	d10d      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2102      	movs	r1, #2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f844 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d014      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	74bb      	strb	r3, [r7, #18]
 8002bfa:	e011      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3320      	adds	r3, #32
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f925 	bl	8002e5c <RCCEx_PLLSAI2_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c3a:	490d      	ldr	r1, [pc, #52]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c5e:	4904      	ldr	r1, [pc, #16]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c66:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000

08002c74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c82:	4b75      	ldr	r3, [pc, #468]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c8e:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0203 	and.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d10d      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ca6:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d047      	beq.n	8002d4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e044      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d018      	beq.n	8002cfa <RCCEx_PLLSAI1_Config+0x86>
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d825      	bhi.n	8002d18 <RCCEx_PLLSAI1_Config+0xa4>
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d002      	beq.n	8002cd6 <RCCEx_PLLSAI1_Config+0x62>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d009      	beq.n	8002ce8 <RCCEx_PLLSAI1_Config+0x74>
 8002cd4:	e020      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cd6:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11d      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce6:	e01a      	b.n	8002d1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf8:	e013      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d16:	e006      	b.n	8002d26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1c:	e004      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	430b      	orrs	r3, r1
 8002d44:	4944      	ldr	r1, [pc, #272]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d17d      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d50:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe faf4 	bl	8001348 <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d62:	e009      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d64:	f7fe faf0 	bl	8001348 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d902      	bls.n	8002d78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73fb      	strb	r3, [r7, #15]
        break;
 8002d76:	e005      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ef      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d160      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6892      	ldr	r2, [r2, #8]
 8002da0:	0211      	lsls	r1, r2, #8
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68d2      	ldr	r2, [r2, #12]
 8002da6:	0912      	lsrs	r2, r2, #4
 8002da8:	0452      	lsls	r2, r2, #17
 8002daa:	430a      	orrs	r2, r1
 8002dac:	492a      	ldr	r1, [pc, #168]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	610b      	str	r3, [r1, #16]
 8002db2:	e027      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d112      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6892      	ldr	r2, [r2, #8]
 8002dca:	0211      	lsls	r1, r2, #8
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6912      	ldr	r2, [r2, #16]
 8002dd0:	0852      	lsrs	r2, r2, #1
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	0552      	lsls	r2, r2, #21
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	491f      	ldr	r1, [pc, #124]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	610b      	str	r3, [r1, #16]
 8002dde:	e011      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002de8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	0211      	lsls	r1, r2, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6952      	ldr	r2, [r2, #20]
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0652      	lsls	r2, r2, #25
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	4916      	ldr	r1, [pc, #88]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fa9a 	bl	8001348 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e16:	e009      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e18:	f7fe fa96 	bl	8001348 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
          break;
 8002e2a:	e005      	b.n	8002e38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ef      	beq.n	8002e18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4904      	ldr	r1, [pc, #16]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6a:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e76:	4b67      	ldr	r3, [pc, #412]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0203 	and.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10d      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d047      	beq.n	8002f32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e044      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d018      	beq.n	8002ee2 <RCCEx_PLLSAI2_Config+0x86>
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d825      	bhi.n	8002f00 <RCCEx_PLLSAI2_Config+0xa4>
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d002      	beq.n	8002ebe <RCCEx_PLLSAI2_Config+0x62>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d009      	beq.n	8002ed0 <RCCEx_PLLSAI2_Config+0x74>
 8002ebc:	e020      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ebe:	4b55      	ldr	r3, [pc, #340]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11d      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ece:	e01a      	b.n	8002f06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee0:	e013      	b.n	8002f0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eee:	4b49      	ldr	r3, [pc, #292]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efe:	e006      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e004      	b.n	8002f10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	4939      	ldr	r1, [pc, #228]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d167      	bne.n	8003008 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a35      	ldr	r2, [pc, #212]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe fa00 	bl	8001348 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f4a:	e009      	b.n	8002f60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f4c:	f7fe f9fc 	bl	8001348 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d902      	bls.n	8002f60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5e:	e005      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f60:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ef      	bne.n	8002f4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d14a      	bne.n	8003008 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	0211      	lsls	r1, r2, #8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	0912      	lsrs	r2, r2, #4
 8002f90:	0452      	lsls	r2, r2, #17
 8002f92:	430a      	orrs	r2, r1
 8002f94:	491f      	ldr	r1, [pc, #124]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	614b      	str	r3, [r1, #20]
 8002f9a:	e011      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6892      	ldr	r2, [r2, #8]
 8002fac:	0211      	lsls	r1, r2, #8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6912      	ldr	r2, [r2, #16]
 8002fb2:	0852      	lsrs	r2, r2, #1
 8002fb4:	3a01      	subs	r2, #1
 8002fb6:	0652      	lsls	r2, r2, #25
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	4916      	ldr	r1, [pc, #88]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a13      	ldr	r2, [pc, #76]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe f9bc 	bl	8001348 <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd2:	e009      	b.n	8002fe8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fd4:	f7fe f9b8 	bl	8001348 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d902      	bls.n	8002fe8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fe6:	e005      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4904      	ldr	r1, [pc, #16]	; (8003014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003004:	4313      	orrs	r3, r2
 8003006:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e095      	b.n	8003156 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800303a:	d009      	beq.n	8003050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
 8003042:	e005      	b.n	8003050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fe8e 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003086:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003090:	d902      	bls.n	8003098 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e002      	b.n	800309e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030a6:	d007      	beq.n	80030b8 <HAL_SPI_Init+0xa0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	ea42 0103 	orr.w	r1, r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	f003 0204 	and.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003134:	ea42 0103 	orr.w	r1, r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b088      	sub	sp, #32
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_SPI_Transmit+0x22>
 800317c:	2302      	movs	r3, #2
 800317e:	e15f      	b.n	8003440 <HAL_SPI_Transmit+0x2e2>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003188:	f7fe f8de 	bl	8001348 <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a2:	e148      	b.n	8003436 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_Transmit+0x52>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031b4:	e13f      	b.n	8003436 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2203      	movs	r2, #3
 80031ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003200:	d10f      	bne.n	8003222 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003210:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003220:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d007      	beq.n	8003240 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800323e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003248:	d94f      	bls.n	80032ea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_SPI_Transmit+0xfa>
 8003252:	8afb      	ldrh	r3, [r7, #22]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d142      	bne.n	80032de <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800327c:	e02f      	b.n	80032de <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	d112      	bne.n	80032b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b0:	e015      	b.n	80032de <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b2:	f7fe f849 	bl	8001348 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d803      	bhi.n	80032ca <HAL_SPI_Transmit+0x16c>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d102      	bne.n	80032d0 <HAL_SPI_Transmit+0x172>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80032dc:	e0ab      	b.n	8003436 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ca      	bne.n	800327e <HAL_SPI_Transmit+0x120>
 80032e8:	e080      	b.n	80033ec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_Transmit+0x19a>
 80032f2:	8afb      	ldrh	r3, [r7, #22]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d174      	bne.n	80033e2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d912      	bls.n	8003328 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	881a      	ldrh	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	1c9a      	adds	r2, r3, #2
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b02      	subs	r3, #2
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003326:	e05c      	b.n	80033e2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800334e:	e048      	b.n	80033e2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d12b      	bne.n	80033b6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d912      	bls.n	800338e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b02      	subs	r3, #2
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800338c:	e029      	b.n	80033e2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b4:	e015      	b.n	80033e2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033b6:	f7fd ffc7 	bl	8001348 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d803      	bhi.n	80033ce <HAL_SPI_Transmit+0x270>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d102      	bne.n	80033d4 <HAL_SPI_Transmit+0x276>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80033e0:	e029      	b.n	8003436 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1b1      	bne.n	8003350 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fd71 	bl	8003ed8 <SPI_EndRxTxTransaction>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e003      	b.n	8003436 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800343e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d002      	beq.n	800346c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	75fb      	strb	r3, [r7, #23]
    goto error;
 800346a:	e092      	b.n	8003592 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d110      	bne.n	8003496 <HAL_SPI_Receive_IT+0x4e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347c:	d10b      	bne.n	8003496 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2204      	movs	r2, #4
 8003482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f889 	bl	80035a4 <HAL_SPI_TransmitReceive_IT>
 8003492:	4603      	mov	r3, r0
 8003494:	e07e      	b.n	8003594 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_Receive_IT+0x5a>
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a6:	e074      	b.n	8003592 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_SPI_Receive_IT+0x6e>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e06e      	b.n	8003594 <HAL_SPI_Receive_IT+0x14c>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2204      	movs	r2, #4
 80034c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003502:	d90b      	bls.n	800351c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003512:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_SPI_Receive_IT+0x154>)
 8003518:	64da      	str	r2, [r3, #76]	; 0x4c
 800351a:	e00a      	b.n	8003532 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800352a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_SPI_Receive_IT+0x158>)
 8003530:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353a:	d10f      	bne.n	800355c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800355a:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d007      	beq.n	800357a <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003590:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	08003ba1 	.word	0x08003ba1
 80035a0:	08003b51 	.word	0x08003b51

080035a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035bc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035c4:	7dbb      	ldrb	r3, [r7, #22]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d00d      	beq.n	80035e6 <HAL_SPI_TransmitReceive_IT+0x42>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d0:	d106      	bne.n	80035e0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80035da:	7dbb      	ldrb	r3, [r7, #22]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d002      	beq.n	80035e6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035e4:	e07d      	b.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_SPI_TransmitReceive_IT+0x54>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_TransmitReceive_IT+0x54>
 80035f2:	887b      	ldrh	r3, [r7, #2]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035fc:	e071      	b.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_SPI_TransmitReceive_IT+0x68>
 8003608:	2302      	movs	r3, #2
 800360a:	e06b      	b.n	80036e4 <HAL_SPI_TransmitReceive_IT+0x140>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b04      	cmp	r3, #4
 800361e:	d003      	beq.n	8003628 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2205      	movs	r2, #5
 8003624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	887a      	ldrh	r2, [r7, #2]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	887a      	ldrh	r2, [r7, #2]
 8003652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800365e:	d906      	bls.n	800366e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003664:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <HAL_SPI_TransmitReceive_IT+0x150>)
 800366a:	651a      	str	r2, [r3, #80]	; 0x50
 800366c:	e005      	b.n	800367a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003672:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_SPI_TransmitReceive_IT+0x158>)
 8003678:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003682:	d802      	bhi.n	800368a <HAL_SPI_TransmitReceive_IT+0xe6>
 8003684:	887b      	ldrh	r3, [r7, #2]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d908      	bls.n	800369c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e007      	b.n	80036ac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036aa:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d007      	beq.n	80036ca <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80036e0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	08003a8b 	.word	0x08003a8b
 80036f4:	08003af1 	.word	0x08003af1
 80036f8:	0800393b 	.word	0x0800393b
 80036fc:	080039f9 	.word	0x080039f9

08003700 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10e      	bne.n	8003740 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
    return;
 800373e:	e0ce      	b.n	80038de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_SPI_IRQHandler+0x5e>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
    return;
 800375c:	e0bf      	b.n	80038de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <HAL_SPI_IRQHandler+0x7e>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80b0 	beq.w	80038de <HAL_SPI_IRQHandler+0x1de>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80aa 	beq.w	80038de <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d011      	beq.n	80037c4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	e00b      	b.n	80037dc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
        return;
 80037da:	e080      	b.n	80038de <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d014      	beq.n	8003810 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381e:	f043 0208 	orr.w	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003838:	2b00      	cmp	r3, #0
 800383a:	d04f      	beq.n	80038dc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800384a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_SPI_IRQHandler+0x168>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d034      	beq.n	80038d2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0203 	bic.w	r2, r2, #3
 8003876:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	2b00      	cmp	r3, #0
 800387e:	d011      	beq.n	80038a4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_SPI_IRQHandler+0x1e4>)
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fe6d 	bl	800156c <HAL_DMA_Abort_IT>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d016      	beq.n	80038da <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_SPI_IRQHandler+0x1e4>)
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fe57 	bl	800156c <HAL_DMA_Abort_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80038d0:	e003      	b.n	80038da <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f812 	bl	80038fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038d8:	e000      	b.n	80038dc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80038da:	bf00      	nop
    return;
 80038dc:	bf00      	nop
  }
}
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	08003911 	.word	0x08003911

080038e8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff ffe5 	bl	80038fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d923      	bls.n	8003996 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	b292      	uxth	r2, r2
 800395a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b02      	subs	r3, #2
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d11f      	bne.n	80039c4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e016      	b.n	80039c4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f103 020c 	add.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 faba 	bl	8003f64 <SPI_CloseRxTx_ISR>
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d912      	bls.n	8003a30 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b02      	subs	r3, #2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a2e:	e012      	b.n	8003a56 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a6e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fa71 	bl	8003f64 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10f      	bne.n	8003ae8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa3e 	bl	8003f64 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d110      	bne.n	8003b48 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b34:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa0e 	bl	8003f64 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f103 020c 	add.w	r2, r3, #12
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fa28 	bl	8003fe8 <SPI_CloseRx_ISR>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa02 	bl	8003fe8 <SPI_CloseRx_ISR>
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bfc:	f7fd fba4 	bl	8001348 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c0c:	f7fd fb9c 	bl	8001348 <HAL_GetTick>
 8003c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	015b      	lsls	r3, r3, #5
 8003c18:	0d1b      	lsrs	r3, r3, #20
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c22:	e054      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d050      	beq.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2c:	f7fd fb8c 	bl	8001348 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d902      	bls.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d13d      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5a:	d111      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	d004      	beq.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6e:	d107      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d10f      	bne.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e017      	b.n	8003cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d19b      	bne.n	8003c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000

08003cfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d0e:	f7fd fb1b 	bl	8001348 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d1e:	f7fd fb13 	bl	8001348 <HAL_GetTick>
 8003d22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00da      	lsls	r2, r3, #3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	0d1b      	lsrs	r3, r3, #20
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d44:	e060      	b.n	8003e08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d4c:	d107      	bne.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d050      	beq.n	8003e08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d66:	f7fd faef 	bl	8001348 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d902      	bls.n	8003d7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13d      	bne.n	8003df8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d94:	d111      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	d004      	beq.n	8003daa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	d107      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc2:	d10f      	bne.n	8003de4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e010      	b.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d196      	bne.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000000 	.word	0x20000000

08003e28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3c:	d111      	bne.n	8003e62 <SPI_EndRxTransaction+0x3a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e46:	d004      	beq.n	8003e52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d107      	bne.n	8003e62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff febd 	bl	8003bec <SPI_WaitFlagStateUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e023      	b.n	8003ed0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e90:	d11d      	bne.n	8003ece <SPI_EndRxTransaction+0xa6>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9a:	d004      	beq.n	8003ea6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea4:	d113      	bne.n	8003ece <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ff22 	bl	8003cfc <SPI_WaitFifoStateUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e000      	b.n	8003ed0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff ff03 	bl	8003cfc <SPI_WaitFifoStateUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e027      	b.n	8003f5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fe68 	bl	8003bec <SPI_WaitFlagStateUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e014      	b.n	8003f5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fedc 	bl	8003cfc <SPI_WaitFifoStateUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e000      	b.n	8003f5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f6c:	f7fd f9ec 	bl	8001348 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0220 	bic.w	r2, r2, #32
 8003f80:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	2164      	movs	r1, #100	; 0x64
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ffa6 	bl	8003ed8 <SPI_EndRxTxTransaction>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d107      	bne.n	8003fc2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fe9c 	bl	8000cf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003fc0:	e00e      	b.n	8003fe0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fc8c 	bl	80038e8 <HAL_SPI_TxRxCpltCallback>
}
 8003fd0:	e006      	b.n	8003fe0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fc8e 	bl	80038fc <HAL_SPI_ErrorCallback>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004000:	f7fd f9a2 	bl	8001348 <HAL_GetTick>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	2164      	movs	r1, #100	; 0x64
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff0c 	bl	8003e28 <SPI_EndRxTransaction>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fe60 	bl	8000cf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004038:	e002      	b.n	8004040 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fc5e 	bl	80038fc <HAL_SPI_ErrorCallback>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e049      	b.n	80040ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc ff28 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 f9d0 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04f      	b.n	80041b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a23      	ldr	r2, [pc, #140]	; (80041bc <HAL_TIM_Base_Start_IT+0xc4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d018      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d115      	bne.n	800419a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b06      	cmp	r3, #6
 800417e:	d015      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d011      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	e008      	b.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e000      	b.n	80041ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40013400 	.word	0x40013400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	00010007 	.word	0x00010007

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0202 	mvn.w	r2, #2
 800420c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8e4 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8d6 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8e7 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d020      	beq.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01b      	beq.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8be 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8b0 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8c1 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d020      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01b      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0208 	mvn.w	r2, #8
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2204      	movs	r2, #4
 80042aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f898 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 80042c0:	e005      	b.n	80042ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f88a 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f89b 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d020      	beq.n	8004320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01b      	beq.n	8004320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0210 	mvn.w	r2, #16
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2208      	movs	r2, #8
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f872 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f864 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f875 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0201 	mvn.w	r2, #1
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fcc2 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f906 	bl	8004574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8fe 	bl	8004588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f834 	bl	8004418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0220 	mvn.w	r2, #32
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8c6 	bl	8004560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a40      	ldr	r2, [pc, #256]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d00f      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3d      	ldr	r2, [pc, #244]	; (8004544 <TIM_Base_SetConfig+0x118>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00b      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <TIM_Base_SetConfig+0x11c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3b      	ldr	r2, [pc, #236]	; (800454c <TIM_Base_SetConfig+0x120>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3a      	ldr	r2, [pc, #232]	; (8004550 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <TIM_Base_SetConfig+0x118>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <TIM_Base_SetConfig+0x11c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <TIM_Base_SetConfig+0x120>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a29      	ldr	r2, [pc, #164]	; (8004550 <TIM_Base_SetConfig+0x124>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a28      	ldr	r2, [pc, #160]	; (8004554 <TIM_Base_SetConfig+0x128>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a27      	ldr	r2, [pc, #156]	; (8004558 <TIM_Base_SetConfig+0x12c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a26      	ldr	r2, [pc, #152]	; (800455c <TIM_Base_SetConfig+0x130>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a10      	ldr	r2, [pc, #64]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00f      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a12      	ldr	r2, [pc, #72]	; (8004550 <TIM_Base_SetConfig+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a11      	ldr	r2, [pc, #68]	; (8004554 <TIM_Base_SetConfig+0x128>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <TIM_Base_SetConfig+0x12c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0f      	ldr	r2, [pc, #60]	; (800455c <TIM_Base_SetConfig+0x130>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40013400 	.word	0x40013400
 8004554:	40014000 	.word	0x40014000
 8004558:	40014400 	.word	0x40014400
 800455c:	40014800 	.word	0x40014800

08004560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e040      	b.n	8004630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fca6 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	; 0x24
 80045c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fc34 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f979 	bl	80048e0 <UART_SetConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e01b      	b.n	8004630 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fcb3 	bl	8004f94 <UART_CheckIdleState>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464c:	2b20      	cmp	r3, #32
 800464e:	d178      	bne.n	8004742 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_UART_Transmit+0x24>
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e071      	b.n	8004744 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	; 0x21
 800466c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466e:	f7fc fe6b 	bl	8001348 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d108      	bne.n	80046a0 <HAL_UART_Transmit+0x68>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e003      	b.n	80046a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a8:	e030      	b.n	800470c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	2180      	movs	r1, #128	; 0x80
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fd15 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e03c      	b.n	8004744 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	881a      	ldrh	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	b292      	uxth	r2, r2
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	3302      	adds	r3, #2
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e008      	b.n	80046fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b292      	uxth	r2, r2
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1c8      	bne.n	80046aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fcde 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e005      	b.n	8004744 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	2b20      	cmp	r3, #32
 8004764:	f040 80b6 	bne.w	80048d4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Receive+0x28>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0ae      	b.n	80048d6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2222      	movs	r2, #34	; 0x22
 8004784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478e:	f7fc fddb 	bl	8001348 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d10e      	bne.n	80047cc <HAL_UART_Receive+0x80>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_UART_Receive+0x76>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c0:	e02d      	b.n	800481e <HAL_UART_Receive+0xd2>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	22ff      	movs	r2, #255	; 0xff
 80047c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ca:	e028      	b.n	800481e <HAL_UART_Receive+0xd2>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <HAL_UART_Receive+0xa4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <HAL_UART_Receive+0x9a>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	22ff      	movs	r2, #255	; 0xff
 80047e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047e4:	e01b      	b.n	800481e <HAL_UART_Receive+0xd2>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	227f      	movs	r2, #127	; 0x7f
 80047ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ee:	e016      	b.n	800481e <HAL_UART_Receive+0xd2>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047f8:	d10d      	bne.n	8004816 <HAL_UART_Receive+0xca>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Receive+0xc0>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	227f      	movs	r2, #127	; 0x7f
 8004806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800480a:	e008      	b.n	800481e <HAL_UART_Receive+0xd2>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	223f      	movs	r2, #63	; 0x3f
 8004810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004814:	e003      	b.n	800481e <HAL_UART_Receive+0xd2>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004824:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d108      	bne.n	8004842 <HAL_UART_Receive+0xf6>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e003      	b.n	800484a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800484a:	e037      	b.n	80048bc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2200      	movs	r2, #0
 8004854:	2120      	movs	r1, #32
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fc44 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e033      	b.n	80048d6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10c      	bne.n	800488e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800487a:	b29a      	uxth	r2, r3
 800487c:	8a7b      	ldrh	r3, [r7, #18]
 800487e:	4013      	ands	r3, r2
 8004880:	b29a      	uxth	r2, r3
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e00d      	b.n	80048aa <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004894:	b29b      	uxth	r3, r3
 8004896:	b2da      	uxtb	r2, r3
 8004898:	8a7b      	ldrh	r3, [r7, #18]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4013      	ands	r3, r2
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1c1      	bne.n	800484c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b08a      	sub	sp, #40	; 0x28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4ba4      	ldr	r3, [pc, #656]	; (8004ba0 <UART_SetConfig+0x2c0>)
 8004910:	4013      	ands	r3, r2
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a99      	ldr	r2, [pc, #612]	; (8004ba4 <UART_SetConfig+0x2c4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	4313      	orrs	r3, r2
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a90      	ldr	r2, [pc, #576]	; (8004ba8 <UART_SetConfig+0x2c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d126      	bne.n	80049b8 <UART_SetConfig+0xd8>
 800496a:	4b90      	ldr	r3, [pc, #576]	; (8004bac <UART_SetConfig+0x2cc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b03      	cmp	r3, #3
 8004976:	d81b      	bhi.n	80049b0 <UART_SetConfig+0xd0>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <UART_SetConfig+0xa0>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	08004991 	.word	0x08004991
 8004984:	080049a1 	.word	0x080049a1
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a9 	.word	0x080049a9
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004996:	e116      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e112      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a6:	e10e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ae:	e10a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b6:	e106      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7c      	ldr	r2, [pc, #496]	; (8004bb0 <UART_SetConfig+0x2d0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d138      	bne.n	8004a34 <UART_SetConfig+0x154>
 80049c2:	4b7a      	ldr	r3, [pc, #488]	; (8004bac <UART_SetConfig+0x2cc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d82d      	bhi.n	8004a2c <UART_SetConfig+0x14c>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0xf8>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a2d 	.word	0x08004a2d
 80049e4:	08004a2d 	.word	0x08004a2d
 80049e8:	08004a1d 	.word	0x08004a1d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a2d 	.word	0x08004a2d
 80049f4:	08004a2d 	.word	0x08004a2d
 80049f8:	08004a15 	.word	0x08004a15
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e0d8      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e0d4      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e0d0      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e0cc      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e0c8      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5e      	ldr	r2, [pc, #376]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d125      	bne.n	8004a8a <UART_SetConfig+0x1aa>
 8004a3e:	4b5b      	ldr	r3, [pc, #364]	; (8004bac <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d016      	beq.n	8004a7a <UART_SetConfig+0x19a>
 8004a4c:	2b30      	cmp	r3, #48	; 0x30
 8004a4e:	d818      	bhi.n	8004a82 <UART_SetConfig+0x1a2>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d00a      	beq.n	8004a6a <UART_SetConfig+0x18a>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d814      	bhi.n	8004a82 <UART_SetConfig+0x1a2>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <UART_SetConfig+0x182>
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d008      	beq.n	8004a72 <UART_SetConfig+0x192>
 8004a60:	e00f      	b.n	8004a82 <UART_SetConfig+0x1a2>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a68:	e0ad      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a70:	e0a9      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a72:	2304      	movs	r3, #4
 8004a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a78:	e0a5      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a80:	e0a1      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a82:	2310      	movs	r3, #16
 8004a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a88:	e09d      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <UART_SetConfig+0x2d8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d125      	bne.n	8004ae0 <UART_SetConfig+0x200>
 8004a94:	4b45      	ldr	r3, [pc, #276]	; (8004bac <UART_SetConfig+0x2cc>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa0:	d016      	beq.n	8004ad0 <UART_SetConfig+0x1f0>
 8004aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa4:	d818      	bhi.n	8004ad8 <UART_SetConfig+0x1f8>
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d00a      	beq.n	8004ac0 <UART_SetConfig+0x1e0>
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d814      	bhi.n	8004ad8 <UART_SetConfig+0x1f8>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <UART_SetConfig+0x1d8>
 8004ab2:	2b40      	cmp	r3, #64	; 0x40
 8004ab4:	d008      	beq.n	8004ac8 <UART_SetConfig+0x1e8>
 8004ab6:	e00f      	b.n	8004ad8 <UART_SetConfig+0x1f8>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	e082      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac6:	e07e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ace:	e07a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad6:	e076      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ade:	e072      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a35      	ldr	r2, [pc, #212]	; (8004bbc <UART_SetConfig+0x2dc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d12a      	bne.n	8004b40 <UART_SetConfig+0x260>
 8004aea:	4b30      	ldr	r3, [pc, #192]	; (8004bac <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af8:	d01a      	beq.n	8004b30 <UART_SetConfig+0x250>
 8004afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afe:	d81b      	bhi.n	8004b38 <UART_SetConfig+0x258>
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b04:	d00c      	beq.n	8004b20 <UART_SetConfig+0x240>
 8004b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0a:	d815      	bhi.n	8004b38 <UART_SetConfig+0x258>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <UART_SetConfig+0x238>
 8004b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b14:	d008      	beq.n	8004b28 <UART_SetConfig+0x248>
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x258>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e052      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b20:	2302      	movs	r3, #2
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e04e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e04a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b30:	2308      	movs	r3, #8
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e046      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3e:	e042      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <UART_SetConfig+0x2c4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d13a      	bne.n	8004bc0 <UART_SetConfig+0x2e0>
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <UART_SetConfig+0x2cc>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b58:	d01a      	beq.n	8004b90 <UART_SetConfig+0x2b0>
 8004b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b5e:	d81b      	bhi.n	8004b98 <UART_SetConfig+0x2b8>
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b64:	d00c      	beq.n	8004b80 <UART_SetConfig+0x2a0>
 8004b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6a:	d815      	bhi.n	8004b98 <UART_SetConfig+0x2b8>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <UART_SetConfig+0x298>
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b74:	d008      	beq.n	8004b88 <UART_SetConfig+0x2a8>
 8004b76:	e00f      	b.n	8004b98 <UART_SetConfig+0x2b8>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e022      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e01e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e01a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	e016      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9e:	e012      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ba0:	efff69f3 	.word	0xefff69f3
 8004ba4:	40008000 	.word	0x40008000
 8004ba8:	40013800 	.word	0x40013800
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40004400 	.word	0x40004400
 8004bb4:	40004800 	.word	0x40004800
 8004bb8:	40004c00 	.word	0x40004c00
 8004bbc:	40005000 	.word	0x40005000
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a9f      	ldr	r2, [pc, #636]	; (8004e48 <UART_SetConfig+0x568>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d17a      	bne.n	8004cc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d824      	bhi.n	8004c22 <UART_SetConfig+0x342>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x300>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c23 	.word	0x08004c23
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c13 	.word	0x08004c13
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c23 	.word	0x08004c23
 8004c00:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fd fc8e 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8004c08:	61f8      	str	r0, [r7, #28]
        break;
 8004c0a:	e010      	b.n	8004c2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b8f      	ldr	r3, [pc, #572]	; (8004e4c <UART_SetConfig+0x56c>)
 8004c0e:	61fb      	str	r3, [r7, #28]
        break;
 8004c10:	e00d      	b.n	8004c2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c12:	f7fd fbef 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8004c16:	61f8      	str	r0, [r7, #28]
        break;
 8004c18:	e009      	b.n	8004c2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1e:	61fb      	str	r3, [r7, #28]
        break;
 8004c20:	e005      	b.n	8004c2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80fb 	beq.w	8004e2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d305      	bcc.n	8004c52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d903      	bls.n	8004c5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c58:	e0e8      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	461c      	mov	r4, r3
 8004c60:	4615      	mov	r5, r2
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	022b      	lsls	r3, r5, #8
 8004c6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c70:	0222      	lsls	r2, r4, #8
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	6849      	ldr	r1, [r1, #4]
 8004c76:	0849      	lsrs	r1, r1, #1
 8004c78:	2000      	movs	r0, #0
 8004c7a:	4688      	mov	r8, r1
 8004c7c:	4681      	mov	r9, r0
 8004c7e:	eb12 0a08 	adds.w	sl, r2, r8
 8004c82:	eb43 0b09 	adc.w	fp, r3, r9
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c94:	4650      	mov	r0, sl
 8004c96:	4659      	mov	r1, fp
 8004c98:	f7fb faea 	bl	8000270 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004caa:	d308      	bcc.n	8004cbe <UART_SetConfig+0x3de>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb2:	d204      	bcs.n	8004cbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	e0b6      	b.n	8004e2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cc4:	e0b2      	b.n	8004e2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cce:	d15e      	bne.n	8004d8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d828      	bhi.n	8004d2a <UART_SetConfig+0x44a>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x400>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d15 	.word	0x08004d15
 8004cec:	08004d2b 	.word	0x08004d2b
 8004cf0:	08004d1b 	.word	0x08004d1b
 8004cf4:	08004d2b 	.word	0x08004d2b
 8004cf8:	08004d2b 	.word	0x08004d2b
 8004cfc:	08004d2b 	.word	0x08004d2b
 8004d00:	08004d23 	.word	0x08004d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fd fc0e 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
        break;
 8004d0a:	e014      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7fd fc20 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e010      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d14:	4b4d      	ldr	r3, [pc, #308]	; (8004e4c <UART_SetConfig+0x56c>)
 8004d16:	61fb      	str	r3, [r7, #28]
        break;
 8004d18:	e00d      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1a:	f7fd fb6b 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8004d1e:	61f8      	str	r0, [r7, #28]
        break;
 8004d20:	e009      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d26:	61fb      	str	r3, [r7, #28]
        break;
 8004d28:	e005      	b.n	8004d36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d077      	beq.n	8004e2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005a      	lsls	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d916      	bls.n	8004d86 <UART_SetConfig+0x4a6>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5e:	d212      	bcs.n	8004d86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f023 030f 	bic.w	r3, r3, #15
 8004d68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	8afa      	ldrh	r2, [r7, #22]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	e052      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d8c:	e04e      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d827      	bhi.n	8004de6 <UART_SetConfig+0x506>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x4bc>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fd fbb0 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	61f8      	str	r0, [r7, #28]
        break;
 8004dc6:	e014      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fd fbc2 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	61f8      	str	r0, [r7, #28]
        break;
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <UART_SetConfig+0x56c>)
 8004dd2:	61fb      	str	r3, [r7, #28]
        break;
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fd fb0d 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8004dda:	61f8      	str	r0, [r7, #28]
        break;
 8004ddc:	e009      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	61fb      	str	r3, [r7, #28]
        break;
 8004de4:	e005      	b.n	8004df2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004df0:	bf00      	nop
    }

    if (pclk != 0U)
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d019      	beq.n	8004e2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	085a      	lsrs	r2, r3, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	441a      	add	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d909      	bls.n	8004e26 <UART_SetConfig+0x546>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d205      	bcs.n	8004e26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
 8004e24:	e002      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3728      	adds	r7, #40	; 0x28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e46:	bf00      	nop
 8004e48:	40008000 	.word	0x40008000
 8004e4c:	00f42400 	.word	0x00f42400

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d10a      	bne.n	8004f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b098      	sub	sp, #96	; 0x60
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa4:	f7fc f9d0 	bl	8001348 <HAL_GetTick>
 8004fa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d12e      	bne.n	8005016 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f88c 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d021      	beq.n	8005016 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e062      	b.n	80050dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d149      	bne.n	80050b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f856 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03c      	beq.n	80050b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	623b      	str	r3, [r7, #32]
   return(result);
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
 800505e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005090:	61fa      	str	r2, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e011      	b.n	80050dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3758      	adds	r7, #88	; 0x58
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e049      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d045      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fc f923 	bl	8001348 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e048      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d031      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b08      	cmp	r3, #8
 8005132:	d110      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2208      	movs	r2, #8
 800513a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f838 	bl	80051b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2208      	movs	r2, #8
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e029      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005164:	d111      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800516e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f81e 	bl	80051b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e00f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4013      	ands	r3, r2
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d0a6      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b095      	sub	sp, #84	; 0x54
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
 80051da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	64bb      	str	r3, [r7, #72]	; 0x48
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800520c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005224:	2b01      	cmp	r3, #1
 8005226:	d118      	bne.n	800525a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	60bb      	str	r3, [r7, #8]
   return(result);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f023 0310 	bic.w	r3, r3, #16
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	613b      	str	r3, [r7, #16]
   return(result);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e6      	bne.n	8005228 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800526e:	bf00      	nop
 8005270:	3754      	adds	r7, #84	; 0x54
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <SysTick_Handler+0x1c>)
 8005282:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005284:	f000 f996 	bl	80055b4 <xTaskGetSchedulerState>
 8005288:	4603      	mov	r3, r0
 800528a:	2b01      	cmp	r3, #1
 800528c:	d001      	beq.n	8005292 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800528e:	f000 f9fb 	bl	8005688 <xPortSysTickHandler>
  }
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000e010 	.word	0xe000e010

0800529c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6892      	ldr	r2, [r2, #8]
 80052fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6852      	ldr	r2, [r2, #4]
 8005304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d103      	bne.n	8005318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	1e5a      	subs	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005342:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <xTaskIncrementTick+0x148>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f040 808f 	bne.w	800546a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800534c:	4b4d      	ldr	r3, [pc, #308]	; (8005484 <xTaskIncrementTick+0x14c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005354:	4a4b      	ldr	r2, [pc, #300]	; (8005484 <xTaskIncrementTick+0x14c>)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d120      	bne.n	80053a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005360:	4b49      	ldr	r3, [pc, #292]	; (8005488 <xTaskIncrementTick+0x150>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xTaskIncrementTick+0x46>
 8005380:	4b41      	ldr	r3, [pc, #260]	; (8005488 <xTaskIncrementTick+0x150>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	4b41      	ldr	r3, [pc, #260]	; (800548c <xTaskIncrementTick+0x154>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a3f      	ldr	r2, [pc, #252]	; (8005488 <xTaskIncrementTick+0x150>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4a3f      	ldr	r2, [pc, #252]	; (800548c <xTaskIncrementTick+0x154>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b3e      	ldr	r3, [pc, #248]	; (8005490 <xTaskIncrementTick+0x158>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <xTaskIncrementTick+0x158>)
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	f000 f8e9 	bl	8005574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053a2:	4b3c      	ldr	r3, [pc, #240]	; (8005494 <xTaskIncrementTick+0x15c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d349      	bcc.n	8005440 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <xTaskIncrementTick+0x150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b6:	4b37      	ldr	r3, [pc, #220]	; (8005494 <xTaskIncrementTick+0x15c>)
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	601a      	str	r2, [r3, #0]
					break;
 80053be:	e03f      	b.n	8005440 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c0:	4b31      	ldr	r3, [pc, #196]	; (8005488 <xTaskIncrementTick+0x150>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d203      	bcs.n	80053e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053d8:	4a2e      	ldr	r2, [pc, #184]	; (8005494 <xTaskIncrementTick+0x15c>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053de:	e02f      	b.n	8005440 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff7d 	bl	80052e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3318      	adds	r3, #24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ff74 	bl	80052e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <xTaskIncrementTick+0x160>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d903      	bls.n	8005410 <xTaskIncrementTick+0xd8>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a22      	ldr	r2, [pc, #136]	; (8005498 <xTaskIncrementTick+0x160>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <xTaskIncrementTick+0x164>)
 800541e:	441a      	add	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f7ff ff38 	bl	800529c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <xTaskIncrementTick+0x168>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	429a      	cmp	r2, r3
 8005438:	d3b8      	bcc.n	80053ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543e:	e7b5      	b.n	80053ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <xTaskIncrementTick+0x168>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005446:	4915      	ldr	r1, [pc, #84]	; (800549c <xTaskIncrementTick+0x164>)
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d901      	bls.n	800545c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <xTaskIncrementTick+0x16c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e004      	b.n	8005474 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <xTaskIncrementTick+0x170>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3301      	adds	r3, #1
 8005470:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <xTaskIncrementTick+0x170>)
 8005472:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005474:	697b      	ldr	r3, [r7, #20]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000804 	.word	0x20000804
 8005484:	200007e8 	.word	0x200007e8
 8005488:	200007e0 	.word	0x200007e0
 800548c:	200007e4 	.word	0x200007e4
 8005490:	200007fc 	.word	0x200007fc
 8005494:	20000800 	.word	0x20000800
 8005498:	200007ec 	.word	0x200007ec
 800549c:	20000380 	.word	0x20000380
 80054a0:	2000037c 	.word	0x2000037c
 80054a4:	200007f8 	.word	0x200007f8
 80054a8:	200007f4 	.word	0x200007f4

080054ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054b2:	4b2a      	ldr	r3, [pc, #168]	; (800555c <vTaskSwitchContext+0xb0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054ba:	4b29      	ldr	r3, [pc, #164]	; (8005560 <vTaskSwitchContext+0xb4>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054c0:	e046      	b.n	8005550 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80054c2:	4b27      	ldr	r3, [pc, #156]	; (8005560 <vTaskSwitchContext+0xb4>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c8:	4b26      	ldr	r3, [pc, #152]	; (8005564 <vTaskSwitchContext+0xb8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e010      	b.n	80054f2 <vTaskSwitchContext+0x46>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <vTaskSwitchContext+0x40>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	607b      	str	r3, [r7, #4]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <vTaskSwitchContext+0x3e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	491d      	ldr	r1, [pc, #116]	; (8005568 <vTaskSwitchContext+0xbc>)
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0e4      	beq.n	80054d0 <vTaskSwitchContext+0x24>
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <vTaskSwitchContext+0xbc>)
 8005512:	4413      	add	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	3308      	adds	r3, #8
 8005528:	429a      	cmp	r2, r3
 800552a:	d104      	bne.n	8005536 <vTaskSwitchContext+0x8a>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a0b      	ldr	r2, [pc, #44]	; (800556c <vTaskSwitchContext+0xc0>)
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <vTaskSwitchContext+0xb8>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <vTaskSwitchContext+0xc0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3354      	adds	r3, #84	; 0x54
 800554c:	4a08      	ldr	r2, [pc, #32]	; (8005570 <vTaskSwitchContext+0xc4>)
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20000804 	.word	0x20000804
 8005560:	200007f8 	.word	0x200007f8
 8005564:	200007ec 	.word	0x200007ec
 8005568:	20000380 	.word	0x20000380
 800556c:	2000037c 	.word	0x2000037c
 8005570:	20000064 	.word	0x20000064

08005574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <prvResetNextTaskUnblockTime+0x38>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
 800558a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800558c:	e008      	b.n	80055a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558e:	4b07      	ldr	r3, [pc, #28]	; (80055ac <prvResetNextTaskUnblockTime+0x38>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <prvResetNextTaskUnblockTime+0x3c>)
 800559e:	6013      	str	r3, [r2, #0]
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	200007e0 	.word	0x200007e0
 80055b0:	20000800 	.word	0x20000800

080055b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <xTaskGetSchedulerState+0x34>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055c2:	2301      	movs	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	e008      	b.n	80055da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <xTaskGetSchedulerState+0x38>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055d0:	2302      	movs	r3, #2
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e001      	b.n	80055da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055da:	687b      	ldr	r3, [r7, #4]
	}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	200007f0 	.word	0x200007f0
 80055ec:	20000804 	.word	0x20000804

080055f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <pxCurrentTCBConst2>)
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	6808      	ldr	r0, [r1, #0]
 80055f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fa:	f380 8809 	msr	PSP, r0
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8811 	msr	BASEPRI, r0
 800560a:	4770      	bx	lr
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst2>:
 8005610:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
	...

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f01e 0f10 	tst.w	lr, #16
 8005630:	bf08      	it	eq
 8005632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005644:	f380 8811 	msr	BASEPRI, r0
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f7ff ff2c 	bl	80054ac <vTaskSwitchContext>
 8005654:	f04f 0000 	mov.w	r0, #0
 8005658:	f380 8811 	msr	BASEPRI, r0
 800565c:	bc09      	pop	{r0, r3}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005666:	f01e 0f10 	tst.w	lr, #16
 800566a:	bf08      	it	eq
 800566c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005670:	f380 8809 	msr	PSP, r0
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst>:
 8005680:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f7ff fe49 	bl	8005338 <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <xPortSysTickHandler+0x40>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <std>:
 80056cc:	2300      	movs	r3, #0
 80056ce:	b510      	push	{r4, lr}
 80056d0:	4604      	mov	r4, r0
 80056d2:	e9c0 3300 	strd	r3, r3, [r0]
 80056d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056da:	6083      	str	r3, [r0, #8]
 80056dc:	8181      	strh	r1, [r0, #12]
 80056de:	6643      	str	r3, [r0, #100]	; 0x64
 80056e0:	81c2      	strh	r2, [r0, #14]
 80056e2:	6183      	str	r3, [r0, #24]
 80056e4:	4619      	mov	r1, r3
 80056e6:	2208      	movs	r2, #8
 80056e8:	305c      	adds	r0, #92	; 0x5c
 80056ea:	f000 f8f4 	bl	80058d6 <memset>
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <std+0x38>)
 80056f0:	6263      	str	r3, [r4, #36]	; 0x24
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <std+0x3c>)
 80056f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <std+0x40>)
 80056f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <std+0x44>)
 80056fc:	6224      	str	r4, [r4, #32]
 80056fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	08005851 	.word	0x08005851
 8005708:	08005873 	.word	0x08005873
 800570c:	080058ab 	.word	0x080058ab
 8005710:	080058cf 	.word	0x080058cf

08005714 <stdio_exit_handler>:
 8005714:	4a02      	ldr	r2, [pc, #8]	; (8005720 <stdio_exit_handler+0xc>)
 8005716:	4903      	ldr	r1, [pc, #12]	; (8005724 <stdio_exit_handler+0x10>)
 8005718:	4803      	ldr	r0, [pc, #12]	; (8005728 <stdio_exit_handler+0x14>)
 800571a:	f000 b869 	b.w	80057f0 <_fwalk_sglue>
 800571e:	bf00      	nop
 8005720:	2000000c 	.word	0x2000000c
 8005724:	08006271 	.word	0x08006271
 8005728:	20000018 	.word	0x20000018

0800572c <cleanup_stdio>:
 800572c:	6841      	ldr	r1, [r0, #4]
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <cleanup_stdio+0x34>)
 8005730:	4299      	cmp	r1, r3
 8005732:	b510      	push	{r4, lr}
 8005734:	4604      	mov	r4, r0
 8005736:	d001      	beq.n	800573c <cleanup_stdio+0x10>
 8005738:	f000 fd9a 	bl	8006270 <_fflush_r>
 800573c:	68a1      	ldr	r1, [r4, #8]
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <cleanup_stdio+0x38>)
 8005740:	4299      	cmp	r1, r3
 8005742:	d002      	beq.n	800574a <cleanup_stdio+0x1e>
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fd93 	bl	8006270 <_fflush_r>
 800574a:	68e1      	ldr	r1, [r4, #12]
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <cleanup_stdio+0x3c>)
 800574e:	4299      	cmp	r1, r3
 8005750:	d004      	beq.n	800575c <cleanup_stdio+0x30>
 8005752:	4620      	mov	r0, r4
 8005754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005758:	f000 bd8a 	b.w	8006270 <_fflush_r>
 800575c:	bd10      	pop	{r4, pc}
 800575e:	bf00      	nop
 8005760:	20000808 	.word	0x20000808
 8005764:	20000870 	.word	0x20000870
 8005768:	200008d8 	.word	0x200008d8

0800576c <global_stdio_init.part.0>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <global_stdio_init.part.0+0x30>)
 8005770:	4c0b      	ldr	r4, [pc, #44]	; (80057a0 <global_stdio_init.part.0+0x34>)
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <global_stdio_init.part.0+0x38>)
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	4620      	mov	r0, r4
 8005778:	2200      	movs	r2, #0
 800577a:	2104      	movs	r1, #4
 800577c:	f7ff ffa6 	bl	80056cc <std>
 8005780:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005784:	2201      	movs	r2, #1
 8005786:	2109      	movs	r1, #9
 8005788:	f7ff ffa0 	bl	80056cc <std>
 800578c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005790:	2202      	movs	r2, #2
 8005792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005796:	2112      	movs	r1, #18
 8005798:	f7ff bf98 	b.w	80056cc <std>
 800579c:	20000940 	.word	0x20000940
 80057a0:	20000808 	.word	0x20000808
 80057a4:	08005715 	.word	0x08005715

080057a8 <__sfp_lock_acquire>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__sfp_lock_acquire+0x8>)
 80057aa:	f000 b90d 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 80057ae:	bf00      	nop
 80057b0:	20000949 	.word	0x20000949

080057b4 <__sfp_lock_release>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__sfp_lock_release+0x8>)
 80057b6:	f000 b908 	b.w	80059ca <__retarget_lock_release_recursive>
 80057ba:	bf00      	nop
 80057bc:	20000949 	.word	0x20000949

080057c0 <__sinit>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	4604      	mov	r4, r0
 80057c4:	f7ff fff0 	bl	80057a8 <__sfp_lock_acquire>
 80057c8:	6a23      	ldr	r3, [r4, #32]
 80057ca:	b11b      	cbz	r3, 80057d4 <__sinit+0x14>
 80057cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d0:	f7ff bff0 	b.w	80057b4 <__sfp_lock_release>
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <__sinit+0x28>)
 80057d6:	6223      	str	r3, [r4, #32]
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <__sinit+0x2c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f5      	bne.n	80057cc <__sinit+0xc>
 80057e0:	f7ff ffc4 	bl	800576c <global_stdio_init.part.0>
 80057e4:	e7f2      	b.n	80057cc <__sinit+0xc>
 80057e6:	bf00      	nop
 80057e8:	0800572d 	.word	0x0800572d
 80057ec:	20000940 	.word	0x20000940

080057f0 <_fwalk_sglue>:
 80057f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f4:	4607      	mov	r7, r0
 80057f6:	4688      	mov	r8, r1
 80057f8:	4614      	mov	r4, r2
 80057fa:	2600      	movs	r6, #0
 80057fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005800:	f1b9 0901 	subs.w	r9, r9, #1
 8005804:	d505      	bpl.n	8005812 <_fwalk_sglue+0x22>
 8005806:	6824      	ldr	r4, [r4, #0]
 8005808:	2c00      	cmp	r4, #0
 800580a:	d1f7      	bne.n	80057fc <_fwalk_sglue+0xc>
 800580c:	4630      	mov	r0, r6
 800580e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005812:	89ab      	ldrh	r3, [r5, #12]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d907      	bls.n	8005828 <_fwalk_sglue+0x38>
 8005818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800581c:	3301      	adds	r3, #1
 800581e:	d003      	beq.n	8005828 <_fwalk_sglue+0x38>
 8005820:	4629      	mov	r1, r5
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	4306      	orrs	r6, r0
 8005828:	3568      	adds	r5, #104	; 0x68
 800582a:	e7e9      	b.n	8005800 <_fwalk_sglue+0x10>

0800582c <iprintf>:
 800582c:	b40f      	push	{r0, r1, r2, r3}
 800582e:	b507      	push	{r0, r1, r2, lr}
 8005830:	4906      	ldr	r1, [pc, #24]	; (800584c <iprintf+0x20>)
 8005832:	ab04      	add	r3, sp, #16
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	f853 2b04 	ldr.w	r2, [r3], #4
 800583a:	6881      	ldr	r1, [r0, #8]
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	f000 f9e7 	bl	8005c10 <_vfiprintf_r>
 8005842:	b003      	add	sp, #12
 8005844:	f85d eb04 	ldr.w	lr, [sp], #4
 8005848:	b004      	add	sp, #16
 800584a:	4770      	bx	lr
 800584c:	20000064 	.word	0x20000064

08005850 <__sread>:
 8005850:	b510      	push	{r4, lr}
 8005852:	460c      	mov	r4, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	f000 f868 	bl	800592c <_read_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	bfab      	itete	ge
 8005860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005862:	89a3      	ldrhlt	r3, [r4, #12]
 8005864:	181b      	addge	r3, r3, r0
 8005866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800586a:	bfac      	ite	ge
 800586c:	6563      	strge	r3, [r4, #84]	; 0x54
 800586e:	81a3      	strhlt	r3, [r4, #12]
 8005870:	bd10      	pop	{r4, pc}

08005872 <__swrite>:
 8005872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005876:	461f      	mov	r7, r3
 8005878:	898b      	ldrh	r3, [r1, #12]
 800587a:	05db      	lsls	r3, r3, #23
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	4616      	mov	r6, r2
 8005882:	d505      	bpl.n	8005890 <__swrite+0x1e>
 8005884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005888:	2302      	movs	r3, #2
 800588a:	2200      	movs	r2, #0
 800588c:	f000 f83c 	bl	8005908 <_lseek_r>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	4632      	mov	r2, r6
 800589e:	463b      	mov	r3, r7
 80058a0:	4628      	mov	r0, r5
 80058a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	f000 b853 	b.w	8005950 <_write_r>

080058aa <__sseek>:
 80058aa:	b510      	push	{r4, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b2:	f000 f829 	bl	8005908 <_lseek_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	bf15      	itete	ne
 80058bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80058be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058c6:	81a3      	strheq	r3, [r4, #12]
 80058c8:	bf18      	it	ne
 80058ca:	81a3      	strhne	r3, [r4, #12]
 80058cc:	bd10      	pop	{r4, pc}

080058ce <__sclose>:
 80058ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d2:	f000 b809 	b.w	80058e8 <_close_r>

080058d6 <memset>:
 80058d6:	4402      	add	r2, r0
 80058d8:	4603      	mov	r3, r0
 80058da:	4293      	cmp	r3, r2
 80058dc:	d100      	bne.n	80058e0 <memset+0xa>
 80058de:	4770      	bx	lr
 80058e0:	f803 1b01 	strb.w	r1, [r3], #1
 80058e4:	e7f9      	b.n	80058da <memset+0x4>
	...

080058e8 <_close_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d06      	ldr	r5, [pc, #24]	; (8005904 <_close_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fb fc4d 	bl	8001192 <_close>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_close_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_close_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000944 	.word	0x20000944

08005908 <_lseek_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d07      	ldr	r5, [pc, #28]	; (8005928 <_lseek_r+0x20>)
 800590c:	4604      	mov	r4, r0
 800590e:	4608      	mov	r0, r1
 8005910:	4611      	mov	r1, r2
 8005912:	2200      	movs	r2, #0
 8005914:	602a      	str	r2, [r5, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f7fb fc62 	bl	80011e0 <_lseek>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_lseek_r+0x1e>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_lseek_r+0x1e>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000944 	.word	0x20000944

0800592c <_read_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d07      	ldr	r5, [pc, #28]	; (800594c <_read_r+0x20>)
 8005930:	4604      	mov	r4, r0
 8005932:	4608      	mov	r0, r1
 8005934:	4611      	mov	r1, r2
 8005936:	2200      	movs	r2, #0
 8005938:	602a      	str	r2, [r5, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f7fb fbf0 	bl	8001120 <_read>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_read_r+0x1e>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_read_r+0x1e>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000944 	.word	0x20000944

08005950 <_write_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	; (8005970 <_write_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fb fbfb 	bl	800115a <_write>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_write_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_write_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000944 	.word	0x20000944

08005974 <__errno>:
 8005974:	4b01      	ldr	r3, [pc, #4]	; (800597c <__errno+0x8>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000064 	.word	0x20000064

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4d0d      	ldr	r5, [pc, #52]	; (80059b8 <__libc_init_array+0x38>)
 8005984:	4c0d      	ldr	r4, [pc, #52]	; (80059bc <__libc_init_array+0x3c>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	2600      	movs	r6, #0
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	4d0b      	ldr	r5, [pc, #44]	; (80059c0 <__libc_init_array+0x40>)
 8005992:	4c0c      	ldr	r4, [pc, #48]	; (80059c4 <__libc_init_array+0x44>)
 8005994:	f000 fdbe 	bl	8006514 <_init>
 8005998:	1b64      	subs	r4, r4, r5
 800599a:	10a4      	asrs	r4, r4, #2
 800599c:	2600      	movs	r6, #0
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08006618 	.word	0x08006618
 80059bc:	08006618 	.word	0x08006618
 80059c0:	08006618 	.word	0x08006618
 80059c4:	0800661c 	.word	0x0800661c

080059c8 <__retarget_lock_acquire_recursive>:
 80059c8:	4770      	bx	lr

080059ca <__retarget_lock_release_recursive>:
 80059ca:	4770      	bx	lr

080059cc <_free_r>:
 80059cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d044      	beq.n	8005a5c <_free_r+0x90>
 80059d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059d6:	9001      	str	r0, [sp, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f1a1 0404 	sub.w	r4, r1, #4
 80059de:	bfb8      	it	lt
 80059e0:	18e4      	addlt	r4, r4, r3
 80059e2:	f000 f8df 	bl	8005ba4 <__malloc_lock>
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <_free_r+0x94>)
 80059e8:	9801      	ldr	r0, [sp, #4]
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	b933      	cbnz	r3, 80059fc <_free_r+0x30>
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	6014      	str	r4, [r2, #0]
 80059f2:	b003      	add	sp, #12
 80059f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059f8:	f000 b8da 	b.w	8005bb0 <__malloc_unlock>
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d908      	bls.n	8005a12 <_free_r+0x46>
 8005a00:	6825      	ldr	r5, [r4, #0]
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	428b      	cmp	r3, r1
 8005a06:	bf01      	itttt	eq
 8005a08:	6819      	ldreq	r1, [r3, #0]
 8005a0a:	685b      	ldreq	r3, [r3, #4]
 8005a0c:	1949      	addeq	r1, r1, r5
 8005a0e:	6021      	streq	r1, [r4, #0]
 8005a10:	e7ed      	b.n	80059ee <_free_r+0x22>
 8005a12:	461a      	mov	r2, r3
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b10b      	cbz	r3, 8005a1c <_free_r+0x50>
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d9fa      	bls.n	8005a12 <_free_r+0x46>
 8005a1c:	6811      	ldr	r1, [r2, #0]
 8005a1e:	1855      	adds	r5, r2, r1
 8005a20:	42a5      	cmp	r5, r4
 8005a22:	d10b      	bne.n	8005a3c <_free_r+0x70>
 8005a24:	6824      	ldr	r4, [r4, #0]
 8005a26:	4421      	add	r1, r4
 8005a28:	1854      	adds	r4, r2, r1
 8005a2a:	42a3      	cmp	r3, r4
 8005a2c:	6011      	str	r1, [r2, #0]
 8005a2e:	d1e0      	bne.n	80059f2 <_free_r+0x26>
 8005a30:	681c      	ldr	r4, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	6053      	str	r3, [r2, #4]
 8005a36:	440c      	add	r4, r1
 8005a38:	6014      	str	r4, [r2, #0]
 8005a3a:	e7da      	b.n	80059f2 <_free_r+0x26>
 8005a3c:	d902      	bls.n	8005a44 <_free_r+0x78>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	6003      	str	r3, [r0, #0]
 8005a42:	e7d6      	b.n	80059f2 <_free_r+0x26>
 8005a44:	6825      	ldr	r5, [r4, #0]
 8005a46:	1961      	adds	r1, r4, r5
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	bf04      	itt	eq
 8005a4c:	6819      	ldreq	r1, [r3, #0]
 8005a4e:	685b      	ldreq	r3, [r3, #4]
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	bf04      	itt	eq
 8005a54:	1949      	addeq	r1, r1, r5
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	6054      	str	r4, [r2, #4]
 8005a5a:	e7ca      	b.n	80059f2 <_free_r+0x26>
 8005a5c:	b003      	add	sp, #12
 8005a5e:	bd30      	pop	{r4, r5, pc}
 8005a60:	2000094c 	.word	0x2000094c

08005a64 <sbrk_aligned>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4e0e      	ldr	r6, [pc, #56]	; (8005aa0 <sbrk_aligned+0x3c>)
 8005a68:	460c      	mov	r4, r1
 8005a6a:	6831      	ldr	r1, [r6, #0]
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	b911      	cbnz	r1, 8005a76 <sbrk_aligned+0x12>
 8005a70:	f000 fcbc 	bl	80063ec <_sbrk_r>
 8005a74:	6030      	str	r0, [r6, #0]
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 fcb7 	bl	80063ec <_sbrk_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d00a      	beq.n	8005a98 <sbrk_aligned+0x34>
 8005a82:	1cc4      	adds	r4, r0, #3
 8005a84:	f024 0403 	bic.w	r4, r4, #3
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d007      	beq.n	8005a9c <sbrk_aligned+0x38>
 8005a8c:	1a21      	subs	r1, r4, r0
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fcac 	bl	80063ec <_sbrk_r>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d101      	bne.n	8005a9c <sbrk_aligned+0x38>
 8005a98:	f04f 34ff 	mov.w	r4, #4294967295
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	20000950 	.word	0x20000950

08005aa4 <_malloc_r>:
 8005aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa8:	1ccd      	adds	r5, r1, #3
 8005aaa:	f025 0503 	bic.w	r5, r5, #3
 8005aae:	3508      	adds	r5, #8
 8005ab0:	2d0c      	cmp	r5, #12
 8005ab2:	bf38      	it	cc
 8005ab4:	250c      	movcc	r5, #12
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	4607      	mov	r7, r0
 8005aba:	db01      	blt.n	8005ac0 <_malloc_r+0x1c>
 8005abc:	42a9      	cmp	r1, r5
 8005abe:	d905      	bls.n	8005acc <_malloc_r+0x28>
 8005ac0:	230c      	movs	r3, #12
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005acc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ba0 <_malloc_r+0xfc>
 8005ad0:	f000 f868 	bl	8005ba4 <__malloc_lock>
 8005ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad8:	461c      	mov	r4, r3
 8005ada:	bb5c      	cbnz	r4, 8005b34 <_malloc_r+0x90>
 8005adc:	4629      	mov	r1, r5
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f7ff ffc0 	bl	8005a64 <sbrk_aligned>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	d155      	bne.n	8005b96 <_malloc_r+0xf2>
 8005aea:	f8d8 4000 	ldr.w	r4, [r8]
 8005aee:	4626      	mov	r6, r4
 8005af0:	2e00      	cmp	r6, #0
 8005af2:	d145      	bne.n	8005b80 <_malloc_r+0xdc>
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	d048      	beq.n	8005b8a <_malloc_r+0xe6>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	4631      	mov	r1, r6
 8005afc:	4638      	mov	r0, r7
 8005afe:	eb04 0903 	add.w	r9, r4, r3
 8005b02:	f000 fc73 	bl	80063ec <_sbrk_r>
 8005b06:	4581      	cmp	r9, r0
 8005b08:	d13f      	bne.n	8005b8a <_malloc_r+0xe6>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	1a6d      	subs	r5, r5, r1
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff ffa7 	bl	8005a64 <sbrk_aligned>
 8005b16:	3001      	adds	r0, #1
 8005b18:	d037      	beq.n	8005b8a <_malloc_r+0xe6>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	442b      	add	r3, r5
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	f8d8 3000 	ldr.w	r3, [r8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d038      	beq.n	8005b9a <_malloc_r+0xf6>
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	42a2      	cmp	r2, r4
 8005b2c:	d12b      	bne.n	8005b86 <_malloc_r+0xe2>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e00f      	b.n	8005b54 <_malloc_r+0xb0>
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	1b52      	subs	r2, r2, r5
 8005b38:	d41f      	bmi.n	8005b7a <_malloc_r+0xd6>
 8005b3a:	2a0b      	cmp	r2, #11
 8005b3c:	d917      	bls.n	8005b6e <_malloc_r+0xca>
 8005b3e:	1961      	adds	r1, r4, r5
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	6025      	str	r5, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	6059      	strne	r1, [r3, #4]
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	bf08      	it	eq
 8005b4c:	f8c8 1000 	streq.w	r1, [r8]
 8005b50:	5162      	str	r2, [r4, r5]
 8005b52:	604b      	str	r3, [r1, #4]
 8005b54:	4638      	mov	r0, r7
 8005b56:	f104 060b 	add.w	r6, r4, #11
 8005b5a:	f000 f829 	bl	8005bb0 <__malloc_unlock>
 8005b5e:	f026 0607 	bic.w	r6, r6, #7
 8005b62:	1d23      	adds	r3, r4, #4
 8005b64:	1af2      	subs	r2, r6, r3
 8005b66:	d0ae      	beq.n	8005ac6 <_malloc_r+0x22>
 8005b68:	1b9b      	subs	r3, r3, r6
 8005b6a:	50a3      	str	r3, [r4, r2]
 8005b6c:	e7ab      	b.n	8005ac6 <_malloc_r+0x22>
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	6862      	ldr	r2, [r4, #4]
 8005b72:	d1dd      	bne.n	8005b30 <_malloc_r+0x8c>
 8005b74:	f8c8 2000 	str.w	r2, [r8]
 8005b78:	e7ec      	b.n	8005b54 <_malloc_r+0xb0>
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	6864      	ldr	r4, [r4, #4]
 8005b7e:	e7ac      	b.n	8005ada <_malloc_r+0x36>
 8005b80:	4634      	mov	r4, r6
 8005b82:	6876      	ldr	r6, [r6, #4]
 8005b84:	e7b4      	b.n	8005af0 <_malloc_r+0x4c>
 8005b86:	4613      	mov	r3, r2
 8005b88:	e7cc      	b.n	8005b24 <_malloc_r+0x80>
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f000 f80e 	bl	8005bb0 <__malloc_unlock>
 8005b94:	e797      	b.n	8005ac6 <_malloc_r+0x22>
 8005b96:	6025      	str	r5, [r4, #0]
 8005b98:	e7dc      	b.n	8005b54 <_malloc_r+0xb0>
 8005b9a:	605b      	str	r3, [r3, #4]
 8005b9c:	deff      	udf	#255	; 0xff
 8005b9e:	bf00      	nop
 8005ba0:	2000094c 	.word	0x2000094c

08005ba4 <__malloc_lock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__malloc_lock+0x8>)
 8005ba6:	f7ff bf0f 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 8005baa:	bf00      	nop
 8005bac:	20000948 	.word	0x20000948

08005bb0 <__malloc_unlock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__malloc_unlock+0x8>)
 8005bb2:	f7ff bf0a 	b.w	80059ca <__retarget_lock_release_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	20000948 	.word	0x20000948

08005bbc <__sfputc_r>:
 8005bbc:	6893      	ldr	r3, [r2, #8]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	b410      	push	{r4}
 8005bc4:	6093      	str	r3, [r2, #8]
 8005bc6:	da08      	bge.n	8005bda <__sfputc_r+0x1e>
 8005bc8:	6994      	ldr	r4, [r2, #24]
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	db01      	blt.n	8005bd2 <__sfputc_r+0x16>
 8005bce:	290a      	cmp	r1, #10
 8005bd0:	d103      	bne.n	8005bda <__sfputc_r+0x1e>
 8005bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd6:	f000 bb73 	b.w	80062c0 <__swbuf_r>
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	1c58      	adds	r0, r3, #1
 8005bde:	6010      	str	r0, [r2, #0]
 8005be0:	7019      	strb	r1, [r3, #0]
 8005be2:	4608      	mov	r0, r1
 8005be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <__sfputs_r>:
 8005bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bec:	4606      	mov	r6, r0
 8005bee:	460f      	mov	r7, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	18d5      	adds	r5, r2, r3
 8005bf4:	42ac      	cmp	r4, r5
 8005bf6:	d101      	bne.n	8005bfc <__sfputs_r+0x12>
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e007      	b.n	8005c0c <__sfputs_r+0x22>
 8005bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c00:	463a      	mov	r2, r7
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7ff ffda 	bl	8005bbc <__sfputc_r>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d1f3      	bne.n	8005bf4 <__sfputs_r+0xa>
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c10 <_vfiprintf_r>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	460d      	mov	r5, r1
 8005c16:	b09d      	sub	sp, #116	; 0x74
 8005c18:	4614      	mov	r4, r2
 8005c1a:	4698      	mov	r8, r3
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	b118      	cbz	r0, 8005c28 <_vfiprintf_r+0x18>
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	b90b      	cbnz	r3, 8005c28 <_vfiprintf_r+0x18>
 8005c24:	f7ff fdcc 	bl	80057c0 <__sinit>
 8005c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	d405      	bmi.n	8005c3a <_vfiprintf_r+0x2a>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d402      	bmi.n	8005c3a <_vfiprintf_r+0x2a>
 8005c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c36:	f7ff fec7 	bl	80059c8 <__retarget_lock_acquire_recursive>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	071b      	lsls	r3, r3, #28
 8005c3e:	d501      	bpl.n	8005c44 <_vfiprintf_r+0x34>
 8005c40:	692b      	ldr	r3, [r5, #16]
 8005c42:	b99b      	cbnz	r3, 8005c6c <_vfiprintf_r+0x5c>
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f000 fb78 	bl	800633c <__swsetup_r>
 8005c4c:	b170      	cbz	r0, 8005c6c <_vfiprintf_r+0x5c>
 8005c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c50:	07dc      	lsls	r4, r3, #31
 8005c52:	d504      	bpl.n	8005c5e <_vfiprintf_r+0x4e>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	b01d      	add	sp, #116	; 0x74
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	0598      	lsls	r0, r3, #22
 8005c62:	d4f7      	bmi.n	8005c54 <_vfiprintf_r+0x44>
 8005c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c66:	f7ff feb0 	bl	80059ca <__retarget_lock_release_recursive>
 8005c6a:	e7f3      	b.n	8005c54 <_vfiprintf_r+0x44>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c70:	2320      	movs	r3, #32
 8005c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c7a:	2330      	movs	r3, #48	; 0x30
 8005c7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e30 <_vfiprintf_r+0x220>
 8005c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c84:	f04f 0901 	mov.w	r9, #1
 8005c88:	4623      	mov	r3, r4
 8005c8a:	469a      	mov	sl, r3
 8005c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c90:	b10a      	cbz	r2, 8005c96 <_vfiprintf_r+0x86>
 8005c92:	2a25      	cmp	r2, #37	; 0x25
 8005c94:	d1f9      	bne.n	8005c8a <_vfiprintf_r+0x7a>
 8005c96:	ebba 0b04 	subs.w	fp, sl, r4
 8005c9a:	d00b      	beq.n	8005cb4 <_vfiprintf_r+0xa4>
 8005c9c:	465b      	mov	r3, fp
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ffa1 	bl	8005bea <__sfputs_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f000 80a9 	beq.w	8005e00 <_vfiprintf_r+0x1f0>
 8005cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cb0:	445a      	add	r2, fp
 8005cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8005cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80a1 	beq.w	8005e00 <_vfiprintf_r+0x1f0>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc8:	f10a 0a01 	add.w	sl, sl, #1
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8005cd6:	4654      	mov	r4, sl
 8005cd8:	2205      	movs	r2, #5
 8005cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cde:	4854      	ldr	r0, [pc, #336]	; (8005e30 <_vfiprintf_r+0x220>)
 8005ce0:	f7fa fa76 	bl	80001d0 <memchr>
 8005ce4:	9a04      	ldr	r2, [sp, #16]
 8005ce6:	b9d8      	cbnz	r0, 8005d20 <_vfiprintf_r+0x110>
 8005ce8:	06d1      	lsls	r1, r2, #27
 8005cea:	bf44      	itt	mi
 8005cec:	2320      	movmi	r3, #32
 8005cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cf2:	0713      	lsls	r3, r2, #28
 8005cf4:	bf44      	itt	mi
 8005cf6:	232b      	movmi	r3, #43	; 0x2b
 8005cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005d00:	2b2a      	cmp	r3, #42	; 0x2a
 8005d02:	d015      	beq.n	8005d30 <_vfiprintf_r+0x120>
 8005d04:	9a07      	ldr	r2, [sp, #28]
 8005d06:	4654      	mov	r4, sl
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f04f 0c0a 	mov.w	ip, #10
 8005d0e:	4621      	mov	r1, r4
 8005d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d14:	3b30      	subs	r3, #48	; 0x30
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d94d      	bls.n	8005db6 <_vfiprintf_r+0x1a6>
 8005d1a:	b1b0      	cbz	r0, 8005d4a <_vfiprintf_r+0x13a>
 8005d1c:	9207      	str	r2, [sp, #28]
 8005d1e:	e014      	b.n	8005d4a <_vfiprintf_r+0x13a>
 8005d20:	eba0 0308 	sub.w	r3, r0, r8
 8005d24:	fa09 f303 	lsl.w	r3, r9, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	46a2      	mov	sl, r4
 8005d2e:	e7d2      	b.n	8005cd6 <_vfiprintf_r+0xc6>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	1d19      	adds	r1, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	9103      	str	r1, [sp, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfbb      	ittet	lt
 8005d3c:	425b      	neglt	r3, r3
 8005d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d42:	9307      	strge	r3, [sp, #28]
 8005d44:	9307      	strlt	r3, [sp, #28]
 8005d46:	bfb8      	it	lt
 8005d48:	9204      	strlt	r2, [sp, #16]
 8005d4a:	7823      	ldrb	r3, [r4, #0]
 8005d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d4e:	d10c      	bne.n	8005d6a <_vfiprintf_r+0x15a>
 8005d50:	7863      	ldrb	r3, [r4, #1]
 8005d52:	2b2a      	cmp	r3, #42	; 0x2a
 8005d54:	d134      	bne.n	8005dc0 <_vfiprintf_r+0x1b0>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	9203      	str	r2, [sp, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfb8      	it	lt
 8005d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d66:	3402      	adds	r4, #2
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e40 <_vfiprintf_r+0x230>
 8005d6e:	7821      	ldrb	r1, [r4, #0]
 8005d70:	2203      	movs	r2, #3
 8005d72:	4650      	mov	r0, sl
 8005d74:	f7fa fa2c 	bl	80001d0 <memchr>
 8005d78:	b138      	cbz	r0, 8005d8a <_vfiprintf_r+0x17a>
 8005d7a:	9b04      	ldr	r3, [sp, #16]
 8005d7c:	eba0 000a 	sub.w	r0, r0, sl
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	4082      	lsls	r2, r0
 8005d84:	4313      	orrs	r3, r2
 8005d86:	3401      	adds	r4, #1
 8005d88:	9304      	str	r3, [sp, #16]
 8005d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8e:	4829      	ldr	r0, [pc, #164]	; (8005e34 <_vfiprintf_r+0x224>)
 8005d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d94:	2206      	movs	r2, #6
 8005d96:	f7fa fa1b 	bl	80001d0 <memchr>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d03f      	beq.n	8005e1e <_vfiprintf_r+0x20e>
 8005d9e:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <_vfiprintf_r+0x228>)
 8005da0:	bb1b      	cbnz	r3, 8005dea <_vfiprintf_r+0x1da>
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	3307      	adds	r3, #7
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	3308      	adds	r3, #8
 8005dac:	9303      	str	r3, [sp, #12]
 8005dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db0:	443b      	add	r3, r7
 8005db2:	9309      	str	r3, [sp, #36]	; 0x24
 8005db4:	e768      	b.n	8005c88 <_vfiprintf_r+0x78>
 8005db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dba:	460c      	mov	r4, r1
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	e7a6      	b.n	8005d0e <_vfiprintf_r+0xfe>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	3401      	adds	r4, #1
 8005dc4:	9305      	str	r3, [sp, #20]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f04f 0c0a 	mov.w	ip, #10
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dd2:	3a30      	subs	r2, #48	; 0x30
 8005dd4:	2a09      	cmp	r2, #9
 8005dd6:	d903      	bls.n	8005de0 <_vfiprintf_r+0x1d0>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0c6      	beq.n	8005d6a <_vfiprintf_r+0x15a>
 8005ddc:	9105      	str	r1, [sp, #20]
 8005dde:	e7c4      	b.n	8005d6a <_vfiprintf_r+0x15a>
 8005de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005de4:	4604      	mov	r4, r0
 8005de6:	2301      	movs	r3, #1
 8005de8:	e7f0      	b.n	8005dcc <_vfiprintf_r+0x1bc>
 8005dea:	ab03      	add	r3, sp, #12
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	462a      	mov	r2, r5
 8005df0:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <_vfiprintf_r+0x22c>)
 8005df2:	a904      	add	r1, sp, #16
 8005df4:	4630      	mov	r0, r6
 8005df6:	f3af 8000 	nop.w
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	1c78      	adds	r0, r7, #1
 8005dfe:	d1d6      	bne.n	8005dae <_vfiprintf_r+0x19e>
 8005e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e02:	07d9      	lsls	r1, r3, #31
 8005e04:	d405      	bmi.n	8005e12 <_vfiprintf_r+0x202>
 8005e06:	89ab      	ldrh	r3, [r5, #12]
 8005e08:	059a      	lsls	r2, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <_vfiprintf_r+0x202>
 8005e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e0e:	f7ff fddc 	bl	80059ca <__retarget_lock_release_recursive>
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	065b      	lsls	r3, r3, #25
 8005e16:	f53f af1d 	bmi.w	8005c54 <_vfiprintf_r+0x44>
 8005e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e1c:	e71c      	b.n	8005c58 <_vfiprintf_r+0x48>
 8005e1e:	ab03      	add	r3, sp, #12
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	462a      	mov	r2, r5
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <_vfiprintf_r+0x22c>)
 8005e26:	a904      	add	r1, sp, #16
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 f879 	bl	8005f20 <_printf_i>
 8005e2e:	e7e4      	b.n	8005dfa <_vfiprintf_r+0x1ea>
 8005e30:	080065dc 	.word	0x080065dc
 8005e34:	080065e6 	.word	0x080065e6
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	08005beb 	.word	0x08005beb
 8005e40:	080065e2 	.word	0x080065e2

08005e44 <_printf_common>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	4616      	mov	r6, r2
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	688a      	ldr	r2, [r1, #8]
 8005e4e:	690b      	ldr	r3, [r1, #16]
 8005e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	bfb8      	it	lt
 8005e58:	4613      	movlt	r3, r2
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e60:	4607      	mov	r7, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	b10a      	cbz	r2, 8005e6a <_printf_common+0x26>
 8005e66:	3301      	adds	r3, #1
 8005e68:	6033      	str	r3, [r6, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0699      	lsls	r1, r3, #26
 8005e6e:	bf42      	ittt	mi
 8005e70:	6833      	ldrmi	r3, [r6, #0]
 8005e72:	3302      	addmi	r3, #2
 8005e74:	6033      	strmi	r3, [r6, #0]
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	f015 0506 	ands.w	r5, r5, #6
 8005e7c:	d106      	bne.n	8005e8c <_printf_common+0x48>
 8005e7e:	f104 0a19 	add.w	sl, r4, #25
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dc26      	bgt.n	8005eda <_printf_common+0x96>
 8005e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e90:	1e13      	subs	r3, r2, #0
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	0692      	lsls	r2, r2, #26
 8005e9a:	d42b      	bmi.n	8005ef4 <_printf_common+0xb0>
 8005e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d01e      	beq.n	8005ee8 <_printf_common+0xa4>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	6922      	ldr	r2, [r4, #16]
 8005eae:	f003 0306 	and.w	r3, r3, #6
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	bf02      	ittt	eq
 8005eb6:	68e5      	ldreq	r5, [r4, #12]
 8005eb8:	6833      	ldreq	r3, [r6, #0]
 8005eba:	1aed      	subeq	r5, r5, r3
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	bf0c      	ite	eq
 8005ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec4:	2500      	movne	r5, #0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bfc4      	itt	gt
 8005eca:	1a9b      	subgt	r3, r3, r2
 8005ecc:	18ed      	addgt	r5, r5, r3
 8005ece:	2600      	movs	r6, #0
 8005ed0:	341a      	adds	r4, #26
 8005ed2:	42b5      	cmp	r5, r6
 8005ed4:	d11a      	bne.n	8005f0c <_printf_common+0xc8>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e008      	b.n	8005eec <_printf_common+0xa8>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4652      	mov	r2, sl
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	47c0      	blx	r8
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d103      	bne.n	8005ef0 <_printf_common+0xac>
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	e7c6      	b.n	8005e82 <_printf_common+0x3e>
 8005ef4:	18e1      	adds	r1, r4, r3
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	2030      	movs	r0, #48	; 0x30
 8005efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005efe:	4422      	add	r2, r4
 8005f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f08:	3302      	adds	r3, #2
 8005f0a:	e7c7      	b.n	8005e9c <_printf_common+0x58>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4649      	mov	r1, r9
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d0e6      	beq.n	8005ee8 <_printf_common+0xa4>
 8005f1a:	3601      	adds	r6, #1
 8005f1c:	e7d9      	b.n	8005ed2 <_printf_common+0x8e>
	...

08005f20 <_printf_i>:
 8005f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	7e0f      	ldrb	r7, [r1, #24]
 8005f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f28:	2f78      	cmp	r7, #120	; 0x78
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	469a      	mov	sl, r3
 8005f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f36:	d807      	bhi.n	8005f48 <_printf_i+0x28>
 8005f38:	2f62      	cmp	r7, #98	; 0x62
 8005f3a:	d80a      	bhi.n	8005f52 <_printf_i+0x32>
 8005f3c:	2f00      	cmp	r7, #0
 8005f3e:	f000 80d4 	beq.w	80060ea <_printf_i+0x1ca>
 8005f42:	2f58      	cmp	r7, #88	; 0x58
 8005f44:	f000 80c0 	beq.w	80060c8 <_printf_i+0x1a8>
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f50:	e03a      	b.n	8005fc8 <_printf_i+0xa8>
 8005f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f56:	2b15      	cmp	r3, #21
 8005f58:	d8f6      	bhi.n	8005f48 <_printf_i+0x28>
 8005f5a:	a101      	add	r1, pc, #4	; (adr r1, 8005f60 <_printf_i+0x40>)
 8005f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	08005f49 	.word	0x08005f49
 8005f6c:	08005f49 	.word	0x08005f49
 8005f70:	08005f49 	.word	0x08005f49
 8005f74:	08005f49 	.word	0x08005f49
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005f49 	.word	0x08005f49
 8005f80:	08005f49 	.word	0x08005f49
 8005f84:	08005f49 	.word	0x08005f49
 8005f88:	08005f49 	.word	0x08005f49
 8005f8c:	080060d1 	.word	0x080060d1
 8005f90:	08005ff9 	.word	0x08005ff9
 8005f94:	0800608b 	.word	0x0800608b
 8005f98:	08005f49 	.word	0x08005f49
 8005f9c:	08005f49 	.word	0x08005f49
 8005fa0:	080060f3 	.word	0x080060f3
 8005fa4:	08005f49 	.word	0x08005f49
 8005fa8:	08005ff9 	.word	0x08005ff9
 8005fac:	08005f49 	.word	0x08005f49
 8005fb0:	08005f49 	.word	0x08005f49
 8005fb4:	08006093 	.word	0x08006093
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	602a      	str	r2, [r5, #0]
 8005fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e09f      	b.n	800610c <_printf_i+0x1ec>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	0607      	lsls	r7, r0, #24
 8005fd2:	f103 0104 	add.w	r1, r3, #4
 8005fd6:	6029      	str	r1, [r5, #0]
 8005fd8:	d501      	bpl.n	8005fde <_printf_i+0xbe>
 8005fda:	681e      	ldr	r6, [r3, #0]
 8005fdc:	e003      	b.n	8005fe6 <_printf_i+0xc6>
 8005fde:	0646      	lsls	r6, r0, #25
 8005fe0:	d5fb      	bpl.n	8005fda <_printf_i+0xba>
 8005fe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	da03      	bge.n	8005ff2 <_printf_i+0xd2>
 8005fea:	232d      	movs	r3, #45	; 0x2d
 8005fec:	4276      	negs	r6, r6
 8005fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff2:	485a      	ldr	r0, [pc, #360]	; (800615c <_printf_i+0x23c>)
 8005ff4:	230a      	movs	r3, #10
 8005ff6:	e012      	b.n	800601e <_printf_i+0xfe>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	1d19      	adds	r1, r3, #4
 8005ffe:	6029      	str	r1, [r5, #0]
 8006000:	0605      	lsls	r5, r0, #24
 8006002:	d501      	bpl.n	8006008 <_printf_i+0xe8>
 8006004:	681e      	ldr	r6, [r3, #0]
 8006006:	e002      	b.n	800600e <_printf_i+0xee>
 8006008:	0641      	lsls	r1, r0, #25
 800600a:	d5fb      	bpl.n	8006004 <_printf_i+0xe4>
 800600c:	881e      	ldrh	r6, [r3, #0]
 800600e:	4853      	ldr	r0, [pc, #332]	; (800615c <_printf_i+0x23c>)
 8006010:	2f6f      	cmp	r7, #111	; 0x6f
 8006012:	bf0c      	ite	eq
 8006014:	2308      	moveq	r3, #8
 8006016:	230a      	movne	r3, #10
 8006018:	2100      	movs	r1, #0
 800601a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800601e:	6865      	ldr	r5, [r4, #4]
 8006020:	60a5      	str	r5, [r4, #8]
 8006022:	2d00      	cmp	r5, #0
 8006024:	bfa2      	ittt	ge
 8006026:	6821      	ldrge	r1, [r4, #0]
 8006028:	f021 0104 	bicge.w	r1, r1, #4
 800602c:	6021      	strge	r1, [r4, #0]
 800602e:	b90e      	cbnz	r6, 8006034 <_printf_i+0x114>
 8006030:	2d00      	cmp	r5, #0
 8006032:	d04b      	beq.n	80060cc <_printf_i+0x1ac>
 8006034:	4615      	mov	r5, r2
 8006036:	fbb6 f1f3 	udiv	r1, r6, r3
 800603a:	fb03 6711 	mls	r7, r3, r1, r6
 800603e:	5dc7      	ldrb	r7, [r0, r7]
 8006040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006044:	4637      	mov	r7, r6
 8006046:	42bb      	cmp	r3, r7
 8006048:	460e      	mov	r6, r1
 800604a:	d9f4      	bls.n	8006036 <_printf_i+0x116>
 800604c:	2b08      	cmp	r3, #8
 800604e:	d10b      	bne.n	8006068 <_printf_i+0x148>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	07de      	lsls	r6, r3, #31
 8006054:	d508      	bpl.n	8006068 <_printf_i+0x148>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	6861      	ldr	r1, [r4, #4]
 800605a:	4299      	cmp	r1, r3
 800605c:	bfde      	ittt	le
 800605e:	2330      	movle	r3, #48	; 0x30
 8006060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006068:	1b52      	subs	r2, r2, r5
 800606a:	6122      	str	r2, [r4, #16]
 800606c:	f8cd a000 	str.w	sl, [sp]
 8006070:	464b      	mov	r3, r9
 8006072:	aa03      	add	r2, sp, #12
 8006074:	4621      	mov	r1, r4
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff fee4 	bl	8005e44 <_printf_common>
 800607c:	3001      	adds	r0, #1
 800607e:	d14a      	bne.n	8006116 <_printf_i+0x1f6>
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	b004      	add	sp, #16
 8006086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f043 0320 	orr.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	4833      	ldr	r0, [pc, #204]	; (8006160 <_printf_i+0x240>)
 8006094:	2778      	movs	r7, #120	; 0x78
 8006096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	6829      	ldr	r1, [r5, #0]
 800609e:	061f      	lsls	r7, r3, #24
 80060a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060a4:	d402      	bmi.n	80060ac <_printf_i+0x18c>
 80060a6:	065f      	lsls	r7, r3, #25
 80060a8:	bf48      	it	mi
 80060aa:	b2b6      	uxthmi	r6, r6
 80060ac:	07df      	lsls	r7, r3, #31
 80060ae:	bf48      	it	mi
 80060b0:	f043 0320 	orrmi.w	r3, r3, #32
 80060b4:	6029      	str	r1, [r5, #0]
 80060b6:	bf48      	it	mi
 80060b8:	6023      	strmi	r3, [r4, #0]
 80060ba:	b91e      	cbnz	r6, 80060c4 <_printf_i+0x1a4>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	f023 0320 	bic.w	r3, r3, #32
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	2310      	movs	r3, #16
 80060c6:	e7a7      	b.n	8006018 <_printf_i+0xf8>
 80060c8:	4824      	ldr	r0, [pc, #144]	; (800615c <_printf_i+0x23c>)
 80060ca:	e7e4      	b.n	8006096 <_printf_i+0x176>
 80060cc:	4615      	mov	r5, r2
 80060ce:	e7bd      	b.n	800604c <_printf_i+0x12c>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	6826      	ldr	r6, [r4, #0]
 80060d4:	6961      	ldr	r1, [r4, #20]
 80060d6:	1d18      	adds	r0, r3, #4
 80060d8:	6028      	str	r0, [r5, #0]
 80060da:	0635      	lsls	r5, r6, #24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	d501      	bpl.n	80060e4 <_printf_i+0x1c4>
 80060e0:	6019      	str	r1, [r3, #0]
 80060e2:	e002      	b.n	80060ea <_printf_i+0x1ca>
 80060e4:	0670      	lsls	r0, r6, #25
 80060e6:	d5fb      	bpl.n	80060e0 <_printf_i+0x1c0>
 80060e8:	8019      	strh	r1, [r3, #0]
 80060ea:	2300      	movs	r3, #0
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	4615      	mov	r5, r2
 80060f0:	e7bc      	b.n	800606c <_printf_i+0x14c>
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	602a      	str	r2, [r5, #0]
 80060f8:	681d      	ldr	r5, [r3, #0]
 80060fa:	6862      	ldr	r2, [r4, #4]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4628      	mov	r0, r5
 8006100:	f7fa f866 	bl	80001d0 <memchr>
 8006104:	b108      	cbz	r0, 800610a <_printf_i+0x1ea>
 8006106:	1b40      	subs	r0, r0, r5
 8006108:	6060      	str	r0, [r4, #4]
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	6123      	str	r3, [r4, #16]
 800610e:	2300      	movs	r3, #0
 8006110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006114:	e7aa      	b.n	800606c <_printf_i+0x14c>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	462a      	mov	r2, r5
 800611a:	4649      	mov	r1, r9
 800611c:	4640      	mov	r0, r8
 800611e:	47d0      	blx	sl
 8006120:	3001      	adds	r0, #1
 8006122:	d0ad      	beq.n	8006080 <_printf_i+0x160>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	079b      	lsls	r3, r3, #30
 8006128:	d413      	bmi.n	8006152 <_printf_i+0x232>
 800612a:	68e0      	ldr	r0, [r4, #12]
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	4298      	cmp	r0, r3
 8006130:	bfb8      	it	lt
 8006132:	4618      	movlt	r0, r3
 8006134:	e7a6      	b.n	8006084 <_printf_i+0x164>
 8006136:	2301      	movs	r3, #1
 8006138:	4632      	mov	r2, r6
 800613a:	4649      	mov	r1, r9
 800613c:	4640      	mov	r0, r8
 800613e:	47d0      	blx	sl
 8006140:	3001      	adds	r0, #1
 8006142:	d09d      	beq.n	8006080 <_printf_i+0x160>
 8006144:	3501      	adds	r5, #1
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	9903      	ldr	r1, [sp, #12]
 800614a:	1a5b      	subs	r3, r3, r1
 800614c:	42ab      	cmp	r3, r5
 800614e:	dcf2      	bgt.n	8006136 <_printf_i+0x216>
 8006150:	e7eb      	b.n	800612a <_printf_i+0x20a>
 8006152:	2500      	movs	r5, #0
 8006154:	f104 0619 	add.w	r6, r4, #25
 8006158:	e7f5      	b.n	8006146 <_printf_i+0x226>
 800615a:	bf00      	nop
 800615c:	080065ed 	.word	0x080065ed
 8006160:	080065fe 	.word	0x080065fe

08006164 <__sflush_r>:
 8006164:	898a      	ldrh	r2, [r1, #12]
 8006166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616a:	4605      	mov	r5, r0
 800616c:	0710      	lsls	r0, r2, #28
 800616e:	460c      	mov	r4, r1
 8006170:	d458      	bmi.n	8006224 <__sflush_r+0xc0>
 8006172:	684b      	ldr	r3, [r1, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	dc05      	bgt.n	8006184 <__sflush_r+0x20>
 8006178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	dc02      	bgt.n	8006184 <__sflush_r+0x20>
 800617e:	2000      	movs	r0, #0
 8006180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006186:	2e00      	cmp	r6, #0
 8006188:	d0f9      	beq.n	800617e <__sflush_r+0x1a>
 800618a:	2300      	movs	r3, #0
 800618c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006190:	682f      	ldr	r7, [r5, #0]
 8006192:	6a21      	ldr	r1, [r4, #32]
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	d032      	beq.n	80061fe <__sflush_r+0x9a>
 8006198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	075a      	lsls	r2, r3, #29
 800619e:	d505      	bpl.n	80061ac <__sflush_r+0x48>
 80061a0:	6863      	ldr	r3, [r4, #4]
 80061a2:	1ac0      	subs	r0, r0, r3
 80061a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061a6:	b10b      	cbz	r3, 80061ac <__sflush_r+0x48>
 80061a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061aa:	1ac0      	subs	r0, r0, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	4602      	mov	r2, r0
 80061b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061b2:	6a21      	ldr	r1, [r4, #32]
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b0      	blx	r6
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	d106      	bne.n	80061cc <__sflush_r+0x68>
 80061be:	6829      	ldr	r1, [r5, #0]
 80061c0:	291d      	cmp	r1, #29
 80061c2:	d82b      	bhi.n	800621c <__sflush_r+0xb8>
 80061c4:	4a29      	ldr	r2, [pc, #164]	; (800626c <__sflush_r+0x108>)
 80061c6:	410a      	asrs	r2, r1
 80061c8:	07d6      	lsls	r6, r2, #31
 80061ca:	d427      	bmi.n	800621c <__sflush_r+0xb8>
 80061cc:	2200      	movs	r2, #0
 80061ce:	6062      	str	r2, [r4, #4]
 80061d0:	04d9      	lsls	r1, r3, #19
 80061d2:	6922      	ldr	r2, [r4, #16]
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	d504      	bpl.n	80061e2 <__sflush_r+0x7e>
 80061d8:	1c42      	adds	r2, r0, #1
 80061da:	d101      	bne.n	80061e0 <__sflush_r+0x7c>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b903      	cbnz	r3, 80061e2 <__sflush_r+0x7e>
 80061e0:	6560      	str	r0, [r4, #84]	; 0x54
 80061e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061e4:	602f      	str	r7, [r5, #0]
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d0c9      	beq.n	800617e <__sflush_r+0x1a>
 80061ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ee:	4299      	cmp	r1, r3
 80061f0:	d002      	beq.n	80061f8 <__sflush_r+0x94>
 80061f2:	4628      	mov	r0, r5
 80061f4:	f7ff fbea 	bl	80059cc <_free_r>
 80061f8:	2000      	movs	r0, #0
 80061fa:	6360      	str	r0, [r4, #52]	; 0x34
 80061fc:	e7c0      	b.n	8006180 <__sflush_r+0x1c>
 80061fe:	2301      	movs	r3, #1
 8006200:	4628      	mov	r0, r5
 8006202:	47b0      	blx	r6
 8006204:	1c41      	adds	r1, r0, #1
 8006206:	d1c8      	bne.n	800619a <__sflush_r+0x36>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0c5      	beq.n	800619a <__sflush_r+0x36>
 800620e:	2b1d      	cmp	r3, #29
 8006210:	d001      	beq.n	8006216 <__sflush_r+0xb2>
 8006212:	2b16      	cmp	r3, #22
 8006214:	d101      	bne.n	800621a <__sflush_r+0xb6>
 8006216:	602f      	str	r7, [r5, #0]
 8006218:	e7b1      	b.n	800617e <__sflush_r+0x1a>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	e7ad      	b.n	8006180 <__sflush_r+0x1c>
 8006224:	690f      	ldr	r7, [r1, #16]
 8006226:	2f00      	cmp	r7, #0
 8006228:	d0a9      	beq.n	800617e <__sflush_r+0x1a>
 800622a:	0793      	lsls	r3, r2, #30
 800622c:	680e      	ldr	r6, [r1, #0]
 800622e:	bf08      	it	eq
 8006230:	694b      	ldreq	r3, [r1, #20]
 8006232:	600f      	str	r7, [r1, #0]
 8006234:	bf18      	it	ne
 8006236:	2300      	movne	r3, #0
 8006238:	eba6 0807 	sub.w	r8, r6, r7
 800623c:	608b      	str	r3, [r1, #8]
 800623e:	f1b8 0f00 	cmp.w	r8, #0
 8006242:	dd9c      	ble.n	800617e <__sflush_r+0x1a>
 8006244:	6a21      	ldr	r1, [r4, #32]
 8006246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006248:	4643      	mov	r3, r8
 800624a:	463a      	mov	r2, r7
 800624c:	4628      	mov	r0, r5
 800624e:	47b0      	blx	r6
 8006250:	2800      	cmp	r0, #0
 8006252:	dc06      	bgt.n	8006262 <__sflush_r+0xfe>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	e78e      	b.n	8006180 <__sflush_r+0x1c>
 8006262:	4407      	add	r7, r0
 8006264:	eba8 0800 	sub.w	r8, r8, r0
 8006268:	e7e9      	b.n	800623e <__sflush_r+0xda>
 800626a:	bf00      	nop
 800626c:	dfbffffe 	.word	0xdfbffffe

08006270 <_fflush_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	690b      	ldr	r3, [r1, #16]
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	b913      	cbnz	r3, 8006280 <_fflush_r+0x10>
 800627a:	2500      	movs	r5, #0
 800627c:	4628      	mov	r0, r5
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	b118      	cbz	r0, 800628a <_fflush_r+0x1a>
 8006282:	6a03      	ldr	r3, [r0, #32]
 8006284:	b90b      	cbnz	r3, 800628a <_fflush_r+0x1a>
 8006286:	f7ff fa9b 	bl	80057c0 <__sinit>
 800628a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f3      	beq.n	800627a <_fflush_r+0xa>
 8006292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006294:	07d0      	lsls	r0, r2, #31
 8006296:	d404      	bmi.n	80062a2 <_fflush_r+0x32>
 8006298:	0599      	lsls	r1, r3, #22
 800629a:	d402      	bmi.n	80062a2 <_fflush_r+0x32>
 800629c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800629e:	f7ff fb93 	bl	80059c8 <__retarget_lock_acquire_recursive>
 80062a2:	4628      	mov	r0, r5
 80062a4:	4621      	mov	r1, r4
 80062a6:	f7ff ff5d 	bl	8006164 <__sflush_r>
 80062aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ac:	07da      	lsls	r2, r3, #31
 80062ae:	4605      	mov	r5, r0
 80062b0:	d4e4      	bmi.n	800627c <_fflush_r+0xc>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	059b      	lsls	r3, r3, #22
 80062b6:	d4e1      	bmi.n	800627c <_fflush_r+0xc>
 80062b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ba:	f7ff fb86 	bl	80059ca <__retarget_lock_release_recursive>
 80062be:	e7dd      	b.n	800627c <_fflush_r+0xc>

080062c0 <__swbuf_r>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	460e      	mov	r6, r1
 80062c4:	4614      	mov	r4, r2
 80062c6:	4605      	mov	r5, r0
 80062c8:	b118      	cbz	r0, 80062d2 <__swbuf_r+0x12>
 80062ca:	6a03      	ldr	r3, [r0, #32]
 80062cc:	b90b      	cbnz	r3, 80062d2 <__swbuf_r+0x12>
 80062ce:	f7ff fa77 	bl	80057c0 <__sinit>
 80062d2:	69a3      	ldr	r3, [r4, #24]
 80062d4:	60a3      	str	r3, [r4, #8]
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	071a      	lsls	r2, r3, #28
 80062da:	d525      	bpl.n	8006328 <__swbuf_r+0x68>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	b31b      	cbz	r3, 8006328 <__swbuf_r+0x68>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	6922      	ldr	r2, [r4, #16]
 80062e4:	1a98      	subs	r0, r3, r2
 80062e6:	6963      	ldr	r3, [r4, #20]
 80062e8:	b2f6      	uxtb	r6, r6
 80062ea:	4283      	cmp	r3, r0
 80062ec:	4637      	mov	r7, r6
 80062ee:	dc04      	bgt.n	80062fa <__swbuf_r+0x3a>
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7ff ffbc 	bl	8006270 <_fflush_r>
 80062f8:	b9e0      	cbnz	r0, 8006334 <__swbuf_r+0x74>
 80062fa:	68a3      	ldr	r3, [r4, #8]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60a3      	str	r3, [r4, #8]
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	6022      	str	r2, [r4, #0]
 8006306:	701e      	strb	r6, [r3, #0]
 8006308:	6962      	ldr	r2, [r4, #20]
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	429a      	cmp	r2, r3
 800630e:	d004      	beq.n	800631a <__swbuf_r+0x5a>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	07db      	lsls	r3, r3, #31
 8006314:	d506      	bpl.n	8006324 <__swbuf_r+0x64>
 8006316:	2e0a      	cmp	r6, #10
 8006318:	d104      	bne.n	8006324 <__swbuf_r+0x64>
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f7ff ffa7 	bl	8006270 <_fflush_r>
 8006322:	b938      	cbnz	r0, 8006334 <__swbuf_r+0x74>
 8006324:	4638      	mov	r0, r7
 8006326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f806 	bl	800633c <__swsetup_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	d0d5      	beq.n	80062e0 <__swbuf_r+0x20>
 8006334:	f04f 37ff 	mov.w	r7, #4294967295
 8006338:	e7f4      	b.n	8006324 <__swbuf_r+0x64>
	...

0800633c <__swsetup_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <__swsetup_r+0xac>)
 8006340:	4605      	mov	r5, r0
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	460c      	mov	r4, r1
 8006346:	b118      	cbz	r0, 8006350 <__swsetup_r+0x14>
 8006348:	6a03      	ldr	r3, [r0, #32]
 800634a:	b90b      	cbnz	r3, 8006350 <__swsetup_r+0x14>
 800634c:	f7ff fa38 	bl	80057c0 <__sinit>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006356:	0718      	lsls	r0, r3, #28
 8006358:	d422      	bmi.n	80063a0 <__swsetup_r+0x64>
 800635a:	06d9      	lsls	r1, r3, #27
 800635c:	d407      	bmi.n	800636e <__swsetup_r+0x32>
 800635e:	2309      	movs	r3, #9
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	e034      	b.n	80063d8 <__swsetup_r+0x9c>
 800636e:	0758      	lsls	r0, r3, #29
 8006370:	d512      	bpl.n	8006398 <__swsetup_r+0x5c>
 8006372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006374:	b141      	cbz	r1, 8006388 <__swsetup_r+0x4c>
 8006376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637a:	4299      	cmp	r1, r3
 800637c:	d002      	beq.n	8006384 <__swsetup_r+0x48>
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fb24 	bl	80059cc <_free_r>
 8006384:	2300      	movs	r3, #0
 8006386:	6363      	str	r3, [r4, #52]	; 0x34
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	2300      	movs	r3, #0
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	f043 0308 	orr.w	r3, r3, #8
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	b94b      	cbnz	r3, 80063b8 <__swsetup_r+0x7c>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ae:	d003      	beq.n	80063b8 <__swsetup_r+0x7c>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f850 	bl	8006458 <__smakebuf_r>
 80063b8:	89a0      	ldrh	r0, [r4, #12]
 80063ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063be:	f010 0301 	ands.w	r3, r0, #1
 80063c2:	d00a      	beq.n	80063da <__swsetup_r+0x9e>
 80063c4:	2300      	movs	r3, #0
 80063c6:	60a3      	str	r3, [r4, #8]
 80063c8:	6963      	ldr	r3, [r4, #20]
 80063ca:	425b      	negs	r3, r3
 80063cc:	61a3      	str	r3, [r4, #24]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	b943      	cbnz	r3, 80063e4 <__swsetup_r+0xa8>
 80063d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063d6:	d1c4      	bne.n	8006362 <__swsetup_r+0x26>
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	0781      	lsls	r1, r0, #30
 80063dc:	bf58      	it	pl
 80063de:	6963      	ldrpl	r3, [r4, #20]
 80063e0:	60a3      	str	r3, [r4, #8]
 80063e2:	e7f4      	b.n	80063ce <__swsetup_r+0x92>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e7f7      	b.n	80063d8 <__swsetup_r+0x9c>
 80063e8:	20000064 	.word	0x20000064

080063ec <_sbrk_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d06      	ldr	r5, [pc, #24]	; (8006408 <_sbrk_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f7fa ff00 	bl	80011fc <_sbrk>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_sbrk_r+0x1a>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_sbrk_r+0x1a>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20000944 	.word	0x20000944

0800640c <__swhatbuf_r>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	2900      	cmp	r1, #0
 8006416:	b096      	sub	sp, #88	; 0x58
 8006418:	4615      	mov	r5, r2
 800641a:	461e      	mov	r6, r3
 800641c:	da0d      	bge.n	800643a <__swhatbuf_r+0x2e>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006424:	f04f 0100 	mov.w	r1, #0
 8006428:	bf0c      	ite	eq
 800642a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800642e:	2340      	movne	r3, #64	; 0x40
 8006430:	2000      	movs	r0, #0
 8006432:	6031      	str	r1, [r6, #0]
 8006434:	602b      	str	r3, [r5, #0]
 8006436:	b016      	add	sp, #88	; 0x58
 8006438:	bd70      	pop	{r4, r5, r6, pc}
 800643a:	466a      	mov	r2, sp
 800643c:	f000 f848 	bl	80064d0 <_fstat_r>
 8006440:	2800      	cmp	r0, #0
 8006442:	dbec      	blt.n	800641e <__swhatbuf_r+0x12>
 8006444:	9901      	ldr	r1, [sp, #4]
 8006446:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800644a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800644e:	4259      	negs	r1, r3
 8006450:	4159      	adcs	r1, r3
 8006452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006456:	e7eb      	b.n	8006430 <__swhatbuf_r+0x24>

08006458 <__smakebuf_r>:
 8006458:	898b      	ldrh	r3, [r1, #12]
 800645a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800645c:	079d      	lsls	r5, r3, #30
 800645e:	4606      	mov	r6, r0
 8006460:	460c      	mov	r4, r1
 8006462:	d507      	bpl.n	8006474 <__smakebuf_r+0x1c>
 8006464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	2301      	movs	r3, #1
 800646e:	6163      	str	r3, [r4, #20]
 8006470:	b002      	add	sp, #8
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	ab01      	add	r3, sp, #4
 8006476:	466a      	mov	r2, sp
 8006478:	f7ff ffc8 	bl	800640c <__swhatbuf_r>
 800647c:	9900      	ldr	r1, [sp, #0]
 800647e:	4605      	mov	r5, r0
 8006480:	4630      	mov	r0, r6
 8006482:	f7ff fb0f 	bl	8005aa4 <_malloc_r>
 8006486:	b948      	cbnz	r0, 800649c <__smakebuf_r+0x44>
 8006488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800648c:	059a      	lsls	r2, r3, #22
 800648e:	d4ef      	bmi.n	8006470 <__smakebuf_r+0x18>
 8006490:	f023 0303 	bic.w	r3, r3, #3
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	81a3      	strh	r3, [r4, #12]
 800649a:	e7e3      	b.n	8006464 <__smakebuf_r+0xc>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	6020      	str	r0, [r4, #0]
 80064a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	6163      	str	r3, [r4, #20]
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	6120      	str	r0, [r4, #16]
 80064ae:	b15b      	cbz	r3, 80064c8 <__smakebuf_r+0x70>
 80064b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 f81d 	bl	80064f4 <_isatty_r>
 80064ba:	b128      	cbz	r0, 80064c8 <__smakebuf_r+0x70>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	431d      	orrs	r5, r3
 80064cc:	81a5      	strh	r5, [r4, #12]
 80064ce:	e7cf      	b.n	8006470 <__smakebuf_r+0x18>

080064d0 <_fstat_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d07      	ldr	r5, [pc, #28]	; (80064f0 <_fstat_r+0x20>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	f7fa fe64 	bl	80011aa <_fstat>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d102      	bne.n	80064ec <_fstat_r+0x1c>
 80064e6:	682b      	ldr	r3, [r5, #0]
 80064e8:	b103      	cbz	r3, 80064ec <_fstat_r+0x1c>
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	bd38      	pop	{r3, r4, r5, pc}
 80064ee:	bf00      	nop
 80064f0:	20000944 	.word	0x20000944

080064f4 <_isatty_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4d06      	ldr	r5, [pc, #24]	; (8006510 <_isatty_r+0x1c>)
 80064f8:	2300      	movs	r3, #0
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	f7fa fe63 	bl	80011ca <_isatty>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_isatty_r+0x1a>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_isatty_r+0x1a>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	20000944 	.word	0x20000944

08006514 <_init>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr

08006520 <_fini>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr
