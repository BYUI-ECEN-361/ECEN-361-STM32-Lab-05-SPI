
ECEN-361-STM32-Lab-05-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a0  080065a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a8  080065a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000068  08006618  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08006618  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164fd  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3b  00000000  00000000  000365d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  00039318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109e  00000000  00000000  0003a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cf0  00000000  00000000  0003b8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019df8  00000000  00000000  000645d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f98e6  00000000  00000000  0007e3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006154  00000000  00000000  00177cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064a4 	.word	0x080064a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080064a4 	.word	0x080064a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 faed 	bl	8001b7c <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fadc 	bl	8001b7c <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fad1 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 facb 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fac5 	bl	8001b7c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 fab2 	bl	8001b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 faad 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 fa88 	bl	8001b7c <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 fa62 	bl	8001b7c <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	20000088 	.word	0x20000088
 80006c8:	08006520 	.word	0x08006520

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000084 	.word	0x20000084

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t bytes_in =0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 feed 	bl	8001518 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f85d 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f9eb 	bl	8000b1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f989 	bl	8000a5c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800074a:	f000 f961 	bl	8000a10 <MX_TIM17_Init>
  MX_SPI2_Init();
 800074e:	f000 f925 	bl	800099c <MX_SPI2_Init>
  MX_SPI1_Init();
 8000752:	f000 f8e5 	bl	8000920 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000756:	f000 f8a3 	bl	80008a0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800075a:	f000 f9af 	bl	8000abc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <main+0xb0>)
 8000760:	f003 feba 	bl	80044d8 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 8000764:	f7ff ff62 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 8000768:	f7ff ff4e 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f001 fa01 	bl	8001b7c <HAL_GPIO_WritePin>
  printf("\033\143");
 800077a:	481a      	ldr	r0, [pc, #104]	; (80007e4 <main+0xb4>)
 800077c:	f005 f81e 	bl	80057bc <iprintf>
  printf("Welcome to ECEN-361 Lab-05 SPI/UART & Logic Analyzer \n\r");
 8000780:	4819      	ldr	r0, [pc, #100]	; (80007e8 <main+0xb8>)
 8000782:	f005 f81b 	bl	80057bc <iprintf>
  while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bytes_in = Read_and_Transmit_Task();
 8000786:	f000 fa9b 	bl	8000cc0 <Read_and_Transmit_Task>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]

    /**************** STEP 1:  Send it SPI-1 *********************/
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f001 f9f0 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RX_Buffer, bytes_in , HAL_MAX_DELAY);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	4911      	ldr	r1, [pc, #68]	; (80007ec <main+0xbc>)
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <main+0xc0>)
 80007a8:	f003 fa51 	bl	8003c4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f001 f9e1 	bl	8001b7c <HAL_GPIO_WritePin>

    /**************** STEP 2:  Send it I2C-2 *********************/
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)SLAVE_ADDRESS, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f04f 32ff 	mov.w	r2, #4294967295
 80007c2:	9200      	str	r2, [sp, #0]
 80007c4:	4a09      	ldr	r2, [pc, #36]	; (80007ec <main+0xbc>)
 80007c6:	2111      	movs	r1, #17
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <main+0xc4>)
 80007ca:	f001 fa8b 	bl	8001ce4 <HAL_I2C_Master_Transmit>

    /**************** STEP 3:  Send it USART-3 *********************/
	HAL_UART_Transmit(&huart3, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	4905      	ldr	r1, [pc, #20]	; (80007ec <main+0xbc>)
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <main+0xc8>)
 80007da:	f004 f91d 	bl	8004a18 <HAL_UART_Transmit>
    bytes_in = Read_and_Transmit_Task();
 80007de:	e7d2      	b.n	8000786 <main+0x56>
 80007e0:	200001a8 	.word	0x200001a8
 80007e4:	080064bc 	.word	0x080064bc
 80007e8:	080064c0 	.word	0x080064c0
 80007ec:	20000304 	.word	0x20000304
 80007f0:	200000e0 	.word	0x200000e0
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	2000027c 	.word	0x2000027c

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b096      	sub	sp, #88	; 0x58
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2244      	movs	r2, #68	; 0x44
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f005 f82b 	bl	8005866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800081e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000822:	f001 fe2d 	bl	8002480 <HAL_PWREx_ControlVoltageScaling>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800082c:	f000 fae6 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000838:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	2310      	movs	r3, #16
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800084a:	230a      	movs	r3, #10
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084e:	2307      	movs	r3, #7
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fe64 	bl	800252c <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800086a:	f000 fac7 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2104      	movs	r1, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fa2c 	bl	8002ce4 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000892:	f000 fab3 	bl	8000dfc <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3758      	adds	r7, #88	; 0x58
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_I2C2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_I2C2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <MX_I2C2_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_I2C2_Init+0x74>)
 80008dc:	f001 f966 	bl	8001bac <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 fa89 	bl	8000dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ee:	f001 fd21 	bl	8002334 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 fa80 	bl	8000dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C2_Init+0x74>)
 8000900:	f001 fd63 	bl	80023ca <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fa77 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000008c 	.word	0x2000008c
 8000918:	40005800 	.word	0x40005800
 800091c:	10909cec 	.word	0x10909cec

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /*   625KHz == SPI_BAUDRATEPRESCALER_128 ==> 80Mhz / 128
   *   40Mhz == SPI_BAUDRATEPRESCALER_2    ==> 80Mhz / 2
   */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_SPI1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_SPI1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_SPI1_Init+0x74>)
 800092c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_SPI1_Init+0x74>)
 800093a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800093e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SPI1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SPI1_Init+0x74>)
 800094e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SPI1_Init+0x74>)
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI1_Init+0x74>)
 800096e:	2207      	movs	r2, #7
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI1_Init+0x74>)
 800097a:	2208      	movs	r2, #8
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_SPI1_Init+0x74>)
 8000980:	f003 f8c2 	bl	8003b08 <HAL_SPI_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 fa37 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000e0 	.word	0x200000e0
 8000998:	40013000 	.word	0x40013000

0800099c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009a2:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <MX_SPI2_Init+0x70>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009f4:	f003 f888 	bl	8003b08 <HAL_SPI_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009fe:	f000 f9fd 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000144 	.word	0x20000144
 8000a0c:	40003800 	.word	0x40003800

08000a10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <MX_TIM17_Init+0x48>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a1c:	f240 321f 	movw	r2, #799	; 0x31f
 8000a20:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a2a:	2264      	movs	r2, #100	; 0x64
 8000a2c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_TIM17_Init+0x44>)
 8000a42:	f003 fcf1 	bl	8004428 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000a4c:	f000 f9d6 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001a8 	.word	0x200001a8
 8000a58:	40014800 	.word	0x40014800

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_USART2_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000aa0:	f003 ff6c 	bl	800497c <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 f9a7 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001f4 	.word	0x200001f4
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <MX_USART3_UART_Init+0x5c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USART3_UART_Init+0x58>)
 8000b00:	f003 ff3c 	bl	800497c <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 f977 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000027c 	.word	0x2000027c
 8000b18:	40004800 	.word	0x40004800

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b60      	ldr	r3, [pc, #384]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a5f      	ldr	r2, [pc, #380]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b5a      	ldr	r3, [pc, #360]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a59      	ldr	r2, [pc, #356]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b57      	ldr	r3, [pc, #348]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b54      	ldr	r3, [pc, #336]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a53      	ldr	r2, [pc, #332]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b4b      	ldr	r3, [pc, #300]	; (8000cb4 <MX_GPIO_Init+0x198>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f000 ffee 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <MX_GPIO_Init+0x19c>)
 8000ba6:	f000 ffe9 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <MX_GPIO_Init+0x19c>)
 8000bb0:	f000 ffe4 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	483c      	ldr	r0, [pc, #240]	; (8000cbc <MX_GPIO_Init+0x1a0>)
 8000bcc:	f000 fe2c 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4836      	ldr	r0, [pc, #216]	; (8000cbc <MX_GPIO_Init+0x1a0>)
 8000be4:	f000 fe20 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000be8:	2301      	movs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bec:	230b      	movs	r3, #11
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fe13 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000c02:	2312      	movs	r3, #18
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f000 fe06 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000c1c:	2340      	movs	r3, #64	; 0x40
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c20:	2311      	movs	r3, #17
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f000 fdf7 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <MX_GPIO_Init+0x19c>)
 8000c4e:	f000 fdeb 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000c52:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fddb 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000c72:	2320      	movs	r3, #32
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <MX_GPIO_Init+0x19c>)
 8000c8a:	f000 fdcd 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000c8e:	2340      	movs	r3, #64	; 0x40
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c92:	2311      	movs	r3, #17
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_GPIO_Init+0x19c>)
 8000ca6:	f000 fdbf 	bl	8001828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <Read_and_Transmit_Task>:
		}
	}


uint8_t Read_and_Transmit_Task()
	{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
	/* Return the number of bytes */
	uint8_t receive_byte;
	// uint8_t receive_buffer[BUFFER_SIZE] = {0};
	// uint8_t *receive_buffer_ptr = receive_buffer;
	uint8_t bytes_in =0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <Read_and_Transmit_Task+0xd8>)
 8000cce:	f107 0410 	add.w	r4, r7, #16
 8000cd2:	461d      	mov	r5, r3
 8000cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cdc:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <Read_and_Transmit_Task+0xdc>)
 8000ce2:	463c      	mov	r4, r7
 8000ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce6:	c407      	stmia	r4!, {r0, r1, r2}
 8000ce8:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t *sndmsg_ptr = sndmsg;
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		bytes_in = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		receive_byte = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2217      	movs	r2, #23
 8000d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <Read_and_Transmit_Task+0xe0>)
 8000d0a:	f003 fe85 	bl	8004a18 <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000d0e:	e020      	b.n	8000d52 <Read_and_Transmit_Task+0x92>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fc41 	bl	8001598 <HAL_Delay>
 8000d16:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4820      	ldr	r0, [pc, #128]	; (8000da0 <Read_and_Transmit_Task+0xe0>)
 8000d20:	f003 ff04 	bl	8004b2c <HAL_UART_Receive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f2      	bne.n	8000d10 <Read_and_Transmit_Task+0x50>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			RX_Buffer[bytes_in] = receive_byte;
 8000d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d2e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <Read_and_Transmit_Task+0xe4>)
 8000d34:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &RX_Buffer[bytes_in++] , 1, HAL_MAX_DELAY);  //echo each one as it's typed
 8000d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <Read_and_Transmit_Task+0xe4>)
 8000d44:	18d1      	adds	r1, r2, r3
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4814      	ldr	r0, [pc, #80]	; (8000da0 <Read_and_Transmit_Task+0xe0>)
 8000d4e:	f003 fe63 	bl	8004a18 <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d56:	2b0d      	cmp	r3, #13
 8000d58:	d1dd      	bne.n	8000d16 <Read_and_Transmit_Task+0x56>
		}

		RX_Buffer[bytes_in++] = '\n'; // Add a line_feed
 8000d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <Read_and_Transmit_Task+0xe4>)
 8000d68:	210a      	movs	r1, #10
 8000d6a:	5499      	strb	r1, [r3, r2]
		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	220d      	movs	r2, #13
 8000d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <Read_and_Transmit_Task+0xe0>)
 8000d76:	f003 fe4f 	bl	8004a18 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 8000d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <Read_and_Transmit_Task+0xe4>)
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <Read_and_Transmit_Task+0xe0>)
 8000d88:	f003 fe46 	bl	8004a18 <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)
		return bytes_in;
 8000d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bdb0      	pop	{r4, r5, r7, pc}
 8000d98:	080064f8 	.word	0x080064f8
 8000d9c:	08006510 	.word	0x08006510
 8000da0:	200001f4 	.word	0x200001f4
 8000da4:	20000304 	.word	0x20000304

08000da8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000db0:	1d39      	adds	r1, r7, #4
 8000db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db6:	2201      	movs	r2, #1
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <__io_putchar+0x20>)
 8000dba:	f003 fe2d 	bl	8004a18 <HAL_UART_Transmit>

  return ch;
 8000dbe:	687b      	ldr	r3, [r7, #4]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001f4 	.word	0x200001f4

08000dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d101      	bne.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ddc:	f7ff fc76 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d101      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000dea:	f000 fbb5 	bl	8001558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001a8 	.word	0x200001a8

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ac      	sub	sp, #176	; 0xb0
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2288      	movs	r2, #136	; 0x88
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fcf8 	bl	8005866 <memset>
  if(hi2c->Instance==I2C2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d13b      	bne.n	8000ef8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 f97f 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e98:	f7ff ffb0 	bl	8000dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebc:	2312      	movs	r3, #18
 8000ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000edc:	f000 fca4 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eea:	6593      	str	r3, [r2, #88]	; 0x58
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	37b0      	adds	r7, #176	; 0xb0
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005800 	.word	0x40005800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400

08000f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a41      	ldr	r2, [pc, #260]	; (8001030 <HAL_SPI_MspInit+0x124>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d129      	bne.n	8000f82 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2e:	4b41      	ldr	r3, [pc, #260]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a40      	ldr	r2, [pc, #256]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a3a      	ldr	r2, [pc, #232]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b38      	ldr	r3, [pc, #224]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f000 fc54 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f80:	e051      	b.n	8001026 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a2c      	ldr	r2, [pc, #176]	; (8001038 <HAL_SPI_MspInit+0x12c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d14c      	bne.n	8001026 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a28      	ldr	r2, [pc, #160]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_SPI_MspInit+0x128>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4813      	ldr	r0, [pc, #76]	; (800103c <HAL_SPI_MspInit+0x130>)
 8000ff0:	f000 fc1a 	bl	8001828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001006:	2305      	movs	r3, #5
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_SPI_MspInit+0x134>)
 8001012:	f000 fc09 	bl	8001828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2024      	movs	r0, #36	; 0x24
 800101c:	f000 fb98 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001020:	2024      	movs	r0, #36	; 0x24
 8001022:	f000 fbb1 	bl	8001788 <HAL_NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40013000 	.word	0x40013000
 8001034:	40021000 	.word	0x40021000
 8001038:	40003800 	.word	0x40003800
 800103c:	48000800 	.word	0x48000800
 8001040:	48000400 	.word	0x48000400

08001044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x44>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d113      	bne.n	800107e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	201a      	movs	r0, #26
 8001074:	f000 fb6c 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001078:	201a      	movs	r0, #26
 800107a:	f000 fb85 	bl	8001788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40014800 	.word	0x40014800
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ae      	sub	sp, #184	; 0xb8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2288      	movs	r2, #136	; 0x88
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fbd8 	bl	8005866 <memset>
  if(huart->Instance==USART2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <HAL_UART_MspInit+0x134>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d13c      	bne.n	800113a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 f85f 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f7ff fe90 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010dc:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <HAL_UART_MspInit+0x138>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_UART_MspInit+0x138>)
 80010e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e6:	6593      	str	r3, [r2, #88]	; 0x58
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HAL_UART_MspInit+0x138>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_UART_MspInit+0x138>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <HAL_UART_MspInit+0x138>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_UART_MspInit+0x138>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110c:	230c      	movs	r3, #12
 800110e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001124:	2307      	movs	r3, #7
 8001126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fb78 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001138:	e03f      	b.n	80011ba <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <HAL_UART_MspInit+0x13c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13a      	bne.n	80011ba <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001144:	2304      	movs	r3, #4
 8001146:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f81d 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800115c:	f7ff fe4e 	bl	8000dfc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_UART_MspInit+0x138>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0x138>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	6593      	str	r3, [r2, #88]	; 0x58
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_UART_MspInit+0x138>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_UART_MspInit+0x138>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0x138>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_UART_MspInit+0x138>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001190:	2330      	movs	r3, #48	; 0x30
 8001192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a8:	2307      	movs	r3, #7
 80011aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <HAL_UART_MspInit+0x140>)
 80011b6:	f000 fb37 	bl	8001828 <HAL_GPIO_Init>
}
 80011ba:	bf00      	nop
 80011bc:	37b8      	adds	r7, #184	; 0xb8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40004800 	.word	0x40004800
 80011d0:	48000800 	.word	0x48000800

080011d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_InitTick+0xe0>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_InitTick+0xe0>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6593      	str	r3, [r2, #88]	; 0x58
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <HAL_InitTick+0xe0>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011fa:	f107 0210 	add.w	r2, r7, #16
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f001 ff31 	bl	800306c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001214:	f001 fefe 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8001218:	6378      	str	r0, [r7, #52]	; 0x34
 800121a:	e004      	b.n	8001226 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800121c:	f001 fefa 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8001220:	4603      	mov	r3, r0
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001228:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <HAL_InitTick+0xe4>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3b01      	subs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_InitTick+0xe8>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_InitTick+0xe8>)
 800123e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001242:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_InitTick+0xe8>)
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_InitTick+0xe8>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_InitTick+0xe8>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_InitTick+0xe8>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800125c:	4817      	ldr	r0, [pc, #92]	; (80012bc <HAL_InitTick+0xe8>)
 800125e:	f003 f8e3 	bl	8004428 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001268:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800126c:	2b00      	cmp	r3, #0
 800126e:	d11b      	bne.n	80012a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <HAL_InitTick+0xe8>)
 8001272:	f003 f931 	bl	80044d8 <HAL_TIM_Base_Start_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800127c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001280:	2b00      	cmp	r3, #0
 8001282:	d111      	bne.n	80012a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001284:	201c      	movs	r0, #28
 8001286:	f000 fa7f 	bl	8001788 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d808      	bhi.n	80012a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	201c      	movs	r0, #28
 8001296:	f000 fa5b 	bl	8001750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_InitTick+0xec>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e002      	b.n	80012a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3738      	adds	r7, #56	; 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	20000338 	.word	0x20000338
 80012c0:	20000004 	.word	0x20000004

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001322:	f003 f949 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001a8 	.word	0x200001a8

08001330 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM2_IRQHandler+0x10>)
 8001336:	f003 f93f 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000338 	.word	0x20000338

08001344 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <SPI2_IRQHandler+0x10>)
 800134a:	f002 fdf5 	bl	8003f38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000144 	.word	0x20000144

08001358 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
  }

  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e009      	b.n	80013b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fcfb 	bl	8000da8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf1      	blt.n	80013a4 <_write+0x12>
  }
  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:

int _close(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	605a      	str	r2, [r3, #4]
  return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f004 fa4e 	bl	8005904 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20018000 	.word	0x20018000
 8001494:	00000400 	.word	0x00000400
 8001498:	20000384 	.word	0x20000384
 800149c:	200004d8 	.word	0x200004d8

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c8:	f7ff ffea 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopForever+0xe>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopForever+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f2:	f004 fa0d 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f6:	f7ff f91b 	bl	8000730 <main>

080014fa <LoopForever>:

LoopForever:
    b LoopForever
 80014fa:	e7fe      	b.n	80014fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001508:	080065b0 	.word	0x080065b0
  ldr r2, =_sbss
 800150c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001510:	200004d8 	.word	0x200004d8

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_Init+0x3c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_Init+0x3c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f903 	bl	800173a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001534:	200f      	movs	r0, #15
 8001536:	f7ff fe4d 	bl	80011d4 <HAL_InitTick>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	e001      	b.n	800154a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001546:	f7ff fc5f 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154a:	79fb      	ldrb	r3, [r7, #7]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000388 	.word	0x20000388

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000388 	.word	0x20000388

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff4c 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001762:	f7ff ff61 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001766:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	6978      	ldr	r0, [r7, #20]
 800176e:	f7ff ffb1 	bl	80016d4 <NVIC_EncodePriority>
 8001772:	4602      	mov	r2, r0
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff80 	bl	8001680 <__NVIC_SetPriority>
}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff54 	bl	8001644 <__NVIC_EnableIRQ>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d005      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2204      	movs	r2, #4
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e029      	b.n	800181c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 020e 	bic.w	r2, r2, #14
 80017d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f003 021c 	and.w	r2, r3, #28
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
    }
  }
  return status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e17f      	b.n	8001b38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8171 	beq.w	8001b32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d005      	beq.n	8001868 <HAL_GPIO_Init+0x40>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d130      	bne.n	80018ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189e:	2201      	movs	r2, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 0201 	and.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d118      	bne.n	8001908 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b03      	cmp	r3, #3
 8001912:	d017      	beq.n	8001944 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	6939      	ldr	r1, [r7, #16]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80ac 	beq.w	8001b32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6613      	str	r3, [r2, #96]	; 0x60
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f2:	4a5a      	ldr	r2, [pc, #360]	; (8001b5c <HAL_GPIO_Init+0x334>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a1c:	d025      	beq.n	8001a6a <HAL_GPIO_Init+0x242>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <HAL_GPIO_Init+0x338>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <HAL_GPIO_Init+0x23e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4e      	ldr	r2, [pc, #312]	; (8001b64 <HAL_GPIO_Init+0x33c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0x23a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <HAL_GPIO_Init+0x340>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x236>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_GPIO_Init+0x344>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x232>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <HAL_GPIO_Init+0x348>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x22e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_GPIO_Init+0x34c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x22a>
 8001a4e:	2306      	movs	r3, #6
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a52:	2307      	movs	r3, #7
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f ae78 	bne.w	8001838 <HAL_GPIO_Init+0x10>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000c00 	.word	0x48000c00
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	48001400 	.word	0x48001400
 8001b74:	48001800 	.word	0x48001800
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e08d      	b.n	8001cda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff f93c 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2224      	movs	r2, #36	; 0x24
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d107      	bne.n	8001c26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	e006      	b.n	8001c34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d108      	bne.n	8001c4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	e007      	b.n	8001c5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69d9      	ldr	r1, [r3, #28]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	817b      	strh	r3, [r7, #10]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	f040 80fd 	bne.w	8001f00 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_I2C_Master_Transmit+0x30>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0f6      	b.n	8001f02 <HAL_I2C_Master_Transmit+0x21e>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d1c:	f7ff fc30 	bl	8001580 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2319      	movs	r3, #25
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f914 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e1      	b.n	8001f02 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2221      	movs	r2, #33	; 0x21
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2bff      	cmp	r3, #255	; 0xff
 8001d6e:	d906      	bls.n	8001d7e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	22ff      	movs	r2, #255	; 0xff
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e007      	b.n	8001d8e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d024      	beq.n	8001de0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	8979      	ldrh	r1, [r7, #10]
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	; (8001f0c <HAL_I2C_Master_Transmit+0x228>)
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fa79 	bl	80022d0 <I2C_TransferConfig>
 8001dde:	e066      	b.n	8001eae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_I2C_Master_Transmit+0x228>)
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa6e 	bl	80022d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001df4:	e05b      	b.n	8001eae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f8fd 	bl	8001ffa <I2C_WaitOnTXISFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07b      	b.n	8001f02 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d034      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x1ca>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d130      	bne.n	8001eae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	2200      	movs	r2, #0
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f880 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e04d      	b.n	8001f02 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2bff      	cmp	r3, #255	; 0xff
 8001e6e:	d90e      	bls.n	8001e8e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	8979      	ldrh	r1, [r7, #10]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fa22 	bl	80022d0 <I2C_TransferConfig>
 8001e8c:	e00f      	b.n	8001eae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	8979      	ldrh	r1, [r7, #10]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fa11 	bl	80022d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d19e      	bne.n	8001df6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	6a39      	ldr	r1, [r7, #32]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f8e3 	bl	8002088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e01a      	b.n	8001f02 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_I2C_Master_Transmit+0x22c>)
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	80002000 	.word	0x80002000
 8001f10:	fe00e800 	.word	0xfe00e800

08001f14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d103      	bne.n	8001f32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d007      	beq.n	8001f50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	619a      	str	r2, [r3, #24]
  }
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6c:	e031      	b.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d02d      	beq.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f76:	f7ff fb03 	bl	8001580 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d302      	bcc.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d122      	bne.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4013      	ands	r3, r2
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d113      	bne.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f043 0220 	orr.w	r2, r3, #32
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d0be      	beq.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002006:	e033      	b.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f87f 	bl	8002110 <I2C_IsErrorOccurred>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e031      	b.n	8002080 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d025      	beq.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002024:	f7ff faac 	bl	8001580 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d302      	bcc.n	800203a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11a      	bne.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b02      	cmp	r3, #2
 8002046:	d013      	beq.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d1c4      	bne.n	8002008 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002094:	e02f      	b.n	80020f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f838 	bl	8002110 <I2C_IsErrorOccurred>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e02d      	b.n	8002106 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff fa69 	bl	8001580 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d11a      	bne.n	80020f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d013      	beq.n	80020f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e007      	b.n	8002106 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b20      	cmp	r3, #32
 8002102:	d1c8      	bne.n	8002096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d068      	beq.n	800220e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002144:	e049      	b.n	80021da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d045      	beq.n	80021da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7ff fa17 	bl	8001580 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_IsErrorOccurred+0x54>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d13a      	bne.n	80021da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002176:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002186:	d121      	bne.n	80021cc <I2C_IsErrorOccurred+0xbc>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800218e:	d01d      	beq.n	80021cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	2b20      	cmp	r3, #32
 8002194:	d01a      	beq.n	80021cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021a6:	f7ff f9eb 	bl	8001580 <HAL_GetTick>
 80021aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ac:	e00e      	b.n	80021cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021ae:	f7ff f9e7 	bl	8001580 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b19      	cmp	r3, #25
 80021ba:	d907      	bls.n	80021cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80021ca:	e006      	b.n	80021da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d1e9      	bne.n	80021ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d003      	beq.n	80021f0 <I2C_IsErrorOccurred+0xe0>
 80021e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0aa      	beq.n	8002146 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002252:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002274:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fe45 	bl	8001f14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <I2C_IsErrorOccurred+0x1bc>)
 8002296:	400b      	ands	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	fe00e800 	.word	0xfe00e800

080022d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	817b      	strh	r3, [r7, #10]
 80022de:	4613      	mov	r3, r2
 80022e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022e8:	7a7b      	ldrb	r3, [r7, #9]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	0d5b      	lsrs	r3, r3, #21
 800230a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <I2C_TransferConfig+0x60>)
 8002310:	430b      	orrs	r3, r1
 8002312:	43db      	mvns	r3, r3
 8002314:	ea02 0103 	and.w	r1, r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	03ff63ff 	.word	0x03ff63ff

08002334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b20      	cmp	r3, #32
 8002348:	d138      	bne.n	80023bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002354:	2302      	movs	r3, #2
 8002356:	e032      	b.n	80023be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d139      	bne.n	8002454 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e033      	b.n	8002456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2224      	movs	r2, #36	; 0x24
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800241c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_PWREx_GetVoltageRange+0x18>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40007000 	.word	0x40007000

08002480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248e:	d130      	bne.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249c:	d038      	beq.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ae:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2232      	movs	r2, #50	; 0x32
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024c4:	e002      	b.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d102      	bne.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f2      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ec:	d110      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e00f      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d007      	beq.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e3ca      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4b97      	ldr	r3, [pc, #604]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4b94      	ldr	r3, [pc, #592]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80e4 	beq.w	8002728 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_RCC_OscConfig+0x4a>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	f040 808b 	bne.w	8002684 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 8087 	bne.w	8002684 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002576:	4b89      	ldr	r3, [pc, #548]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x62>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e3a2      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_RCC_OscConfig+0x7c>
 800259e:	4b7f      	ldr	r3, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_OscConfig+0x88>
 80025a8:	4b7c      	ldr	r3, [pc, #496]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d223      	bcs.n	8002600 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fd87 	bl	80030d0 <RCC_SetFlashLatencyFromMSIRange>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e383      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025cc:	4b73      	ldr	r3, [pc, #460]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a72      	ldr	r2, [pc, #456]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b70      	ldr	r3, [pc, #448]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	496d      	ldr	r1, [pc, #436]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ea:	4b6c      	ldr	r3, [pc, #432]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4968      	ldr	r1, [pc, #416]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
 80025fe:	e025      	b.n	800264c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002600:	4b66      	ldr	r3, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a65      	ldr	r2, [pc, #404]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4960      	ldr	r1, [pc, #384]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261e:	4b5f      	ldr	r3, [pc, #380]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	495b      	ldr	r1, [pc, #364]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fd47 	bl	80030d0 <RCC_SetFlashLatencyFromMSIRange>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e343      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800264c:	f000 fc4a 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b52      	ldr	r3, [pc, #328]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	4950      	ldr	r1, [pc, #320]	; (80027a0 <HAL_RCC_OscConfig+0x274>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_RCC_OscConfig+0x278>)
 800266a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_RCC_OscConfig+0x27c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fdaf 	bl	80011d4 <HAL_InitTick>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d052      	beq.n	8002726 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	e327      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d032      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800268c:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a42      	ldr	r2, [pc, #264]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002698:	f7fe ff72 	bl	8001580 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a0:	f7fe ff6e 	bl	8001580 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e310      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4931      	ldr	r1, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	492c      	ldr	r1, [pc, #176]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	e01a      	b.n	8002728 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026fe:	f7fe ff3f 	bl	8001580 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002706:	f7fe ff3b 	bl	8001580 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e2dd      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x1da>
 8002724:	e000      	b.n	8002728 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002726:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d074      	beq.n	800281e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x21a>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d10e      	bne.n	800275e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d064      	beq.n	800281c <HAL_RCC_OscConfig+0x2f0>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d160      	bne.n	800281c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e2ba      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x24a>
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e026      	b.n	80027c4 <HAL_RCC_OscConfig+0x298>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277e:	d115      	bne.n	80027ac <HAL_RCC_OscConfig+0x280>
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_OscConfig+0x270>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a02      	ldr	r2, [pc, #8]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x298>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	08006524 	.word	0x08006524
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000004 	.word	0x20000004
 80027ac:	4ba0      	ldr	r3, [pc, #640]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a9f      	ldr	r2, [pc, #636]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b9d      	ldr	r3, [pc, #628]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a9c      	ldr	r2, [pc, #624]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fed8 	bl	8001580 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fed4 	bl	8001580 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e276      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e6:	4b92      	ldr	r3, [pc, #584]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2a8>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fec4 	bl	8001580 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fec0 	bl	8001580 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e262      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800280e:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x2d0>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d060      	beq.n	80028ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x310>
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d119      	bne.n	800286a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d116      	bne.n	800286a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x328>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e23f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	4973      	ldr	r1, [pc, #460]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	e040      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6e      	ldr	r2, [pc, #440]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fe7f 	bl	8001580 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fe7b 	bl	8001580 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e21d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002898:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	495f      	ldr	r1, [pc, #380]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	e018      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ba:	4b5d      	ldr	r3, [pc, #372]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80028c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fe5b 	bl	8001580 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe fe57 	bl	8001580 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e1f9      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e0:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d03c      	beq.n	8002972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01c      	beq.n	800293a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002906:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fe36 	bl	8001580 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fe32 	bl	8001580 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1d4      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <HAL_RCC_OscConfig+0x3ec>
 8002938:	e01b      	b.n	8002972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002940:	4a3b      	ldr	r2, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fe19 	bl	8001580 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7fe fe15 	bl	8001580 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1b7      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ef      	bne.n	8002952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a6 	beq.w	8002acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCC_OscConfig+0x508>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d118      	bne.n	80029ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b8:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_RCC_OscConfig+0x508>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_RCC_OscConfig+0x508>)
 80029be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c4:	f7fe fddc 	bl	8001580 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029cc:	f7fe fdd8 	bl	8001580 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e17a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_RCC_OscConfig+0x508>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4d8>
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a02:	e029      	b.n	8002a58 <HAL_RCC_OscConfig+0x52c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d115      	bne.n	8002a38 <HAL_RCC_OscConfig+0x50c>
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2c:	e014      	b.n	8002a58 <HAL_RCC_OscConfig+0x52c>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
 8002a38:	4b9c      	ldr	r3, [pc, #624]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a9b      	ldr	r2, [pc, #620]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a48:	4b98      	ldr	r3, [pc, #608]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a97      	ldr	r2, [pc, #604]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d016      	beq.n	8002a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fd8e 	bl	8001580 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe fd8a 	bl	8001580 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e12a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ed      	beq.n	8002a68 <HAL_RCC_OscConfig+0x53c>
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fd77 	bl	8001580 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fd73 	bl	8001580 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e113      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aac:	4b7f      	ldr	r3, [pc, #508]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ed      	bne.n	8002a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aba:	7ffb      	ldrb	r3, [r7, #31]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a79      	ldr	r2, [pc, #484]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80fe 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	f040 80d0 	bne.w	8002c80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ae0:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d130      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	3b01      	subs	r3, #1
 8002b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d127      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11f      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b20:	2a07      	cmp	r2, #7
 8002b22:	bf14      	ite	ne
 8002b24:	2201      	movne	r2, #1
 8002b26:	2200      	moveq	r2, #0
 8002b28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d113      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d06e      	beq.n	8002c34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d069      	beq.n	8002c30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0ad      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b78:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b84:	f7fe fcfc 	bl	8001580 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe fcf8 	bl	8001580 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e09a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002baa:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x784>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bba:	3a01      	subs	r2, #1
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc4:	0212      	lsls	r2, r2, #8
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bcc:	0852      	lsrs	r2, r2, #1
 8002bce:	3a01      	subs	r2, #1
 8002bd0:	0552      	lsls	r2, r2, #21
 8002bd2:	4311      	orrs	r1, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bd8:	0852      	lsrs	r2, r2, #1
 8002bda:	3a01      	subs	r2, #1
 8002bdc:	0652      	lsls	r2, r2, #25
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be4:	0912      	lsrs	r2, r2, #4
 8002be6:	0452      	lsls	r2, r2, #17
 8002be8:	430a      	orrs	r2, r1
 8002bea:	4930      	ldr	r1, [pc, #192]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c08:	f7fe fcba 	bl	8001580 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fcb6 	bl	8001580 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e058      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2e:	e050      	b.n	8002cd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d148      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a16      	ldr	r2, [pc, #88]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c58:	f7fe fc92 	bl	8001580 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fc8e 	bl	8001580 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e030      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x734>
 8002c7e:	e028      	b.n	8002cd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d023      	beq.n	8002cce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_RCC_OscConfig+0x780>)
 8002c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fc75 	bl	8001580 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c98:	e00c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe fc71 	bl	8001580 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d905      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e013      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCC_OscConfig+0x7b0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ec      	bne.n	8002c9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_OscConfig+0x7b0>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	4905      	ldr	r1, [pc, #20]	; (8002cdc <HAL_RCC_OscConfig+0x7b0>)
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_OscConfig+0x7b4>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60cb      	str	r3, [r1, #12]
 8002ccc:	e001      	b.n	8002cd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	feeefffc 	.word	0xfeeefffc

08002ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0e7      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b72      	ldr	r3, [pc, #456]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4970      	ldr	r1, [pc, #448]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0cf      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d908      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4960      	ldr	r1, [pc, #384]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d04c      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d121      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0a6      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d82:	4b54      	ldr	r3, [pc, #336]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e09a      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e08e      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002daa:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e086      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4943      	ldr	r1, [pc, #268]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fbd8 	bl	8001580 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fbd4 	bl	8001580 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e06e      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d208      	bcs.n	8002e2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	492b      	ldr	r1, [pc, #172]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d210      	bcs.n	8002e5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 0207 	bic.w	r2, r3, #7
 8002e40:	4923      	ldr	r1, [pc, #140]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e036      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4918      	ldr	r1, [pc, #96]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4910      	ldr	r1, [pc, #64]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e98:	f000 f824 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	490b      	ldr	r1, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1f8>)
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1fc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f989 	bl	80011d4 <HAL_InitTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08006524 	.word	0x08006524
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d121      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d11e      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f18:	4b34      	ldr	r3, [pc, #208]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f24:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e004      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d134      	bne.n	8002fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d003      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0xac>
 8002f88:	e005      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f8c:	617b      	str	r3, [r7, #20]
      break;
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f92:	617b      	str	r3, [r7, #20]
      break;
 8002f94:	e002      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	617b      	str	r3, [r7, #20]
      break;
 8002f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	fb03 f202 	mul.w	r2, r3, r2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	0e5b      	lsrs	r3, r3, #25
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	0800653c 	.word	0x0800653c
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	007a1200 	.word	0x007a1200

08002ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003018:	f7ff fff0 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4904      	ldr	r1, [pc, #16]	; (800303c <HAL_RCC_GetPCLK1Freq+0x28>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	08006534 	.word	0x08006534

08003040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003044:	f7ff ffda 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0adb      	lsrs	r3, r3, #11
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08006534 	.word	0x08006534

0800306c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	220f      	movs	r2, #15
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_RCC_GetClockConfig+0x60>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40022000 	.word	0x40022000

080030d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030e8:	f7ff f9bc 	bl	8002464 <HAL_PWREx_GetVoltageRange>
 80030ec:	6178      	str	r0, [r7, #20]
 80030ee:	e014      	b.n	800311a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	4a24      	ldr	r2, [pc, #144]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	; 0x58
 80030fc:	4b22      	ldr	r3, [pc, #136]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003108:	f7ff f9ac 	bl	8002464 <HAL_PWREx_GetVoltageRange>
 800310c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003118:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003120:	d10b      	bne.n	800313a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d919      	bls.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2ba0      	cmp	r3, #160	; 0xa0
 800312c:	d902      	bls.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800312e:	2302      	movs	r3, #2
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e013      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003134:	2301      	movs	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	e010      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b80      	cmp	r3, #128	; 0x80
 800313e:	d902      	bls.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003140:	2303      	movs	r3, #3
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e00a      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d102      	bne.n	8003152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800314c:	2302      	movs	r3, #2
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	e004      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b70      	cmp	r3, #112	; 0x70
 8003156:	d101      	bne.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003158:	2301      	movs	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 0207 	bic.w	r2, r3, #7
 8003164:	4909      	ldr	r1, [pc, #36]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	40022000 	.word	0x40022000

08003190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003198:	2300      	movs	r3, #0
 800319a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800319c:	2300      	movs	r3, #0
 800319e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d041      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031b4:	d02a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ba:	d824      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031c0:	d008      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031c6:	d81e      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d0:	d010      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031d2:	e018      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d4:	4b86      	ldr	r3, [pc, #536]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a85      	ldr	r2, [pc, #532]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e0:	e015      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fabb 	bl	8003764 <RCCEx_PLLSAI1_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f2:	e00c      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3320      	adds	r3, #32
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fba6 	bl	800394c <RCCEx_PLLSAI2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003204:	e003      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	74fb      	strb	r3, [r7, #19]
      break;
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800320c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003214:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003222:	4973      	ldr	r1, [pc, #460]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800322a:	e001      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d041      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003244:	d02a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800324a:	d824      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800324c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003250:	d008      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003256:	d81e      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d010      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003262:	e018      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003264:	4b62      	ldr	r3, [pc, #392]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a61      	ldr	r2, [pc, #388]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003270:	e015      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fa73 	bl	8003764 <RCCEx_PLLSAI1_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003282:	e00c      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3320      	adds	r3, #32
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb5e 	bl	800394c <RCCEx_PLLSAI2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	74fb      	strb	r3, [r7, #19]
      break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800329c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032a4:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b2:	494f      	ldr	r1, [pc, #316]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ba:	e001      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a0 	beq.w	800340e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	4a40      	ldr	r2, [pc, #256]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	; 0x58
 80032f4:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003310:	f7fe f936 	bl	8001580 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003316:	e009      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fe f932 	bl	8001580 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d902      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	74fb      	strb	r3, [r7, #19]
        break;
 800332a:	e005      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ef      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d15c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	d019      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe f8f1 	bl	8001580 <HAL_GetTick>
 800339e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a0:	e00b      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe f8ed 	bl	8001580 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d902      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	74fb      	strb	r3, [r7, #19]
            break;
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ec      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fc:	7c7b      	ldrb	r3, [r7, #17]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003402:	4b9e      	ldr	r3, [pc, #632]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a9d      	ldr	r2, [pc, #628]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800341a:	4b98      	ldr	r3, [pc, #608]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f023 0203 	bic.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	4994      	ldr	r1, [pc, #592]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800343c:	4b8f      	ldr	r3, [pc, #572]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 020c 	bic.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	498c      	ldr	r1, [pc, #560]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800345e:	4b87      	ldr	r3, [pc, #540]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4983      	ldr	r1, [pc, #524]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003480:	4b7e      	ldr	r3, [pc, #504]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	497b      	ldr	r1, [pc, #492]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034a2:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	4972      	ldr	r1, [pc, #456]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034c4:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	496a      	ldr	r1, [pc, #424]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	4961      	ldr	r1, [pc, #388]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003508:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	4959      	ldr	r1, [pc, #356]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352a:	4b54      	ldr	r3, [pc, #336]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	4950      	ldr	r1, [pc, #320]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	4948      	ldr	r1, [pc, #288]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	493f      	ldr	r1, [pc, #252]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d028      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	4937      	ldr	r1, [pc, #220]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ae:	d106      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b32      	ldr	r3, [pc, #200]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a31      	ldr	r2, [pc, #196]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
 80035bc:	e011      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f8c8 	bl	8003764 <RCCEx_PLLSAI1_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	491f      	ldr	r1, [pc, #124]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360c:	d106      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360e:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003618:	60d3      	str	r3, [r2, #12]
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f899 	bl	8003764 <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d02b      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	4908      	ldr	r1, [pc, #32]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366a:	d109      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a02      	ldr	r2, [pc, #8]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
 8003678:	e014      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f867 	bl	8003764 <RCCEx_PLLSAI1_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02f      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036be:	4928      	ldr	r1, [pc, #160]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ce:	d10d      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f844 	bl	8003764 <RCCEx_PLLSAI1_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d014      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	74bb      	strb	r3, [r7, #18]
 80036ea:	e011      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3320      	adds	r3, #32
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f925 	bl	800394c <RCCEx_PLLSAI2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372a:	490d      	ldr	r1, [pc, #52]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374e:	4904      	ldr	r1, [pc, #16]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003756:	7cbb      	ldrb	r3, [r7, #18]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000

08003764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003772:	4b75      	ldr	r3, [pc, #468]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0203 	and.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d10d      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
       ||
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003796:	4b6c      	ldr	r3, [pc, #432]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
       ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d047      	beq.n	800383a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	e044      	b.n	800383a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d018      	beq.n	80037ea <RCCEx_PLLSAI1_Config+0x86>
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d825      	bhi.n	8003808 <RCCEx_PLLSAI1_Config+0xa4>
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d002      	beq.n	80037c6 <RCCEx_PLLSAI1_Config+0x62>
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d009      	beq.n	80037d8 <RCCEx_PLLSAI1_Config+0x74>
 80037c4:	e020      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037c6:	4b60      	ldr	r3, [pc, #384]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11d      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d6:	e01a      	b.n	800380e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d8:	4b5b      	ldr	r3, [pc, #364]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e8:	e013      	b.n	8003812 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ea:	4b57      	ldr	r3, [pc, #348]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037f6:	4b54      	ldr	r3, [pc, #336]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003806:	e006      	b.n	8003816 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      break;
 800380c:	e004      	b.n	8003818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003816:	bf00      	nop
    }

    if(status == HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800381e:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	430b      	orrs	r3, r1
 8003834:	4944      	ldr	r1, [pc, #272]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d17d      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003840:	4b41      	ldr	r3, [pc, #260]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a40      	ldr	r2, [pc, #256]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fe98 	bl	8001580 <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003854:	f7fd fe94 	bl	8001580 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
        break;
 8003866:	e005      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003868:	4b37      	ldr	r3, [pc, #220]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ef      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d160      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6892      	ldr	r2, [r2, #8]
 8003890:	0211      	lsls	r1, r2, #8
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68d2      	ldr	r2, [r2, #12]
 8003896:	0912      	lsrs	r2, r2, #4
 8003898:	0452      	lsls	r2, r2, #17
 800389a:	430a      	orrs	r2, r1
 800389c:	492a      	ldr	r1, [pc, #168]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	610b      	str	r3, [r1, #16]
 80038a2:	e027      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d112      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038aa:	4b27      	ldr	r3, [pc, #156]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	0211      	lsls	r1, r2, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6912      	ldr	r2, [r2, #16]
 80038c0:	0852      	lsrs	r2, r2, #1
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0552      	lsls	r2, r2, #21
 80038c6:	430a      	orrs	r2, r1
 80038c8:	491f      	ldr	r1, [pc, #124]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	610b      	str	r3, [r1, #16]
 80038ce:	e011      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6952      	ldr	r2, [r2, #20]
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0652      	lsls	r2, r2, #25
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4916      	ldr	r1, [pc, #88]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd fe3e 	bl	8001580 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003908:	f7fd fe3a 	bl	8001580 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
          break;
 800391a:	e005      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	4904      	ldr	r1, [pc, #16]	; (8003948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395a:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003966:	4b67      	ldr	r3, [pc, #412]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d10d      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
       ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800397e:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
       ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d047      	beq.n	8003a22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e044      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d018      	beq.n	80039d2 <RCCEx_PLLSAI2_Config+0x86>
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d825      	bhi.n	80039f0 <RCCEx_PLLSAI2_Config+0xa4>
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d002      	beq.n	80039ae <RCCEx_PLLSAI2_Config+0x62>
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d009      	beq.n	80039c0 <RCCEx_PLLSAI2_Config+0x74>
 80039ac:	e020      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ae:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e01a      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c0:	4b50      	ldr	r3, [pc, #320]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d0:	e013      	b.n	80039fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d2:	4b4c      	ldr	r3, [pc, #304]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039de:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ee:	e006      	b.n	80039fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e004      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a06:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	4939      	ldr	r1, [pc, #228]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d167      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd fda4 	bl	8001580 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a3c:	f7fd fda0 	bl	8001580 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ef      	bne.n	8003a3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d14a      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d111      	bne.n	8003a8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a68:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	0912      	lsrs	r2, r2, #4
 8003a80:	0452      	lsls	r2, r2, #17
 8003a82:	430a      	orrs	r2, r1
 8003a84:	491f      	ldr	r1, [pc, #124]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	614b      	str	r3, [r1, #20]
 8003a8a:	e011      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6892      	ldr	r2, [r2, #8]
 8003a9c:	0211      	lsls	r1, r2, #8
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6912      	ldr	r2, [r2, #16]
 8003aa2:	0852      	lsrs	r2, r2, #1
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0652      	lsls	r2, r2, #25
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	4916      	ldr	r1, [pc, #88]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ab0:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd fd60 	bl	8001580 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac2:	e009      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ac4:	f7fd fd5c 	bl	8001580 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ad6:	e005      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ef      	beq.n	8003ac4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000

08003b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e095      	b.n	8003c46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d009      	beq.n	8003b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd f9d6 	bl	8000f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b80:	d902      	bls.n	8003b88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e002      	b.n	8003b8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b96:	d007      	beq.n	8003ba8 <HAL_SPI_Init+0xa0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 0204 	and.w	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c24:	ea42 0103 	orr.w	r1, r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b088      	sub	sp, #32
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_SPI_Transmit+0x22>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e15f      	b.n	8003f30 <HAL_SPI_Transmit+0x2e2>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c78:	f7fd fc82 	bl	8001580 <HAL_GetTick>
 8003c7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c92:	e148      	b.n	8003f26 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0x52>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ca4:	e13f      	b.n	8003f26 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	d10f      	bne.n	8003d12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d007      	beq.n	8003d30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d38:	d94f      	bls.n	8003dda <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Transmit+0xfa>
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d142      	bne.n	8003dce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d6c:	e02f      	b.n	8003dce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d112      	bne.n	8003da2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da0:	e015      	b.n	8003dce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da2:	f7fd fbed 	bl	8001580 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d803      	bhi.n	8003dba <HAL_SPI_Transmit+0x16c>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_Transmit+0x172>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003dcc:	e0ab      	b.n	8003f26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ca      	bne.n	8003d6e <HAL_SPI_Transmit+0x120>
 8003dd8:	e080      	b.n	8003edc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_Transmit+0x19a>
 8003de2:	8afb      	ldrh	r3, [r7, #22]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d174      	bne.n	8003ed2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d912      	bls.n	8003e18 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	1c9a      	adds	r2, r3, #2
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b02      	subs	r3, #2
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e16:	e05c      	b.n	8003ed2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e3e:	e048      	b.n	8003ed2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d912      	bls.n	8003e7e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b02      	subs	r3, #2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e7c:	e029      	b.n	8003ed2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea4:	e015      	b.n	8003ed2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea6:	f7fd fb6b 	bl	8001580 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d803      	bhi.n	8003ebe <HAL_SPI_Transmit+0x270>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d102      	bne.n	8003ec4 <HAL_SPI_Transmit+0x276>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ed0:	e029      	b.n	8003f26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1b1      	bne.n	8003e40 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	6839      	ldr	r1, [r7, #0]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fa5b 	bl	800439c <SPI_EndRxTxTransaction>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e003      	b.n	8003f26 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10e      	bne.n	8003f78 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
    return;
 8003f76:	e0ce      	b.n	8004116 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_SPI_IRQHandler+0x5e>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
    return;
 8003f94:	e0bf      	b.n	8004116 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_SPI_IRQHandler+0x7e>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80b0 	beq.w	8004116 <HAL_SPI_IRQHandler+0x1de>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80aa 	beq.w	8004116 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d023      	beq.n	8004014 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d011      	beq.n	8003ffc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	e00b      	b.n	8004014 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
        return;
 8004012:	e080      	b.n	8004116 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	f043 0208 	orr.w	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04f      	beq.n	8004114 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004082:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_SPI_IRQHandler+0x168>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d034      	beq.n	800410a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0203 	bic.w	r2, r2, #3
 80040ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d011      	beq.n	80040dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_SPI_IRQHandler+0x1e4>)
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fd fb6d 	bl	80017a4 <HAL_DMA_Abort_IT>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d016      	beq.n	8004112 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <HAL_SPI_IRQHandler+0x1e4>)
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd fb57 	bl	80017a4 <HAL_DMA_Abort_IT>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004108:	e003      	b.n	8004112 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f808 	bl	8004120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004110:	e000      	b.n	8004114 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004112:	bf00      	nop
    return;
 8004114:	bf00      	nop
  }
}
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	08004135 	.word	0x08004135

08004120 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ffe5 	bl	8004120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004170:	f7fd fa06 	bl	8001580 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004180:	f7fd f9fe 	bl	8001580 <HAL_GetTick>
 8004184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	0d1b      	lsrs	r3, r3, #20
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004196:	e054      	b.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d050      	beq.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a0:	f7fd f9ee 	bl	8001580 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d902      	bls.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d13d      	bne.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ce:	d111      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d8:	d004      	beq.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d107      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fc:	d10f      	bne.n	800421e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e017      	b.n	8004262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3b01      	subs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	429a      	cmp	r2, r3
 800425e:	d19b      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000000 	.word	0x20000000

08004270 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004282:	f7fd f97d 	bl	8001580 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	4413      	add	r3, r2
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004292:	f7fd f975 	bl	8001580 <HAL_GetTick>
 8004296:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042a0:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00da      	lsls	r2, r3, #3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	0d1b      	lsrs	r3, r3, #20
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042b8:	e060      	b.n	800437c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042c0:	d107      	bne.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d050      	beq.n	800437c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042da:	f7fd f951 	bl	8001580 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d902      	bls.n	80042f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d13d      	bne.n	800436c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004308:	d111      	bne.n	800432e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d004      	beq.n	800431e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d107      	bne.n	800432e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d10f      	bne.n	8004358 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004356:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e010      	b.n	800438e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	3b01      	subs	r3, #1
 800437a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d196      	bne.n	80042ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000

0800439c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff ff5b 	bl	8004270 <SPI_WaitFifoStateUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e027      	b.n	8004420 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fec0 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e014      	b.n	8004420 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff ff34 	bl	8004270 <SPI_WaitFifoStateUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e000      	b.n	8004420 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e049      	b.n	80044ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc fdf8 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 f9d0 	bl	800480c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e04f      	b.n	8004590 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a23      	ldr	r2, [pc, #140]	; (800459c <HAL_TIM_Base_Start_IT+0xc4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_TIM_Base_Start_IT+0x76>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451a:	d018      	beq.n	800454e <HAL_TIM_Base_Start_IT+0x76>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_TIM_Base_Start_IT+0x76>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_TIM_Base_Start_IT+0x76>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_TIM_Base_Start_IT+0x76>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIM_Base_Start_IT+0x76>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d115      	bne.n	800457a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004556:	4013      	ands	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b06      	cmp	r3, #6
 800455e:	d015      	beq.n	800458c <HAL_TIM_Base_Start_IT+0xb4>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004566:	d011      	beq.n	800458c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	e008      	b.n	800458c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e000      	b.n	800458e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40000800 	.word	0x40000800
 80045a8:	40000c00 	.word	0x40000c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	00010007 	.word	0x00010007

080045b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d020      	beq.n	800461c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0202 	mvn.w	r2, #2
 80045ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8e4 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8d6 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8e7 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01b      	beq.n	8004668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0204 	mvn.w	r2, #4
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8be 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8b0 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8c1 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0208 	mvn.w	r2, #8
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f898 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f88a 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f89b 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0210 	mvn.w	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2208      	movs	r2, #8
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f872 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f864 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f875 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0201 	mvn.w	r2, #1
 800471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fb54 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f906 	bl	8004954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8fe 	bl	8004968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f834 	bl	80047f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0220 	mvn.w	r2, #32
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8c6 	bl	8004940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a40      	ldr	r2, [pc, #256]	; (8004920 <TIM_Base_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d00f      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3d      	ldr	r2, [pc, #244]	; (8004924 <TIM_Base_SetConfig+0x118>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00b      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <TIM_Base_SetConfig+0x11c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <TIM_Base_SetConfig+0x120>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3a      	ldr	r2, [pc, #232]	; (8004930 <TIM_Base_SetConfig+0x124>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d108      	bne.n	800485e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <TIM_Base_SetConfig+0x114>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01f      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486c:	d01b      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <TIM_Base_SetConfig+0x118>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d017      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2b      	ldr	r2, [pc, #172]	; (8004928 <TIM_Base_SetConfig+0x11c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2a      	ldr	r2, [pc, #168]	; (800492c <TIM_Base_SetConfig+0x120>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00f      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <TIM_Base_SetConfig+0x124>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00b      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a28      	ldr	r2, [pc, #160]	; (8004934 <TIM_Base_SetConfig+0x128>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <TIM_Base_SetConfig+0x12c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d003      	beq.n	80048a6 <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <TIM_Base_SetConfig+0x130>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d108      	bne.n	80048b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a10      	ldr	r2, [pc, #64]	; (8004920 <TIM_Base_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0xf8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <TIM_Base_SetConfig+0x124>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0xf8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <TIM_Base_SetConfig+0x128>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0xf8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <TIM_Base_SetConfig+0x12c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0xf8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a0f      	ldr	r2, [pc, #60]	; (800493c <TIM_Base_SetConfig+0x130>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d103      	bne.n	800490c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	615a      	str	r2, [r3, #20]
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40013400 	.word	0x40013400
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800

08004940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e040      	b.n	8004a10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc fb76 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fc34 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f979 	bl	8004cc0 <UART_SetConfig>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01b      	b.n	8004a10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fcb3 	bl	8005374 <UART_CheckIdleState>
 8004a0e:	4603      	mov	r3, r0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d178      	bne.n	8004b22 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_UART_Transmit+0x24>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e071      	b.n	8004b24 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2221      	movs	r2, #33	; 0x21
 8004a4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a4e:	f7fc fd97 	bl	8001580 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d108      	bne.n	8004a80 <HAL_UART_Transmit+0x68>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	e003      	b.n	8004a88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a88:	e030      	b.n	8004aec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fd15 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e03c      	b.n	8004b24 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004abc:	b292      	uxth	r2, r2
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e008      	b.n	8004ada <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1c8      	bne.n	8004a8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fcde 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e005      	b.n	8004b24 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	f040 80b6 	bne.w	8004cb4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Receive+0x28>
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0ae      	b.n	8004cb6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2222      	movs	r2, #34	; 0x22
 8004b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6e:	f7fc fd07 	bl	8001580 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d10e      	bne.n	8004bac <HAL_UART_Receive+0x80>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <HAL_UART_Receive+0x76>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ba0:	e02d      	b.n	8004bfe <HAL_UART_Receive+0xd2>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004baa:	e028      	b.n	8004bfe <HAL_UART_Receive+0xd2>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <HAL_UART_Receive+0xa4>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_UART_Receive+0x9a>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	22ff      	movs	r2, #255	; 0xff
 8004bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bc4:	e01b      	b.n	8004bfe <HAL_UART_Receive+0xd2>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	227f      	movs	r2, #127	; 0x7f
 8004bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bce:	e016      	b.n	8004bfe <HAL_UART_Receive+0xd2>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_UART_Receive+0xca>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Receive+0xc0>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	227f      	movs	r2, #127	; 0x7f
 8004be6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bea:	e008      	b.n	8004bfe <HAL_UART_Receive+0xd2>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	223f      	movs	r2, #63	; 0x3f
 8004bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf4:	e003      	b.n	8004bfe <HAL_UART_Receive+0xd2>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c04:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	d108      	bne.n	8004c22 <HAL_UART_Receive+0xf6>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e003      	b.n	8004c2a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c2a:	e037      	b.n	8004c9c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2120      	movs	r1, #32
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fc44 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e033      	b.n	8004cb6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10c      	bne.n	8004c6e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	8a7b      	ldrh	r3, [r7, #18]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e00d      	b.n	8004c8a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	8a7b      	ldrh	r3, [r7, #18]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	3301      	adds	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1c1      	bne.n	8004c2c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e000      	b.n	8004cb6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc4:	b08a      	sub	sp, #40	; 0x28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4ba4      	ldr	r3, [pc, #656]	; (8004f80 <UART_SetConfig+0x2c0>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a99      	ldr	r2, [pc, #612]	; (8004f84 <UART_SetConfig+0x2c4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a90      	ldr	r2, [pc, #576]	; (8004f88 <UART_SetConfig+0x2c8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d126      	bne.n	8004d98 <UART_SetConfig+0xd8>
 8004d4a:	4b90      	ldr	r3, [pc, #576]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0xd0>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0xa0>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e116      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e112      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e10e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e10a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e106      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7c      	ldr	r2, [pc, #496]	; (8004f90 <UART_SetConfig+0x2d0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d138      	bne.n	8004e14 <UART_SetConfig+0x154>
 8004da2:	4b7a      	ldr	r3, [pc, #488]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d82d      	bhi.n	8004e0c <UART_SetConfig+0x14c>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0xf8>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004e0d 	.word	0x08004e0d
 8004dc4:	08004e0d 	.word	0x08004e0d
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e0d 	.word	0x08004e0d
 8004dd0:	08004e0d 	.word	0x08004e0d
 8004dd4:	08004e0d 	.word	0x08004e0d
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004e0d 	.word	0x08004e0d
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e05 	.word	0x08004e05
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e0d8      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e0d4      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e0d0      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e0cc      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e0c8      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5e      	ldr	r2, [pc, #376]	; (8004f94 <UART_SetConfig+0x2d4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d125      	bne.n	8004e6a <UART_SetConfig+0x1aa>
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d016      	beq.n	8004e5a <UART_SetConfig+0x19a>
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d818      	bhi.n	8004e62 <UART_SetConfig+0x1a2>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d00a      	beq.n	8004e4a <UART_SetConfig+0x18a>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d814      	bhi.n	8004e62 <UART_SetConfig+0x1a2>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <UART_SetConfig+0x182>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d008      	beq.n	8004e52 <UART_SetConfig+0x192>
 8004e40:	e00f      	b.n	8004e62 <UART_SetConfig+0x1a2>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e48:	e0ad      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e50:	e0a9      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e52:	2304      	movs	r3, #4
 8004e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e58:	e0a5      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e60:	e0a1      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e62:	2310      	movs	r3, #16
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e68:	e09d      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <UART_SetConfig+0x2d8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <UART_SetConfig+0x200>
 8004e74:	4b45      	ldr	r3, [pc, #276]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e80:	d016      	beq.n	8004eb0 <UART_SetConfig+0x1f0>
 8004e82:	2bc0      	cmp	r3, #192	; 0xc0
 8004e84:	d818      	bhi.n	8004eb8 <UART_SetConfig+0x1f8>
 8004e86:	2b80      	cmp	r3, #128	; 0x80
 8004e88:	d00a      	beq.n	8004ea0 <UART_SetConfig+0x1e0>
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d814      	bhi.n	8004eb8 <UART_SetConfig+0x1f8>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <UART_SetConfig+0x1d8>
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d008      	beq.n	8004ea8 <UART_SetConfig+0x1e8>
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x1f8>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e082      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e07e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eae:	e07a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb6:	e076      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebe:	e072      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a35      	ldr	r2, [pc, #212]	; (8004f9c <UART_SetConfig+0x2dc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d12a      	bne.n	8004f20 <UART_SetConfig+0x260>
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed8:	d01a      	beq.n	8004f10 <UART_SetConfig+0x250>
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ede:	d81b      	bhi.n	8004f18 <UART_SetConfig+0x258>
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d00c      	beq.n	8004f00 <UART_SetConfig+0x240>
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d815      	bhi.n	8004f18 <UART_SetConfig+0x258>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <UART_SetConfig+0x238>
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef4:	d008      	beq.n	8004f08 <UART_SetConfig+0x248>
 8004ef6:	e00f      	b.n	8004f18 <UART_SetConfig+0x258>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e052      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e04e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e04a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e046      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e042      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <UART_SetConfig+0x2c4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d13a      	bne.n	8004fa0 <UART_SetConfig+0x2e0>
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f38:	d01a      	beq.n	8004f70 <UART_SetConfig+0x2b0>
 8004f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f3e:	d81b      	bhi.n	8004f78 <UART_SetConfig+0x2b8>
 8004f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f44:	d00c      	beq.n	8004f60 <UART_SetConfig+0x2a0>
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d815      	bhi.n	8004f78 <UART_SetConfig+0x2b8>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <UART_SetConfig+0x298>
 8004f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f54:	d008      	beq.n	8004f68 <UART_SetConfig+0x2a8>
 8004f56:	e00f      	b.n	8004f78 <UART_SetConfig+0x2b8>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e022      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f60:	2302      	movs	r3, #2
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e01e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e01a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f70:	2308      	movs	r3, #8
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e016      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	e012      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f80:	efff69f3 	.word	0xefff69f3
 8004f84:	40008000 	.word	0x40008000
 8004f88:	40013800 	.word	0x40013800
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40004800 	.word	0x40004800
 8004f98:	40004c00 	.word	0x40004c00
 8004f9c:	40005000 	.word	0x40005000
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a9f      	ldr	r2, [pc, #636]	; (8005228 <UART_SetConfig+0x568>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d17a      	bne.n	80050a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d824      	bhi.n	8005002 <UART_SetConfig+0x342>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x300>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08005003 	.word	0x08005003
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08005003 	.word	0x08005003
 8004fd0:	08004ff3 	.word	0x08004ff3
 8004fd4:	08005003 	.word	0x08005003
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005003 	.word	0x08005003
 8004fe0:	08004ffb 	.word	0x08004ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7fe f816 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	61f8      	str	r0, [r7, #28]
        break;
 8004fea:	e010      	b.n	800500e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fec:	4b8f      	ldr	r3, [pc, #572]	; (800522c <UART_SetConfig+0x56c>)
 8004fee:	61fb      	str	r3, [r7, #28]
        break;
 8004ff0:	e00d      	b.n	800500e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff2:	f7fd ff77 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8004ff6:	61f8      	str	r0, [r7, #28]
        break;
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffe:	61fb      	str	r3, [r7, #28]
        break;
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800500c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80fb 	beq.w	800520c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	429a      	cmp	r2, r3
 8005024:	d305      	bcc.n	8005032 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005038:	e0e8      	b.n	800520c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2200      	movs	r2, #0
 800503e:	461c      	mov	r4, r3
 8005040:	4615      	mov	r5, r2
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	022b      	lsls	r3, r5, #8
 800504c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005050:	0222      	lsls	r2, r4, #8
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	6849      	ldr	r1, [r1, #4]
 8005056:	0849      	lsrs	r1, r1, #1
 8005058:	2000      	movs	r0, #0
 800505a:	4688      	mov	r8, r1
 800505c:	4681      	mov	r9, r0
 800505e:	eb12 0a08 	adds.w	sl, r2, r8
 8005062:	eb43 0b09 	adc.w	fp, r3, r9
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005074:	4650      	mov	r0, sl
 8005076:	4659      	mov	r1, fp
 8005078:	f7fb f8fa 	bl	8000270 <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4613      	mov	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508a:	d308      	bcc.n	800509e <UART_SetConfig+0x3de>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005092:	d204      	bcs.n	800509e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	60da      	str	r2, [r3, #12]
 800509c:	e0b6      	b.n	800520c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050a4:	e0b2      	b.n	800520c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d15e      	bne.n	800516e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d828      	bhi.n	800510a <UART_SetConfig+0x44a>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x400>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fd ff96 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fd ffa8 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 80050f0:	61f8      	str	r0, [r7, #28]
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b4d      	ldr	r3, [pc, #308]	; (800522c <UART_SetConfig+0x56c>)
 80050f6:	61fb      	str	r3, [r7, #28]
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fd fef3 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 80050fe:	61f8      	str	r0, [r7, #28]
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d077      	beq.n	800520c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005a      	lsls	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	441a      	add	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0f      	cmp	r3, #15
 8005136:	d916      	bls.n	8005166 <UART_SetConfig+0x4a6>
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513e:	d212      	bcs.n	8005166 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	b29b      	uxth	r3, r3
 8005144:	f023 030f 	bic.w	r3, r3, #15
 8005148:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	b29b      	uxth	r3, r3
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	b29a      	uxth	r2, r3
 8005156:	8afb      	ldrh	r3, [r7, #22]
 8005158:	4313      	orrs	r3, r2
 800515a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	8afa      	ldrh	r2, [r7, #22]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e052      	b.n	800520c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800516c:	e04e      	b.n	800520c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800516e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005172:	2b08      	cmp	r3, #8
 8005174:	d827      	bhi.n	80051c6 <UART_SetConfig+0x506>
 8005176:	a201      	add	r2, pc, #4	; (adr r2, 800517c <UART_SetConfig+0x4bc>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051b1 	.word	0x080051b1
 8005188:	080051c7 	.word	0x080051c7
 800518c:	080051b7 	.word	0x080051b7
 8005190:	080051c7 	.word	0x080051c7
 8005194:	080051c7 	.word	0x080051c7
 8005198:	080051c7 	.word	0x080051c7
 800519c:	080051bf 	.word	0x080051bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a0:	f7fd ff38 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80051a4:	61f8      	str	r0, [r7, #28]
        break;
 80051a6:	e014      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7fd ff4a 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 80051ac:	61f8      	str	r0, [r7, #28]
        break;
 80051ae:	e010      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <UART_SetConfig+0x56c>)
 80051b2:	61fb      	str	r3, [r7, #28]
        break;
 80051b4:	e00d      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b6:	f7fd fe95 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 80051ba:	61f8      	str	r0, [r7, #28]
        break;
 80051bc:	e009      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c2:	61fb      	str	r3, [r7, #28]
        break;
 80051c4:	e005      	b.n	80051d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051d0:	bf00      	nop
    }

    if (pclk != 0U)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d019      	beq.n	800520c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	085a      	lsrs	r2, r3, #1
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b0f      	cmp	r3, #15
 80051f0:	d909      	bls.n	8005206 <UART_SetConfig+0x546>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f8:	d205      	bcs.n	8005206 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	e002      	b.n	800520c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	; 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	40008000 	.word	0x40008000
 800522c:	00f42400 	.word	0x00f42400

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b098      	sub	sp, #96	; 0x60
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fc f8fc 	bl	8001580 <HAL_GetTick>
 8005388:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d12e      	bne.n	80053f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f88c 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d021      	beq.n	80053f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c6:	653b      	str	r3, [r7, #80]	; 0x50
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d0:	647b      	str	r3, [r7, #68]	; 0x44
 80053d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e062      	b.n	80054bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d149      	bne.n	8005498 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800540c:	2200      	movs	r2, #0
 800540e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f856 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d03c      	beq.n	8005498 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	623b      	str	r3, [r7, #32]
   return(result);
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
 800543e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	; 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	617b      	str	r3, [r7, #20]
   return(result);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e011      	b.n	80054bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3758      	adds	r7, #88	; 0x58
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d4:	e049      	b.n	800556a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d045      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054de:	f7fc f84f 	bl	8001580 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d302      	bcc.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e048      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d031      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b08      	cmp	r3, #8
 8005512:	d110      	bne.n	8005536 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2208      	movs	r2, #8
 800551a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f838 	bl	8005592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2208      	movs	r2, #8
 8005526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e029      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005544:	d111      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800554e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f81e 	bl	8005592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e00f      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	429a      	cmp	r2, r3
 8005586:	d0a6      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b095      	sub	sp, #84	; 0x54
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b8:	643b      	str	r3, [r7, #64]	; 0x40
 80055ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e6      	bne.n	800559a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	61fb      	str	r3, [r7, #28]
   return(result);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	2b01      	cmp	r3, #1
 8005606:	d118      	bne.n	800563a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	60bb      	str	r3, [r7, #8]
   return(result);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	647b      	str	r3, [r7, #68]	; 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	613b      	str	r3, [r7, #16]
   return(result);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800564e:	bf00      	nop
 8005650:	3754      	adds	r7, #84	; 0x54
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <std>:
 800565c:	2300      	movs	r3, #0
 800565e:	b510      	push	{r4, lr}
 8005660:	4604      	mov	r4, r0
 8005662:	e9c0 3300 	strd	r3, r3, [r0]
 8005666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800566a:	6083      	str	r3, [r0, #8]
 800566c:	8181      	strh	r1, [r0, #12]
 800566e:	6643      	str	r3, [r0, #100]	; 0x64
 8005670:	81c2      	strh	r2, [r0, #14]
 8005672:	6183      	str	r3, [r0, #24]
 8005674:	4619      	mov	r1, r3
 8005676:	2208      	movs	r2, #8
 8005678:	305c      	adds	r0, #92	; 0x5c
 800567a:	f000 f8f4 	bl	8005866 <memset>
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <std+0x38>)
 8005680:	6263      	str	r3, [r4, #36]	; 0x24
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <std+0x3c>)
 8005684:	62a3      	str	r3, [r4, #40]	; 0x28
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <std+0x40>)
 8005688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <std+0x44>)
 800568c:	6224      	str	r4, [r4, #32]
 800568e:	6323      	str	r3, [r4, #48]	; 0x30
 8005690:	bd10      	pop	{r4, pc}
 8005692:	bf00      	nop
 8005694:	080057e1 	.word	0x080057e1
 8005698:	08005803 	.word	0x08005803
 800569c:	0800583b 	.word	0x0800583b
 80056a0:	0800585f 	.word	0x0800585f

080056a4 <stdio_exit_handler>:
 80056a4:	4a02      	ldr	r2, [pc, #8]	; (80056b0 <stdio_exit_handler+0xc>)
 80056a6:	4903      	ldr	r1, [pc, #12]	; (80056b4 <stdio_exit_handler+0x10>)
 80056a8:	4803      	ldr	r0, [pc, #12]	; (80056b8 <stdio_exit_handler+0x14>)
 80056aa:	f000 b869 	b.w	8005780 <_fwalk_sglue>
 80056ae:	bf00      	nop
 80056b0:	2000000c 	.word	0x2000000c
 80056b4:	08006201 	.word	0x08006201
 80056b8:	20000018 	.word	0x20000018

080056bc <cleanup_stdio>:
 80056bc:	6841      	ldr	r1, [r0, #4]
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <cleanup_stdio+0x34>)
 80056c0:	4299      	cmp	r1, r3
 80056c2:	b510      	push	{r4, lr}
 80056c4:	4604      	mov	r4, r0
 80056c6:	d001      	beq.n	80056cc <cleanup_stdio+0x10>
 80056c8:	f000 fd9a 	bl	8006200 <_fflush_r>
 80056cc:	68a1      	ldr	r1, [r4, #8]
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <cleanup_stdio+0x38>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	d002      	beq.n	80056da <cleanup_stdio+0x1e>
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fd93 	bl	8006200 <_fflush_r>
 80056da:	68e1      	ldr	r1, [r4, #12]
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <cleanup_stdio+0x3c>)
 80056de:	4299      	cmp	r1, r3
 80056e0:	d004      	beq.n	80056ec <cleanup_stdio+0x30>
 80056e2:	4620      	mov	r0, r4
 80056e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e8:	f000 bd8a 	b.w	8006200 <_fflush_r>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	bf00      	nop
 80056f0:	2000038c 	.word	0x2000038c
 80056f4:	200003f4 	.word	0x200003f4
 80056f8:	2000045c 	.word	0x2000045c

080056fc <global_stdio_init.part.0>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <global_stdio_init.part.0+0x30>)
 8005700:	4c0b      	ldr	r4, [pc, #44]	; (8005730 <global_stdio_init.part.0+0x34>)
 8005702:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <global_stdio_init.part.0+0x38>)
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	4620      	mov	r0, r4
 8005708:	2200      	movs	r2, #0
 800570a:	2104      	movs	r1, #4
 800570c:	f7ff ffa6 	bl	800565c <std>
 8005710:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005714:	2201      	movs	r2, #1
 8005716:	2109      	movs	r1, #9
 8005718:	f7ff ffa0 	bl	800565c <std>
 800571c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005720:	2202      	movs	r2, #2
 8005722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005726:	2112      	movs	r1, #18
 8005728:	f7ff bf98 	b.w	800565c <std>
 800572c:	200004c4 	.word	0x200004c4
 8005730:	2000038c 	.word	0x2000038c
 8005734:	080056a5 	.word	0x080056a5

08005738 <__sfp_lock_acquire>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__sfp_lock_acquire+0x8>)
 800573a:	f000 b90d 	b.w	8005958 <__retarget_lock_acquire_recursive>
 800573e:	bf00      	nop
 8005740:	200004cd 	.word	0x200004cd

08005744 <__sfp_lock_release>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__sfp_lock_release+0x8>)
 8005746:	f000 b908 	b.w	800595a <__retarget_lock_release_recursive>
 800574a:	bf00      	nop
 800574c:	200004cd 	.word	0x200004cd

08005750 <__sinit>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4604      	mov	r4, r0
 8005754:	f7ff fff0 	bl	8005738 <__sfp_lock_acquire>
 8005758:	6a23      	ldr	r3, [r4, #32]
 800575a:	b11b      	cbz	r3, 8005764 <__sinit+0x14>
 800575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005760:	f7ff bff0 	b.w	8005744 <__sfp_lock_release>
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <__sinit+0x28>)
 8005766:	6223      	str	r3, [r4, #32]
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <__sinit+0x2c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f5      	bne.n	800575c <__sinit+0xc>
 8005770:	f7ff ffc4 	bl	80056fc <global_stdio_init.part.0>
 8005774:	e7f2      	b.n	800575c <__sinit+0xc>
 8005776:	bf00      	nop
 8005778:	080056bd 	.word	0x080056bd
 800577c:	200004c4 	.word	0x200004c4

08005780 <_fwalk_sglue>:
 8005780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005784:	4607      	mov	r7, r0
 8005786:	4688      	mov	r8, r1
 8005788:	4614      	mov	r4, r2
 800578a:	2600      	movs	r6, #0
 800578c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005790:	f1b9 0901 	subs.w	r9, r9, #1
 8005794:	d505      	bpl.n	80057a2 <_fwalk_sglue+0x22>
 8005796:	6824      	ldr	r4, [r4, #0]
 8005798:	2c00      	cmp	r4, #0
 800579a:	d1f7      	bne.n	800578c <_fwalk_sglue+0xc>
 800579c:	4630      	mov	r0, r6
 800579e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a2:	89ab      	ldrh	r3, [r5, #12]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d907      	bls.n	80057b8 <_fwalk_sglue+0x38>
 80057a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057ac:	3301      	adds	r3, #1
 80057ae:	d003      	beq.n	80057b8 <_fwalk_sglue+0x38>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4638      	mov	r0, r7
 80057b4:	47c0      	blx	r8
 80057b6:	4306      	orrs	r6, r0
 80057b8:	3568      	adds	r5, #104	; 0x68
 80057ba:	e7e9      	b.n	8005790 <_fwalk_sglue+0x10>

080057bc <iprintf>:
 80057bc:	b40f      	push	{r0, r1, r2, r3}
 80057be:	b507      	push	{r0, r1, r2, lr}
 80057c0:	4906      	ldr	r1, [pc, #24]	; (80057dc <iprintf+0x20>)
 80057c2:	ab04      	add	r3, sp, #16
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ca:	6881      	ldr	r1, [r0, #8]
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	f000 f9e7 	bl	8005ba0 <_vfiprintf_r>
 80057d2:	b003      	add	sp, #12
 80057d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d8:	b004      	add	sp, #16
 80057da:	4770      	bx	lr
 80057dc:	20000064 	.word	0x20000064

080057e0 <__sread>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	f000 f868 	bl	80058bc <_read_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	bfab      	itete	ge
 80057f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057f2:	89a3      	ldrhlt	r3, [r4, #12]
 80057f4:	181b      	addge	r3, r3, r0
 80057f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057fa:	bfac      	ite	ge
 80057fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80057fe:	81a3      	strhlt	r3, [r4, #12]
 8005800:	bd10      	pop	{r4, pc}

08005802 <__swrite>:
 8005802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	461f      	mov	r7, r3
 8005808:	898b      	ldrh	r3, [r1, #12]
 800580a:	05db      	lsls	r3, r3, #23
 800580c:	4605      	mov	r5, r0
 800580e:	460c      	mov	r4, r1
 8005810:	4616      	mov	r6, r2
 8005812:	d505      	bpl.n	8005820 <__swrite+0x1e>
 8005814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005818:	2302      	movs	r3, #2
 800581a:	2200      	movs	r2, #0
 800581c:	f000 f83c 	bl	8005898 <_lseek_r>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	4632      	mov	r2, r6
 800582e:	463b      	mov	r3, r7
 8005830:	4628      	mov	r0, r5
 8005832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	f000 b853 	b.w	80058e0 <_write_r>

0800583a <__sseek>:
 800583a:	b510      	push	{r4, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005842:	f000 f829 	bl	8005898 <_lseek_r>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	bf15      	itete	ne
 800584c:	6560      	strne	r0, [r4, #84]	; 0x54
 800584e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005856:	81a3      	strheq	r3, [r4, #12]
 8005858:	bf18      	it	ne
 800585a:	81a3      	strhne	r3, [r4, #12]
 800585c:	bd10      	pop	{r4, pc}

0800585e <__sclose>:
 800585e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005862:	f000 b809 	b.w	8005878 <_close_r>

08005866 <memset>:
 8005866:	4402      	add	r2, r0
 8005868:	4603      	mov	r3, r0
 800586a:	4293      	cmp	r3, r2
 800586c:	d100      	bne.n	8005870 <memset+0xa>
 800586e:	4770      	bx	lr
 8005870:	f803 1b01 	strb.w	r1, [r3], #1
 8005874:	e7f9      	b.n	800586a <memset+0x4>
	...

08005878 <_close_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d06      	ldr	r5, [pc, #24]	; (8005894 <_close_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fb fda1 	bl	80013ca <_close>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_close_r+0x1a>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_close_r+0x1a>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	200004c8 	.word	0x200004c8

08005898 <_lseek_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4d07      	ldr	r5, [pc, #28]	; (80058b8 <_lseek_r+0x20>)
 800589c:	4604      	mov	r4, r0
 800589e:	4608      	mov	r0, r1
 80058a0:	4611      	mov	r1, r2
 80058a2:	2200      	movs	r2, #0
 80058a4:	602a      	str	r2, [r5, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f7fb fdb6 	bl	8001418 <_lseek>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_lseek_r+0x1e>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_lseek_r+0x1e>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	200004c8 	.word	0x200004c8

080058bc <_read_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	; (80058dc <_read_r+0x20>)
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fb fd44 	bl	8001358 <_read>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_read_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_read_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	200004c8 	.word	0x200004c8

080058e0 <_write_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	; (8005900 <_write_r+0x20>)
 80058e4:	4604      	mov	r4, r0
 80058e6:	4608      	mov	r0, r1
 80058e8:	4611      	mov	r1, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fb fd4f 	bl	8001392 <_write>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_write_r+0x1e>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_write_r+0x1e>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200004c8 	.word	0x200004c8

08005904 <__errno>:
 8005904:	4b01      	ldr	r3, [pc, #4]	; (800590c <__errno+0x8>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000064 	.word	0x20000064

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4d0d      	ldr	r5, [pc, #52]	; (8005948 <__libc_init_array+0x38>)
 8005914:	4c0d      	ldr	r4, [pc, #52]	; (800594c <__libc_init_array+0x3c>)
 8005916:	1b64      	subs	r4, r4, r5
 8005918:	10a4      	asrs	r4, r4, #2
 800591a:	2600      	movs	r6, #0
 800591c:	42a6      	cmp	r6, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	4d0b      	ldr	r5, [pc, #44]	; (8005950 <__libc_init_array+0x40>)
 8005922:	4c0c      	ldr	r4, [pc, #48]	; (8005954 <__libc_init_array+0x44>)
 8005924:	f000 fdbe 	bl	80064a4 <_init>
 8005928:	1b64      	subs	r4, r4, r5
 800592a:	10a4      	asrs	r4, r4, #2
 800592c:	2600      	movs	r6, #0
 800592e:	42a6      	cmp	r6, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	f855 3b04 	ldr.w	r3, [r5], #4
 8005938:	4798      	blx	r3
 800593a:	3601      	adds	r6, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005942:	4798      	blx	r3
 8005944:	3601      	adds	r6, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	080065a8 	.word	0x080065a8
 800594c:	080065a8 	.word	0x080065a8
 8005950:	080065a8 	.word	0x080065a8
 8005954:	080065ac 	.word	0x080065ac

08005958 <__retarget_lock_acquire_recursive>:
 8005958:	4770      	bx	lr

0800595a <__retarget_lock_release_recursive>:
 800595a:	4770      	bx	lr

0800595c <_free_r>:
 800595c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800595e:	2900      	cmp	r1, #0
 8005960:	d044      	beq.n	80059ec <_free_r+0x90>
 8005962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005966:	9001      	str	r0, [sp, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f1a1 0404 	sub.w	r4, r1, #4
 800596e:	bfb8      	it	lt
 8005970:	18e4      	addlt	r4, r4, r3
 8005972:	f000 f8df 	bl	8005b34 <__malloc_lock>
 8005976:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <_free_r+0x94>)
 8005978:	9801      	ldr	r0, [sp, #4]
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	b933      	cbnz	r3, 800598c <_free_r+0x30>
 800597e:	6063      	str	r3, [r4, #4]
 8005980:	6014      	str	r4, [r2, #0]
 8005982:	b003      	add	sp, #12
 8005984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005988:	f000 b8da 	b.w	8005b40 <__malloc_unlock>
 800598c:	42a3      	cmp	r3, r4
 800598e:	d908      	bls.n	80059a2 <_free_r+0x46>
 8005990:	6825      	ldr	r5, [r4, #0]
 8005992:	1961      	adds	r1, r4, r5
 8005994:	428b      	cmp	r3, r1
 8005996:	bf01      	itttt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	1949      	addeq	r1, r1, r5
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	e7ed      	b.n	800597e <_free_r+0x22>
 80059a2:	461a      	mov	r2, r3
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b10b      	cbz	r3, 80059ac <_free_r+0x50>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d9fa      	bls.n	80059a2 <_free_r+0x46>
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	1855      	adds	r5, r2, r1
 80059b0:	42a5      	cmp	r5, r4
 80059b2:	d10b      	bne.n	80059cc <_free_r+0x70>
 80059b4:	6824      	ldr	r4, [r4, #0]
 80059b6:	4421      	add	r1, r4
 80059b8:	1854      	adds	r4, r2, r1
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	6011      	str	r1, [r2, #0]
 80059be:	d1e0      	bne.n	8005982 <_free_r+0x26>
 80059c0:	681c      	ldr	r4, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	6053      	str	r3, [r2, #4]
 80059c6:	440c      	add	r4, r1
 80059c8:	6014      	str	r4, [r2, #0]
 80059ca:	e7da      	b.n	8005982 <_free_r+0x26>
 80059cc:	d902      	bls.n	80059d4 <_free_r+0x78>
 80059ce:	230c      	movs	r3, #12
 80059d0:	6003      	str	r3, [r0, #0]
 80059d2:	e7d6      	b.n	8005982 <_free_r+0x26>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf04      	itt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	bf04      	itt	eq
 80059e4:	1949      	addeq	r1, r1, r5
 80059e6:	6021      	streq	r1, [r4, #0]
 80059e8:	6054      	str	r4, [r2, #4]
 80059ea:	e7ca      	b.n	8005982 <_free_r+0x26>
 80059ec:	b003      	add	sp, #12
 80059ee:	bd30      	pop	{r4, r5, pc}
 80059f0:	200004d0 	.word	0x200004d0

080059f4 <sbrk_aligned>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4e0e      	ldr	r6, [pc, #56]	; (8005a30 <sbrk_aligned+0x3c>)
 80059f8:	460c      	mov	r4, r1
 80059fa:	6831      	ldr	r1, [r6, #0]
 80059fc:	4605      	mov	r5, r0
 80059fe:	b911      	cbnz	r1, 8005a06 <sbrk_aligned+0x12>
 8005a00:	f000 fcbc 	bl	800637c <_sbrk_r>
 8005a04:	6030      	str	r0, [r6, #0]
 8005a06:	4621      	mov	r1, r4
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 fcb7 	bl	800637c <_sbrk_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d00a      	beq.n	8005a28 <sbrk_aligned+0x34>
 8005a12:	1cc4      	adds	r4, r0, #3
 8005a14:	f024 0403 	bic.w	r4, r4, #3
 8005a18:	42a0      	cmp	r0, r4
 8005a1a:	d007      	beq.n	8005a2c <sbrk_aligned+0x38>
 8005a1c:	1a21      	subs	r1, r4, r0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 fcac 	bl	800637c <_sbrk_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d101      	bne.n	8005a2c <sbrk_aligned+0x38>
 8005a28:	f04f 34ff 	mov.w	r4, #4294967295
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	200004d4 	.word	0x200004d4

08005a34 <_malloc_r>:
 8005a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a38:	1ccd      	adds	r5, r1, #3
 8005a3a:	f025 0503 	bic.w	r5, r5, #3
 8005a3e:	3508      	adds	r5, #8
 8005a40:	2d0c      	cmp	r5, #12
 8005a42:	bf38      	it	cc
 8005a44:	250c      	movcc	r5, #12
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	4607      	mov	r7, r0
 8005a4a:	db01      	blt.n	8005a50 <_malloc_r+0x1c>
 8005a4c:	42a9      	cmp	r1, r5
 8005a4e:	d905      	bls.n	8005a5c <_malloc_r+0x28>
 8005a50:	230c      	movs	r3, #12
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	2600      	movs	r6, #0
 8005a56:	4630      	mov	r0, r6
 8005a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b30 <_malloc_r+0xfc>
 8005a60:	f000 f868 	bl	8005b34 <__malloc_lock>
 8005a64:	f8d8 3000 	ldr.w	r3, [r8]
 8005a68:	461c      	mov	r4, r3
 8005a6a:	bb5c      	cbnz	r4, 8005ac4 <_malloc_r+0x90>
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f7ff ffc0 	bl	80059f4 <sbrk_aligned>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	4604      	mov	r4, r0
 8005a78:	d155      	bne.n	8005b26 <_malloc_r+0xf2>
 8005a7a:	f8d8 4000 	ldr.w	r4, [r8]
 8005a7e:	4626      	mov	r6, r4
 8005a80:	2e00      	cmp	r6, #0
 8005a82:	d145      	bne.n	8005b10 <_malloc_r+0xdc>
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	d048      	beq.n	8005b1a <_malloc_r+0xe6>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	eb04 0903 	add.w	r9, r4, r3
 8005a92:	f000 fc73 	bl	800637c <_sbrk_r>
 8005a96:	4581      	cmp	r9, r0
 8005a98:	d13f      	bne.n	8005b1a <_malloc_r+0xe6>
 8005a9a:	6821      	ldr	r1, [r4, #0]
 8005a9c:	1a6d      	subs	r5, r5, r1
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f7ff ffa7 	bl	80059f4 <sbrk_aligned>
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d037      	beq.n	8005b1a <_malloc_r+0xe6>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	442b      	add	r3, r5
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d038      	beq.n	8005b2a <_malloc_r+0xf6>
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	42a2      	cmp	r2, r4
 8005abc:	d12b      	bne.n	8005b16 <_malloc_r+0xe2>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	e00f      	b.n	8005ae4 <_malloc_r+0xb0>
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	1b52      	subs	r2, r2, r5
 8005ac8:	d41f      	bmi.n	8005b0a <_malloc_r+0xd6>
 8005aca:	2a0b      	cmp	r2, #11
 8005acc:	d917      	bls.n	8005afe <_malloc_r+0xca>
 8005ace:	1961      	adds	r1, r4, r5
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	6025      	str	r5, [r4, #0]
 8005ad4:	bf18      	it	ne
 8005ad6:	6059      	strne	r1, [r3, #4]
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	bf08      	it	eq
 8005adc:	f8c8 1000 	streq.w	r1, [r8]
 8005ae0:	5162      	str	r2, [r4, r5]
 8005ae2:	604b      	str	r3, [r1, #4]
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f104 060b 	add.w	r6, r4, #11
 8005aea:	f000 f829 	bl	8005b40 <__malloc_unlock>
 8005aee:	f026 0607 	bic.w	r6, r6, #7
 8005af2:	1d23      	adds	r3, r4, #4
 8005af4:	1af2      	subs	r2, r6, r3
 8005af6:	d0ae      	beq.n	8005a56 <_malloc_r+0x22>
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	50a3      	str	r3, [r4, r2]
 8005afc:	e7ab      	b.n	8005a56 <_malloc_r+0x22>
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	6862      	ldr	r2, [r4, #4]
 8005b02:	d1dd      	bne.n	8005ac0 <_malloc_r+0x8c>
 8005b04:	f8c8 2000 	str.w	r2, [r8]
 8005b08:	e7ec      	b.n	8005ae4 <_malloc_r+0xb0>
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	6864      	ldr	r4, [r4, #4]
 8005b0e:	e7ac      	b.n	8005a6a <_malloc_r+0x36>
 8005b10:	4634      	mov	r4, r6
 8005b12:	6876      	ldr	r6, [r6, #4]
 8005b14:	e7b4      	b.n	8005a80 <_malloc_r+0x4c>
 8005b16:	4613      	mov	r3, r2
 8005b18:	e7cc      	b.n	8005ab4 <_malloc_r+0x80>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f000 f80e 	bl	8005b40 <__malloc_unlock>
 8005b24:	e797      	b.n	8005a56 <_malloc_r+0x22>
 8005b26:	6025      	str	r5, [r4, #0]
 8005b28:	e7dc      	b.n	8005ae4 <_malloc_r+0xb0>
 8005b2a:	605b      	str	r3, [r3, #4]
 8005b2c:	deff      	udf	#255	; 0xff
 8005b2e:	bf00      	nop
 8005b30:	200004d0 	.word	0x200004d0

08005b34 <__malloc_lock>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__malloc_lock+0x8>)
 8005b36:	f7ff bf0f 	b.w	8005958 <__retarget_lock_acquire_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	200004cc 	.word	0x200004cc

08005b40 <__malloc_unlock>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__malloc_unlock+0x8>)
 8005b42:	f7ff bf0a 	b.w	800595a <__retarget_lock_release_recursive>
 8005b46:	bf00      	nop
 8005b48:	200004cc 	.word	0x200004cc

08005b4c <__sfputc_r>:
 8005b4c:	6893      	ldr	r3, [r2, #8]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	b410      	push	{r4}
 8005b54:	6093      	str	r3, [r2, #8]
 8005b56:	da08      	bge.n	8005b6a <__sfputc_r+0x1e>
 8005b58:	6994      	ldr	r4, [r2, #24]
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	db01      	blt.n	8005b62 <__sfputc_r+0x16>
 8005b5e:	290a      	cmp	r1, #10
 8005b60:	d103      	bne.n	8005b6a <__sfputc_r+0x1e>
 8005b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b66:	f000 bb73 	b.w	8006250 <__swbuf_r>
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	1c58      	adds	r0, r3, #1
 8005b6e:	6010      	str	r0, [r2, #0]
 8005b70:	7019      	strb	r1, [r3, #0]
 8005b72:	4608      	mov	r0, r1
 8005b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <__sfputs_r>:
 8005b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	460f      	mov	r7, r1
 8005b80:	4614      	mov	r4, r2
 8005b82:	18d5      	adds	r5, r2, r3
 8005b84:	42ac      	cmp	r4, r5
 8005b86:	d101      	bne.n	8005b8c <__sfputs_r+0x12>
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e007      	b.n	8005b9c <__sfputs_r+0x22>
 8005b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b90:	463a      	mov	r2, r7
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff ffda 	bl	8005b4c <__sfputc_r>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d1f3      	bne.n	8005b84 <__sfputs_r+0xa>
 8005b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ba0 <_vfiprintf_r>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	b09d      	sub	sp, #116	; 0x74
 8005ba8:	4614      	mov	r4, r2
 8005baa:	4698      	mov	r8, r3
 8005bac:	4606      	mov	r6, r0
 8005bae:	b118      	cbz	r0, 8005bb8 <_vfiprintf_r+0x18>
 8005bb0:	6a03      	ldr	r3, [r0, #32]
 8005bb2:	b90b      	cbnz	r3, 8005bb8 <_vfiprintf_r+0x18>
 8005bb4:	f7ff fdcc 	bl	8005750 <__sinit>
 8005bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bba:	07d9      	lsls	r1, r3, #31
 8005bbc:	d405      	bmi.n	8005bca <_vfiprintf_r+0x2a>
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_vfiprintf_r+0x2a>
 8005bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bc6:	f7ff fec7 	bl	8005958 <__retarget_lock_acquire_recursive>
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	071b      	lsls	r3, r3, #28
 8005bce:	d501      	bpl.n	8005bd4 <_vfiprintf_r+0x34>
 8005bd0:	692b      	ldr	r3, [r5, #16]
 8005bd2:	b99b      	cbnz	r3, 8005bfc <_vfiprintf_r+0x5c>
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f000 fb78 	bl	80062cc <__swsetup_r>
 8005bdc:	b170      	cbz	r0, 8005bfc <_vfiprintf_r+0x5c>
 8005bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be0:	07dc      	lsls	r4, r3, #31
 8005be2:	d504      	bpl.n	8005bee <_vfiprintf_r+0x4e>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	b01d      	add	sp, #116	; 0x74
 8005bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	0598      	lsls	r0, r3, #22
 8005bf2:	d4f7      	bmi.n	8005be4 <_vfiprintf_r+0x44>
 8005bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf6:	f7ff feb0 	bl	800595a <__retarget_lock_release_recursive>
 8005bfa:	e7f3      	b.n	8005be4 <_vfiprintf_r+0x44>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005c00:	2320      	movs	r3, #32
 8005c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c0a:	2330      	movs	r3, #48	; 0x30
 8005c0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005dc0 <_vfiprintf_r+0x220>
 8005c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c14:	f04f 0901 	mov.w	r9, #1
 8005c18:	4623      	mov	r3, r4
 8005c1a:	469a      	mov	sl, r3
 8005c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c20:	b10a      	cbz	r2, 8005c26 <_vfiprintf_r+0x86>
 8005c22:	2a25      	cmp	r2, #37	; 0x25
 8005c24:	d1f9      	bne.n	8005c1a <_vfiprintf_r+0x7a>
 8005c26:	ebba 0b04 	subs.w	fp, sl, r4
 8005c2a:	d00b      	beq.n	8005c44 <_vfiprintf_r+0xa4>
 8005c2c:	465b      	mov	r3, fp
 8005c2e:	4622      	mov	r2, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff ffa1 	bl	8005b7a <__sfputs_r>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f000 80a9 	beq.w	8005d90 <_vfiprintf_r+0x1f0>
 8005c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c40:	445a      	add	r2, fp
 8005c42:	9209      	str	r2, [sp, #36]	; 0x24
 8005c44:	f89a 3000 	ldrb.w	r3, [sl]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80a1 	beq.w	8005d90 <_vfiprintf_r+0x1f0>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f04f 32ff 	mov.w	r2, #4294967295
 8005c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c58:	f10a 0a01 	add.w	sl, sl, #1
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	9307      	str	r3, [sp, #28]
 8005c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c64:	931a      	str	r3, [sp, #104]	; 0x68
 8005c66:	4654      	mov	r4, sl
 8005c68:	2205      	movs	r2, #5
 8005c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6e:	4854      	ldr	r0, [pc, #336]	; (8005dc0 <_vfiprintf_r+0x220>)
 8005c70:	f7fa faae 	bl	80001d0 <memchr>
 8005c74:	9a04      	ldr	r2, [sp, #16]
 8005c76:	b9d8      	cbnz	r0, 8005cb0 <_vfiprintf_r+0x110>
 8005c78:	06d1      	lsls	r1, r2, #27
 8005c7a:	bf44      	itt	mi
 8005c7c:	2320      	movmi	r3, #32
 8005c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c82:	0713      	lsls	r3, r2, #28
 8005c84:	bf44      	itt	mi
 8005c86:	232b      	movmi	r3, #43	; 0x2b
 8005c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c90:	2b2a      	cmp	r3, #42	; 0x2a
 8005c92:	d015      	beq.n	8005cc0 <_vfiprintf_r+0x120>
 8005c94:	9a07      	ldr	r2, [sp, #28]
 8005c96:	4654      	mov	r4, sl
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f04f 0c0a 	mov.w	ip, #10
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca4:	3b30      	subs	r3, #48	; 0x30
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d94d      	bls.n	8005d46 <_vfiprintf_r+0x1a6>
 8005caa:	b1b0      	cbz	r0, 8005cda <_vfiprintf_r+0x13a>
 8005cac:	9207      	str	r2, [sp, #28]
 8005cae:	e014      	b.n	8005cda <_vfiprintf_r+0x13a>
 8005cb0:	eba0 0308 	sub.w	r3, r0, r8
 8005cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	46a2      	mov	sl, r4
 8005cbe:	e7d2      	b.n	8005c66 <_vfiprintf_r+0xc6>
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	1d19      	adds	r1, r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	9103      	str	r1, [sp, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfbb      	ittet	lt
 8005ccc:	425b      	neglt	r3, r3
 8005cce:	f042 0202 	orrlt.w	r2, r2, #2
 8005cd2:	9307      	strge	r3, [sp, #28]
 8005cd4:	9307      	strlt	r3, [sp, #28]
 8005cd6:	bfb8      	it	lt
 8005cd8:	9204      	strlt	r2, [sp, #16]
 8005cda:	7823      	ldrb	r3, [r4, #0]
 8005cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8005cde:	d10c      	bne.n	8005cfa <_vfiprintf_r+0x15a>
 8005ce0:	7863      	ldrb	r3, [r4, #1]
 8005ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce4:	d134      	bne.n	8005d50 <_vfiprintf_r+0x1b0>
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	1d1a      	adds	r2, r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	9203      	str	r2, [sp, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bfb8      	it	lt
 8005cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cf6:	3402      	adds	r4, #2
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005dd0 <_vfiprintf_r+0x230>
 8005cfe:	7821      	ldrb	r1, [r4, #0]
 8005d00:	2203      	movs	r2, #3
 8005d02:	4650      	mov	r0, sl
 8005d04:	f7fa fa64 	bl	80001d0 <memchr>
 8005d08:	b138      	cbz	r0, 8005d1a <_vfiprintf_r+0x17a>
 8005d0a:	9b04      	ldr	r3, [sp, #16]
 8005d0c:	eba0 000a 	sub.w	r0, r0, sl
 8005d10:	2240      	movs	r2, #64	; 0x40
 8005d12:	4082      	lsls	r2, r0
 8005d14:	4313      	orrs	r3, r2
 8005d16:	3401      	adds	r4, #1
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1e:	4829      	ldr	r0, [pc, #164]	; (8005dc4 <_vfiprintf_r+0x224>)
 8005d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d24:	2206      	movs	r2, #6
 8005d26:	f7fa fa53 	bl	80001d0 <memchr>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d03f      	beq.n	8005dae <_vfiprintf_r+0x20e>
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <_vfiprintf_r+0x228>)
 8005d30:	bb1b      	cbnz	r3, 8005d7a <_vfiprintf_r+0x1da>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	3307      	adds	r3, #7
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	443b      	add	r3, r7
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	e768      	b.n	8005c18 <_vfiprintf_r+0x78>
 8005d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	e7a6      	b.n	8005c9e <_vfiprintf_r+0xfe>
 8005d50:	2300      	movs	r3, #0
 8005d52:	3401      	adds	r4, #1
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	4619      	mov	r1, r3
 8005d58:	f04f 0c0a 	mov.w	ip, #10
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d62:	3a30      	subs	r2, #48	; 0x30
 8005d64:	2a09      	cmp	r2, #9
 8005d66:	d903      	bls.n	8005d70 <_vfiprintf_r+0x1d0>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0c6      	beq.n	8005cfa <_vfiprintf_r+0x15a>
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	e7c4      	b.n	8005cfa <_vfiprintf_r+0x15a>
 8005d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d74:	4604      	mov	r4, r0
 8005d76:	2301      	movs	r3, #1
 8005d78:	e7f0      	b.n	8005d5c <_vfiprintf_r+0x1bc>
 8005d7a:	ab03      	add	r3, sp, #12
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	462a      	mov	r2, r5
 8005d80:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <_vfiprintf_r+0x22c>)
 8005d82:	a904      	add	r1, sp, #16
 8005d84:	4630      	mov	r0, r6
 8005d86:	f3af 8000 	nop.w
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	1c78      	adds	r0, r7, #1
 8005d8e:	d1d6      	bne.n	8005d3e <_vfiprintf_r+0x19e>
 8005d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <_vfiprintf_r+0x202>
 8005d96:	89ab      	ldrh	r3, [r5, #12]
 8005d98:	059a      	lsls	r2, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_vfiprintf_r+0x202>
 8005d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d9e:	f7ff fddc 	bl	800595a <__retarget_lock_release_recursive>
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	065b      	lsls	r3, r3, #25
 8005da6:	f53f af1d 	bmi.w	8005be4 <_vfiprintf_r+0x44>
 8005daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dac:	e71c      	b.n	8005be8 <_vfiprintf_r+0x48>
 8005dae:	ab03      	add	r3, sp, #12
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	462a      	mov	r2, r5
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <_vfiprintf_r+0x22c>)
 8005db6:	a904      	add	r1, sp, #16
 8005db8:	4630      	mov	r0, r6
 8005dba:	f000 f879 	bl	8005eb0 <_printf_i>
 8005dbe:	e7e4      	b.n	8005d8a <_vfiprintf_r+0x1ea>
 8005dc0:	0800656c 	.word	0x0800656c
 8005dc4:	08006576 	.word	0x08006576
 8005dc8:	00000000 	.word	0x00000000
 8005dcc:	08005b7b 	.word	0x08005b7b
 8005dd0:	08006572 	.word	0x08006572

08005dd4 <_printf_common>:
 8005dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	4616      	mov	r6, r2
 8005dda:	4699      	mov	r9, r3
 8005ddc:	688a      	ldr	r2, [r1, #8]
 8005dde:	690b      	ldr	r3, [r1, #16]
 8005de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005de4:	4293      	cmp	r3, r2
 8005de6:	bfb8      	it	lt
 8005de8:	4613      	movlt	r3, r2
 8005dea:	6033      	str	r3, [r6, #0]
 8005dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df0:	4607      	mov	r7, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	b10a      	cbz	r2, 8005dfa <_printf_common+0x26>
 8005df6:	3301      	adds	r3, #1
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	0699      	lsls	r1, r3, #26
 8005dfe:	bf42      	ittt	mi
 8005e00:	6833      	ldrmi	r3, [r6, #0]
 8005e02:	3302      	addmi	r3, #2
 8005e04:	6033      	strmi	r3, [r6, #0]
 8005e06:	6825      	ldr	r5, [r4, #0]
 8005e08:	f015 0506 	ands.w	r5, r5, #6
 8005e0c:	d106      	bne.n	8005e1c <_printf_common+0x48>
 8005e0e:	f104 0a19 	add.w	sl, r4, #25
 8005e12:	68e3      	ldr	r3, [r4, #12]
 8005e14:	6832      	ldr	r2, [r6, #0]
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	dc26      	bgt.n	8005e6a <_printf_common+0x96>
 8005e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e20:	1e13      	subs	r3, r2, #0
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	bf18      	it	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	0692      	lsls	r2, r2, #26
 8005e2a:	d42b      	bmi.n	8005e84 <_printf_common+0xb0>
 8005e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e30:	4649      	mov	r1, r9
 8005e32:	4638      	mov	r0, r7
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d01e      	beq.n	8005e78 <_printf_common+0xa4>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	6922      	ldr	r2, [r4, #16]
 8005e3e:	f003 0306 	and.w	r3, r3, #6
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	bf02      	ittt	eq
 8005e46:	68e5      	ldreq	r5, [r4, #12]
 8005e48:	6833      	ldreq	r3, [r6, #0]
 8005e4a:	1aed      	subeq	r5, r5, r3
 8005e4c:	68a3      	ldr	r3, [r4, #8]
 8005e4e:	bf0c      	ite	eq
 8005e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e54:	2500      	movne	r5, #0
 8005e56:	4293      	cmp	r3, r2
 8005e58:	bfc4      	itt	gt
 8005e5a:	1a9b      	subgt	r3, r3, r2
 8005e5c:	18ed      	addgt	r5, r5, r3
 8005e5e:	2600      	movs	r6, #0
 8005e60:	341a      	adds	r4, #26
 8005e62:	42b5      	cmp	r5, r6
 8005e64:	d11a      	bne.n	8005e9c <_printf_common+0xc8>
 8005e66:	2000      	movs	r0, #0
 8005e68:	e008      	b.n	8005e7c <_printf_common+0xa8>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4652      	mov	r2, sl
 8005e6e:	4649      	mov	r1, r9
 8005e70:	4638      	mov	r0, r7
 8005e72:	47c0      	blx	r8
 8005e74:	3001      	adds	r0, #1
 8005e76:	d103      	bne.n	8005e80 <_printf_common+0xac>
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e80:	3501      	adds	r5, #1
 8005e82:	e7c6      	b.n	8005e12 <_printf_common+0x3e>
 8005e84:	18e1      	adds	r1, r4, r3
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	2030      	movs	r0, #48	; 0x30
 8005e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e8e:	4422      	add	r2, r4
 8005e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e98:	3302      	adds	r3, #2
 8005e9a:	e7c7      	b.n	8005e2c <_printf_common+0x58>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d0e6      	beq.n	8005e78 <_printf_common+0xa4>
 8005eaa:	3601      	adds	r6, #1
 8005eac:	e7d9      	b.n	8005e62 <_printf_common+0x8e>
	...

08005eb0 <_printf_i>:
 8005eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	7e0f      	ldrb	r7, [r1, #24]
 8005eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eb8:	2f78      	cmp	r7, #120	; 0x78
 8005eba:	4691      	mov	r9, r2
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	469a      	mov	sl, r3
 8005ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ec6:	d807      	bhi.n	8005ed8 <_printf_i+0x28>
 8005ec8:	2f62      	cmp	r7, #98	; 0x62
 8005eca:	d80a      	bhi.n	8005ee2 <_printf_i+0x32>
 8005ecc:	2f00      	cmp	r7, #0
 8005ece:	f000 80d4 	beq.w	800607a <_printf_i+0x1ca>
 8005ed2:	2f58      	cmp	r7, #88	; 0x58
 8005ed4:	f000 80c0 	beq.w	8006058 <_printf_i+0x1a8>
 8005ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee0:	e03a      	b.n	8005f58 <_printf_i+0xa8>
 8005ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ee6:	2b15      	cmp	r3, #21
 8005ee8:	d8f6      	bhi.n	8005ed8 <_printf_i+0x28>
 8005eea:	a101      	add	r1, pc, #4	; (adr r1, 8005ef0 <_printf_i+0x40>)
 8005eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f5d 	.word	0x08005f5d
 8005ef8:	08005ed9 	.word	0x08005ed9
 8005efc:	08005ed9 	.word	0x08005ed9
 8005f00:	08005ed9 	.word	0x08005ed9
 8005f04:	08005ed9 	.word	0x08005ed9
 8005f08:	08005f5d 	.word	0x08005f5d
 8005f0c:	08005ed9 	.word	0x08005ed9
 8005f10:	08005ed9 	.word	0x08005ed9
 8005f14:	08005ed9 	.word	0x08005ed9
 8005f18:	08005ed9 	.word	0x08005ed9
 8005f1c:	08006061 	.word	0x08006061
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	0800601b 	.word	0x0800601b
 8005f28:	08005ed9 	.word	0x08005ed9
 8005f2c:	08005ed9 	.word	0x08005ed9
 8005f30:	08006083 	.word	0x08006083
 8005f34:	08005ed9 	.word	0x08005ed9
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005ed9 	.word	0x08005ed9
 8005f40:	08005ed9 	.word	0x08005ed9
 8005f44:	08006023 	.word	0x08006023
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	602a      	str	r2, [r5, #0]
 8005f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e09f      	b.n	800609c <_printf_i+0x1ec>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	682b      	ldr	r3, [r5, #0]
 8005f60:	0607      	lsls	r7, r0, #24
 8005f62:	f103 0104 	add.w	r1, r3, #4
 8005f66:	6029      	str	r1, [r5, #0]
 8005f68:	d501      	bpl.n	8005f6e <_printf_i+0xbe>
 8005f6a:	681e      	ldr	r6, [r3, #0]
 8005f6c:	e003      	b.n	8005f76 <_printf_i+0xc6>
 8005f6e:	0646      	lsls	r6, r0, #25
 8005f70:	d5fb      	bpl.n	8005f6a <_printf_i+0xba>
 8005f72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	da03      	bge.n	8005f82 <_printf_i+0xd2>
 8005f7a:	232d      	movs	r3, #45	; 0x2d
 8005f7c:	4276      	negs	r6, r6
 8005f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f82:	485a      	ldr	r0, [pc, #360]	; (80060ec <_printf_i+0x23c>)
 8005f84:	230a      	movs	r3, #10
 8005f86:	e012      	b.n	8005fae <_printf_i+0xfe>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	6820      	ldr	r0, [r4, #0]
 8005f8c:	1d19      	adds	r1, r3, #4
 8005f8e:	6029      	str	r1, [r5, #0]
 8005f90:	0605      	lsls	r5, r0, #24
 8005f92:	d501      	bpl.n	8005f98 <_printf_i+0xe8>
 8005f94:	681e      	ldr	r6, [r3, #0]
 8005f96:	e002      	b.n	8005f9e <_printf_i+0xee>
 8005f98:	0641      	lsls	r1, r0, #25
 8005f9a:	d5fb      	bpl.n	8005f94 <_printf_i+0xe4>
 8005f9c:	881e      	ldrh	r6, [r3, #0]
 8005f9e:	4853      	ldr	r0, [pc, #332]	; (80060ec <_printf_i+0x23c>)
 8005fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2308      	moveq	r3, #8
 8005fa6:	230a      	movne	r3, #10
 8005fa8:	2100      	movs	r1, #0
 8005faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fae:	6865      	ldr	r5, [r4, #4]
 8005fb0:	60a5      	str	r5, [r4, #8]
 8005fb2:	2d00      	cmp	r5, #0
 8005fb4:	bfa2      	ittt	ge
 8005fb6:	6821      	ldrge	r1, [r4, #0]
 8005fb8:	f021 0104 	bicge.w	r1, r1, #4
 8005fbc:	6021      	strge	r1, [r4, #0]
 8005fbe:	b90e      	cbnz	r6, 8005fc4 <_printf_i+0x114>
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	d04b      	beq.n	800605c <_printf_i+0x1ac>
 8005fc4:	4615      	mov	r5, r2
 8005fc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fca:	fb03 6711 	mls	r7, r3, r1, r6
 8005fce:	5dc7      	ldrb	r7, [r0, r7]
 8005fd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fd4:	4637      	mov	r7, r6
 8005fd6:	42bb      	cmp	r3, r7
 8005fd8:	460e      	mov	r6, r1
 8005fda:	d9f4      	bls.n	8005fc6 <_printf_i+0x116>
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d10b      	bne.n	8005ff8 <_printf_i+0x148>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	07de      	lsls	r6, r3, #31
 8005fe4:	d508      	bpl.n	8005ff8 <_printf_i+0x148>
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	6861      	ldr	r1, [r4, #4]
 8005fea:	4299      	cmp	r1, r3
 8005fec:	bfde      	ittt	le
 8005fee:	2330      	movle	r3, #48	; 0x30
 8005ff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ff8:	1b52      	subs	r2, r2, r5
 8005ffa:	6122      	str	r2, [r4, #16]
 8005ffc:	f8cd a000 	str.w	sl, [sp]
 8006000:	464b      	mov	r3, r9
 8006002:	aa03      	add	r2, sp, #12
 8006004:	4621      	mov	r1, r4
 8006006:	4640      	mov	r0, r8
 8006008:	f7ff fee4 	bl	8005dd4 <_printf_common>
 800600c:	3001      	adds	r0, #1
 800600e:	d14a      	bne.n	80060a6 <_printf_i+0x1f6>
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	b004      	add	sp, #16
 8006016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	f043 0320 	orr.w	r3, r3, #32
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	4833      	ldr	r0, [pc, #204]	; (80060f0 <_printf_i+0x240>)
 8006024:	2778      	movs	r7, #120	; 0x78
 8006026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	6829      	ldr	r1, [r5, #0]
 800602e:	061f      	lsls	r7, r3, #24
 8006030:	f851 6b04 	ldr.w	r6, [r1], #4
 8006034:	d402      	bmi.n	800603c <_printf_i+0x18c>
 8006036:	065f      	lsls	r7, r3, #25
 8006038:	bf48      	it	mi
 800603a:	b2b6      	uxthmi	r6, r6
 800603c:	07df      	lsls	r7, r3, #31
 800603e:	bf48      	it	mi
 8006040:	f043 0320 	orrmi.w	r3, r3, #32
 8006044:	6029      	str	r1, [r5, #0]
 8006046:	bf48      	it	mi
 8006048:	6023      	strmi	r3, [r4, #0]
 800604a:	b91e      	cbnz	r6, 8006054 <_printf_i+0x1a4>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	f023 0320 	bic.w	r3, r3, #32
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2310      	movs	r3, #16
 8006056:	e7a7      	b.n	8005fa8 <_printf_i+0xf8>
 8006058:	4824      	ldr	r0, [pc, #144]	; (80060ec <_printf_i+0x23c>)
 800605a:	e7e4      	b.n	8006026 <_printf_i+0x176>
 800605c:	4615      	mov	r5, r2
 800605e:	e7bd      	b.n	8005fdc <_printf_i+0x12c>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	6826      	ldr	r6, [r4, #0]
 8006064:	6961      	ldr	r1, [r4, #20]
 8006066:	1d18      	adds	r0, r3, #4
 8006068:	6028      	str	r0, [r5, #0]
 800606a:	0635      	lsls	r5, r6, #24
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	d501      	bpl.n	8006074 <_printf_i+0x1c4>
 8006070:	6019      	str	r1, [r3, #0]
 8006072:	e002      	b.n	800607a <_printf_i+0x1ca>
 8006074:	0670      	lsls	r0, r6, #25
 8006076:	d5fb      	bpl.n	8006070 <_printf_i+0x1c0>
 8006078:	8019      	strh	r1, [r3, #0]
 800607a:	2300      	movs	r3, #0
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	4615      	mov	r5, r2
 8006080:	e7bc      	b.n	8005ffc <_printf_i+0x14c>
 8006082:	682b      	ldr	r3, [r5, #0]
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	602a      	str	r2, [r5, #0]
 8006088:	681d      	ldr	r5, [r3, #0]
 800608a:	6862      	ldr	r2, [r4, #4]
 800608c:	2100      	movs	r1, #0
 800608e:	4628      	mov	r0, r5
 8006090:	f7fa f89e 	bl	80001d0 <memchr>
 8006094:	b108      	cbz	r0, 800609a <_printf_i+0x1ea>
 8006096:	1b40      	subs	r0, r0, r5
 8006098:	6060      	str	r0, [r4, #4]
 800609a:	6863      	ldr	r3, [r4, #4]
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	2300      	movs	r3, #0
 80060a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a4:	e7aa      	b.n	8005ffc <_printf_i+0x14c>
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	462a      	mov	r2, r5
 80060aa:	4649      	mov	r1, r9
 80060ac:	4640      	mov	r0, r8
 80060ae:	47d0      	blx	sl
 80060b0:	3001      	adds	r0, #1
 80060b2:	d0ad      	beq.n	8006010 <_printf_i+0x160>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	079b      	lsls	r3, r3, #30
 80060b8:	d413      	bmi.n	80060e2 <_printf_i+0x232>
 80060ba:	68e0      	ldr	r0, [r4, #12]
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	4298      	cmp	r0, r3
 80060c0:	bfb8      	it	lt
 80060c2:	4618      	movlt	r0, r3
 80060c4:	e7a6      	b.n	8006014 <_printf_i+0x164>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4632      	mov	r2, r6
 80060ca:	4649      	mov	r1, r9
 80060cc:	4640      	mov	r0, r8
 80060ce:	47d0      	blx	sl
 80060d0:	3001      	adds	r0, #1
 80060d2:	d09d      	beq.n	8006010 <_printf_i+0x160>
 80060d4:	3501      	adds	r5, #1
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	9903      	ldr	r1, [sp, #12]
 80060da:	1a5b      	subs	r3, r3, r1
 80060dc:	42ab      	cmp	r3, r5
 80060de:	dcf2      	bgt.n	80060c6 <_printf_i+0x216>
 80060e0:	e7eb      	b.n	80060ba <_printf_i+0x20a>
 80060e2:	2500      	movs	r5, #0
 80060e4:	f104 0619 	add.w	r6, r4, #25
 80060e8:	e7f5      	b.n	80060d6 <_printf_i+0x226>
 80060ea:	bf00      	nop
 80060ec:	0800657d 	.word	0x0800657d
 80060f0:	0800658e 	.word	0x0800658e

080060f4 <__sflush_r>:
 80060f4:	898a      	ldrh	r2, [r1, #12]
 80060f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fa:	4605      	mov	r5, r0
 80060fc:	0710      	lsls	r0, r2, #28
 80060fe:	460c      	mov	r4, r1
 8006100:	d458      	bmi.n	80061b4 <__sflush_r+0xc0>
 8006102:	684b      	ldr	r3, [r1, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc05      	bgt.n	8006114 <__sflush_r+0x20>
 8006108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	dc02      	bgt.n	8006114 <__sflush_r+0x20>
 800610e:	2000      	movs	r0, #0
 8006110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006116:	2e00      	cmp	r6, #0
 8006118:	d0f9      	beq.n	800610e <__sflush_r+0x1a>
 800611a:	2300      	movs	r3, #0
 800611c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006120:	682f      	ldr	r7, [r5, #0]
 8006122:	6a21      	ldr	r1, [r4, #32]
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	d032      	beq.n	800618e <__sflush_r+0x9a>
 8006128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	075a      	lsls	r2, r3, #29
 800612e:	d505      	bpl.n	800613c <__sflush_r+0x48>
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	1ac0      	subs	r0, r0, r3
 8006134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006136:	b10b      	cbz	r3, 800613c <__sflush_r+0x48>
 8006138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800613a:	1ac0      	subs	r0, r0, r3
 800613c:	2300      	movs	r3, #0
 800613e:	4602      	mov	r2, r0
 8006140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006142:	6a21      	ldr	r1, [r4, #32]
 8006144:	4628      	mov	r0, r5
 8006146:	47b0      	blx	r6
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	d106      	bne.n	800615c <__sflush_r+0x68>
 800614e:	6829      	ldr	r1, [r5, #0]
 8006150:	291d      	cmp	r1, #29
 8006152:	d82b      	bhi.n	80061ac <__sflush_r+0xb8>
 8006154:	4a29      	ldr	r2, [pc, #164]	; (80061fc <__sflush_r+0x108>)
 8006156:	410a      	asrs	r2, r1
 8006158:	07d6      	lsls	r6, r2, #31
 800615a:	d427      	bmi.n	80061ac <__sflush_r+0xb8>
 800615c:	2200      	movs	r2, #0
 800615e:	6062      	str	r2, [r4, #4]
 8006160:	04d9      	lsls	r1, r3, #19
 8006162:	6922      	ldr	r2, [r4, #16]
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	d504      	bpl.n	8006172 <__sflush_r+0x7e>
 8006168:	1c42      	adds	r2, r0, #1
 800616a:	d101      	bne.n	8006170 <__sflush_r+0x7c>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b903      	cbnz	r3, 8006172 <__sflush_r+0x7e>
 8006170:	6560      	str	r0, [r4, #84]	; 0x54
 8006172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006174:	602f      	str	r7, [r5, #0]
 8006176:	2900      	cmp	r1, #0
 8006178:	d0c9      	beq.n	800610e <__sflush_r+0x1a>
 800617a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800617e:	4299      	cmp	r1, r3
 8006180:	d002      	beq.n	8006188 <__sflush_r+0x94>
 8006182:	4628      	mov	r0, r5
 8006184:	f7ff fbea 	bl	800595c <_free_r>
 8006188:	2000      	movs	r0, #0
 800618a:	6360      	str	r0, [r4, #52]	; 0x34
 800618c:	e7c0      	b.n	8006110 <__sflush_r+0x1c>
 800618e:	2301      	movs	r3, #1
 8006190:	4628      	mov	r0, r5
 8006192:	47b0      	blx	r6
 8006194:	1c41      	adds	r1, r0, #1
 8006196:	d1c8      	bne.n	800612a <__sflush_r+0x36>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0c5      	beq.n	800612a <__sflush_r+0x36>
 800619e:	2b1d      	cmp	r3, #29
 80061a0:	d001      	beq.n	80061a6 <__sflush_r+0xb2>
 80061a2:	2b16      	cmp	r3, #22
 80061a4:	d101      	bne.n	80061aa <__sflush_r+0xb6>
 80061a6:	602f      	str	r7, [r5, #0]
 80061a8:	e7b1      	b.n	800610e <__sflush_r+0x1a>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	e7ad      	b.n	8006110 <__sflush_r+0x1c>
 80061b4:	690f      	ldr	r7, [r1, #16]
 80061b6:	2f00      	cmp	r7, #0
 80061b8:	d0a9      	beq.n	800610e <__sflush_r+0x1a>
 80061ba:	0793      	lsls	r3, r2, #30
 80061bc:	680e      	ldr	r6, [r1, #0]
 80061be:	bf08      	it	eq
 80061c0:	694b      	ldreq	r3, [r1, #20]
 80061c2:	600f      	str	r7, [r1, #0]
 80061c4:	bf18      	it	ne
 80061c6:	2300      	movne	r3, #0
 80061c8:	eba6 0807 	sub.w	r8, r6, r7
 80061cc:	608b      	str	r3, [r1, #8]
 80061ce:	f1b8 0f00 	cmp.w	r8, #0
 80061d2:	dd9c      	ble.n	800610e <__sflush_r+0x1a>
 80061d4:	6a21      	ldr	r1, [r4, #32]
 80061d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061d8:	4643      	mov	r3, r8
 80061da:	463a      	mov	r2, r7
 80061dc:	4628      	mov	r0, r5
 80061de:	47b0      	blx	r6
 80061e0:	2800      	cmp	r0, #0
 80061e2:	dc06      	bgt.n	80061f2 <__sflush_r+0xfe>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ea:	81a3      	strh	r3, [r4, #12]
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	e78e      	b.n	8006110 <__sflush_r+0x1c>
 80061f2:	4407      	add	r7, r0
 80061f4:	eba8 0800 	sub.w	r8, r8, r0
 80061f8:	e7e9      	b.n	80061ce <__sflush_r+0xda>
 80061fa:	bf00      	nop
 80061fc:	dfbffffe 	.word	0xdfbffffe

08006200 <_fflush_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	4605      	mov	r5, r0
 8006206:	460c      	mov	r4, r1
 8006208:	b913      	cbnz	r3, 8006210 <_fflush_r+0x10>
 800620a:	2500      	movs	r5, #0
 800620c:	4628      	mov	r0, r5
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	b118      	cbz	r0, 800621a <_fflush_r+0x1a>
 8006212:	6a03      	ldr	r3, [r0, #32]
 8006214:	b90b      	cbnz	r3, 800621a <_fflush_r+0x1a>
 8006216:	f7ff fa9b 	bl	8005750 <__sinit>
 800621a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f3      	beq.n	800620a <_fflush_r+0xa>
 8006222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006224:	07d0      	lsls	r0, r2, #31
 8006226:	d404      	bmi.n	8006232 <_fflush_r+0x32>
 8006228:	0599      	lsls	r1, r3, #22
 800622a:	d402      	bmi.n	8006232 <_fflush_r+0x32>
 800622c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800622e:	f7ff fb93 	bl	8005958 <__retarget_lock_acquire_recursive>
 8006232:	4628      	mov	r0, r5
 8006234:	4621      	mov	r1, r4
 8006236:	f7ff ff5d 	bl	80060f4 <__sflush_r>
 800623a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800623c:	07da      	lsls	r2, r3, #31
 800623e:	4605      	mov	r5, r0
 8006240:	d4e4      	bmi.n	800620c <_fflush_r+0xc>
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	059b      	lsls	r3, r3, #22
 8006246:	d4e1      	bmi.n	800620c <_fflush_r+0xc>
 8006248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800624a:	f7ff fb86 	bl	800595a <__retarget_lock_release_recursive>
 800624e:	e7dd      	b.n	800620c <_fflush_r+0xc>

08006250 <__swbuf_r>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	460e      	mov	r6, r1
 8006254:	4614      	mov	r4, r2
 8006256:	4605      	mov	r5, r0
 8006258:	b118      	cbz	r0, 8006262 <__swbuf_r+0x12>
 800625a:	6a03      	ldr	r3, [r0, #32]
 800625c:	b90b      	cbnz	r3, 8006262 <__swbuf_r+0x12>
 800625e:	f7ff fa77 	bl	8005750 <__sinit>
 8006262:	69a3      	ldr	r3, [r4, #24]
 8006264:	60a3      	str	r3, [r4, #8]
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	071a      	lsls	r2, r3, #28
 800626a:	d525      	bpl.n	80062b8 <__swbuf_r+0x68>
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	b31b      	cbz	r3, 80062b8 <__swbuf_r+0x68>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	6922      	ldr	r2, [r4, #16]
 8006274:	1a98      	subs	r0, r3, r2
 8006276:	6963      	ldr	r3, [r4, #20]
 8006278:	b2f6      	uxtb	r6, r6
 800627a:	4283      	cmp	r3, r0
 800627c:	4637      	mov	r7, r6
 800627e:	dc04      	bgt.n	800628a <__swbuf_r+0x3a>
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	f7ff ffbc 	bl	8006200 <_fflush_r>
 8006288:	b9e0      	cbnz	r0, 80062c4 <__swbuf_r+0x74>
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	3b01      	subs	r3, #1
 800628e:	60a3      	str	r3, [r4, #8]
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	6022      	str	r2, [r4, #0]
 8006296:	701e      	strb	r6, [r3, #0]
 8006298:	6962      	ldr	r2, [r4, #20]
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	429a      	cmp	r2, r3
 800629e:	d004      	beq.n	80062aa <__swbuf_r+0x5a>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	07db      	lsls	r3, r3, #31
 80062a4:	d506      	bpl.n	80062b4 <__swbuf_r+0x64>
 80062a6:	2e0a      	cmp	r6, #10
 80062a8:	d104      	bne.n	80062b4 <__swbuf_r+0x64>
 80062aa:	4621      	mov	r1, r4
 80062ac:	4628      	mov	r0, r5
 80062ae:	f7ff ffa7 	bl	8006200 <_fflush_r>
 80062b2:	b938      	cbnz	r0, 80062c4 <__swbuf_r+0x74>
 80062b4:	4638      	mov	r0, r7
 80062b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b8:	4621      	mov	r1, r4
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f806 	bl	80062cc <__swsetup_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d0d5      	beq.n	8006270 <__swbuf_r+0x20>
 80062c4:	f04f 37ff 	mov.w	r7, #4294967295
 80062c8:	e7f4      	b.n	80062b4 <__swbuf_r+0x64>
	...

080062cc <__swsetup_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <__swsetup_r+0xac>)
 80062d0:	4605      	mov	r5, r0
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	460c      	mov	r4, r1
 80062d6:	b118      	cbz	r0, 80062e0 <__swsetup_r+0x14>
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b90b      	cbnz	r3, 80062e0 <__swsetup_r+0x14>
 80062dc:	f7ff fa38 	bl	8005750 <__sinit>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e6:	0718      	lsls	r0, r3, #28
 80062e8:	d422      	bmi.n	8006330 <__swsetup_r+0x64>
 80062ea:	06d9      	lsls	r1, r3, #27
 80062ec:	d407      	bmi.n	80062fe <__swsetup_r+0x32>
 80062ee:	2309      	movs	r3, #9
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062f6:	81a3      	strh	r3, [r4, #12]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	e034      	b.n	8006368 <__swsetup_r+0x9c>
 80062fe:	0758      	lsls	r0, r3, #29
 8006300:	d512      	bpl.n	8006328 <__swsetup_r+0x5c>
 8006302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006304:	b141      	cbz	r1, 8006318 <__swsetup_r+0x4c>
 8006306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800630a:	4299      	cmp	r1, r3
 800630c:	d002      	beq.n	8006314 <__swsetup_r+0x48>
 800630e:	4628      	mov	r0, r5
 8006310:	f7ff fb24 	bl	800595c <_free_r>
 8006314:	2300      	movs	r3, #0
 8006316:	6363      	str	r3, [r4, #52]	; 0x34
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	2300      	movs	r3, #0
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	f043 0308 	orr.w	r3, r3, #8
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	b94b      	cbnz	r3, 8006348 <__swsetup_r+0x7c>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800633a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633e:	d003      	beq.n	8006348 <__swsetup_r+0x7c>
 8006340:	4621      	mov	r1, r4
 8006342:	4628      	mov	r0, r5
 8006344:	f000 f850 	bl	80063e8 <__smakebuf_r>
 8006348:	89a0      	ldrh	r0, [r4, #12]
 800634a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800634e:	f010 0301 	ands.w	r3, r0, #1
 8006352:	d00a      	beq.n	800636a <__swsetup_r+0x9e>
 8006354:	2300      	movs	r3, #0
 8006356:	60a3      	str	r3, [r4, #8]
 8006358:	6963      	ldr	r3, [r4, #20]
 800635a:	425b      	negs	r3, r3
 800635c:	61a3      	str	r3, [r4, #24]
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	b943      	cbnz	r3, 8006374 <__swsetup_r+0xa8>
 8006362:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006366:	d1c4      	bne.n	80062f2 <__swsetup_r+0x26>
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	0781      	lsls	r1, r0, #30
 800636c:	bf58      	it	pl
 800636e:	6963      	ldrpl	r3, [r4, #20]
 8006370:	60a3      	str	r3, [r4, #8]
 8006372:	e7f4      	b.n	800635e <__swsetup_r+0x92>
 8006374:	2000      	movs	r0, #0
 8006376:	e7f7      	b.n	8006368 <__swsetup_r+0x9c>
 8006378:	20000064 	.word	0x20000064

0800637c <_sbrk_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d06      	ldr	r5, [pc, #24]	; (8006398 <_sbrk_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fb f854 	bl	8001434 <_sbrk>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_sbrk_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_sbrk_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	200004c8 	.word	0x200004c8

0800639c <__swhatbuf_r>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a4:	2900      	cmp	r1, #0
 80063a6:	b096      	sub	sp, #88	; 0x58
 80063a8:	4615      	mov	r5, r2
 80063aa:	461e      	mov	r6, r3
 80063ac:	da0d      	bge.n	80063ca <__swhatbuf_r+0x2e>
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	bf0c      	ite	eq
 80063ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063be:	2340      	movne	r3, #64	; 0x40
 80063c0:	2000      	movs	r0, #0
 80063c2:	6031      	str	r1, [r6, #0]
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	b016      	add	sp, #88	; 0x58
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	466a      	mov	r2, sp
 80063cc:	f000 f848 	bl	8006460 <_fstat_r>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	dbec      	blt.n	80063ae <__swhatbuf_r+0x12>
 80063d4:	9901      	ldr	r1, [sp, #4]
 80063d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063de:	4259      	negs	r1, r3
 80063e0:	4159      	adcs	r1, r3
 80063e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e6:	e7eb      	b.n	80063c0 <__swhatbuf_r+0x24>

080063e8 <__smakebuf_r>:
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063ec:	079d      	lsls	r5, r3, #30
 80063ee:	4606      	mov	r6, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	d507      	bpl.n	8006404 <__smakebuf_r+0x1c>
 80063f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	2301      	movs	r3, #1
 80063fe:	6163      	str	r3, [r4, #20]
 8006400:	b002      	add	sp, #8
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	ab01      	add	r3, sp, #4
 8006406:	466a      	mov	r2, sp
 8006408:	f7ff ffc8 	bl	800639c <__swhatbuf_r>
 800640c:	9900      	ldr	r1, [sp, #0]
 800640e:	4605      	mov	r5, r0
 8006410:	4630      	mov	r0, r6
 8006412:	f7ff fb0f 	bl	8005a34 <_malloc_r>
 8006416:	b948      	cbnz	r0, 800642c <__smakebuf_r+0x44>
 8006418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641c:	059a      	lsls	r2, r3, #22
 800641e:	d4ef      	bmi.n	8006400 <__smakebuf_r+0x18>
 8006420:	f023 0303 	bic.w	r3, r3, #3
 8006424:	f043 0302 	orr.w	r3, r3, #2
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	e7e3      	b.n	80063f4 <__smakebuf_r+0xc>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	6020      	str	r0, [r4, #0]
 8006430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	6163      	str	r3, [r4, #20]
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	6120      	str	r0, [r4, #16]
 800643e:	b15b      	cbz	r3, 8006458 <__smakebuf_r+0x70>
 8006440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f81d 	bl	8006484 <_isatty_r>
 800644a:	b128      	cbz	r0, 8006458 <__smakebuf_r+0x70>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	431d      	orrs	r5, r3
 800645c:	81a5      	strh	r5, [r4, #12]
 800645e:	e7cf      	b.n	8006400 <__smakebuf_r+0x18>

08006460 <_fstat_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	; (8006480 <_fstat_r+0x20>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	f7fa ffb8 	bl	80013e2 <_fstat>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d102      	bne.n	800647c <_fstat_r+0x1c>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	b103      	cbz	r3, 800647c <_fstat_r+0x1c>
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	bd38      	pop	{r3, r4, r5, pc}
 800647e:	bf00      	nop
 8006480:	200004c8 	.word	0x200004c8

08006484 <_isatty_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d06      	ldr	r5, [pc, #24]	; (80064a0 <_isatty_r+0x1c>)
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	f7fa ffb7 	bl	8001402 <_isatty>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_isatty_r+0x1a>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_isatty_r+0x1a>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	200004c8 	.word	0x200004c8

080064a4 <_init>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr

080064b0 <_fini>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr
