
ECEN-361-STM32-Lab-05-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e4  080061e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061ec  080061ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080061f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000068  0800625c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800625c  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133b9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002901  00000000  00000000  00033494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00035d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e27  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028361  00000000  00000000  00037de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015645  00000000  00000000  00060148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6997  00000000  00000000  0007578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005398  00000000  00000000  0016c124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001714bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060e8 	.word	0x080060e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080060e8 	.word	0x080060e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f9e3 	bl	8001968 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f9d2 	bl	8001968 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f9c7 	bl	8001968 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f9c1 	bl	8001968 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f9bb 	bl	8001968 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 f9a8 	bl	8001968 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 f9a3 	bl	8001968 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 f97e 	bl	8001968 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 f958 	bl	8001968 <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	20000088 	.word	0x20000088
 80006c8:	08006164 	.word	0x08006164

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000084 	.word	0x20000084

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t bytes_in =0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fde3 	bl	8001304 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f84b 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f969 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f937 	bl	80009b8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800074a:	f000 f90f 	bl	800096c <MX_TIM17_Init>
  MX_SPI2_Init();
 800074e:	f000 f8d3 	bl	80008f8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000752:	f000 f893 	bl	800087c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000756:	481a      	ldr	r0, [pc, #104]	; (80007c0 <main+0x90>)
 8000758:	f003 fce0 	bl	800411c <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 800075c:	f7ff ff66 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 8000760:	f7ff ff52 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 f8fb 	bl	8001968 <HAL_GPIO_WritePin>
  printf("\033\143");
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <main+0x94>)
 8000774:	f004 fe44 	bl	8005400 <iprintf>
  printf("Welcome to ECEN-361 Lab-05 SPI/UART & Logic Analyzer \n\r");
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <main+0x98>)
 800077a:	f004 fe41 	bl	8005400 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bytes_in = Read_and_Transmit_Task();
 800077e:	f000 fa1d 	bl	8000bbc <Read_and_Transmit_Task>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

    /**************** Send it SPI *********************/
    /* Set up the receive to happen with an interrupt */
    /* The Buffer is global:  RX_Buffer */

	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, 10);
 8000786:	220a      	movs	r2, #10
 8000788:	4910      	ldr	r1, [pc, #64]	; (80007cc <main+0x9c>)
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <main+0xa0>)
 800078c:	f002 fe6e 	bl	800346c <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f8e5 	bl	8001968 <HAL_GPIO_WritePin>
	// HAL_Delay(5); // wait a bit before transmitting so the process can start the read
	HAL_SPI_Transmit(&hspi1, RX_Buffer, bytes_in , HAL_MAX_DELAY);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4909      	ldr	r1, [pc, #36]	; (80007cc <main+0x9c>)
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <main+0xa4>)
 80007aa:	f002 fcea 	bl	8003182 <HAL_SPI_Transmit>
	// HAL_Delay(5); // wait a bit before transmitting so the process can start the read
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f001 f8d6 	bl	8001968 <HAL_GPIO_WritePin>
    bytes_in = Read_and_Transmit_Task();
 80007bc:	e7df      	b.n	800077e <main+0x4e>
 80007be:	bf00      	nop
 80007c0:	20000154 	.word	0x20000154
 80007c4:	08006100 	.word	0x08006100
 80007c8:	08006104 	.word	0x08006104
 80007cc:	20000228 	.word	0x20000228
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fe5f 	bl	80054aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fe:	f001 f8d9 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fa92 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081e:	2302      	movs	r3, #2
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f910 	bl	8001a60 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 fa73 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2104      	movs	r1, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fcd8 	bl	8002218 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 fa5f 	bl	8000d30 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	; 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /*   625KHz == SPI_BAUDRATEPRESCALER_128 ==> 80Mhz / 128
   *   40Mhz == SPI_BAUDRATEPRESCALER_2    ==> 80Mhz / 2
   */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008dc:	f002 fbae 	bl	800303c <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa23 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_SPI2_Init+0x6c>)
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <MX_SPI2_Init+0x70>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI2_Init+0x6c>)
 800090a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000912:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000916:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI2_Init+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI2_Init+0x6c>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI2_Init+0x6c>)
 800093e:	2207      	movs	r2, #7
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI2_Init+0x6c>)
 800094a:	2200      	movs	r2, #0
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000950:	f002 fb74 	bl	800303c <HAL_SPI_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800095a:	f000 f9e9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000f0 	.word	0x200000f0
 8000968:	40003800 	.word	0x40003800

0800096c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MX_TIM17_Init+0x48>)
 8000974:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000978:	f240 321f 	movw	r2, #799	; 0x31f
 800097c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_TIM17_Init+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_TIM17_Init+0x44>)
 800099e:	f003 fb65 	bl	800406c <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009a8:	f000 f9c2 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000154 	.word	0x20000154
 80009b4:	40014800 	.word	0x40014800

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART2_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009fc:	f003 fde0 	bl	80045c0 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f993 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001a0 	.word	0x200001a0
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a5f      	ldr	r2, [pc, #380]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b54      	ldr	r3, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 ff66 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000aa2:	f000 ff61 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4842      	ldr	r0, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000aac:	f000 ff5c 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <MX_GPIO_Init+0x1a0>)
 8000ac8:	f000 fda4 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <MX_GPIO_Init+0x1a0>)
 8000ae0:	f000 fd98 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fd8b 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000afe:	2312      	movs	r3, #18
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fd7e 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b1c:	2311      	movs	r3, #17
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fd6f 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000b4a:	f000 fd63 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000b4e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fd53 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000b86:	f000 fd45 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b8e:	2311      	movs	r3, #17
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000ba2:	f000 fd37 	bl	8001614 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800

08000bbc <Read_and_Transmit_Task>:
		}
	}


uint8_t Read_and_Transmit_Task()
	{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
	/* Return the number of bytes */
	uint8_t receive_byte;
	// uint8_t receive_buffer[BUFFER_SIZE] = {0};
	// uint8_t *receive_buffer_ptr = receive_buffer;
	uint8_t bytes_in =0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <Read_and_Transmit_Task+0xd8>)
 8000bca:	f107 0410 	add.w	r4, r7, #16
 8000bce:	461d      	mov	r5, r3
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bd8:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <Read_and_Transmit_Task+0xdc>)
 8000bde:	463c      	mov	r4, r7
 8000be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be2:	c407      	stmia	r4!, {r0, r1, r2}
 8000be4:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t *sndmsg_ptr = sndmsg;
 8000bec:	463b      	mov	r3, r7
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c

		bytes_in = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		receive_byte = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2217      	movs	r2, #23
 8000c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c04:	4825      	ldr	r0, [pc, #148]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c06:	f003 fd29 	bl	800465c <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000c0a:	e020      	b.n	8000c4e <Read_and_Transmit_Task+0x92>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fbb9 	bl	8001384 <HAL_Delay>
 8000c12:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8000c16:	230a      	movs	r3, #10
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4820      	ldr	r0, [pc, #128]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c1c:	f003 fda8 	bl	8004770 <HAL_UART_Receive>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f2      	bne.n	8000c0c <Read_and_Transmit_Task+0x50>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			RX_Buffer[bytes_in] = receive_byte;
 8000c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c30:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &RX_Buffer[bytes_in++] , 1, HAL_MAX_DELAY);  //echo each one as it's typed
 8000c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c40:	18d1      	adds	r1, r2, r3
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	2201      	movs	r2, #1
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c4a:	f003 fd07 	bl	800465c <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c52:	2b0d      	cmp	r3, #13
 8000c54:	d1dd      	bne.n	8000c12 <Read_and_Transmit_Task+0x56>
		}

		RX_Buffer[bytes_in++] = '\n'; // Add a line_feed
 8000c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c64:	210a      	movs	r1, #10
 8000c66:	5499      	strb	r1, [r3, r2]
		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	220d      	movs	r2, #13
 8000c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c72:	f003 fcf3 	bl	800465c <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 8000c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <Read_and_Transmit_Task+0xe4>)
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <Read_and_Transmit_Task+0xe0>)
 8000c84:	f003 fcea 	bl	800465c <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)
		return bytes_in;
 8000c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bdb0      	pop	{r4, r5, r7, pc}
 8000c94:	0800613c 	.word	0x0800613c
 8000c98:	08006154 	.word	0x08006154
 8000c9c:	200001a0 	.word	0x200001a0
 8000ca0:	20000228 	.word	0x20000228

08000ca4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cac:	1d39      	adds	r1, r7, #4
 8000cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <__io_putchar+0x20>)
 8000cb6:	f003 fcd1 	bl	800465c <HAL_UART_Transmit>

  return ch;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001a0 	.word	0x200001a0

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x14>
 8000cd8:	f7ff fcf8 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000ce6:	f000 fb2d 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000154 	.word	0x20000154

08000cf8 <HAL_SPI_RxCpltCallback>:

  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
  {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
      // printf("here at the spi receive\n\r");
	  if (hspi == &hspi2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_SPI_RxCpltCallback+0x2c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d108      	bne.n	8000d1a <HAL_SPI_RxCpltCallback+0x22>
	  {
      // HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
      HAL_UART_Transmit(&huart2, RX_Buffer, BUFFER_SIZE,1000);
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	2232      	movs	r2, #50	; 0x32
 8000d0e:	4906      	ldr	r1, [pc, #24]	; (8000d28 <HAL_SPI_RxCpltCallback+0x30>)
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <HAL_SPI_RxCpltCallback+0x34>)
 8000d12:	f003 fca3 	bl	800465c <HAL_UART_Transmit>
	  MX_SPI2_Init();  // Buffer has the data so start over
 8000d16:	f7ff fdef 	bl	80008f8 <MX_SPI2_Init>
	  }

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000f0 	.word	0x200000f0
 8000d28:	20000228 	.word	0x20000228
 8000d2c:	200001a0 	.word	0x200001a0

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <HAL_SPI_MspInit+0x124>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d129      	bne.n	8000dfa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	4a40      	ldr	r2, [pc, #256]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db0:	6613      	str	r3, [r2, #96]	; 0x60
 8000db2:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dd6:	23a0      	movs	r3, #160	; 0xa0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de6:	2305      	movs	r3, #5
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f000 fc0e 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000df8:	e051      	b.n	8000e9e <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <HAL_SPI_MspInit+0x12c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d14c      	bne.n	8000e9e <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	4a28      	ldr	r2, [pc, #160]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_SPI_MspInit+0x128>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_SPI_MspInit+0x130>)
 8000e68:	f000 fbd4 	bl	8001614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <HAL_SPI_MspInit+0x134>)
 8000e8a:	f000 fbc3 	bl	8001614 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2024      	movs	r0, #36	; 0x24
 8000e94:	f000 fb52 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e98:	2024      	movs	r0, #36	; 0x24
 8000e9a:	f000 fb6b 	bl	8001574 <HAL_NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	; 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40013000 	.word	0x40013000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201a      	movs	r0, #26
 8000eec:	f000 fb26 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ef0:	201a      	movs	r0, #26
 8000ef2:	f000 fb3f 	bl	8001574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40014800 	.word	0x40014800
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ac      	sub	sp, #176	; 0xb0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2288      	movs	r2, #136	; 0x88
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fabe 	bl	80054aa <memset>
  if(huart->Instance==USART2)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_UART_MspInit+0xb0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d13b      	bne.n	8000fb0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fbbd 	bl	80026c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f50:	f7ff feee 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UART_MspInit+0xb4>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0xb4>)
 8000f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_UART_MspInit+0xb4>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_UART_MspInit+0xb4>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0xb4>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0xb4>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f84:	230c      	movs	r3, #12
 8000f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f000 fb32 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	37b0      	adds	r7, #176	; 0xb0
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <HAL_InitTick+0xe0>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <HAL_InitTick+0xe0>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <HAL_InitTick+0xe0>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe6:	f107 0210 	add.w	r2, r7, #16
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fad5 	bl	80025a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001000:	f001 faa2 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8001004:	6378      	str	r0, [r7, #52]	; 0x34
 8001006:	e004      	b.n	8001012 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001008:	f001 fa9e 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 800100c:	4603      	mov	r3, r0
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <HAL_InitTick+0xe4>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0c9b      	lsrs	r3, r3, #18
 800101c:	3b01      	subs	r3, #1
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <HAL_InitTick+0xe8>)
 8001022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001026:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <HAL_InitTick+0xe8>)
 800102a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800102e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_InitTick+0xe8>)
 8001032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001034:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_InitTick+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_InitTick+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_InitTick+0xe8>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <HAL_InitTick+0xe8>)
 800104a:	f003 f80f 	bl	800406c <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11b      	bne.n	8001094 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800105c:	4812      	ldr	r0, [pc, #72]	; (80010a8 <HAL_InitTick+0xe8>)
 800105e:	f003 f85d 	bl	800411c <HAL_TIM_Base_Start_IT>
 8001062:	4603      	mov	r3, r0
 8001064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800106c:	2b00      	cmp	r3, #0
 800106e:	d111      	bne.n	8001094 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001070:	201c      	movs	r0, #28
 8001072:	f000 fa7f 	bl	8001574 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d808      	bhi.n	800108e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	201c      	movs	r0, #28
 8001082:	f000 fa5b 	bl	800153c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <HAL_InitTick+0xec>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e002      	b.n	8001094 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001098:	4618      	mov	r0, r3
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	431bde83 	.word	0x431bde83
 80010a8:	2000025c 	.word	0x2000025c
 80010ac:	20000004 	.word	0x20000004

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800110e:	f003 f875 	bl	80041fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000154 	.word	0x20000154

0800111c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM2_IRQHandler+0x10>)
 8001122:	f003 f86b 	bl	80041fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000025c 	.word	0x2000025c

08001130 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <SPI2_IRQHandler+0x10>)
 8001136:	f002 faf5 	bl	8003724 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000f0 	.word	0x200000f0

08001144 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
  }

  return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e009      	b.n	80011a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd83 	bl	8000ca4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <_write+0x12>
  }
  return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_close>:

int _close(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011de:	605a      	str	r2, [r3, #4]
  return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_isatty>:

int _isatty(int file)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f004 f97a 	bl	8005548 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20018000 	.word	0x20018000
 8001280:	00000400 	.word	0x00000400
 8001284:	200002a8 	.word	0x200002a8
 8001288:	20000400 	.word	0x20000400

0800128c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b4:	f7ff ffea 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f004 f939 	bl	8005554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7ff fa25 	bl	8000730 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012f4:	080061f4 	.word	0x080061f4
  ldr r2, =_sbss
 80012f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012fc:	200003fc 	.word	0x200003fc

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_Init+0x3c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_Init+0x3c>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131a:	2003      	movs	r0, #3
 800131c:	f000 f903 	bl	8001526 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001320:	200f      	movs	r0, #15
 8001322:	f7ff fe4d 	bl	8000fc0 <HAL_InitTick>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	e001      	b.n	8001336 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001332:	f7ff fd03 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001336:	79fb      	ldrb	r3, [r7, #7]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	200002ac 	.word	0x200002ac

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200002ac 	.word	0x200002ac

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff4c 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154e:	f7ff ff61 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001552:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff ffb1 	bl	80014c0 <NVIC_EncodePriority>
 800155e:	4602      	mov	r2, r0
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff80 	bl	800146c <__NVIC_SetPriority>
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff54 	bl	8001430 <__NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d005      	beq.n	80015b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2204      	movs	r2, #4
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e029      	b.n	8001608 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020e 	bic.w	r2, r2, #14
 80015c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f003 021c 	and.w	r2, r3, #28
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
    }
  }
  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	e17f      	b.n	8001924 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8171 	beq.w	800191e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d005      	beq.n	8001654 <HAL_GPIO_Init+0x40>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d130      	bne.n	80016b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800168a:	2201      	movs	r2, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 0201 	and.w	r2, r3, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d118      	bne.n	80016f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d017      	beq.n	8001730 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d123      	bne.n	8001784 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80ac 	beq.w	800191e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_GPIO_Init+0x330>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <HAL_GPIO_Init+0x330>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6613      	str	r3, [r2, #96]	; 0x60
 80017d2:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_GPIO_Init+0x330>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017de:	4a5a      	ldr	r2, [pc, #360]	; (8001948 <HAL_GPIO_Init+0x334>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x242>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4f      	ldr	r2, [pc, #316]	; (800194c <HAL_GPIO_Init+0x338>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x23e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4e      	ldr	r2, [pc, #312]	; (8001950 <HAL_GPIO_Init+0x33c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x23a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4d      	ldr	r2, [pc, #308]	; (8001954 <HAL_GPIO_Init+0x340>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x236>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <HAL_GPIO_Init+0x344>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x232>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4b      	ldr	r2, [pc, #300]	; (800195c <HAL_GPIO_Init+0x348>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x22e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <HAL_GPIO_Init+0x34c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x22a>
 800183a:	2306      	movs	r3, #6
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x244>
 800183e:	2307      	movs	r3, #7
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x244>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x244>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x244>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x244>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x244>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x244>
 8001856:	2300      	movs	r3, #0
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_GPIO_Init+0x334>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_GPIO_Init+0x350>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800189a:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_GPIO_Init+0x350>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_GPIO_Init+0x350>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <HAL_GPIO_Init+0x350>)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_GPIO_Init+0x350>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_GPIO_Init+0x350>)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_GPIO_Init+0x350>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_GPIO_Init+0x350>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	f47f ae78 	bne.w	8001624 <HAL_GPIO_Init+0x10>
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000
 800194c:	48000400 	.word	0x48000400
 8001950:	48000800 	.word	0x48000800
 8001954:	48000c00 	.word	0x48000c00
 8001958:	48001000 	.word	0x48001000
 800195c:	48001400 	.word	0x48001400
 8001960:	48001800 	.word	0x48001800
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001984:	e002      	b.n	800198c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40007000 	.word	0x40007000

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c2:	d130      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d0:	d038      	beq.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2232      	movs	r2, #50	; 0x32
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f8:	e002      	b.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0c:	d102      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f2      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d110      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e00f      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d007      	beq.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40007000 	.word	0x40007000
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	431bde83 	.word	0x431bde83

08001a60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e3ca      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80e4 	beq.w	8001c5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4a>
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	f040 808b 	bne.w	8001bb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 8087 	bne.w	8001bb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x62>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e3a2      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1a      	ldr	r2, [r3, #32]
 8001ac6:	4b82      	ldr	r3, [pc, #520]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_RCC_OscConfig+0x7c>
 8001ad2:	4b7f      	ldr	r3, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ada:	e005      	b.n	8001ae8 <HAL_RCC_OscConfig+0x88>
 8001adc:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d223      	bcs.n	8001b34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fd87 	bl	8002604 <RCC_SetFlashLatencyFromMSIRange>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e383      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b00:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	496d      	ldr	r1, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1e:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	4968      	ldr	r1, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
 8001b32:	e025      	b.n	8001b80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4960      	ldr	r1, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	495b      	ldr	r1, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fd47 	bl	8002604 <RCC_SetFlashLatencyFromMSIRange>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e343      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b80:	f000 fc4a 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b52      	ldr	r3, [pc, #328]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	4950      	ldr	r1, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_RCC_OscConfig+0x278>)
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fa0b 	bl	8000fc0 <HAL_InitTick>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d052      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	e327      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d032      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc0:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fbce 	bl	800136c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fbca 	bl	800136c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e310      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4931      	ldr	r1, [pc, #196]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	492c      	ldr	r1, [pc, #176]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e01a      	b.n	8001c5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fb9b 	bl	800136c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fb97 	bl	800136c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e2dd      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x1da>
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d074      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x21a>
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	d10e      	bne.n	8001c92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d064      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d160      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e2ba      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x24a>
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e026      	b.n	8001cf8 <HAL_RCC_OscConfig+0x298>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb2:	d115      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x280>
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a02      	ldr	r2, [pc, #8]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_OscConfig+0x298>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08006168 	.word	0x08006168
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a9f      	ldr	r2, [pc, #636]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b9d      	ldr	r3, [pc, #628]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a9c      	ldr	r2, [pc, #624]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fb34 	bl	800136c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb30 	bl	800136c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e276      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2a8>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb20 	bl	800136c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb1c 	bl	800136c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e262      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2d0>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d060      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_OscConfig+0x310>
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d119      	bne.n	8001d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d116      	bne.n	8001d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x328>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e23f      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	4973      	ldr	r1, [pc, #460]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	e040      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d023      	beq.n	8001dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fadb 	bl	800136c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fad7 	bl	800136c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e21d      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	495f      	ldr	r1, [pc, #380]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e018      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a5c      	ldr	r2, [pc, #368]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fab7 	bl	800136c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fab3 	bl	800136c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1f9      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d03c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3a:	4a4a      	ldr	r2, [pc, #296]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff fa92 	bl	800136c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fa8e 	bl	800136c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1d4      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ef      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3ec>
 8001e6c:	e01b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa75 	bl	800136c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fa71 	bl	800136c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1b7      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80a6 	beq.w	8002000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d118      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fa38 	bl	800136c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f00:	f7ff fa34 	bl	800136c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e17a      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f36:	e029      	b.n	8001f8c <HAL_RCC_OscConfig+0x52c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d115      	bne.n	8001f6c <HAL_RCC_OscConfig+0x50c>
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x52c>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	4b9c      	ldr	r3, [pc, #624]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4a9b      	ldr	r2, [pc, #620]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7c:	4b98      	ldr	r3, [pc, #608]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a97      	ldr	r2, [pc, #604]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d016      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f9ea 	bl	800136c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f9e6 	bl	800136c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e12a      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	4b8b      	ldr	r3, [pc, #556]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ed      	beq.n	8001f9c <HAL_RCC_OscConfig+0x53c>
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f9d3 	bl	800136c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff f9cf 	bl	800136c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e113      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ed      	bne.n	8001fca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a79      	ldr	r2, [pc, #484]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80fe 	beq.w	8002206 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	2b02      	cmp	r3, #2
 8002010:	f040 80d0 	bne.w	80021b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002014:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	429a      	cmp	r2, r3
 8002026:	d130      	bne.n	800208a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	3b01      	subs	r3, #1
 8002034:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d127      	bne.n	800208a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002044:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d11f      	bne.n	800208a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002054:	2a07      	cmp	r2, #7
 8002056:	bf14      	ite	ne
 8002058:	2201      	movne	r2, #1
 800205a:	2200      	moveq	r2, #0
 800205c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800205e:	4293      	cmp	r3, r2
 8002060:	d113      	bne.n	800208a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	3b01      	subs	r3, #1
 8002070:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d109      	bne.n	800208a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d06e      	beq.n	8002168 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d069      	beq.n	8002164 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002090:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800209c:	4b50      	ldr	r3, [pc, #320]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0ad      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020ac:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a4b      	ldr	r2, [pc, #300]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b8:	f7ff f958 	bl	800136c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff f954 	bl	800136c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e09a      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020de:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_RCC_OscConfig+0x784>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ee:	3a01      	subs	r2, #1
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020f8:	0212      	lsls	r2, r2, #8
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002100:	0852      	lsrs	r2, r2, #1
 8002102:	3a01      	subs	r2, #1
 8002104:	0552      	lsls	r2, r2, #21
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800210c:	0852      	lsrs	r2, r2, #1
 800210e:	3a01      	subs	r2, #1
 8002110:	0652      	lsls	r2, r2, #25
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002118:	0912      	lsrs	r2, r2, #4
 800211a:	0452      	lsls	r2, r2, #17
 800211c:	430a      	orrs	r2, r1
 800211e:	4930      	ldr	r1, [pc, #192]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002120:	4313      	orrs	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800213c:	f7ff f916 	bl	800136c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f912 	bl	800136c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e058      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002162:	e050      	b.n	8002206 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e04f      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d148      	bne.n	8002206 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800218c:	f7ff f8ee 	bl	800136c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7ff f8ea 	bl	800136c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e030      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x734>
 80021b2:	e028      	b.n	8002206 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d023      	beq.n	8002202 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_RCC_OscConfig+0x780>)
 80021c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f8d1 	bl	800136c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	e00c      	b.n	80021e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff f8cd 	bl	800136c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d905      	bls.n	80021e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e013      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_OscConfig+0x7b0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ec      	bne.n	80021ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_OscConfig+0x7b0>)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4905      	ldr	r1, [pc, #20]	; (8002210 <HAL_RCC_OscConfig+0x7b0>)
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_OscConfig+0x7b4>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	60cb      	str	r3, [r1, #12]
 8002200:	e001      	b.n	8002206 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	feeefffc 	.word	0xfeeefffc

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0e7      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4970      	ldr	r1, [pc, #448]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cf      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002274:	429a      	cmp	r2, r3
 8002276:	d908      	bls.n	800228a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4960      	ldr	r1, [pc, #384]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04c      	beq.n	8002330 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0a6      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e09a      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e08e      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e086      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4943      	ldr	r1, [pc, #268]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002300:	f7ff f834 	bl	800136c <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7ff f830 	bl	800136c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e06e      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d010      	beq.n	800235e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	429a      	cmp	r2, r3
 800234a:	d208      	bcs.n	800235e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	492b      	ldr	r1, [pc, #172]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d210      	bcs.n	800238e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 0207 	bic.w	r2, r3, #7
 8002374:	4923      	ldr	r1, [pc, #140]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_RCC_ClockConfig+0x1ec>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e036      	b.n	80023fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4918      	ldr	r1, [pc, #96]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4910      	ldr	r1, [pc, #64]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023cc:	f000 f824 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	490b      	ldr	r1, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1f4>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	4a09      	ldr	r2, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80023ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1fc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fde5 	bl	8000fc0 <HAL_InitTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80023fa:	7afb      	ldrb	r3, [r7, #11]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40022000 	.word	0x40022000
 8002408:	40021000 	.word	0x40021000
 800240c:	08006168 	.word	0x08006168
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x34>
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d121      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d11e      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e005      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002474:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d102      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_GetSysClockFreq+0x110>)
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e004      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_RCC_GetSysClockFreq+0x114>)
 800249e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d134      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0xa6>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d003      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0xac>
 80024bc:	e005      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c0:	617b      	str	r3, [r7, #20]
      break;
 80024c2:	e005      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	617b      	str	r3, [r7, #20]
      break;
 80024c8:	e002      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	617b      	str	r3, [r7, #20]
      break;
 80024ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	fb03 f202 	mul.w	r2, r3, r2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	0e5b      	lsrs	r3, r3, #25
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	3301      	adds	r3, #1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002510:	69bb      	ldr	r3, [r7, #24]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	08006180 	.word	0x08006180
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_RCC_GetHCLKFreq+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800254c:	f7ff fff0 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08006178 	.word	0x08006178

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002578:	f7ff ffda 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08006178 	.word	0x08006178

080025a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	220f      	movs	r2, #15
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_GetClockConfig+0x5c>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_RCC_GetClockConfig+0x60>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0207 	and.w	r2, r3, #7
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	601a      	str	r2, [r3, #0]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40022000 	.word	0x40022000

08002604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800261c:	f7ff f9bc 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 8002620:	6178      	str	r0, [r7, #20]
 8002622:	e014      	b.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262e:	6593      	str	r3, [r2, #88]	; 0x58
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800263c:	f7ff f9ac 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 8002640:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002654:	d10b      	bne.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d919      	bls.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2ba0      	cmp	r3, #160	; 0xa0
 8002660:	d902      	bls.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002662:	2302      	movs	r3, #2
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e013      	b.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002668:	2301      	movs	r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e010      	b.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d902      	bls.n	800267a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002674:	2303      	movs	r3, #3
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e00a      	b.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d102      	bne.n	8002686 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002680:	2302      	movs	r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	e004      	b.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b70      	cmp	r3, #112	; 0x70
 800268a:	d101      	bne.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800268c:	2301      	movs	r3, #1
 800268e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 0207 	bic.w	r2, r3, #7
 8002698:	4909      	ldr	r1, [pc, #36]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40022000 	.word	0x40022000

080026c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026cc:	2300      	movs	r3, #0
 80026ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d0:	2300      	movs	r3, #0
 80026d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d041      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026e8:	d02a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ee:	d824      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026fa:	d81e      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002704:	d010      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002706:	e018      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002708:	4b86      	ldr	r3, [pc, #536]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a85      	ldr	r2, [pc, #532]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002714:	e015      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fabb 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002726:	e00c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3320      	adds	r3, #32
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fba6 	bl	8002e80 <RCCEx_PLLSAI2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002738:	e003      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	74fb      	strb	r3, [r7, #19]
      break;
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002748:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002756:	4973      	ldr	r1, [pc, #460]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d041      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002778:	d02a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800277a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800277e:	d824      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002784:	d008      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800278a:	d81e      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002794:	d010      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002796:	e018      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002798:	4b62      	ldr	r3, [pc, #392]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a61      	ldr	r2, [pc, #388]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a4:	e015      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa73 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b6:	e00c      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3320      	adds	r3, #32
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fb5e 	bl	8002e80 <RCCEx_PLLSAI2_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c8:	e003      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	74fb      	strb	r3, [r7, #19]
      break;
 80027ce:	e000      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e6:	494f      	ldr	r1, [pc, #316]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ee:	e001      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a0 	beq.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	4a40      	ldr	r2, [pc, #256]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002826:	6593      	str	r3, [r2, #88]	; 0x58
 8002828:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002834:	2301      	movs	r3, #1
 8002836:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002844:	f7fe fd92 	bl	800136c <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800284a:	e009      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7fe fd8e 	bl	800136c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	74fb      	strb	r3, [r7, #19]
        break;
 800285e:	e005      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ef      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d15c      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01f      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	d019      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a20      	ldr	r2, [pc, #128]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fd4d 	bl	800136c <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d4:	e00b      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fd49 	bl	800136c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d902      	bls.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	74fb      	strb	r3, [r7, #19]
            break;
 80028ec:	e006      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ec      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800291a:	e009      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
 8002920:	e006      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002930:	7c7b      	ldrb	r3, [r7, #17]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d105      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b9e      	ldr	r3, [pc, #632]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	4a9d      	ldr	r2, [pc, #628]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002940:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800294e:	4b98      	ldr	r3, [pc, #608]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f023 0203 	bic.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	4994      	ldr	r1, [pc, #592]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002970:	4b8f      	ldr	r3, [pc, #572]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 020c 	bic.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	498c      	ldr	r1, [pc, #560]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002992:	4b87      	ldr	r3, [pc, #540]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4983      	ldr	r1, [pc, #524]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b4:	4b7e      	ldr	r3, [pc, #504]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	497b      	ldr	r1, [pc, #492]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	4972      	ldr	r1, [pc, #456]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f8:	4b6d      	ldr	r3, [pc, #436]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	496a      	ldr	r1, [pc, #424]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1a:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	4961      	ldr	r1, [pc, #388]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a3c:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	4959      	ldr	r1, [pc, #356]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5e:	4b54      	ldr	r3, [pc, #336]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6c:	4950      	ldr	r1, [pc, #320]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	4948      	ldr	r1, [pc, #288]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa2:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	493f      	ldr	r1, [pc, #252]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d028      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac4:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	4937      	ldr	r1, [pc, #220]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
 8002af0:	e011      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002afa:	d10c      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2101      	movs	r1, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f8c8 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d028      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	491f      	ldr	r1, [pc, #124]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4c:	60d3      	str	r3, [r2, #12]
 8002b4e:	e011      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f899 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a02      	ldr	r2, [pc, #8]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002baa:	60d3      	str	r3, [r2, #12]
 8002bac:	e014      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f867 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d02f      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf2:	4928      	ldr	r1, [pc, #160]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c02:	d10d      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	2102      	movs	r1, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f844 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	74bb      	strb	r3, [r7, #18]
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3320      	adds	r3, #32
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f925 	bl	8002e80 <RCCEx_PLLSAI2_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5e:	490d      	ldr	r1, [pc, #52]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000

08002c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca6:	4b75      	ldr	r3, [pc, #468]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cb2:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d10d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d047      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e044      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d018      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x86>
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d825      	bhi.n	8002d3c <RCCEx_PLLSAI1_Config+0xa4>
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <RCCEx_PLLSAI1_Config+0x62>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d009      	beq.n	8002d0c <RCCEx_PLLSAI1_Config+0x74>
 8002cf8:	e020      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cfa:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11d      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0a:	e01a      	b.n	8002d42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d0c:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e013      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d1e:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d2a:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d3a:	e006      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e004      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	430b      	orrs	r3, r1
 8002d68:	4944      	ldr	r1, [pc, #272]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d17d      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d74:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d80:	f7fe faf4 	bl	800136c <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d86:	e009      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d88:	f7fe faf0 	bl	800136c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9a:	e005      	b.n	8002da8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ef      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d160      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	0912      	lsrs	r2, r2, #4
 8002dcc:	0452      	lsls	r2, r2, #17
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	492a      	ldr	r1, [pc, #168]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	610b      	str	r3, [r1, #16]
 8002dd6:	e027      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d112      	bne.n	8002e04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dde:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002de6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	0211      	lsls	r1, r2, #8
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6912      	ldr	r2, [r2, #16]
 8002df4:	0852      	lsrs	r2, r2, #1
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0552      	lsls	r2, r2, #21
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	491f      	ldr	r1, [pc, #124]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	610b      	str	r3, [r1, #16]
 8002e02:	e011      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6892      	ldr	r2, [r2, #8]
 8002e14:	0211      	lsls	r1, r2, #8
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6952      	ldr	r2, [r2, #20]
 8002e1a:	0852      	lsrs	r2, r2, #1
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	0652      	lsls	r2, r2, #25
 8002e20:	430a      	orrs	r2, r1
 8002e22:	4916      	ldr	r1, [pc, #88]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe fa9a 	bl	800136c <HAL_GetTick>
 8002e38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3a:	e009      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e3c:	f7fe fa96 	bl	800136c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d902      	bls.n	8002e50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e4e:	e005      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000

08002e80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d018      	beq.n	8002ecc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e9a:	4b67      	ldr	r3, [pc, #412]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10d      	bne.n	8002ec6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
       ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eb2:	4b61      	ldr	r3, [pc, #388]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d047      	beq.n	8002f56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e044      	b.n	8002f56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d018      	beq.n	8002f06 <RCCEx_PLLSAI2_Config+0x86>
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d825      	bhi.n	8002f24 <RCCEx_PLLSAI2_Config+0xa4>
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d002      	beq.n	8002ee2 <RCCEx_PLLSAI2_Config+0x62>
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d009      	beq.n	8002ef4 <RCCEx_PLLSAI2_Config+0x74>
 8002ee0:	e020      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee2:	4b55      	ldr	r3, [pc, #340]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11d      	bne.n	8002f2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e01a      	b.n	8002f2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e013      	b.n	8002f2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f06:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f22:	e006      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e004      	b.n	8002f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e002      	b.n	8002f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f3a:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	4939      	ldr	r1, [pc, #228]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d167      	bne.n	800302c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a35      	ldr	r2, [pc, #212]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe fa00 	bl	800136c <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f6e:	e009      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f70:	f7fe f9fc 	bl	800136c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d902      	bls.n	8002f84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	73fb      	strb	r3, [r7, #15]
        break;
 8002f82:	e005      	b.n	8002f90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d14a      	bne.n	800302c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6892      	ldr	r2, [r2, #8]
 8002fac:	0211      	lsls	r1, r2, #8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68d2      	ldr	r2, [r2, #12]
 8002fb2:	0912      	lsrs	r2, r2, #4
 8002fb4:	0452      	lsls	r2, r2, #17
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	491f      	ldr	r1, [pc, #124]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	614b      	str	r3, [r1, #20]
 8002fbe:	e011      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	0211      	lsls	r1, r2, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6912      	ldr	r2, [r2, #16]
 8002fd6:	0852      	lsrs	r2, r2, #1
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	0652      	lsls	r2, r2, #25
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4916      	ldr	r1, [pc, #88]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fe4:	4b14      	ldr	r3, [pc, #80]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe f9bc 	bl	800136c <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff6:	e009      	b.n	800300c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff8:	f7fe f9b8 	bl	800136c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d902      	bls.n	800300c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	73fb      	strb	r3, [r7, #15]
          break;
 800300a:	e005      	b.n	8003018 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ef      	beq.n	8002ff8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e095      	b.n	800317a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d009      	beq.n	8003074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	e005      	b.n	8003074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fe78 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b4:	d902      	bls.n	80030bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e002      	b.n	80030c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030ca:	d007      	beq.n	80030dc <HAL_SPI_Init+0xa0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	ea42 0103 	orr.w	r1, r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	f003 0204 	and.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003158:	ea42 0103 	orr.w	r1, r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b088      	sub	sp, #32
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_SPI_Transmit+0x22>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e15f      	b.n	8003464 <HAL_SPI_Transmit+0x2e2>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ac:	f7fe f8de 	bl	800136c <HAL_GetTick>
 80031b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031c6:	e148      	b.n	800345a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_SPI_Transmit+0x52>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d8:	e13f      	b.n	800345a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2203      	movs	r2, #3
 80031de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003224:	d10f      	bne.n	8003246 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003244:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d007      	beq.n	8003264 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800326c:	d94f      	bls.n	800330e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SPI_Transmit+0xfa>
 8003276:	8afb      	ldrh	r3, [r7, #22]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d142      	bne.n	8003302 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032a0:	e02f      	b.n	8003302 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d112      	bne.n	80032d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d4:	e015      	b.n	8003302 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fe f849 	bl	800136c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Transmit+0x16c>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Transmit+0x172>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003300:	e0ab      	b.n	800345a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ca      	bne.n	80032a2 <HAL_SPI_Transmit+0x120>
 800330c:	e080      	b.n	8003410 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_SPI_Transmit+0x19a>
 8003316:	8afb      	ldrh	r3, [r7, #22]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d174      	bne.n	8003406 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d912      	bls.n	800334c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	881a      	ldrh	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	1c9a      	adds	r2, r3, #2
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b02      	subs	r3, #2
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800334a:	e05c      	b.n	8003406 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003372:	e048      	b.n	8003406 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d12b      	bne.n	80033da <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d912      	bls.n	80033b2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	1c9a      	adds	r2, r3, #2
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b02      	subs	r3, #2
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b0:	e029      	b.n	8003406 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033d8:	e015      	b.n	8003406 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033da:	f7fd ffc7 	bl	800136c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d803      	bhi.n	80033f2 <HAL_SPI_Transmit+0x270>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d102      	bne.n	80033f8 <HAL_SPI_Transmit+0x276>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003404:	e029      	b.n	800345a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1b1      	bne.n	8003374 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fd71 	bl	8003efc <SPI_EndRxTxTransaction>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e003      	b.n	800345a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003462:	7ffb      	ldrb	r3, [r7, #31]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d002      	beq.n	8003490 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800348a:	2302      	movs	r3, #2
 800348c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348e:	e092      	b.n	80035b6 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d110      	bne.n	80034ba <HAL_SPI_Receive_IT+0x4e>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a0:	d10b      	bne.n	80034ba <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2204      	movs	r2, #4
 80034a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f889 	bl	80035c8 <HAL_SPI_TransmitReceive_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	e07e      	b.n	80035b8 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_Receive_IT+0x5a>
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ca:	e074      	b.n	80035b6 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_SPI_Receive_IT+0x6e>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e06e      	b.n	80035b8 <HAL_SPI_Receive_IT+0x14c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2204      	movs	r2, #4
 80034e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003526:	d90b      	bls.n	8003540 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003536:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_SPI_Receive_IT+0x154>)
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
 800353e:	e00a      	b.n	8003556 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800354e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_SPI_Receive_IT+0x158>)
 8003554:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d10f      	bne.n	8003580 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800357e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d007      	beq.n	800359e <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80035b4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	08003bc5 	.word	0x08003bc5
 80035c4:	08003b75 	.word	0x08003b75

080035c8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035e0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035e8:	7dbb      	ldrb	r3, [r7, #22]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d00d      	beq.n	800360a <HAL_SPI_TransmitReceive_IT+0x42>
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f4:	d106      	bne.n	8003604 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_SPI_TransmitReceive_IT+0x3c>
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d002      	beq.n	800360a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003604:	2302      	movs	r3, #2
 8003606:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003608:	e07d      	b.n	8003706 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_SPI_TransmitReceive_IT+0x54>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_TransmitReceive_IT+0x54>
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003620:	e071      	b.n	8003706 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_SPI_TransmitReceive_IT+0x68>
 800362c:	2302      	movs	r3, #2
 800362e:	e06b      	b.n	8003708 <HAL_SPI_TransmitReceive_IT+0x140>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b04      	cmp	r3, #4
 8003642:	d003      	beq.n	800364c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2205      	movs	r2, #5
 8003648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003682:	d906      	bls.n	8003692 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a23      	ldr	r2, [pc, #140]	; (8003714 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003688:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_SPI_TransmitReceive_IT+0x150>)
 800368e:	651a      	str	r2, [r3, #80]	; 0x50
 8003690:	e005      	b.n	800369e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <HAL_SPI_TransmitReceive_IT+0x154>)
 8003696:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a21      	ldr	r2, [pc, #132]	; (8003720 <HAL_SPI_TransmitReceive_IT+0x158>)
 800369c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a6:	d802      	bhi.n	80036ae <HAL_SPI_TransmitReceive_IT+0xe6>
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d908      	bls.n	80036c0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	e007      	b.n	80036d0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ce:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d007      	beq.n	80036ee <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ec:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003704:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003706:	7dfb      	ldrb	r3, [r7, #23]
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	08003aaf 	.word	0x08003aaf
 8003718:	08003b15 	.word	0x08003b15
 800371c:	0800395f 	.word	0x0800395f
 8003720:	08003a1d 	.word	0x08003a1d

08003724 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10e      	bne.n	8003764 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
    return;
 8003762:	e0ce      	b.n	8003902 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_SPI_IRQHandler+0x5e>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
    return;
 8003780:	e0bf      	b.n	8003902 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_SPI_IRQHandler+0x7e>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80b0 	beq.w	8003902 <HAL_SPI_IRQHandler+0x1de>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80aa 	beq.w	8003902 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d011      	beq.n	80037e8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	e00b      	b.n	8003800 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
        return;
 80037fe:	e080      	b.n	8003902 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	2b00      	cmp	r3, #0
 800385e:	d04f      	beq.n	8003900 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_SPI_IRQHandler+0x168>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d034      	beq.n	80038f6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0203 	bic.w	r2, r2, #3
 800389a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d011      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	4a17      	ldr	r2, [pc, #92]	; (8003908 <HAL_SPI_IRQHandler+0x1e4>)
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fe6d 	bl	8001590 <HAL_DMA_Abort_IT>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <HAL_SPI_IRQHandler+0x1e4>)
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fe57 	bl	8001590 <HAL_DMA_Abort_IT>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80038f4:	e003      	b.n	80038fe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f812 	bl	8003920 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038fc:	e000      	b.n	8003900 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80038fe:	bf00      	nop
    return;
 8003900:	bf00      	nop
  }
}
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	08003935 	.word	0x08003935

0800390c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff ffe5 	bl	8003920 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d923      	bls.n	80039ba <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	b292      	uxth	r2, r2
 800397e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b02      	subs	r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d11f      	bne.n	80039e8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	e016      	b.n	80039e8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f103 020c 	add.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a02:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 faba 	bl	8003f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d912      	bls.n	8003a54 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	1c9a      	adds	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b02      	subs	r3, #2
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a52:	e012      	b.n	8003a7a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d110      	bne.n	8003aa6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a92:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fa71 	bl	8003f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	b292      	uxth	r2, r2
 8003ac2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa3e 	bl	8003f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d110      	bne.n	8003b6c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b58:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa0e 	bl	8003f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f103 020c 	add.w	r2, r3, #12
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa28 	bl	800400c <SPI_CloseRx_ISR>
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	1c9a      	adds	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa02 	bl	800400c <SPI_CloseRx_ISR>
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c20:	f7fd fba4 	bl	800136c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c30:	f7fd fb9c 	bl	800136c <HAL_GetTick>
 8003c34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c36:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	0d1b      	lsrs	r3, r3, #20
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c46:	e054      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d050      	beq.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c50:	f7fd fb8c 	bl	800136c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d13d      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c7e:	d111      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c88:	d004      	beq.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d107      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cac:	d10f      	bne.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e017      	b.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d19b      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000000 	.word	0x20000000

08003d20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d32:	f7fd fb1b 	bl	800136c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d42:	f7fd fb13 	bl	800136c <HAL_GetTick>
 8003d46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d50:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00da      	lsls	r2, r3, #3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	0d1b      	lsrs	r3, r3, #20
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d68:	e060      	b.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d70:	d107      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d050      	beq.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d8a:	f7fd faef 	bl	800136c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d902      	bls.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d13d      	bne.n	8003e1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db8:	d111      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc2:	d004      	beq.n	8003dce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d107      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ddc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de6:	d10f      	bne.n	8003e08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e010      	b.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d196      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000000 	.word	0x20000000

08003e4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e60:	d111      	bne.n	8003e86 <SPI_EndRxTransaction+0x3a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6a:	d004      	beq.n	8003e76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d107      	bne.n	8003e86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff febd 	bl	8003c10 <SPI_WaitFlagStateUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e023      	b.n	8003ef4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb4:	d11d      	bne.n	8003ef2 <SPI_EndRxTransaction+0xa6>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebe:	d004      	beq.n	8003eca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d113      	bne.n	8003ef2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff22 	bl	8003d20 <SPI_WaitFifoStateUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e000      	b.n	8003ef4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff ff03 	bl	8003d20 <SPI_WaitFifoStateUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e027      	b.n	8003f80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff fe68 	bl	8003c10 <SPI_WaitFlagStateUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e014      	b.n	8003f80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7ff fedc 	bl	8003d20 <SPI_WaitFifoStateUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e000      	b.n	8003f80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f90:	f7fd f9ec 	bl	800136c <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0220 	bic.w	r2, r2, #32
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	2164      	movs	r1, #100	; 0x64
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ffa6 	bl	8003efc <SPI_EndRxTxTransaction>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d115      	bne.n	8003ff6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d107      	bne.n	8003fe6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fe8a 	bl	8000cf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003fe4:	e00e      	b.n	8004004 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fc8c 	bl	800390c <HAL_SPI_TxRxCpltCallback>
}
 8003ff4:	e006      	b.n	8004004 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fc8e 	bl	8003920 <HAL_SPI_ErrorCallback>
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004022:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004024:	f7fd f9a2 	bl	800136c <HAL_GetTick>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	2164      	movs	r1, #100	; 0x64
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff ff0c 	bl	8003e4c <SPI_EndRxTransaction>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fe4e 	bl	8000cf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800405c:	e002      	b.n	8004064 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fc5e 	bl	8003920 <HAL_SPI_ErrorCallback>
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e049      	b.n	8004112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc ff12 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f000 f9d0 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d001      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e04f      	b.n	80041d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01d      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x76>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d018      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x76>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x76>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x76>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_TIM_Base_Start_IT+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d009      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x76>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x76>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d115      	bne.n	80041be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d015      	beq.n	80041d0 <HAL_TIM_Base_Start_IT+0xb4>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041aa:	d011      	beq.n	80041d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	e008      	b.n	80041d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40013400 	.word	0x40013400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	00010007 	.word	0x00010007

080041fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d020      	beq.n	8004260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01b      	beq.n	8004260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0202 	mvn.w	r2, #2
 8004230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8e4 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8d6 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f8e7 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d020      	beq.n	80042ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0204 	mvn.w	r2, #4
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8be 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8b0 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8c1 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d020      	beq.n	80042f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01b      	beq.n	80042f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0208 	mvn.w	r2, #8
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2204      	movs	r2, #4
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f898 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f88a 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f89b 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d020      	beq.n	8004344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0210 	mvn.w	r2, #16
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2208      	movs	r2, #8
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f872 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f864 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f875 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0201 	mvn.w	r2, #1
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fcb0 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f906 	bl	8004598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8fe 	bl	80045ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f834 	bl	800443c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0220 	mvn.w	r2, #32
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8c6 	bl	8004584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a40      	ldr	r2, [pc, #256]	; (8004564 <TIM_Base_SetConfig+0x114>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3d      	ldr	r2, [pc, #244]	; (8004568 <TIM_Base_SetConfig+0x118>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3c      	ldr	r2, [pc, #240]	; (800456c <TIM_Base_SetConfig+0x11c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <TIM_Base_SetConfig+0x120>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3a      	ldr	r2, [pc, #232]	; (8004574 <TIM_Base_SetConfig+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2f      	ldr	r2, [pc, #188]	; (8004564 <TIM_Base_SetConfig+0x114>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01f      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d01b      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <TIM_Base_SetConfig+0x118>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d017      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2b      	ldr	r2, [pc, #172]	; (800456c <TIM_Base_SetConfig+0x11c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <TIM_Base_SetConfig+0x120>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a29      	ldr	r2, [pc, #164]	; (8004574 <TIM_Base_SetConfig+0x124>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <TIM_Base_SetConfig+0x128>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <TIM_Base_SetConfig+0x12c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <TIM_Base_SetConfig+0x130>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <TIM_Base_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00f      	beq.n	8004548 <TIM_Base_SetConfig+0xf8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <TIM_Base_SetConfig+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00b      	beq.n	8004548 <TIM_Base_SetConfig+0xf8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <TIM_Base_SetConfig+0x128>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_Base_SetConfig+0xf8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a10      	ldr	r2, [pc, #64]	; (800457c <TIM_Base_SetConfig+0x12c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_Base_SetConfig+0xf8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <TIM_Base_SetConfig+0x130>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	615a      	str	r2, [r3, #20]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e040      	b.n	8004654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fc90 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fc34 	bl	8004e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f979 	bl	8004904 <UART_SetConfig>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e01b      	b.n	8004654 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fcb3 	bl	8004fb8 <UART_CheckIdleState>
 8004652:	4603      	mov	r3, r0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004670:	2b20      	cmp	r3, #32
 8004672:	d178      	bne.n	8004766 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_UART_Transmit+0x24>
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e071      	b.n	8004768 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2221      	movs	r2, #33	; 0x21
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004692:	f7fc fe6b 	bl	800136c <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d108      	bne.n	80046c4 <HAL_UART_Transmit+0x68>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e003      	b.n	80046cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046cc:	e030      	b.n	8004730 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fd15 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e03c      	b.n	8004768 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	b292      	uxth	r2, r2
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	3302      	adds	r3, #2
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e008      	b.n	800471e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b292      	uxth	r2, r2
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1c8      	bne.n	80046ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fcde 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e005      	b.n	8004768 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004786:	2b20      	cmp	r3, #32
 8004788:	f040 80b6 	bne.w	80048f8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_UART_Receive+0x28>
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0ae      	b.n	80048fa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2222      	movs	r2, #34	; 0x22
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047b2:	f7fc fddb 	bl	800136c <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d0:	d10e      	bne.n	80047f0 <HAL_UART_Receive+0x80>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <HAL_UART_Receive+0x76>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047e4:	e02d      	b.n	8004842 <HAL_UART_Receive+0xd2>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ee:	e028      	b.n	8004842 <HAL_UART_Receive+0xd2>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_UART_Receive+0xa4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_UART_Receive+0x9a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	22ff      	movs	r2, #255	; 0xff
 8004804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004808:	e01b      	b.n	8004842 <HAL_UART_Receive+0xd2>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	227f      	movs	r2, #127	; 0x7f
 800480e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004812:	e016      	b.n	8004842 <HAL_UART_Receive+0xd2>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800481c:	d10d      	bne.n	800483a <HAL_UART_Receive+0xca>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <HAL_UART_Receive+0xc0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	227f      	movs	r2, #127	; 0x7f
 800482a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800482e:	e008      	b.n	8004842 <HAL_UART_Receive+0xd2>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	223f      	movs	r2, #63	; 0x3f
 8004834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004838:	e003      	b.n	8004842 <HAL_UART_Receive+0xd2>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004848:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d108      	bne.n	8004866 <HAL_UART_Receive+0xf6>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e003      	b.n	800486e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800486e:	e037      	b.n	80048e0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	2120      	movs	r1, #32
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fc44 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e033      	b.n	80048fa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10c      	bne.n	80048b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800489e:	b29a      	uxth	r2, r3
 80048a0:	8a7b      	ldrh	r3, [r7, #18]
 80048a2:	4013      	ands	r3, r2
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	3302      	adds	r3, #2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e00d      	b.n	80048ce <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	8a7b      	ldrh	r3, [r7, #18]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4013      	ands	r3, r2
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1c1      	bne.n	8004870 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004908:	b08a      	sub	sp, #40	; 0x28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	431a      	orrs	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4313      	orrs	r3, r2
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4ba4      	ldr	r3, [pc, #656]	; (8004bc4 <UART_SetConfig+0x2c0>)
 8004934:	4013      	ands	r3, r2
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800493c:	430b      	orrs	r3, r1
 800493e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a99      	ldr	r2, [pc, #612]	; (8004bc8 <UART_SetConfig+0x2c4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	4313      	orrs	r3, r2
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	430a      	orrs	r2, r1
 8004982:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a90      	ldr	r2, [pc, #576]	; (8004bcc <UART_SetConfig+0x2c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d126      	bne.n	80049dc <UART_SetConfig+0xd8>
 800498e:	4b90      	ldr	r3, [pc, #576]	; (8004bd0 <UART_SetConfig+0x2cc>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b03      	cmp	r3, #3
 800499a:	d81b      	bhi.n	80049d4 <UART_SetConfig+0xd0>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0xa0>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	080049cd 	.word	0x080049cd
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ba:	e116      	b.n	8004bea <UART_SetConfig+0x2e6>
 80049bc:	2302      	movs	r3, #2
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e112      	b.n	8004bea <UART_SetConfig+0x2e6>
 80049c4:	2304      	movs	r3, #4
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e10e      	b.n	8004bea <UART_SetConfig+0x2e6>
 80049cc:	2308      	movs	r3, #8
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d2:	e10a      	b.n	8004bea <UART_SetConfig+0x2e6>
 80049d4:	2310      	movs	r3, #16
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049da:	e106      	b.n	8004bea <UART_SetConfig+0x2e6>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7c      	ldr	r2, [pc, #496]	; (8004bd4 <UART_SetConfig+0x2d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d138      	bne.n	8004a58 <UART_SetConfig+0x154>
 80049e6:	4b7a      	ldr	r3, [pc, #488]	; (8004bd0 <UART_SetConfig+0x2cc>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	d82d      	bhi.n	8004a50 <UART_SetConfig+0x14c>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0xf8>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a31 	.word	0x08004a31
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08004a51 	.word	0x08004a51
 8004a08:	08004a51 	.word	0x08004a51
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a51 	.word	0x08004a51
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a51 	.word	0x08004a51
 8004a1c:	08004a39 	.word	0x08004a39
 8004a20:	08004a51 	.word	0x08004a51
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a49 	.word	0x08004a49
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	e0d8      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3e:	e0d4      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e0d0      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e0cc      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a56:	e0c8      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a5e      	ldr	r2, [pc, #376]	; (8004bd8 <UART_SetConfig+0x2d4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d125      	bne.n	8004aae <UART_SetConfig+0x1aa>
 8004a62:	4b5b      	ldr	r3, [pc, #364]	; (8004bd0 <UART_SetConfig+0x2cc>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d016      	beq.n	8004a9e <UART_SetConfig+0x19a>
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d818      	bhi.n	8004aa6 <UART_SetConfig+0x1a2>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d00a      	beq.n	8004a8e <UART_SetConfig+0x18a>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d814      	bhi.n	8004aa6 <UART_SetConfig+0x1a2>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <UART_SetConfig+0x182>
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d008      	beq.n	8004a96 <UART_SetConfig+0x192>
 8004a84:	e00f      	b.n	8004aa6 <UART_SetConfig+0x1a2>
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8c:	e0ad      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a94:	e0a9      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a96:	2304      	movs	r3, #4
 8004a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9c:	e0a5      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa4:	e0a1      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aac:	e09d      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a4a      	ldr	r2, [pc, #296]	; (8004bdc <UART_SetConfig+0x2d8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d125      	bne.n	8004b04 <UART_SetConfig+0x200>
 8004ab8:	4b45      	ldr	r3, [pc, #276]	; (8004bd0 <UART_SetConfig+0x2cc>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac4:	d016      	beq.n	8004af4 <UART_SetConfig+0x1f0>
 8004ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac8:	d818      	bhi.n	8004afc <UART_SetConfig+0x1f8>
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d00a      	beq.n	8004ae4 <UART_SetConfig+0x1e0>
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d814      	bhi.n	8004afc <UART_SetConfig+0x1f8>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <UART_SetConfig+0x1d8>
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d008      	beq.n	8004aec <UART_SetConfig+0x1e8>
 8004ada:	e00f      	b.n	8004afc <UART_SetConfig+0x1f8>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e082      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e07e      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004aec:	2304      	movs	r3, #4
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e07a      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004af4:	2308      	movs	r3, #8
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e076      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004afc:	2310      	movs	r3, #16
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e072      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <UART_SetConfig+0x2dc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d12a      	bne.n	8004b64 <UART_SetConfig+0x260>
 8004b0e:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <UART_SetConfig+0x2cc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1c:	d01a      	beq.n	8004b54 <UART_SetConfig+0x250>
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b22:	d81b      	bhi.n	8004b5c <UART_SetConfig+0x258>
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b28:	d00c      	beq.n	8004b44 <UART_SetConfig+0x240>
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d815      	bhi.n	8004b5c <UART_SetConfig+0x258>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <UART_SetConfig+0x238>
 8004b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b38:	d008      	beq.n	8004b4c <UART_SetConfig+0x248>
 8004b3a:	e00f      	b.n	8004b5c <UART_SetConfig+0x258>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e052      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004b44:	2302      	movs	r3, #2
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e04e      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	e04a      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004b54:	2308      	movs	r3, #8
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e046      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e042      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <UART_SetConfig+0x2c4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d13a      	bne.n	8004be4 <UART_SetConfig+0x2e0>
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <UART_SetConfig+0x2cc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7c:	d01a      	beq.n	8004bb4 <UART_SetConfig+0x2b0>
 8004b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b82:	d81b      	bhi.n	8004bbc <UART_SetConfig+0x2b8>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d00c      	beq.n	8004ba4 <UART_SetConfig+0x2a0>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8e:	d815      	bhi.n	8004bbc <UART_SetConfig+0x2b8>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <UART_SetConfig+0x298>
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d008      	beq.n	8004bac <UART_SetConfig+0x2a8>
 8004b9a:	e00f      	b.n	8004bbc <UART_SetConfig+0x2b8>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e022      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e01e      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e01a      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e016      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e012      	b.n	8004bea <UART_SetConfig+0x2e6>
 8004bc4:	efff69f3 	.word	0xefff69f3
 8004bc8:	40008000 	.word	0x40008000
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40004400 	.word	0x40004400
 8004bd8:	40004800 	.word	0x40004800
 8004bdc:	40004c00 	.word	0x40004c00
 8004be0:	40005000 	.word	0x40005000
 8004be4:	2310      	movs	r3, #16
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a9f      	ldr	r2, [pc, #636]	; (8004e6c <UART_SetConfig+0x568>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d17a      	bne.n	8004cea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d824      	bhi.n	8004c46 <UART_SetConfig+0x342>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x300>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c37 	.word	0x08004c37
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c47 	.word	0x08004c47
 8004c24:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fd fc8e 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	61f8      	str	r0, [r7, #28]
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b8f      	ldr	r3, [pc, #572]	; (8004e70 <UART_SetConfig+0x56c>)
 8004c32:	61fb      	str	r3, [r7, #28]
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fd fbef 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8004c3a:	61f8      	str	r0, [r7, #28]
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80fb 	beq.w	8004e50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d305      	bcc.n	8004c76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d903      	bls.n	8004c7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c7c:	e0e8      	b.n	8004e50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2200      	movs	r2, #0
 8004c82:	461c      	mov	r4, r3
 8004c84:	4615      	mov	r5, r2
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	022b      	lsls	r3, r5, #8
 8004c90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c94:	0222      	lsls	r2, r4, #8
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6849      	ldr	r1, [r1, #4]
 8004c9a:	0849      	lsrs	r1, r1, #1
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	4688      	mov	r8, r1
 8004ca0:	4681      	mov	r9, r0
 8004ca2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ca6:	eb43 0b09 	adc.w	fp, r3, r9
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb8:	4650      	mov	r0, sl
 8004cba:	4659      	mov	r1, fp
 8004cbc:	f7fb fad8 	bl	8000270 <__aeabi_uldivmod>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cce:	d308      	bcc.n	8004ce2 <UART_SetConfig+0x3de>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d204      	bcs.n	8004ce2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e0b6      	b.n	8004e50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ce8:	e0b2      	b.n	8004e50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d15e      	bne.n	8004db2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d828      	bhi.n	8004d4e <UART_SetConfig+0x44a>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x400>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d39 	.word	0x08004d39
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d3f 	.word	0x08004d3f
 8004d18:	08004d4f 	.word	0x08004d4f
 8004d1c:	08004d4f 	.word	0x08004d4f
 8004d20:	08004d4f 	.word	0x08004d4f
 8004d24:	08004d47 	.word	0x08004d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fd fc0e 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	61f8      	str	r0, [r7, #28]
        break;
 8004d2e:	e014      	b.n	8004d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7fd fc20 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8004d34:	61f8      	str	r0, [r7, #28]
        break;
 8004d36:	e010      	b.n	8004d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <UART_SetConfig+0x56c>)
 8004d3a:	61fb      	str	r3, [r7, #28]
        break;
 8004d3c:	e00d      	b.n	8004d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fd fb6b 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8004d42:	61f8      	str	r0, [r7, #28]
        break;
 8004d44:	e009      	b.n	8004d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4a:	61fb      	str	r3, [r7, #28]
        break;
 8004d4c:	e005      	b.n	8004d5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d077      	beq.n	8004e50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	005a      	lsls	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	441a      	add	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d916      	bls.n	8004daa <UART_SetConfig+0x4a6>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d212      	bcs.n	8004daa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f023 030f 	bic.w	r3, r3, #15
 8004d8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	8afb      	ldrh	r3, [r7, #22]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	8afa      	ldrh	r2, [r7, #22]
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	e052      	b.n	8004e50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004db0:	e04e      	b.n	8004e50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d827      	bhi.n	8004e0a <UART_SetConfig+0x506>
 8004dba:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x4bc>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fd fbb0 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8004de8:	61f8      	str	r0, [r7, #28]
        break;
 8004dea:	e014      	b.n	8004e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fd fbc2 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8004df0:	61f8      	str	r0, [r7, #28]
        break;
 8004df2:	e010      	b.n	8004e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <UART_SetConfig+0x56c>)
 8004df6:	61fb      	str	r3, [r7, #28]
        break;
 8004df8:	e00d      	b.n	8004e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fd fb0d 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8004dfe:	61f8      	str	r0, [r7, #28]
        break;
 8004e00:	e009      	b.n	8004e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	61fb      	str	r3, [r7, #28]
        break;
 8004e08:	e005      	b.n	8004e16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e14:	bf00      	nop
    }

    if (pclk != 0U)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d019      	beq.n	8004e50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	085a      	lsrs	r2, r3, #1
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	441a      	add	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b0f      	cmp	r3, #15
 8004e34:	d909      	bls.n	8004e4a <UART_SetConfig+0x546>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d205      	bcs.n	8004e4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	e002      	b.n	8004e50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40008000 	.word	0x40008000
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d10a      	bne.n	8004f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b098      	sub	sp, #96	; 0x60
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc8:	f7fc f9d0 	bl	800136c <HAL_GetTick>
 8004fcc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d12e      	bne.n	800503a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f88c 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d021      	beq.n	800503a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500a:	653b      	str	r3, [r7, #80]	; 0x50
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
 8005016:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800501a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e6      	bne.n	8004ff6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e062      	b.n	8005100 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d149      	bne.n	80050dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f856 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d03c      	beq.n	80050dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	623b      	str	r3, [r7, #32]
   return(result);
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005080:	633b      	str	r3, [r7, #48]	; 0x30
 8005082:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e6      	bne.n	8005062 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b4:	61fa      	str	r2, [r7, #28]
 80050b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	69b9      	ldr	r1, [r7, #24]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	617b      	str	r3, [r7, #20]
   return(result);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e011      	b.n	8005100 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3758      	adds	r7, #88	; 0x58
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005118:	e049      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d045      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fc f923 	bl	800136c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <UART_WaitOnFlagUntilTimeout+0x30>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e048      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d031      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b08      	cmp	r3, #8
 8005156:	d110      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2208      	movs	r2, #8
 800515e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f838 	bl	80051d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2208      	movs	r2, #8
 800516a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e029      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d111      	bne.n	80051ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f81e 	bl	80051d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e00f      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d0a6      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b095      	sub	sp, #84	; 0x54
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	643b      	str	r3, [r7, #64]	; 0x40
 80051fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	64bb      	str	r3, [r7, #72]	; 0x48
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005248:	2b01      	cmp	r3, #1
 800524a:	d118      	bne.n	800527e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60bb      	str	r3, [r7, #8]
   return(result);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0310 	bic.w	r3, r3, #16
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005292:	bf00      	nop
 8005294:	3754      	adds	r7, #84	; 0x54
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <std>:
 80052a0:	2300      	movs	r3, #0
 80052a2:	b510      	push	{r4, lr}
 80052a4:	4604      	mov	r4, r0
 80052a6:	e9c0 3300 	strd	r3, r3, [r0]
 80052aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ae:	6083      	str	r3, [r0, #8]
 80052b0:	8181      	strh	r1, [r0, #12]
 80052b2:	6643      	str	r3, [r0, #100]	; 0x64
 80052b4:	81c2      	strh	r2, [r0, #14]
 80052b6:	6183      	str	r3, [r0, #24]
 80052b8:	4619      	mov	r1, r3
 80052ba:	2208      	movs	r2, #8
 80052bc:	305c      	adds	r0, #92	; 0x5c
 80052be:	f000 f8f4 	bl	80054aa <memset>
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <std+0x38>)
 80052c4:	6263      	str	r3, [r4, #36]	; 0x24
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <std+0x3c>)
 80052c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <std+0x40>)
 80052cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <std+0x44>)
 80052d0:	6224      	str	r4, [r4, #32]
 80052d2:	6323      	str	r3, [r4, #48]	; 0x30
 80052d4:	bd10      	pop	{r4, pc}
 80052d6:	bf00      	nop
 80052d8:	08005425 	.word	0x08005425
 80052dc:	08005447 	.word	0x08005447
 80052e0:	0800547f 	.word	0x0800547f
 80052e4:	080054a3 	.word	0x080054a3

080052e8 <stdio_exit_handler>:
 80052e8:	4a02      	ldr	r2, [pc, #8]	; (80052f4 <stdio_exit_handler+0xc>)
 80052ea:	4903      	ldr	r1, [pc, #12]	; (80052f8 <stdio_exit_handler+0x10>)
 80052ec:	4803      	ldr	r0, [pc, #12]	; (80052fc <stdio_exit_handler+0x14>)
 80052ee:	f000 b869 	b.w	80053c4 <_fwalk_sglue>
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
 80052f8:	08005e45 	.word	0x08005e45
 80052fc:	20000018 	.word	0x20000018

08005300 <cleanup_stdio>:
 8005300:	6841      	ldr	r1, [r0, #4]
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <cleanup_stdio+0x34>)
 8005304:	4299      	cmp	r1, r3
 8005306:	b510      	push	{r4, lr}
 8005308:	4604      	mov	r4, r0
 800530a:	d001      	beq.n	8005310 <cleanup_stdio+0x10>
 800530c:	f000 fd9a 	bl	8005e44 <_fflush_r>
 8005310:	68a1      	ldr	r1, [r4, #8]
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <cleanup_stdio+0x38>)
 8005314:	4299      	cmp	r1, r3
 8005316:	d002      	beq.n	800531e <cleanup_stdio+0x1e>
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fd93 	bl	8005e44 <_fflush_r>
 800531e:	68e1      	ldr	r1, [r4, #12]
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <cleanup_stdio+0x3c>)
 8005322:	4299      	cmp	r1, r3
 8005324:	d004      	beq.n	8005330 <cleanup_stdio+0x30>
 8005326:	4620      	mov	r0, r4
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f000 bd8a 	b.w	8005e44 <_fflush_r>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	200002b0 	.word	0x200002b0
 8005338:	20000318 	.word	0x20000318
 800533c:	20000380 	.word	0x20000380

08005340 <global_stdio_init.part.0>:
 8005340:	b510      	push	{r4, lr}
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <global_stdio_init.part.0+0x30>)
 8005344:	4c0b      	ldr	r4, [pc, #44]	; (8005374 <global_stdio_init.part.0+0x34>)
 8005346:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <global_stdio_init.part.0+0x38>)
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	4620      	mov	r0, r4
 800534c:	2200      	movs	r2, #0
 800534e:	2104      	movs	r1, #4
 8005350:	f7ff ffa6 	bl	80052a0 <std>
 8005354:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005358:	2201      	movs	r2, #1
 800535a:	2109      	movs	r1, #9
 800535c:	f7ff ffa0 	bl	80052a0 <std>
 8005360:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005364:	2202      	movs	r2, #2
 8005366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800536a:	2112      	movs	r1, #18
 800536c:	f7ff bf98 	b.w	80052a0 <std>
 8005370:	200003e8 	.word	0x200003e8
 8005374:	200002b0 	.word	0x200002b0
 8005378:	080052e9 	.word	0x080052e9

0800537c <__sfp_lock_acquire>:
 800537c:	4801      	ldr	r0, [pc, #4]	; (8005384 <__sfp_lock_acquire+0x8>)
 800537e:	f000 b90d 	b.w	800559c <__retarget_lock_acquire_recursive>
 8005382:	bf00      	nop
 8005384:	200003f1 	.word	0x200003f1

08005388 <__sfp_lock_release>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__sfp_lock_release+0x8>)
 800538a:	f000 b908 	b.w	800559e <__retarget_lock_release_recursive>
 800538e:	bf00      	nop
 8005390:	200003f1 	.word	0x200003f1

08005394 <__sinit>:
 8005394:	b510      	push	{r4, lr}
 8005396:	4604      	mov	r4, r0
 8005398:	f7ff fff0 	bl	800537c <__sfp_lock_acquire>
 800539c:	6a23      	ldr	r3, [r4, #32]
 800539e:	b11b      	cbz	r3, 80053a8 <__sinit+0x14>
 80053a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a4:	f7ff bff0 	b.w	8005388 <__sfp_lock_release>
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <__sinit+0x28>)
 80053aa:	6223      	str	r3, [r4, #32]
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <__sinit+0x2c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f5      	bne.n	80053a0 <__sinit+0xc>
 80053b4:	f7ff ffc4 	bl	8005340 <global_stdio_init.part.0>
 80053b8:	e7f2      	b.n	80053a0 <__sinit+0xc>
 80053ba:	bf00      	nop
 80053bc:	08005301 	.word	0x08005301
 80053c0:	200003e8 	.word	0x200003e8

080053c4 <_fwalk_sglue>:
 80053c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c8:	4607      	mov	r7, r0
 80053ca:	4688      	mov	r8, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	2600      	movs	r6, #0
 80053d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053d4:	f1b9 0901 	subs.w	r9, r9, #1
 80053d8:	d505      	bpl.n	80053e6 <_fwalk_sglue+0x22>
 80053da:	6824      	ldr	r4, [r4, #0]
 80053dc:	2c00      	cmp	r4, #0
 80053de:	d1f7      	bne.n	80053d0 <_fwalk_sglue+0xc>
 80053e0:	4630      	mov	r0, r6
 80053e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d907      	bls.n	80053fc <_fwalk_sglue+0x38>
 80053ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053f0:	3301      	adds	r3, #1
 80053f2:	d003      	beq.n	80053fc <_fwalk_sglue+0x38>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4638      	mov	r0, r7
 80053f8:	47c0      	blx	r8
 80053fa:	4306      	orrs	r6, r0
 80053fc:	3568      	adds	r5, #104	; 0x68
 80053fe:	e7e9      	b.n	80053d4 <_fwalk_sglue+0x10>

08005400 <iprintf>:
 8005400:	b40f      	push	{r0, r1, r2, r3}
 8005402:	b507      	push	{r0, r1, r2, lr}
 8005404:	4906      	ldr	r1, [pc, #24]	; (8005420 <iprintf+0x20>)
 8005406:	ab04      	add	r3, sp, #16
 8005408:	6808      	ldr	r0, [r1, #0]
 800540a:	f853 2b04 	ldr.w	r2, [r3], #4
 800540e:	6881      	ldr	r1, [r0, #8]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	f000 f9e7 	bl	80057e4 <_vfiprintf_r>
 8005416:	b003      	add	sp, #12
 8005418:	f85d eb04 	ldr.w	lr, [sp], #4
 800541c:	b004      	add	sp, #16
 800541e:	4770      	bx	lr
 8005420:	20000064 	.word	0x20000064

08005424 <__sread>:
 8005424:	b510      	push	{r4, lr}
 8005426:	460c      	mov	r4, r1
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	f000 f868 	bl	8005500 <_read_r>
 8005430:	2800      	cmp	r0, #0
 8005432:	bfab      	itete	ge
 8005434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005436:	89a3      	ldrhlt	r3, [r4, #12]
 8005438:	181b      	addge	r3, r3, r0
 800543a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800543e:	bfac      	ite	ge
 8005440:	6563      	strge	r3, [r4, #84]	; 0x54
 8005442:	81a3      	strhlt	r3, [r4, #12]
 8005444:	bd10      	pop	{r4, pc}

08005446 <__swrite>:
 8005446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	461f      	mov	r7, r3
 800544c:	898b      	ldrh	r3, [r1, #12]
 800544e:	05db      	lsls	r3, r3, #23
 8005450:	4605      	mov	r5, r0
 8005452:	460c      	mov	r4, r1
 8005454:	4616      	mov	r6, r2
 8005456:	d505      	bpl.n	8005464 <__swrite+0x1e>
 8005458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545c:	2302      	movs	r3, #2
 800545e:	2200      	movs	r2, #0
 8005460:	f000 f83c 	bl	80054dc <_lseek_r>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800546a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	4632      	mov	r2, r6
 8005472:	463b      	mov	r3, r7
 8005474:	4628      	mov	r0, r5
 8005476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547a:	f000 b853 	b.w	8005524 <_write_r>

0800547e <__sseek>:
 800547e:	b510      	push	{r4, lr}
 8005480:	460c      	mov	r4, r1
 8005482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005486:	f000 f829 	bl	80054dc <_lseek_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	bf15      	itete	ne
 8005490:	6560      	strne	r0, [r4, #84]	; 0x54
 8005492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800549a:	81a3      	strheq	r3, [r4, #12]
 800549c:	bf18      	it	ne
 800549e:	81a3      	strhne	r3, [r4, #12]
 80054a0:	bd10      	pop	{r4, pc}

080054a2 <__sclose>:
 80054a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a6:	f000 b809 	b.w	80054bc <_close_r>

080054aa <memset>:
 80054aa:	4402      	add	r2, r0
 80054ac:	4603      	mov	r3, r0
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d100      	bne.n	80054b4 <memset+0xa>
 80054b2:	4770      	bx	lr
 80054b4:	f803 1b01 	strb.w	r1, [r3], #1
 80054b8:	e7f9      	b.n	80054ae <memset+0x4>
	...

080054bc <_close_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d06      	ldr	r5, [pc, #24]	; (80054d8 <_close_r+0x1c>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	f7fb fe75 	bl	80011b6 <_close>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d102      	bne.n	80054d6 <_close_r+0x1a>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	b103      	cbz	r3, 80054d6 <_close_r+0x1a>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	200003ec 	.word	0x200003ec

080054dc <_lseek_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	; (80054fc <_lseek_r+0x20>)
 80054e0:	4604      	mov	r4, r0
 80054e2:	4608      	mov	r0, r1
 80054e4:	4611      	mov	r1, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fb fe8a 	bl	8001204 <_lseek>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_lseek_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_lseek_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	200003ec 	.word	0x200003ec

08005500 <_read_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_read_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fb fe18 	bl	8001144 <_read>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_read_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_read_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200003ec 	.word	0x200003ec

08005524 <_write_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d07      	ldr	r5, [pc, #28]	; (8005544 <_write_r+0x20>)
 8005528:	4604      	mov	r4, r0
 800552a:	4608      	mov	r0, r1
 800552c:	4611      	mov	r1, r2
 800552e:	2200      	movs	r2, #0
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fb fe23 	bl	800117e <_write>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_write_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_write_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	200003ec 	.word	0x200003ec

08005548 <__errno>:
 8005548:	4b01      	ldr	r3, [pc, #4]	; (8005550 <__errno+0x8>)
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000064 	.word	0x20000064

08005554 <__libc_init_array>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4d0d      	ldr	r5, [pc, #52]	; (800558c <__libc_init_array+0x38>)
 8005558:	4c0d      	ldr	r4, [pc, #52]	; (8005590 <__libc_init_array+0x3c>)
 800555a:	1b64      	subs	r4, r4, r5
 800555c:	10a4      	asrs	r4, r4, #2
 800555e:	2600      	movs	r6, #0
 8005560:	42a6      	cmp	r6, r4
 8005562:	d109      	bne.n	8005578 <__libc_init_array+0x24>
 8005564:	4d0b      	ldr	r5, [pc, #44]	; (8005594 <__libc_init_array+0x40>)
 8005566:	4c0c      	ldr	r4, [pc, #48]	; (8005598 <__libc_init_array+0x44>)
 8005568:	f000 fdbe 	bl	80060e8 <_init>
 800556c:	1b64      	subs	r4, r4, r5
 800556e:	10a4      	asrs	r4, r4, #2
 8005570:	2600      	movs	r6, #0
 8005572:	42a6      	cmp	r6, r4
 8005574:	d105      	bne.n	8005582 <__libc_init_array+0x2e>
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	f855 3b04 	ldr.w	r3, [r5], #4
 800557c:	4798      	blx	r3
 800557e:	3601      	adds	r6, #1
 8005580:	e7ee      	b.n	8005560 <__libc_init_array+0xc>
 8005582:	f855 3b04 	ldr.w	r3, [r5], #4
 8005586:	4798      	blx	r3
 8005588:	3601      	adds	r6, #1
 800558a:	e7f2      	b.n	8005572 <__libc_init_array+0x1e>
 800558c:	080061ec 	.word	0x080061ec
 8005590:	080061ec 	.word	0x080061ec
 8005594:	080061ec 	.word	0x080061ec
 8005598:	080061f0 	.word	0x080061f0

0800559c <__retarget_lock_acquire_recursive>:
 800559c:	4770      	bx	lr

0800559e <__retarget_lock_release_recursive>:
 800559e:	4770      	bx	lr

080055a0 <_free_r>:
 80055a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d044      	beq.n	8005630 <_free_r+0x90>
 80055a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055aa:	9001      	str	r0, [sp, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f1a1 0404 	sub.w	r4, r1, #4
 80055b2:	bfb8      	it	lt
 80055b4:	18e4      	addlt	r4, r4, r3
 80055b6:	f000 f8df 	bl	8005778 <__malloc_lock>
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <_free_r+0x94>)
 80055bc:	9801      	ldr	r0, [sp, #4]
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	b933      	cbnz	r3, 80055d0 <_free_r+0x30>
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	6014      	str	r4, [r2, #0]
 80055c6:	b003      	add	sp, #12
 80055c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055cc:	f000 b8da 	b.w	8005784 <__malloc_unlock>
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d908      	bls.n	80055e6 <_free_r+0x46>
 80055d4:	6825      	ldr	r5, [r4, #0]
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	428b      	cmp	r3, r1
 80055da:	bf01      	itttt	eq
 80055dc:	6819      	ldreq	r1, [r3, #0]
 80055de:	685b      	ldreq	r3, [r3, #4]
 80055e0:	1949      	addeq	r1, r1, r5
 80055e2:	6021      	streq	r1, [r4, #0]
 80055e4:	e7ed      	b.n	80055c2 <_free_r+0x22>
 80055e6:	461a      	mov	r2, r3
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b10b      	cbz	r3, 80055f0 <_free_r+0x50>
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d9fa      	bls.n	80055e6 <_free_r+0x46>
 80055f0:	6811      	ldr	r1, [r2, #0]
 80055f2:	1855      	adds	r5, r2, r1
 80055f4:	42a5      	cmp	r5, r4
 80055f6:	d10b      	bne.n	8005610 <_free_r+0x70>
 80055f8:	6824      	ldr	r4, [r4, #0]
 80055fa:	4421      	add	r1, r4
 80055fc:	1854      	adds	r4, r2, r1
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	d1e0      	bne.n	80055c6 <_free_r+0x26>
 8005604:	681c      	ldr	r4, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	6053      	str	r3, [r2, #4]
 800560a:	440c      	add	r4, r1
 800560c:	6014      	str	r4, [r2, #0]
 800560e:	e7da      	b.n	80055c6 <_free_r+0x26>
 8005610:	d902      	bls.n	8005618 <_free_r+0x78>
 8005612:	230c      	movs	r3, #12
 8005614:	6003      	str	r3, [r0, #0]
 8005616:	e7d6      	b.n	80055c6 <_free_r+0x26>
 8005618:	6825      	ldr	r5, [r4, #0]
 800561a:	1961      	adds	r1, r4, r5
 800561c:	428b      	cmp	r3, r1
 800561e:	bf04      	itt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	6063      	str	r3, [r4, #4]
 8005626:	bf04      	itt	eq
 8005628:	1949      	addeq	r1, r1, r5
 800562a:	6021      	streq	r1, [r4, #0]
 800562c:	6054      	str	r4, [r2, #4]
 800562e:	e7ca      	b.n	80055c6 <_free_r+0x26>
 8005630:	b003      	add	sp, #12
 8005632:	bd30      	pop	{r4, r5, pc}
 8005634:	200003f4 	.word	0x200003f4

08005638 <sbrk_aligned>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	4e0e      	ldr	r6, [pc, #56]	; (8005674 <sbrk_aligned+0x3c>)
 800563c:	460c      	mov	r4, r1
 800563e:	6831      	ldr	r1, [r6, #0]
 8005640:	4605      	mov	r5, r0
 8005642:	b911      	cbnz	r1, 800564a <sbrk_aligned+0x12>
 8005644:	f000 fcbc 	bl	8005fc0 <_sbrk_r>
 8005648:	6030      	str	r0, [r6, #0]
 800564a:	4621      	mov	r1, r4
 800564c:	4628      	mov	r0, r5
 800564e:	f000 fcb7 	bl	8005fc0 <_sbrk_r>
 8005652:	1c43      	adds	r3, r0, #1
 8005654:	d00a      	beq.n	800566c <sbrk_aligned+0x34>
 8005656:	1cc4      	adds	r4, r0, #3
 8005658:	f024 0403 	bic.w	r4, r4, #3
 800565c:	42a0      	cmp	r0, r4
 800565e:	d007      	beq.n	8005670 <sbrk_aligned+0x38>
 8005660:	1a21      	subs	r1, r4, r0
 8005662:	4628      	mov	r0, r5
 8005664:	f000 fcac 	bl	8005fc0 <_sbrk_r>
 8005668:	3001      	adds	r0, #1
 800566a:	d101      	bne.n	8005670 <sbrk_aligned+0x38>
 800566c:	f04f 34ff 	mov.w	r4, #4294967295
 8005670:	4620      	mov	r0, r4
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	200003f8 	.word	0x200003f8

08005678 <_malloc_r>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	1ccd      	adds	r5, r1, #3
 800567e:	f025 0503 	bic.w	r5, r5, #3
 8005682:	3508      	adds	r5, #8
 8005684:	2d0c      	cmp	r5, #12
 8005686:	bf38      	it	cc
 8005688:	250c      	movcc	r5, #12
 800568a:	2d00      	cmp	r5, #0
 800568c:	4607      	mov	r7, r0
 800568e:	db01      	blt.n	8005694 <_malloc_r+0x1c>
 8005690:	42a9      	cmp	r1, r5
 8005692:	d905      	bls.n	80056a0 <_malloc_r+0x28>
 8005694:	230c      	movs	r3, #12
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	2600      	movs	r6, #0
 800569a:	4630      	mov	r0, r6
 800569c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005774 <_malloc_r+0xfc>
 80056a4:	f000 f868 	bl	8005778 <__malloc_lock>
 80056a8:	f8d8 3000 	ldr.w	r3, [r8]
 80056ac:	461c      	mov	r4, r3
 80056ae:	bb5c      	cbnz	r4, 8005708 <_malloc_r+0x90>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ffc0 	bl	8005638 <sbrk_aligned>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	4604      	mov	r4, r0
 80056bc:	d155      	bne.n	800576a <_malloc_r+0xf2>
 80056be:	f8d8 4000 	ldr.w	r4, [r8]
 80056c2:	4626      	mov	r6, r4
 80056c4:	2e00      	cmp	r6, #0
 80056c6:	d145      	bne.n	8005754 <_malloc_r+0xdc>
 80056c8:	2c00      	cmp	r4, #0
 80056ca:	d048      	beq.n	800575e <_malloc_r+0xe6>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	4631      	mov	r1, r6
 80056d0:	4638      	mov	r0, r7
 80056d2:	eb04 0903 	add.w	r9, r4, r3
 80056d6:	f000 fc73 	bl	8005fc0 <_sbrk_r>
 80056da:	4581      	cmp	r9, r0
 80056dc:	d13f      	bne.n	800575e <_malloc_r+0xe6>
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	1a6d      	subs	r5, r5, r1
 80056e2:	4629      	mov	r1, r5
 80056e4:	4638      	mov	r0, r7
 80056e6:	f7ff ffa7 	bl	8005638 <sbrk_aligned>
 80056ea:	3001      	adds	r0, #1
 80056ec:	d037      	beq.n	800575e <_malloc_r+0xe6>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	442b      	add	r3, r5
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	f8d8 3000 	ldr.w	r3, [r8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d038      	beq.n	800576e <_malloc_r+0xf6>
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	42a2      	cmp	r2, r4
 8005700:	d12b      	bne.n	800575a <_malloc_r+0xe2>
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	e00f      	b.n	8005728 <_malloc_r+0xb0>
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	1b52      	subs	r2, r2, r5
 800570c:	d41f      	bmi.n	800574e <_malloc_r+0xd6>
 800570e:	2a0b      	cmp	r2, #11
 8005710:	d917      	bls.n	8005742 <_malloc_r+0xca>
 8005712:	1961      	adds	r1, r4, r5
 8005714:	42a3      	cmp	r3, r4
 8005716:	6025      	str	r5, [r4, #0]
 8005718:	bf18      	it	ne
 800571a:	6059      	strne	r1, [r3, #4]
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	bf08      	it	eq
 8005720:	f8c8 1000 	streq.w	r1, [r8]
 8005724:	5162      	str	r2, [r4, r5]
 8005726:	604b      	str	r3, [r1, #4]
 8005728:	4638      	mov	r0, r7
 800572a:	f104 060b 	add.w	r6, r4, #11
 800572e:	f000 f829 	bl	8005784 <__malloc_unlock>
 8005732:	f026 0607 	bic.w	r6, r6, #7
 8005736:	1d23      	adds	r3, r4, #4
 8005738:	1af2      	subs	r2, r6, r3
 800573a:	d0ae      	beq.n	800569a <_malloc_r+0x22>
 800573c:	1b9b      	subs	r3, r3, r6
 800573e:	50a3      	str	r3, [r4, r2]
 8005740:	e7ab      	b.n	800569a <_malloc_r+0x22>
 8005742:	42a3      	cmp	r3, r4
 8005744:	6862      	ldr	r2, [r4, #4]
 8005746:	d1dd      	bne.n	8005704 <_malloc_r+0x8c>
 8005748:	f8c8 2000 	str.w	r2, [r8]
 800574c:	e7ec      	b.n	8005728 <_malloc_r+0xb0>
 800574e:	4623      	mov	r3, r4
 8005750:	6864      	ldr	r4, [r4, #4]
 8005752:	e7ac      	b.n	80056ae <_malloc_r+0x36>
 8005754:	4634      	mov	r4, r6
 8005756:	6876      	ldr	r6, [r6, #4]
 8005758:	e7b4      	b.n	80056c4 <_malloc_r+0x4c>
 800575a:	4613      	mov	r3, r2
 800575c:	e7cc      	b.n	80056f8 <_malloc_r+0x80>
 800575e:	230c      	movs	r3, #12
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4638      	mov	r0, r7
 8005764:	f000 f80e 	bl	8005784 <__malloc_unlock>
 8005768:	e797      	b.n	800569a <_malloc_r+0x22>
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	e7dc      	b.n	8005728 <_malloc_r+0xb0>
 800576e:	605b      	str	r3, [r3, #4]
 8005770:	deff      	udf	#255	; 0xff
 8005772:	bf00      	nop
 8005774:	200003f4 	.word	0x200003f4

08005778 <__malloc_lock>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__malloc_lock+0x8>)
 800577a:	f7ff bf0f 	b.w	800559c <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	200003f0 	.word	0x200003f0

08005784 <__malloc_unlock>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__malloc_unlock+0x8>)
 8005786:	f7ff bf0a 	b.w	800559e <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	200003f0 	.word	0x200003f0

08005790 <__sfputc_r>:
 8005790:	6893      	ldr	r3, [r2, #8]
 8005792:	3b01      	subs	r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	b410      	push	{r4}
 8005798:	6093      	str	r3, [r2, #8]
 800579a:	da08      	bge.n	80057ae <__sfputc_r+0x1e>
 800579c:	6994      	ldr	r4, [r2, #24]
 800579e:	42a3      	cmp	r3, r4
 80057a0:	db01      	blt.n	80057a6 <__sfputc_r+0x16>
 80057a2:	290a      	cmp	r1, #10
 80057a4:	d103      	bne.n	80057ae <__sfputc_r+0x1e>
 80057a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057aa:	f000 bb73 	b.w	8005e94 <__swbuf_r>
 80057ae:	6813      	ldr	r3, [r2, #0]
 80057b0:	1c58      	adds	r0, r3, #1
 80057b2:	6010      	str	r0, [r2, #0]
 80057b4:	7019      	strb	r1, [r3, #0]
 80057b6:	4608      	mov	r0, r1
 80057b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057bc:	4770      	bx	lr

080057be <__sfputs_r>:
 80057be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c0:	4606      	mov	r6, r0
 80057c2:	460f      	mov	r7, r1
 80057c4:	4614      	mov	r4, r2
 80057c6:	18d5      	adds	r5, r2, r3
 80057c8:	42ac      	cmp	r4, r5
 80057ca:	d101      	bne.n	80057d0 <__sfputs_r+0x12>
 80057cc:	2000      	movs	r0, #0
 80057ce:	e007      	b.n	80057e0 <__sfputs_r+0x22>
 80057d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d4:	463a      	mov	r2, r7
 80057d6:	4630      	mov	r0, r6
 80057d8:	f7ff ffda 	bl	8005790 <__sfputc_r>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d1f3      	bne.n	80057c8 <__sfputs_r+0xa>
 80057e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057e4 <_vfiprintf_r>:
 80057e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e8:	460d      	mov	r5, r1
 80057ea:	b09d      	sub	sp, #116	; 0x74
 80057ec:	4614      	mov	r4, r2
 80057ee:	4698      	mov	r8, r3
 80057f0:	4606      	mov	r6, r0
 80057f2:	b118      	cbz	r0, 80057fc <_vfiprintf_r+0x18>
 80057f4:	6a03      	ldr	r3, [r0, #32]
 80057f6:	b90b      	cbnz	r3, 80057fc <_vfiprintf_r+0x18>
 80057f8:	f7ff fdcc 	bl	8005394 <__sinit>
 80057fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	d405      	bmi.n	800580e <_vfiprintf_r+0x2a>
 8005802:	89ab      	ldrh	r3, [r5, #12]
 8005804:	059a      	lsls	r2, r3, #22
 8005806:	d402      	bmi.n	800580e <_vfiprintf_r+0x2a>
 8005808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800580a:	f7ff fec7 	bl	800559c <__retarget_lock_acquire_recursive>
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	071b      	lsls	r3, r3, #28
 8005812:	d501      	bpl.n	8005818 <_vfiprintf_r+0x34>
 8005814:	692b      	ldr	r3, [r5, #16]
 8005816:	b99b      	cbnz	r3, 8005840 <_vfiprintf_r+0x5c>
 8005818:	4629      	mov	r1, r5
 800581a:	4630      	mov	r0, r6
 800581c:	f000 fb78 	bl	8005f10 <__swsetup_r>
 8005820:	b170      	cbz	r0, 8005840 <_vfiprintf_r+0x5c>
 8005822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005824:	07dc      	lsls	r4, r3, #31
 8005826:	d504      	bpl.n	8005832 <_vfiprintf_r+0x4e>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	b01d      	add	sp, #116	; 0x74
 800582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	0598      	lsls	r0, r3, #22
 8005836:	d4f7      	bmi.n	8005828 <_vfiprintf_r+0x44>
 8005838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583a:	f7ff feb0 	bl	800559e <__retarget_lock_release_recursive>
 800583e:	e7f3      	b.n	8005828 <_vfiprintf_r+0x44>
 8005840:	2300      	movs	r3, #0
 8005842:	9309      	str	r3, [sp, #36]	; 0x24
 8005844:	2320      	movs	r3, #32
 8005846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800584a:	f8cd 800c 	str.w	r8, [sp, #12]
 800584e:	2330      	movs	r3, #48	; 0x30
 8005850:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a04 <_vfiprintf_r+0x220>
 8005854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005858:	f04f 0901 	mov.w	r9, #1
 800585c:	4623      	mov	r3, r4
 800585e:	469a      	mov	sl, r3
 8005860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005864:	b10a      	cbz	r2, 800586a <_vfiprintf_r+0x86>
 8005866:	2a25      	cmp	r2, #37	; 0x25
 8005868:	d1f9      	bne.n	800585e <_vfiprintf_r+0x7a>
 800586a:	ebba 0b04 	subs.w	fp, sl, r4
 800586e:	d00b      	beq.n	8005888 <_vfiprintf_r+0xa4>
 8005870:	465b      	mov	r3, fp
 8005872:	4622      	mov	r2, r4
 8005874:	4629      	mov	r1, r5
 8005876:	4630      	mov	r0, r6
 8005878:	f7ff ffa1 	bl	80057be <__sfputs_r>
 800587c:	3001      	adds	r0, #1
 800587e:	f000 80a9 	beq.w	80059d4 <_vfiprintf_r+0x1f0>
 8005882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005884:	445a      	add	r2, fp
 8005886:	9209      	str	r2, [sp, #36]	; 0x24
 8005888:	f89a 3000 	ldrb.w	r3, [sl]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80a1 	beq.w	80059d4 <_vfiprintf_r+0x1f0>
 8005892:	2300      	movs	r3, #0
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800589c:	f10a 0a01 	add.w	sl, sl, #1
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	9307      	str	r3, [sp, #28]
 80058a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058a8:	931a      	str	r3, [sp, #104]	; 0x68
 80058aa:	4654      	mov	r4, sl
 80058ac:	2205      	movs	r2, #5
 80058ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b2:	4854      	ldr	r0, [pc, #336]	; (8005a04 <_vfiprintf_r+0x220>)
 80058b4:	f7fa fc8c 	bl	80001d0 <memchr>
 80058b8:	9a04      	ldr	r2, [sp, #16]
 80058ba:	b9d8      	cbnz	r0, 80058f4 <_vfiprintf_r+0x110>
 80058bc:	06d1      	lsls	r1, r2, #27
 80058be:	bf44      	itt	mi
 80058c0:	2320      	movmi	r3, #32
 80058c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058c6:	0713      	lsls	r3, r2, #28
 80058c8:	bf44      	itt	mi
 80058ca:	232b      	movmi	r3, #43	; 0x2b
 80058cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058d0:	f89a 3000 	ldrb.w	r3, [sl]
 80058d4:	2b2a      	cmp	r3, #42	; 0x2a
 80058d6:	d015      	beq.n	8005904 <_vfiprintf_r+0x120>
 80058d8:	9a07      	ldr	r2, [sp, #28]
 80058da:	4654      	mov	r4, sl
 80058dc:	2000      	movs	r0, #0
 80058de:	f04f 0c0a 	mov.w	ip, #10
 80058e2:	4621      	mov	r1, r4
 80058e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058e8:	3b30      	subs	r3, #48	; 0x30
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	d94d      	bls.n	800598a <_vfiprintf_r+0x1a6>
 80058ee:	b1b0      	cbz	r0, 800591e <_vfiprintf_r+0x13a>
 80058f0:	9207      	str	r2, [sp, #28]
 80058f2:	e014      	b.n	800591e <_vfiprintf_r+0x13a>
 80058f4:	eba0 0308 	sub.w	r3, r0, r8
 80058f8:	fa09 f303 	lsl.w	r3, r9, r3
 80058fc:	4313      	orrs	r3, r2
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	46a2      	mov	sl, r4
 8005902:	e7d2      	b.n	80058aa <_vfiprintf_r+0xc6>
 8005904:	9b03      	ldr	r3, [sp, #12]
 8005906:	1d19      	adds	r1, r3, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	9103      	str	r1, [sp, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	bfbb      	ittet	lt
 8005910:	425b      	neglt	r3, r3
 8005912:	f042 0202 	orrlt.w	r2, r2, #2
 8005916:	9307      	strge	r3, [sp, #28]
 8005918:	9307      	strlt	r3, [sp, #28]
 800591a:	bfb8      	it	lt
 800591c:	9204      	strlt	r2, [sp, #16]
 800591e:	7823      	ldrb	r3, [r4, #0]
 8005920:	2b2e      	cmp	r3, #46	; 0x2e
 8005922:	d10c      	bne.n	800593e <_vfiprintf_r+0x15a>
 8005924:	7863      	ldrb	r3, [r4, #1]
 8005926:	2b2a      	cmp	r3, #42	; 0x2a
 8005928:	d134      	bne.n	8005994 <_vfiprintf_r+0x1b0>
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	1d1a      	adds	r2, r3, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	9203      	str	r2, [sp, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfb8      	it	lt
 8005936:	f04f 33ff 	movlt.w	r3, #4294967295
 800593a:	3402      	adds	r4, #2
 800593c:	9305      	str	r3, [sp, #20]
 800593e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a14 <_vfiprintf_r+0x230>
 8005942:	7821      	ldrb	r1, [r4, #0]
 8005944:	2203      	movs	r2, #3
 8005946:	4650      	mov	r0, sl
 8005948:	f7fa fc42 	bl	80001d0 <memchr>
 800594c:	b138      	cbz	r0, 800595e <_vfiprintf_r+0x17a>
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	eba0 000a 	sub.w	r0, r0, sl
 8005954:	2240      	movs	r2, #64	; 0x40
 8005956:	4082      	lsls	r2, r0
 8005958:	4313      	orrs	r3, r2
 800595a:	3401      	adds	r4, #1
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005962:	4829      	ldr	r0, [pc, #164]	; (8005a08 <_vfiprintf_r+0x224>)
 8005964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005968:	2206      	movs	r2, #6
 800596a:	f7fa fc31 	bl	80001d0 <memchr>
 800596e:	2800      	cmp	r0, #0
 8005970:	d03f      	beq.n	80059f2 <_vfiprintf_r+0x20e>
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <_vfiprintf_r+0x228>)
 8005974:	bb1b      	cbnz	r3, 80059be <_vfiprintf_r+0x1da>
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	3307      	adds	r3, #7
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	3308      	adds	r3, #8
 8005980:	9303      	str	r3, [sp, #12]
 8005982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005984:	443b      	add	r3, r7
 8005986:	9309      	str	r3, [sp, #36]	; 0x24
 8005988:	e768      	b.n	800585c <_vfiprintf_r+0x78>
 800598a:	fb0c 3202 	mla	r2, ip, r2, r3
 800598e:	460c      	mov	r4, r1
 8005990:	2001      	movs	r0, #1
 8005992:	e7a6      	b.n	80058e2 <_vfiprintf_r+0xfe>
 8005994:	2300      	movs	r3, #0
 8005996:	3401      	adds	r4, #1
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	4619      	mov	r1, r3
 800599c:	f04f 0c0a 	mov.w	ip, #10
 80059a0:	4620      	mov	r0, r4
 80059a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059a6:	3a30      	subs	r2, #48	; 0x30
 80059a8:	2a09      	cmp	r2, #9
 80059aa:	d903      	bls.n	80059b4 <_vfiprintf_r+0x1d0>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0c6      	beq.n	800593e <_vfiprintf_r+0x15a>
 80059b0:	9105      	str	r1, [sp, #20]
 80059b2:	e7c4      	b.n	800593e <_vfiprintf_r+0x15a>
 80059b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80059b8:	4604      	mov	r4, r0
 80059ba:	2301      	movs	r3, #1
 80059bc:	e7f0      	b.n	80059a0 <_vfiprintf_r+0x1bc>
 80059be:	ab03      	add	r3, sp, #12
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	462a      	mov	r2, r5
 80059c4:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <_vfiprintf_r+0x22c>)
 80059c6:	a904      	add	r1, sp, #16
 80059c8:	4630      	mov	r0, r6
 80059ca:	f3af 8000 	nop.w
 80059ce:	4607      	mov	r7, r0
 80059d0:	1c78      	adds	r0, r7, #1
 80059d2:	d1d6      	bne.n	8005982 <_vfiprintf_r+0x19e>
 80059d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059d6:	07d9      	lsls	r1, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_vfiprintf_r+0x202>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	059a      	lsls	r2, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_vfiprintf_r+0x202>
 80059e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e2:	f7ff fddc 	bl	800559e <__retarget_lock_release_recursive>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	065b      	lsls	r3, r3, #25
 80059ea:	f53f af1d 	bmi.w	8005828 <_vfiprintf_r+0x44>
 80059ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059f0:	e71c      	b.n	800582c <_vfiprintf_r+0x48>
 80059f2:	ab03      	add	r3, sp, #12
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	462a      	mov	r2, r5
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <_vfiprintf_r+0x22c>)
 80059fa:	a904      	add	r1, sp, #16
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f879 	bl	8005af4 <_printf_i>
 8005a02:	e7e4      	b.n	80059ce <_vfiprintf_r+0x1ea>
 8005a04:	080061b0 	.word	0x080061b0
 8005a08:	080061ba 	.word	0x080061ba
 8005a0c:	00000000 	.word	0x00000000
 8005a10:	080057bf 	.word	0x080057bf
 8005a14:	080061b6 	.word	0x080061b6

08005a18 <_printf_common>:
 8005a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	4616      	mov	r6, r2
 8005a1e:	4699      	mov	r9, r3
 8005a20:	688a      	ldr	r2, [r1, #8]
 8005a22:	690b      	ldr	r3, [r1, #16]
 8005a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	bfb8      	it	lt
 8005a2c:	4613      	movlt	r3, r2
 8005a2e:	6033      	str	r3, [r6, #0]
 8005a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a34:	4607      	mov	r7, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	b10a      	cbz	r2, 8005a3e <_printf_common+0x26>
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	6033      	str	r3, [r6, #0]
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	0699      	lsls	r1, r3, #26
 8005a42:	bf42      	ittt	mi
 8005a44:	6833      	ldrmi	r3, [r6, #0]
 8005a46:	3302      	addmi	r3, #2
 8005a48:	6033      	strmi	r3, [r6, #0]
 8005a4a:	6825      	ldr	r5, [r4, #0]
 8005a4c:	f015 0506 	ands.w	r5, r5, #6
 8005a50:	d106      	bne.n	8005a60 <_printf_common+0x48>
 8005a52:	f104 0a19 	add.w	sl, r4, #25
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	6832      	ldr	r2, [r6, #0]
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	dc26      	bgt.n	8005aae <_printf_common+0x96>
 8005a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a64:	1e13      	subs	r3, r2, #0
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	bf18      	it	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	0692      	lsls	r2, r2, #26
 8005a6e:	d42b      	bmi.n	8005ac8 <_printf_common+0xb0>
 8005a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a74:	4649      	mov	r1, r9
 8005a76:	4638      	mov	r0, r7
 8005a78:	47c0      	blx	r8
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d01e      	beq.n	8005abc <_printf_common+0xa4>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	6922      	ldr	r2, [r4, #16]
 8005a82:	f003 0306 	and.w	r3, r3, #6
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	bf02      	ittt	eq
 8005a8a:	68e5      	ldreq	r5, [r4, #12]
 8005a8c:	6833      	ldreq	r3, [r6, #0]
 8005a8e:	1aed      	subeq	r5, r5, r3
 8005a90:	68a3      	ldr	r3, [r4, #8]
 8005a92:	bf0c      	ite	eq
 8005a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a98:	2500      	movne	r5, #0
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bfc4      	itt	gt
 8005a9e:	1a9b      	subgt	r3, r3, r2
 8005aa0:	18ed      	addgt	r5, r5, r3
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	341a      	adds	r4, #26
 8005aa6:	42b5      	cmp	r5, r6
 8005aa8:	d11a      	bne.n	8005ae0 <_printf_common+0xc8>
 8005aaa:	2000      	movs	r0, #0
 8005aac:	e008      	b.n	8005ac0 <_printf_common+0xa8>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4652      	mov	r2, sl
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	47c0      	blx	r8
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d103      	bne.n	8005ac4 <_printf_common+0xac>
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	e7c6      	b.n	8005a56 <_printf_common+0x3e>
 8005ac8:	18e1      	adds	r1, r4, r3
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	2030      	movs	r0, #48	; 0x30
 8005ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad2:	4422      	add	r2, r4
 8005ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005adc:	3302      	adds	r3, #2
 8005ade:	e7c7      	b.n	8005a70 <_printf_common+0x58>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c0      	blx	r8
 8005aea:	3001      	adds	r0, #1
 8005aec:	d0e6      	beq.n	8005abc <_printf_common+0xa4>
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7d9      	b.n	8005aa6 <_printf_common+0x8e>
	...

08005af4 <_printf_i>:
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	7e0f      	ldrb	r7, [r1, #24]
 8005afa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005afc:	2f78      	cmp	r7, #120	; 0x78
 8005afe:	4691      	mov	r9, r2
 8005b00:	4680      	mov	r8, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	469a      	mov	sl, r3
 8005b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b0a:	d807      	bhi.n	8005b1c <_printf_i+0x28>
 8005b0c:	2f62      	cmp	r7, #98	; 0x62
 8005b0e:	d80a      	bhi.n	8005b26 <_printf_i+0x32>
 8005b10:	2f00      	cmp	r7, #0
 8005b12:	f000 80d4 	beq.w	8005cbe <_printf_i+0x1ca>
 8005b16:	2f58      	cmp	r7, #88	; 0x58
 8005b18:	f000 80c0 	beq.w	8005c9c <_printf_i+0x1a8>
 8005b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b24:	e03a      	b.n	8005b9c <_printf_i+0xa8>
 8005b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2a:	2b15      	cmp	r3, #21
 8005b2c:	d8f6      	bhi.n	8005b1c <_printf_i+0x28>
 8005b2e:	a101      	add	r1, pc, #4	; (adr r1, 8005b34 <_printf_i+0x40>)
 8005b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b34:	08005b8d 	.word	0x08005b8d
 8005b38:	08005ba1 	.word	0x08005ba1
 8005b3c:	08005b1d 	.word	0x08005b1d
 8005b40:	08005b1d 	.word	0x08005b1d
 8005b44:	08005b1d 	.word	0x08005b1d
 8005b48:	08005b1d 	.word	0x08005b1d
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005b1d 	.word	0x08005b1d
 8005b54:	08005b1d 	.word	0x08005b1d
 8005b58:	08005b1d 	.word	0x08005b1d
 8005b5c:	08005b1d 	.word	0x08005b1d
 8005b60:	08005ca5 	.word	0x08005ca5
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005c5f 	.word	0x08005c5f
 8005b6c:	08005b1d 	.word	0x08005b1d
 8005b70:	08005b1d 	.word	0x08005b1d
 8005b74:	08005cc7 	.word	0x08005cc7
 8005b78:	08005b1d 	.word	0x08005b1d
 8005b7c:	08005bcd 	.word	0x08005bcd
 8005b80:	08005b1d 	.word	0x08005b1d
 8005b84:	08005b1d 	.word	0x08005b1d
 8005b88:	08005c67 	.word	0x08005c67
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	602a      	str	r2, [r5, #0]
 8005b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e09f      	b.n	8005ce0 <_printf_i+0x1ec>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	682b      	ldr	r3, [r5, #0]
 8005ba4:	0607      	lsls	r7, r0, #24
 8005ba6:	f103 0104 	add.w	r1, r3, #4
 8005baa:	6029      	str	r1, [r5, #0]
 8005bac:	d501      	bpl.n	8005bb2 <_printf_i+0xbe>
 8005bae:	681e      	ldr	r6, [r3, #0]
 8005bb0:	e003      	b.n	8005bba <_printf_i+0xc6>
 8005bb2:	0646      	lsls	r6, r0, #25
 8005bb4:	d5fb      	bpl.n	8005bae <_printf_i+0xba>
 8005bb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	da03      	bge.n	8005bc6 <_printf_i+0xd2>
 8005bbe:	232d      	movs	r3, #45	; 0x2d
 8005bc0:	4276      	negs	r6, r6
 8005bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc6:	485a      	ldr	r0, [pc, #360]	; (8005d30 <_printf_i+0x23c>)
 8005bc8:	230a      	movs	r3, #10
 8005bca:	e012      	b.n	8005bf2 <_printf_i+0xfe>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1d19      	adds	r1, r3, #4
 8005bd2:	6029      	str	r1, [r5, #0]
 8005bd4:	0605      	lsls	r5, r0, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xe8>
 8005bd8:	681e      	ldr	r6, [r3, #0]
 8005bda:	e002      	b.n	8005be2 <_printf_i+0xee>
 8005bdc:	0641      	lsls	r1, r0, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xe4>
 8005be0:	881e      	ldrh	r6, [r3, #0]
 8005be2:	4853      	ldr	r0, [pc, #332]	; (8005d30 <_printf_i+0x23c>)
 8005be4:	2f6f      	cmp	r7, #111	; 0x6f
 8005be6:	bf0c      	ite	eq
 8005be8:	2308      	moveq	r3, #8
 8005bea:	230a      	movne	r3, #10
 8005bec:	2100      	movs	r1, #0
 8005bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bf2:	6865      	ldr	r5, [r4, #4]
 8005bf4:	60a5      	str	r5, [r4, #8]
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	bfa2      	ittt	ge
 8005bfa:	6821      	ldrge	r1, [r4, #0]
 8005bfc:	f021 0104 	bicge.w	r1, r1, #4
 8005c00:	6021      	strge	r1, [r4, #0]
 8005c02:	b90e      	cbnz	r6, 8005c08 <_printf_i+0x114>
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	d04b      	beq.n	8005ca0 <_printf_i+0x1ac>
 8005c08:	4615      	mov	r5, r2
 8005c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c12:	5dc7      	ldrb	r7, [r0, r7]
 8005c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c18:	4637      	mov	r7, r6
 8005c1a:	42bb      	cmp	r3, r7
 8005c1c:	460e      	mov	r6, r1
 8005c1e:	d9f4      	bls.n	8005c0a <_printf_i+0x116>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d10b      	bne.n	8005c3c <_printf_i+0x148>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	07de      	lsls	r6, r3, #31
 8005c28:	d508      	bpl.n	8005c3c <_printf_i+0x148>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6861      	ldr	r1, [r4, #4]
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	bfde      	ittt	le
 8005c32:	2330      	movle	r3, #48	; 0x30
 8005c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c3c:	1b52      	subs	r2, r2, r5
 8005c3e:	6122      	str	r2, [r4, #16]
 8005c40:	f8cd a000 	str.w	sl, [sp]
 8005c44:	464b      	mov	r3, r9
 8005c46:	aa03      	add	r2, sp, #12
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7ff fee4 	bl	8005a18 <_printf_common>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d14a      	bne.n	8005cea <_printf_i+0x1f6>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	b004      	add	sp, #16
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	4833      	ldr	r0, [pc, #204]	; (8005d34 <_printf_i+0x240>)
 8005c68:	2778      	movs	r7, #120	; 0x78
 8005c6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	6829      	ldr	r1, [r5, #0]
 8005c72:	061f      	lsls	r7, r3, #24
 8005c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c78:	d402      	bmi.n	8005c80 <_printf_i+0x18c>
 8005c7a:	065f      	lsls	r7, r3, #25
 8005c7c:	bf48      	it	mi
 8005c7e:	b2b6      	uxthmi	r6, r6
 8005c80:	07df      	lsls	r7, r3, #31
 8005c82:	bf48      	it	mi
 8005c84:	f043 0320 	orrmi.w	r3, r3, #32
 8005c88:	6029      	str	r1, [r5, #0]
 8005c8a:	bf48      	it	mi
 8005c8c:	6023      	strmi	r3, [r4, #0]
 8005c8e:	b91e      	cbnz	r6, 8005c98 <_printf_i+0x1a4>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	f023 0320 	bic.w	r3, r3, #32
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	2310      	movs	r3, #16
 8005c9a:	e7a7      	b.n	8005bec <_printf_i+0xf8>
 8005c9c:	4824      	ldr	r0, [pc, #144]	; (8005d30 <_printf_i+0x23c>)
 8005c9e:	e7e4      	b.n	8005c6a <_printf_i+0x176>
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	e7bd      	b.n	8005c20 <_printf_i+0x12c>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	6826      	ldr	r6, [r4, #0]
 8005ca8:	6961      	ldr	r1, [r4, #20]
 8005caa:	1d18      	adds	r0, r3, #4
 8005cac:	6028      	str	r0, [r5, #0]
 8005cae:	0635      	lsls	r5, r6, #24
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_i+0x1c4>
 8005cb4:	6019      	str	r1, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <_printf_i+0x1ca>
 8005cb8:	0670      	lsls	r0, r6, #25
 8005cba:	d5fb      	bpl.n	8005cb4 <_printf_i+0x1c0>
 8005cbc:	8019      	strh	r1, [r3, #0]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	4615      	mov	r5, r2
 8005cc4:	e7bc      	b.n	8005c40 <_printf_i+0x14c>
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	1d1a      	adds	r2, r3, #4
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f7fa fa7c 	bl	80001d0 <memchr>
 8005cd8:	b108      	cbz	r0, 8005cde <_printf_i+0x1ea>
 8005cda:	1b40      	subs	r0, r0, r5
 8005cdc:	6060      	str	r0, [r4, #4]
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce8:	e7aa      	b.n	8005c40 <_printf_i+0x14c>
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	462a      	mov	r2, r5
 8005cee:	4649      	mov	r1, r9
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	47d0      	blx	sl
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d0ad      	beq.n	8005c54 <_printf_i+0x160>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	079b      	lsls	r3, r3, #30
 8005cfc:	d413      	bmi.n	8005d26 <_printf_i+0x232>
 8005cfe:	68e0      	ldr	r0, [r4, #12]
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	4298      	cmp	r0, r3
 8005d04:	bfb8      	it	lt
 8005d06:	4618      	movlt	r0, r3
 8005d08:	e7a6      	b.n	8005c58 <_printf_i+0x164>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4640      	mov	r0, r8
 8005d12:	47d0      	blx	sl
 8005d14:	3001      	adds	r0, #1
 8005d16:	d09d      	beq.n	8005c54 <_printf_i+0x160>
 8005d18:	3501      	adds	r5, #1
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	9903      	ldr	r1, [sp, #12]
 8005d1e:	1a5b      	subs	r3, r3, r1
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	dcf2      	bgt.n	8005d0a <_printf_i+0x216>
 8005d24:	e7eb      	b.n	8005cfe <_printf_i+0x20a>
 8005d26:	2500      	movs	r5, #0
 8005d28:	f104 0619 	add.w	r6, r4, #25
 8005d2c:	e7f5      	b.n	8005d1a <_printf_i+0x226>
 8005d2e:	bf00      	nop
 8005d30:	080061c1 	.word	0x080061c1
 8005d34:	080061d2 	.word	0x080061d2

08005d38 <__sflush_r>:
 8005d38:	898a      	ldrh	r2, [r1, #12]
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	4605      	mov	r5, r0
 8005d40:	0710      	lsls	r0, r2, #28
 8005d42:	460c      	mov	r4, r1
 8005d44:	d458      	bmi.n	8005df8 <__sflush_r+0xc0>
 8005d46:	684b      	ldr	r3, [r1, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc05      	bgt.n	8005d58 <__sflush_r+0x20>
 8005d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dc02      	bgt.n	8005d58 <__sflush_r+0x20>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	d0f9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d64:	682f      	ldr	r7, [r5, #0]
 8005d66:	6a21      	ldr	r1, [r4, #32]
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	d032      	beq.n	8005dd2 <__sflush_r+0x9a>
 8005d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	075a      	lsls	r2, r3, #29
 8005d72:	d505      	bpl.n	8005d80 <__sflush_r+0x48>
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	1ac0      	subs	r0, r0, r3
 8005d78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d7a:	b10b      	cbz	r3, 8005d80 <__sflush_r+0x48>
 8005d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d7e:	1ac0      	subs	r0, r0, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	4602      	mov	r2, r0
 8005d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d86:	6a21      	ldr	r1, [r4, #32]
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b0      	blx	r6
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	d106      	bne.n	8005da0 <__sflush_r+0x68>
 8005d92:	6829      	ldr	r1, [r5, #0]
 8005d94:	291d      	cmp	r1, #29
 8005d96:	d82b      	bhi.n	8005df0 <__sflush_r+0xb8>
 8005d98:	4a29      	ldr	r2, [pc, #164]	; (8005e40 <__sflush_r+0x108>)
 8005d9a:	410a      	asrs	r2, r1
 8005d9c:	07d6      	lsls	r6, r2, #31
 8005d9e:	d427      	bmi.n	8005df0 <__sflush_r+0xb8>
 8005da0:	2200      	movs	r2, #0
 8005da2:	6062      	str	r2, [r4, #4]
 8005da4:	04d9      	lsls	r1, r3, #19
 8005da6:	6922      	ldr	r2, [r4, #16]
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	d504      	bpl.n	8005db6 <__sflush_r+0x7e>
 8005dac:	1c42      	adds	r2, r0, #1
 8005dae:	d101      	bne.n	8005db4 <__sflush_r+0x7c>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b903      	cbnz	r3, 8005db6 <__sflush_r+0x7e>
 8005db4:	6560      	str	r0, [r4, #84]	; 0x54
 8005db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db8:	602f      	str	r7, [r5, #0]
 8005dba:	2900      	cmp	r1, #0
 8005dbc:	d0c9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	d002      	beq.n	8005dcc <__sflush_r+0x94>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7ff fbea 	bl	80055a0 <_free_r>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	6360      	str	r0, [r4, #52]	; 0x34
 8005dd0:	e7c0      	b.n	8005d54 <__sflush_r+0x1c>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b0      	blx	r6
 8005dd8:	1c41      	adds	r1, r0, #1
 8005dda:	d1c8      	bne.n	8005d6e <__sflush_r+0x36>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0c5      	beq.n	8005d6e <__sflush_r+0x36>
 8005de2:	2b1d      	cmp	r3, #29
 8005de4:	d001      	beq.n	8005dea <__sflush_r+0xb2>
 8005de6:	2b16      	cmp	r3, #22
 8005de8:	d101      	bne.n	8005dee <__sflush_r+0xb6>
 8005dea:	602f      	str	r7, [r5, #0]
 8005dec:	e7b1      	b.n	8005d52 <__sflush_r+0x1a>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	e7ad      	b.n	8005d54 <__sflush_r+0x1c>
 8005df8:	690f      	ldr	r7, [r1, #16]
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d0a9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005dfe:	0793      	lsls	r3, r2, #30
 8005e00:	680e      	ldr	r6, [r1, #0]
 8005e02:	bf08      	it	eq
 8005e04:	694b      	ldreq	r3, [r1, #20]
 8005e06:	600f      	str	r7, [r1, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	eba6 0807 	sub.w	r8, r6, r7
 8005e10:	608b      	str	r3, [r1, #8]
 8005e12:	f1b8 0f00 	cmp.w	r8, #0
 8005e16:	dd9c      	ble.n	8005d52 <__sflush_r+0x1a>
 8005e18:	6a21      	ldr	r1, [r4, #32]
 8005e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e1c:	4643      	mov	r3, r8
 8005e1e:	463a      	mov	r2, r7
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b0      	blx	r6
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dc06      	bgt.n	8005e36 <__sflush_r+0xfe>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	e78e      	b.n	8005d54 <__sflush_r+0x1c>
 8005e36:	4407      	add	r7, r0
 8005e38:	eba8 0800 	sub.w	r8, r8, r0
 8005e3c:	e7e9      	b.n	8005e12 <__sflush_r+0xda>
 8005e3e:	bf00      	nop
 8005e40:	dfbffffe 	.word	0xdfbffffe

08005e44 <_fflush_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	690b      	ldr	r3, [r1, #16]
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	b913      	cbnz	r3, 8005e54 <_fflush_r+0x10>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	b118      	cbz	r0, 8005e5e <_fflush_r+0x1a>
 8005e56:	6a03      	ldr	r3, [r0, #32]
 8005e58:	b90b      	cbnz	r3, 8005e5e <_fflush_r+0x1a>
 8005e5a:	f7ff fa9b 	bl	8005394 <__sinit>
 8005e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f3      	beq.n	8005e4e <_fflush_r+0xa>
 8005e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e68:	07d0      	lsls	r0, r2, #31
 8005e6a:	d404      	bmi.n	8005e76 <_fflush_r+0x32>
 8005e6c:	0599      	lsls	r1, r3, #22
 8005e6e:	d402      	bmi.n	8005e76 <_fflush_r+0x32>
 8005e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e72:	f7ff fb93 	bl	800559c <__retarget_lock_acquire_recursive>
 8005e76:	4628      	mov	r0, r5
 8005e78:	4621      	mov	r1, r4
 8005e7a:	f7ff ff5d 	bl	8005d38 <__sflush_r>
 8005e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e80:	07da      	lsls	r2, r3, #31
 8005e82:	4605      	mov	r5, r0
 8005e84:	d4e4      	bmi.n	8005e50 <_fflush_r+0xc>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	059b      	lsls	r3, r3, #22
 8005e8a:	d4e1      	bmi.n	8005e50 <_fflush_r+0xc>
 8005e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e8e:	f7ff fb86 	bl	800559e <__retarget_lock_release_recursive>
 8005e92:	e7dd      	b.n	8005e50 <_fflush_r+0xc>

08005e94 <__swbuf_r>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	460e      	mov	r6, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	b118      	cbz	r0, 8005ea6 <__swbuf_r+0x12>
 8005e9e:	6a03      	ldr	r3, [r0, #32]
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <__swbuf_r+0x12>
 8005ea2:	f7ff fa77 	bl	8005394 <__sinit>
 8005ea6:	69a3      	ldr	r3, [r4, #24]
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	071a      	lsls	r2, r3, #28
 8005eae:	d525      	bpl.n	8005efc <__swbuf_r+0x68>
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	b31b      	cbz	r3, 8005efc <__swbuf_r+0x68>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	6922      	ldr	r2, [r4, #16]
 8005eb8:	1a98      	subs	r0, r3, r2
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	b2f6      	uxtb	r6, r6
 8005ebe:	4283      	cmp	r3, r0
 8005ec0:	4637      	mov	r7, r6
 8005ec2:	dc04      	bgt.n	8005ece <__swbuf_r+0x3a>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7ff ffbc 	bl	8005e44 <_fflush_r>
 8005ecc:	b9e0      	cbnz	r0, 8005f08 <__swbuf_r+0x74>
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	60a3      	str	r3, [r4, #8]
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	6022      	str	r2, [r4, #0]
 8005eda:	701e      	strb	r6, [r3, #0]
 8005edc:	6962      	ldr	r2, [r4, #20]
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d004      	beq.n	8005eee <__swbuf_r+0x5a>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	07db      	lsls	r3, r3, #31
 8005ee8:	d506      	bpl.n	8005ef8 <__swbuf_r+0x64>
 8005eea:	2e0a      	cmp	r6, #10
 8005eec:	d104      	bne.n	8005ef8 <__swbuf_r+0x64>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f7ff ffa7 	bl	8005e44 <_fflush_r>
 8005ef6:	b938      	cbnz	r0, 8005f08 <__swbuf_r+0x74>
 8005ef8:	4638      	mov	r0, r7
 8005efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005efc:	4621      	mov	r1, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 f806 	bl	8005f10 <__swsetup_r>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d0d5      	beq.n	8005eb4 <__swbuf_r+0x20>
 8005f08:	f04f 37ff 	mov.w	r7, #4294967295
 8005f0c:	e7f4      	b.n	8005ef8 <__swbuf_r+0x64>
	...

08005f10 <__swsetup_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <__swsetup_r+0xac>)
 8005f14:	4605      	mov	r5, r0
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	460c      	mov	r4, r1
 8005f1a:	b118      	cbz	r0, 8005f24 <__swsetup_r+0x14>
 8005f1c:	6a03      	ldr	r3, [r0, #32]
 8005f1e:	b90b      	cbnz	r3, 8005f24 <__swsetup_r+0x14>
 8005f20:	f7ff fa38 	bl	8005394 <__sinit>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f2a:	0718      	lsls	r0, r3, #28
 8005f2c:	d422      	bmi.n	8005f74 <__swsetup_r+0x64>
 8005f2e:	06d9      	lsls	r1, r3, #27
 8005f30:	d407      	bmi.n	8005f42 <__swsetup_r+0x32>
 8005f32:	2309      	movs	r3, #9
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e034      	b.n	8005fac <__swsetup_r+0x9c>
 8005f42:	0758      	lsls	r0, r3, #29
 8005f44:	d512      	bpl.n	8005f6c <__swsetup_r+0x5c>
 8005f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f48:	b141      	cbz	r1, 8005f5c <__swsetup_r+0x4c>
 8005f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	d002      	beq.n	8005f58 <__swsetup_r+0x48>
 8005f52:	4628      	mov	r0, r5
 8005f54:	f7ff fb24 	bl	80055a0 <_free_r>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6363      	str	r3, [r4, #52]	; 0x34
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	2300      	movs	r3, #0
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f043 0308 	orr.w	r3, r3, #8
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	b94b      	cbnz	r3, 8005f8c <__swsetup_r+0x7c>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f82:	d003      	beq.n	8005f8c <__swsetup_r+0x7c>
 8005f84:	4621      	mov	r1, r4
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 f850 	bl	800602c <__smakebuf_r>
 8005f8c:	89a0      	ldrh	r0, [r4, #12]
 8005f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f92:	f010 0301 	ands.w	r3, r0, #1
 8005f96:	d00a      	beq.n	8005fae <__swsetup_r+0x9e>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	6963      	ldr	r3, [r4, #20]
 8005f9e:	425b      	negs	r3, r3
 8005fa0:	61a3      	str	r3, [r4, #24]
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	b943      	cbnz	r3, 8005fb8 <__swsetup_r+0xa8>
 8005fa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005faa:	d1c4      	bne.n	8005f36 <__swsetup_r+0x26>
 8005fac:	bd38      	pop	{r3, r4, r5, pc}
 8005fae:	0781      	lsls	r1, r0, #30
 8005fb0:	bf58      	it	pl
 8005fb2:	6963      	ldrpl	r3, [r4, #20]
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	e7f4      	b.n	8005fa2 <__swsetup_r+0x92>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e7f7      	b.n	8005fac <__swsetup_r+0x9c>
 8005fbc:	20000064 	.word	0x20000064

08005fc0 <_sbrk_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d06      	ldr	r5, [pc, #24]	; (8005fdc <_sbrk_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fb f928 	bl	8001220 <_sbrk>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_sbrk_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_sbrk_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200003ec 	.word	0x200003ec

08005fe0 <__swhatbuf_r>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	b096      	sub	sp, #88	; 0x58
 8005fec:	4615      	mov	r5, r2
 8005fee:	461e      	mov	r6, r3
 8005ff0:	da0d      	bge.n	800600e <__swhatbuf_r+0x2e>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	bf0c      	ite	eq
 8005ffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006002:	2340      	movne	r3, #64	; 0x40
 8006004:	2000      	movs	r0, #0
 8006006:	6031      	str	r1, [r6, #0]
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	b016      	add	sp, #88	; 0x58
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	466a      	mov	r2, sp
 8006010:	f000 f848 	bl	80060a4 <_fstat_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	dbec      	blt.n	8005ff2 <__swhatbuf_r+0x12>
 8006018:	9901      	ldr	r1, [sp, #4]
 800601a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800601e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006022:	4259      	negs	r1, r3
 8006024:	4159      	adcs	r1, r3
 8006026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602a:	e7eb      	b.n	8006004 <__swhatbuf_r+0x24>

0800602c <__smakebuf_r>:
 800602c:	898b      	ldrh	r3, [r1, #12]
 800602e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006030:	079d      	lsls	r5, r3, #30
 8006032:	4606      	mov	r6, r0
 8006034:	460c      	mov	r4, r1
 8006036:	d507      	bpl.n	8006048 <__smakebuf_r+0x1c>
 8006038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	2301      	movs	r3, #1
 8006042:	6163      	str	r3, [r4, #20]
 8006044:	b002      	add	sp, #8
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	ab01      	add	r3, sp, #4
 800604a:	466a      	mov	r2, sp
 800604c:	f7ff ffc8 	bl	8005fe0 <__swhatbuf_r>
 8006050:	9900      	ldr	r1, [sp, #0]
 8006052:	4605      	mov	r5, r0
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff fb0f 	bl	8005678 <_malloc_r>
 800605a:	b948      	cbnz	r0, 8006070 <__smakebuf_r+0x44>
 800605c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006060:	059a      	lsls	r2, r3, #22
 8006062:	d4ef      	bmi.n	8006044 <__smakebuf_r+0x18>
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	f043 0302 	orr.w	r3, r3, #2
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	e7e3      	b.n	8006038 <__smakebuf_r+0xc>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	6020      	str	r0, [r4, #0]
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	9b00      	ldr	r3, [sp, #0]
 800607c:	6163      	str	r3, [r4, #20]
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	6120      	str	r0, [r4, #16]
 8006082:	b15b      	cbz	r3, 800609c <__smakebuf_r+0x70>
 8006084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006088:	4630      	mov	r0, r6
 800608a:	f000 f81d 	bl	80060c8 <_isatty_r>
 800608e:	b128      	cbz	r0, 800609c <__smakebuf_r+0x70>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	431d      	orrs	r5, r3
 80060a0:	81a5      	strh	r5, [r4, #12]
 80060a2:	e7cf      	b.n	8006044 <__smakebuf_r+0x18>

080060a4 <_fstat_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_fstat_r+0x20>)
 80060a8:	2300      	movs	r3, #0
 80060aa:	4604      	mov	r4, r0
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	f7fb f88c 	bl	80011ce <_fstat>
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d102      	bne.n	80060c0 <_fstat_r+0x1c>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	b103      	cbz	r3, 80060c0 <_fstat_r+0x1c>
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	bf00      	nop
 80060c4:	200003ec 	.word	0x200003ec

080060c8 <_isatty_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	; (80060e4 <_isatty_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb f88b 	bl	80011ee <_isatty>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_isatty_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_isatty_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200003ec 	.word	0x200003ec

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
