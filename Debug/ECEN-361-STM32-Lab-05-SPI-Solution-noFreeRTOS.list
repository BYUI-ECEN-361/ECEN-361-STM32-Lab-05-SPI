
ECEN-361-STM32-Lab-05-SPI-Solution-noFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f8  080061f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006200  08006200  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000068  08006270  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006270  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133ca  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002901  00000000  00000000  000334a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00035da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e27  00000000  00000000  00036fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028361  00000000  00000000  00037df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015646  00000000  00000000  00060158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f69c2  00000000  00000000  0007579e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005398  00000000  00000000  0016c160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001714f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060fc 	.word	0x080060fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080060fc 	.word	0x080060fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f9ed 	bl	800197c <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f9dc 	bl	800197c <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f9d1 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f9cb 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f9c5 	bl	800197c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 f9b2 	bl	800197c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Clear_LEDs+0x20>)
 800061e:	f001 f9ad 	bl	800197c <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000634:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 800063a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000640:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <MultiFunctionShield_Clear+0x28>)
 8000646:	70da      	strb	r2, [r3, #3]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088

08000658 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000668:	f001 f988 	bl	800197c <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800066c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff ff6f 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800068e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff5f 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006b4:	f001 f962 	bl	800197c <HAL_GPIO_WritePin>
	}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	20000088 	.word	0x20000088
 80006c8:	08006178 	.word	0x08006178

080006cc <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 80006dc:	4611      	mov	r1, r2
 80006de:	7019      	strb	r1, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81e      	bhi.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MultiFunctionShield__ISRFunc+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffa9 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000706:	e00e      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ffa5 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800070e:	e00a      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ffa1 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 8000716:	e006      	b.n	8000726 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff ff9d 	bl	8000658 <MultiFunctionShield_WriteNumberToSegment>
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <MultiFunctionShield__ISRFunc+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000084 	.word	0x20000084

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t bytes_in =0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fded 	bl	8001318 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f84b 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f969 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f937 	bl	80009b8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800074a:	f000 f90f 	bl	800096c <MX_TIM17_Init>
  MX_SPI2_Init();
 800074e:	f000 f8d3 	bl	80008f8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000752:	f000 f893 	bl	800087c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000756:	481a      	ldr	r0, [pc, #104]	; (80007c0 <main+0x90>)
 8000758:	f003 fcea 	bl	8004130 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 800075c:	f7ff ff66 	bl	800062c <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 8000760:	f7ff ff52 	bl	8000608 <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 f905 	bl	800197c <HAL_GPIO_WritePin>
  printf("\033\143");
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <main+0x94>)
 8000774:	f004 fe4e 	bl	8005414 <iprintf>
  printf("Welcome to ECEN-361 Lab-05 -- No FreeRTOS version\n\r\n\r");
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <main+0x98>)
 800077a:	f004 fe4b 	bl	8005414 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bytes_in = Read_and_Transmit_Task();
 800077e:	f000 fa1d 	bl	8000bbc <Read_and_Transmit_Task>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

    /**************** Send it SPI *********************/
    /* Set up the receive to happen with an interrupt */
    /* The Buffer is global:  RX_Buffer */

	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, 10);
 8000786:	220a      	movs	r2, #10
 8000788:	4910      	ldr	r1, [pc, #64]	; (80007cc <main+0x9c>)
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <main+0xa0>)
 800078c:	f002 fe78 	bl	8003480 <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f8ef 	bl	800197c <HAL_GPIO_WritePin>
	// HAL_Delay(5); // wait a bit before transmitting so the process can start the read
	HAL_SPI_Transmit(&hspi1, RX_Buffer, bytes_in , HAL_MAX_DELAY);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4909      	ldr	r1, [pc, #36]	; (80007cc <main+0x9c>)
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <main+0xa4>)
 80007aa:	f002 fcf4 	bl	8003196 <HAL_SPI_Transmit>
	// HAL_Delay(5); // wait a bit before transmitting so the process can start the read
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f001 f8e0 	bl	800197c <HAL_GPIO_WritePin>
    bytes_in = Read_and_Transmit_Task();
 80007bc:	e7df      	b.n	800077e <main+0x4e>
 80007be:	bf00      	nop
 80007c0:	20000154 	.word	0x20000154
 80007c4:	08006114 	.word	0x08006114
 80007c8:	08006118 	.word	0x08006118
 80007cc:	20000228 	.word	0x20000228
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fe69 	bl	80054be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fe:	f001 f8e3 	bl	80019c8 <HAL_PWREx_ControlVoltageScaling>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fa9c 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081e:	2302      	movs	r3, #2
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f91a 	bl	8001a74 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 fa7d 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2104      	movs	r1, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fce2 	bl	800222c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 fa69 	bl	8000d44 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	; 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /*   625KHz == SPI_BAUDRATEPRESCALER_128 ==> 80Mhz / 128
   *   40Mhz == SPI_BAUDRATEPRESCALER_2    ==> 80Mhz / 2
   */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008dc:	f002 fbb8 	bl	8003050 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa2d 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_SPI2_Init+0x6c>)
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <MX_SPI2_Init+0x70>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI2_Init+0x6c>)
 800090a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000912:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000916:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI2_Init+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_SPI2_Init+0x6c>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI2_Init+0x6c>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000940:	2207      	movs	r2, #7
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI2_Init+0x6c>)
 800094c:	2200      	movs	r2, #0
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI2_Init+0x6c>)
 8000952:	f002 fb7d 	bl	8003050 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 800095c:	f000 f9f2 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000f0 	.word	0x200000f0
 8000968:	40003800 	.word	0x40003800

0800096c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MX_TIM17_Init+0x48>)
 8000974:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000978:	f240 321f 	movw	r2, #799	; 0x31f
 800097c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_TIM17_Init+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_TIM17_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_TIM17_Init+0x44>)
 800099e:	f003 fb6f 	bl	8004080 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009a8:	f000 f9cc 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000154 	.word	0x20000154
 80009b4:	40014800 	.word	0x40014800

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART2_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART2_UART_Init+0x58>)
 80009fc:	f003 fdea 	bl	80045d4 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f99d 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001a0 	.word	0x200001a0
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a5f      	ldr	r2, [pc, #380]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b54      	ldr	r3, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_GPIO_Init+0x198>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 ff70 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000aa2:	f000 ff6b 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4842      	ldr	r0, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000aac:	f000 ff66 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <MX_GPIO_Init+0x1a0>)
 8000ac8:	f000 fdae 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <MX_GPIO_Init+0x1a0>)
 8000ae0:	f000 fda2 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fd95 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000afe:	2312      	movs	r3, #18
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fd88 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b1c:	2311      	movs	r3, #17
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fd79 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000b4a:	f000 fd6d 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000b4e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fd5d 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000b86:	f000 fd4f 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b8e:	2311      	movs	r3, #17
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0x19c>)
 8000ba2:	f000 fd41 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800

08000bbc <Read_and_Transmit_Task>:
		}
	}


uint8_t Read_and_Transmit_Task()
	{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b09a      	sub	sp, #104	; 0x68
 8000bc0:	af00      	add	r7, sp, #0
	/* Return the number of bytes */

	uint8_t receive_byte;
	uint8_t receive_buffer[BUFFER_SIZE] = {0};
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bca:	222e      	movs	r2, #46	; 0x2e
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fc75 	bl	80054be <memset>
	// uint8_t *receive_buffer_ptr = receive_buffer;
	uint8_t bytes_in =0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <Read_and_Transmit_Task+0xec>)
 8000bdc:	f107 0410 	add.w	r4, r7, #16
 8000be0:	461d      	mov	r5, r3
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bea:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <Read_and_Transmit_Task+0xf0>)
 8000bf0:	463c      	mov	r4, r7
 8000bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8000bf6:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t *sndmsg_ptr = sndmsg;
 8000bfe:	463b      	mov	r3, r7
 8000c00:	65fb      	str	r3, [r7, #92]	; 0x5c

		bytes_in = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		receive_byte = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	2217      	movs	r2, #23
 8000c14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c16:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <Read_and_Transmit_Task+0xf4>)
 8000c18:	f003 fd2a 	bl	8004670 <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000c1c:	e020      	b.n	8000c60 <Read_and_Transmit_Task+0xa4>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1,10) != HAL_OK) HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fbba 	bl	8001398 <HAL_Delay>
 8000c24:	f107 015b 	add.w	r1, r7, #91	; 0x5b
 8000c28:	230a      	movs	r3, #10
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <Read_and_Transmit_Task+0xf4>)
 8000c2e:	f003 fda9 	bl	8004784 <HAL_UART_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f2      	bne.n	8000c1e <Read_and_Transmit_Task+0x62>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			RX_Buffer[bytes_in] = receive_byte;
 8000c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c3c:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
 8000c40:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <Read_and_Transmit_Task+0xf8>)
 8000c42:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &RX_Buffer[bytes_in++] , 1, HAL_MAX_DELAY);  //echo each one as it's typed
 8000c44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <Read_and_Transmit_Task+0xf8>)
 8000c52:	18d1      	adds	r1, r2, r3
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <Read_and_Transmit_Task+0xf4>)
 8000c5c:	f003 fd08 	bl	8004670 <HAL_UART_Transmit>
		while (receive_byte != '\r')
 8000c60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000c64:	2b0d      	cmp	r3, #13
 8000c66:	d1dd      	bne.n	8000c24 <Read_and_Transmit_Task+0x68>
		}

		RX_Buffer[bytes_in++] = '\n'; // Add a line_feed
 8000c68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <Read_and_Transmit_Task+0xf8>)
 8000c76:	210a      	movs	r1, #10
 8000c78:	5499      	strb	r1, [r3, r2]
		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	220d      	movs	r2, #13
 8000c80:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <Read_and_Transmit_Task+0xf4>)
 8000c84:	f003 fcf4 	bl	8004670 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 8000c88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <Read_and_Transmit_Task+0xf8>)
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <Read_and_Transmit_Task+0xf4>)
 8000c96:	f003 fceb 	bl	8004670 <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)
		return bytes_in;
 8000c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
		}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3768      	adds	r7, #104	; 0x68
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08006150 	.word	0x08006150
 8000cac:	08006168 	.word	0x08006168
 8000cb0:	200001a0 	.word	0x200001a0
 8000cb4:	20000228 	.word	0x20000228

08000cb8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cc0:	1d39      	adds	r1, r7, #4
 8000cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <__io_putchar+0x20>)
 8000cca:	f003 fcd1 	bl	8004670 <HAL_UART_Transmit>

  return ch;
 8000cce:	687b      	ldr	r3, [r7, #4]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001a0 	.word	0x200001a0

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000cec:	f7ff fcee 	bl	80006cc <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d101      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000cfa:	f000 fb2d 	bl	8001358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000154 	.word	0x20000154

08000d0c <HAL_SPI_RxCpltCallback>:

  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
  {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
      // printf("here at the spi receive\n\r");
	  if (hspi == &hspi2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_SPI_RxCpltCallback+0x2c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d108      	bne.n	8000d2e <HAL_SPI_RxCpltCallback+0x22>
	  {
      // HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
      HAL_UART_Transmit(&huart2, RX_Buffer, BUFFER_SIZE,1000);
 8000d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d20:	2232      	movs	r2, #50	; 0x32
 8000d22:	4906      	ldr	r1, [pc, #24]	; (8000d3c <HAL_SPI_RxCpltCallback+0x30>)
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <HAL_SPI_RxCpltCallback+0x34>)
 8000d26:	f003 fca3 	bl	8004670 <HAL_UART_Transmit>
	  MX_SPI2_Init();  // Buffer has the data so start over
 8000d2a:	f7ff fde5 	bl	80008f8 <MX_SPI2_Init>
	  }

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000f0 	.word	0x200000f0
 8000d3c:	20000228 	.word	0x20000228
 8000d40:	200001a0 	.word	0x200001a0

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_MspInit+0x44>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x44>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a41      	ldr	r2, [pc, #260]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d129      	bne.n	8000e0e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	4a40      	ldr	r2, [pc, #256]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a3a      	ldr	r2, [pc, #232]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 fc0e 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e0c:	e051      	b.n	8000eb2 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <HAL_SPI_MspInit+0x12c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d14c      	bne.n	8000eb2 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	6593      	str	r3, [r2, #88]	; 0x58
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e60:	2308      	movs	r3, #8
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e70:	2305      	movs	r3, #5
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <HAL_SPI_MspInit+0x130>)
 8000e7c:	f000 fbd4 	bl	8001628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e92:	2305      	movs	r3, #5
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <HAL_SPI_MspInit+0x134>)
 8000e9e:	f000 fbc3 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2024      	movs	r0, #36	; 0x24
 8000ea8:	f000 fb52 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eac:	2024      	movs	r0, #36	; 0x24
 8000eae:	f000 fb6b 	bl	8001588 <HAL_NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40003800 	.word	0x40003800
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000400 	.word	0x48000400

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d113      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_TIM_Base_MspInit+0x48>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_TIM_Base_MspInit+0x48>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6613      	str	r3, [r2, #96]	; 0x60
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_TIM_Base_MspInit+0x48>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201a      	movs	r0, #26
 8000f00:	f000 fb26 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f04:	201a      	movs	r0, #26
 8000f06:	f000 fb3f 	bl	8001588 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40014800 	.word	0x40014800
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ac      	sub	sp, #176	; 0xb0
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2288      	movs	r2, #136	; 0x88
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fabe 	bl	80054be <memset>
  if(huart->Instance==USART2)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <HAL_UART_MspInit+0xb0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d13b      	bne.n	8000fc4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fbbd 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f64:	f7ff feee 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	6593      	str	r3, [r2, #88]	; 0x58
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f000 fb32 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	37b0      	adds	r7, #176	; 0xb0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HAL_InitTick+0xe0>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a33      	ldr	r2, [pc, #204]	; (80010b4 <HAL_InitTick+0xe0>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <HAL_InitTick+0xe0>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ffa:	f107 0210 	add.w	r2, r7, #16
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fad5 	bl	80025b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001014:	f001 faa2 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8001018:	6378      	str	r0, [r7, #52]	; 0x34
 800101a:	e004      	b.n	8001026 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800101c:	f001 fa9e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8001020:	4603      	mov	r3, r0
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001028:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <HAL_InitTick+0xe4>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	3b01      	subs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_InitTick+0xe8>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_InitTick+0xe8>)
 800103e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001042:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001044:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_InitTick+0xe8>)
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_InitTick+0xe8>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_InitTick+0xe8>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_InitTick+0xe8>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <HAL_InitTick+0xe8>)
 800105e:	f003 f80f 	bl	8004080 <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800106c:	2b00      	cmp	r3, #0
 800106e:	d11b      	bne.n	80010a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <HAL_InitTick+0xe8>)
 8001072:	f003 f85d 	bl	8004130 <HAL_TIM_Base_Start_IT>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800107c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001080:	2b00      	cmp	r3, #0
 8001082:	d111      	bne.n	80010a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001084:	201c      	movs	r0, #28
 8001086:	f000 fa7f 	bl	8001588 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d808      	bhi.n	80010a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	201c      	movs	r0, #28
 8001096:	f000 fa5b 	bl	8001550 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <HAL_InitTick+0xec>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e002      	b.n	80010a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	431bde83 	.word	0x431bde83
 80010bc:	2000025c 	.word	0x2000025c
 80010c0:	20000004 	.word	0x20000004

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001122:	f003 f875 	bl	8004210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000154 	.word	0x20000154

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f003 f86b 	bl	8004210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000025c 	.word	0x2000025c

08001144 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <SPI2_IRQHandler+0x10>)
 800114a:	f002 faf5 	bl	8003738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000f0 	.word	0x200000f0

08001158 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e00a      	b.n	8001180 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800116a:	f3af 8000 	nop.w
 800116e:	4601      	mov	r1, r0
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	60ba      	str	r2, [r7, #8]
 8001176:	b2ca      	uxtb	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf0      	blt.n	800116a <_read+0x12>
  }

  return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e009      	b.n	80011b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fd83 	bl	8000cb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf1      	blt.n	80011a4 <_write+0x12>
  }
  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_close>:

int _close(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f2:	605a      	str	r2, [r3, #4]
  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_isatty>:

int _isatty(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f004 f97a 	bl	800555c <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20018000 	.word	0x20018000
 8001294:	00000400 	.word	0x00000400
 8001298:	200002a8 	.word	0x200002a8
 800129c:	20000400 	.word	0x20000400

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff ffea 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f004 f939 	bl	8005568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff fa1b 	bl	8000730 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001308:	08006208 	.word	0x08006208
  ldr r2, =_sbss
 800130c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001310:	200003fc 	.word	0x200003fc

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_Init+0x3c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x3c>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f000 f903 	bl	800153a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff fe4d 	bl	8000fd4 <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	e001      	b.n	800134a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001346:	f7ff fd03 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	200002ac 	.word	0x200002ac

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200002ac 	.word	0x200002ac

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff4c 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001562:	f7ff ff61 	bl	8001428 <__NVIC_GetPriorityGrouping>
 8001566:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	6978      	ldr	r0, [r7, #20]
 800156e:	f7ff ffb1 	bl	80014d4 <NVIC_EncodePriority>
 8001572:	4602      	mov	r2, r0
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff80 	bl	8001480 <__NVIC_SetPriority>
}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff54 	bl	8001444 <__NVIC_EnableIRQ>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d005      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e029      	b.n	800161c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
    }
  }
  return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e17f      	b.n	8001938 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8171 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d118      	bne.n	8001708 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80ac 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f2:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_GPIO_Init+0x334>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800181c:	d025      	beq.n	800186a <HAL_GPIO_Init+0x242>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_GPIO_Init+0x338>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01f      	beq.n	8001866 <HAL_GPIO_Init+0x23e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_GPIO_Init+0x33c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x23a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <HAL_GPIO_Init+0x340>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x236>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4c      	ldr	r2, [pc, #304]	; (800196c <HAL_GPIO_Init+0x344>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x232>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <HAL_GPIO_Init+0x348>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <HAL_GPIO_Init+0x34c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x22a>
 800184e:	2306      	movs	r3, #6
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001852:	2307      	movs	r3, #7
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x244>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_GPIO_Init+0x334>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_GPIO_Init+0x350>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x350>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_GPIO_Init+0x350>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_GPIO_Init+0x350>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae78 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	48001800 	.word	0x48001800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000

080019c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d6:	d130      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e4:	d038      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2232      	movs	r2, #50	; 0x32
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	e002      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d102      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f2      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d110      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e00f      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d007      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e3ca      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4b97      	ldr	r3, [pc, #604]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4b94      	ldr	r3, [pc, #592]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e4 	beq.w	8001c70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_RCC_OscConfig+0x4a>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f040 808b 	bne.w	8001bcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8087 	bne.w	8001bcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3a2      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b82      	ldr	r3, [pc, #520]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_RCC_OscConfig+0x7c>
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
 8001af0:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d223      	bcs.n	8001b48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd87 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e383      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b14:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a72      	ldr	r2, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	496d      	ldr	r1, [pc, #436]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	4968      	ldr	r1, [pc, #416]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	e025      	b.n	8001b94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b48:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4960      	ldr	r1, [pc, #384]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	495b      	ldr	r1, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fd47 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e343      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b94:	f000 fc4a 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4950      	ldr	r1, [pc, #320]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_RCC_OscConfig+0x278>)
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa0b 	bl	8000fd4 <HAL_InitTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d052      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	e327      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d032      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd4:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbce 	bl	8001380 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be8:	f7ff fbca 	bl	8001380 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e310      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4931      	ldr	r1, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	492c      	ldr	r1, [pc, #176]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e01a      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb9b 	bl	8001380 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fb97 	bl	8001380 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e2dd      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1da>
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d074      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x21a>
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d10e      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d064      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d160      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e2ba      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x24a>
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e026      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a02      	ldr	r2, [pc, #8]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	0800617c 	.word	0x0800617c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a9f      	ldr	r2, [pc, #636]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a9c      	ldr	r2, [pc, #624]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb34 	bl	8001380 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fb30 	bl	8001380 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e276      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2a8>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fb20 	bl	8001380 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fb1c 	bl	8001380 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e262      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2d0>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d060      	beq.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_OscConfig+0x310>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d119      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d116      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d84:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x328>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e23f      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	4973      	ldr	r1, [pc, #460]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	e040      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fadb 	bl	8001380 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fad7 	bl	8001380 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e21d      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	495f      	ldr	r1, [pc, #380]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5c      	ldr	r2, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fab7 	bl	8001380 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fab3 	bl	8001380 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1f9      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fa92 	bl	8001380 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fa8e 	bl	8001380 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1d4      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e88:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff fa75 	bl	8001380 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fa71 	bl	8001380 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1b7      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a6 	beq.w	8002014 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d118      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fa38 	bl	8001380 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff fa34 	bl	8001380 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e17a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d8>
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4a:	e029      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_OscConfig+0x50c>
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	4b9c      	ldr	r3, [pc, #624]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a9b      	ldr	r2, [pc, #620]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	4b98      	ldr	r3, [pc, #608]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	4a97      	ldr	r2, [pc, #604]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f9ea 	bl	8001380 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f9e6 	bl	8001380 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e12a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ed      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x53c>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f9d3 	bl	8001380 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff f9cf 	bl	8001380 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e113      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b7a      	ldr	r3, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a79      	ldr	r2, [pc, #484]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80fe 	beq.w	800221a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	2b02      	cmp	r3, #2
 8002024:	f040 80d0 	bne.w	80021c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002028:	4b72      	ldr	r3, [pc, #456]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	429a      	cmp	r2, r3
 800203a:	d130      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	3b01      	subs	r3, #1
 8002048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d127      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11f      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002068:	2a07      	cmp	r2, #7
 800206a:	bf14      	ite	ne
 800206c:	2201      	movne	r2, #1
 800206e:	2200      	moveq	r2, #0
 8002070:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d06e      	beq.n	800217c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d069      	beq.n	8002178 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0ad      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c0:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020cc:	f7ff f958 	bl	8001380 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f954 	bl	8001380 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e09a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f2:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <HAL_RCC_OscConfig+0x784>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002102:	3a01      	subs	r2, #1
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800210c:	0212      	lsls	r2, r2, #8
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002114:	0852      	lsrs	r2, r2, #1
 8002116:	3a01      	subs	r2, #1
 8002118:	0552      	lsls	r2, r2, #21
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002120:	0852      	lsrs	r2, r2, #1
 8002122:	3a01      	subs	r2, #1
 8002124:	0652      	lsls	r2, r2, #25
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800212c:	0912      	lsrs	r2, r2, #4
 800212e:	0452      	lsls	r2, r2, #17
 8002130:	430a      	orrs	r2, r1
 8002132:	4930      	ldr	r1, [pc, #192]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002138:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2d      	ldr	r2, [pc, #180]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002150:	f7ff f916 	bl	8001380 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f912 	bl	8001380 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e058      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002176:	e050      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04f      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d148      	bne.n	800221a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a0:	f7ff f8ee 	bl	8001380 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f8ea 	bl	8001380 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e030      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x734>
 80021c6:	e028      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d023      	beq.n	8002216 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff f8d1 	bl	8001380 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e00c      	b.n	80021fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff f8cd 	bl	8001380 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d905      	bls.n	80021fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e013      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x7b0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ec      	bne.n	80021e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_OscConfig+0x7b0>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4905      	ldr	r1, [pc, #20]	; (8002224 <HAL_RCC_OscConfig+0x7b0>)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x7b4>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
 8002214:	e001      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	feeefffc 	.word	0xfeeefffc

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0e7      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d910      	bls.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b72      	ldr	r3, [pc, #456]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4970      	ldr	r1, [pc, #448]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b6e      	ldr	r3, [pc, #440]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cf      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	429a      	cmp	r2, r3
 800228a:	d908      	bls.n	800229e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4960      	ldr	r1, [pc, #384]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04c      	beq.n	8002344 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0a6      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e09a      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e2:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e08e      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e086      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4943      	ldr	r1, [pc, #268]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002314:	f7ff f834 	bl	8001380 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7ff f830 	bl	8001380 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e06e      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235c:	429a      	cmp	r2, r3
 800235e:	d208      	bcs.n	8002372 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	492b      	ldr	r1, [pc, #172]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d210      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 0207 	bic.w	r2, r3, #7
 8002388:	4923      	ldr	r1, [pc, #140]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e036      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4918      	ldr	r1, [pc, #96]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4910      	ldr	r1, [pc, #64]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e0:	f000 f824 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	490b      	ldr	r1, [pc, #44]	; (8002420 <HAL_RCC_ClockConfig+0x1f4>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1fc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fde5 	bl	8000fd4 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	72fb      	strb	r3, [r7, #11]

  return status;
 800240e:	7afb      	ldrb	r3, [r7, #11]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	0800617c 	.word	0x0800617c
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d121      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11e      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e005      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_RCC_GetSysClockFreq+0x10c>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e004      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d134      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d003      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xac>
 80024d0:	e005      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d4:	617b      	str	r3, [r7, #20]
      break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	617b      	str	r3, [r7, #20]
      break;
 80024dc:	e002      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	3301      	adds	r3, #1
 80024f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	fb03 f202 	mul.w	r2, r3, r2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0e5b      	lsrs	r3, r3, #25
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	3301      	adds	r3, #1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002524:	69bb      	ldr	r3, [r7, #24]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	08006194 	.word	0x08006194
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4904      	ldr	r1, [pc, #16]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	0800618c 	.word	0x0800618c

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800258c:	f7ff ffda 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	0800618c 	.word	0x0800618c

080025b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	220f      	movs	r2, #15
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_RCC_GetClockConfig+0x60>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0207 	and.w	r2, r3, #7
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	40022000 	.word	0x40022000

08002618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff f9bc 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
 8002636:	e014      	b.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f9ac 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002668:	d10b      	bne.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d919      	bls.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2ba0      	cmp	r3, #160	; 0xa0
 8002674:	d902      	bls.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002676:	2302      	movs	r3, #2
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e013      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e010      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d902      	bls.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e00a      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d102      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002694:	2302      	movs	r3, #2
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e004      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d101      	bne.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a0:	2301      	movs	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4909      	ldr	r1, [pc, #36]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40022000 	.word	0x40022000

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e0:	2300      	movs	r3, #0
 80026e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e4:	2300      	movs	r3, #0
 80026e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d041      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026fc:	d02a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002702:	d824      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002704:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800270a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800270e:	d81e      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002718:	d010      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800271a:	e018      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800271c:	4b86      	ldr	r3, [pc, #536]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a85      	ldr	r2, [pc, #532]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002728:	e015      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fabb 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273a:	e00c      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3320      	adds	r3, #32
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fba6 	bl	8002e94 <RCCEx_PLLSAI2_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	74fb      	strb	r3, [r7, #19]
      break;
 8002752:	e000      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800276a:	4973      	ldr	r1, [pc, #460]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002772:	e001      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d041      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002788:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800278c:	d02a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800278e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002792:	d824      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800279a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800279e:	d81e      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d010      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027aa:	e018      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027ac:	4b62      	ldr	r3, [pc, #392]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a61      	ldr	r2, [pc, #388]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b8:	e015      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fa73 	bl	8002cac <RCCEx_PLLSAI1_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ca:	e00c      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3320      	adds	r3, #32
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fb5e 	bl	8002e94 <RCCEx_PLLSAI2_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	74fb      	strb	r3, [r7, #19]
      break;
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fa:	494f      	ldr	r1, [pc, #316]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002802:	e001      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a0 	beq.w	8002956 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a40      	ldr	r2, [pc, #256]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	2301      	movs	r3, #1
 800284a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284c:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3a      	ldr	r2, [pc, #232]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002858:	f7fe fd92 	bl	8001380 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285e:	e009      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fd8e 	bl	8001380 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	74fb      	strb	r3, [r7, #19]
        break;
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d15c      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002890:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01f      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d019      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fd4d 	bl	8001380 <HAL_GetTick>
 80028e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e8:	e00b      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fd49 	bl	8001380 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d902      	bls.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002900:	e006      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ec      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002926:	4904      	ldr	r1, [pc, #16]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800292e:	e009      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
 8002934:	e006      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002944:	7c7b      	ldrb	r3, [r7, #17]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a9d      	ldr	r2, [pc, #628]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002962:	4b98      	ldr	r3, [pc, #608]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f023 0203 	bic.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	4994      	ldr	r1, [pc, #592]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002984:	4b8f      	ldr	r3, [pc, #572]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 020c 	bic.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	498c      	ldr	r1, [pc, #560]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a6:	4b87      	ldr	r3, [pc, #540]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4983      	ldr	r1, [pc, #524]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c8:	4b7e      	ldr	r3, [pc, #504]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	497b      	ldr	r1, [pc, #492]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ea:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	4972      	ldr	r1, [pc, #456]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a0c:	4b6d      	ldr	r3, [pc, #436]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	496a      	ldr	r1, [pc, #424]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	4961      	ldr	r1, [pc, #388]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a50:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5e:	4959      	ldr	r1, [pc, #356]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a72:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	4950      	ldr	r1, [pc, #320]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	4948      	ldr	r1, [pc, #288]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	493f      	ldr	r1, [pc, #252]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae6:	4937      	ldr	r1, [pc, #220]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	e011      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8c8 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	491f      	ldr	r1, [pc, #124]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b60:	60d3      	str	r3, [r2, #12]
 8002b62:	e011      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f899 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02b      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a02      	ldr	r2, [pc, #8]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bbe:	60d3      	str	r3, [r2, #12]
 8002bc0:	e014      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f867 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c06:	4928      	ldr	r1, [pc, #160]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f844 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d014      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	74bb      	strb	r3, [r7, #18]
 8002c32:	e011      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3320      	adds	r3, #32
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f925 	bl	8002e94 <RCCEx_PLLSAI2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c72:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c96:	4904      	ldr	r1, [pc, #16]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000

08002cac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cba:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d018      	beq.n	8002cf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cc6:	4b72      	ldr	r3, [pc, #456]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0203 	and.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d10d      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cde:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
       ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d047      	beq.n	8002d82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e044      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d018      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0x86>
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d825      	bhi.n	8002d50 <RCCEx_PLLSAI1_Config+0xa4>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d002      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x62>
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d009      	beq.n	8002d20 <RCCEx_PLLSAI1_Config+0x74>
 8002d0c:	e020      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11d      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1e:	e01a      	b.n	8002d56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d20:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d116      	bne.n	8002d5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d30:	e013      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d32:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d4e:	e006      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e004      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	4944      	ldr	r1, [pc, #272]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d17d      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d88:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a40      	ldr	r2, [pc, #256]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe faf4 	bl	8001380 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d9a:	e009      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d9c:	f7fe faf0 	bl	8001380 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d902      	bls.n	8002db0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	73fb      	strb	r3, [r7, #15]
        break;
 8002dae:	e005      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db0:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ef      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d160      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	0211      	lsls	r1, r2, #8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	0912      	lsrs	r2, r2, #4
 8002de0:	0452      	lsls	r2, r2, #17
 8002de2:	430a      	orrs	r2, r1
 8002de4:	492a      	ldr	r1, [pc, #168]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	610b      	str	r3, [r1, #16]
 8002dea:	e027      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d112      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df2:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	0211      	lsls	r1, r2, #8
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6912      	ldr	r2, [r2, #16]
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0552      	lsls	r2, r2, #21
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	491f      	ldr	r1, [pc, #124]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]
 8002e16:	e011      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	0211      	lsls	r1, r2, #8
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6952      	ldr	r2, [r2, #20]
 8002e2e:	0852      	lsrs	r2, r2, #1
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0652      	lsls	r2, r2, #25
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4916      	ldr	r1, [pc, #88]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe fa9a 	bl	8001380 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4e:	e009      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e50:	f7fe fa96 	bl	8001380 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d902      	bls.n	8002e64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	73fb      	strb	r3, [r7, #15]
          break;
 8002e62:	e005      	b.n	8002e70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4904      	ldr	r1, [pc, #16]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000

08002e94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eae:	4b67      	ldr	r3, [pc, #412]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d10d      	bne.n	8002eda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d047      	beq.n	8002f6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e044      	b.n	8002f6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d018      	beq.n	8002f1a <RCCEx_PLLSAI2_Config+0x86>
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d825      	bhi.n	8002f38 <RCCEx_PLLSAI2_Config+0xa4>
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d002      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x62>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d009      	beq.n	8002f08 <RCCEx_PLLSAI2_Config+0x74>
 8002ef4:	e020      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef6:	4b55      	ldr	r3, [pc, #340]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11d      	bne.n	8002f3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f06:	e01a      	b.n	8002f3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e013      	b.n	8002f42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f26:	4b49      	ldr	r3, [pc, #292]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f36:	e006      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e004      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	430b      	orrs	r3, r1
 8002f64:	4939      	ldr	r1, [pc, #228]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d167      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a35      	ldr	r2, [pc, #212]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fa00 	bl	8001380 <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f82:	e009      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f84:	f7fe f9fc 	bl	8001380 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	73fb      	strb	r3, [r7, #15]
        break;
 8002f96:	e005      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f98:	4b2c      	ldr	r3, [pc, #176]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ef      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d14a      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	0211      	lsls	r1, r2, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	0912      	lsrs	r2, r2, #4
 8002fc8:	0452      	lsls	r2, r2, #17
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	491f      	ldr	r1, [pc, #124]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	614b      	str	r3, [r1, #20]
 8002fd2:	e011      	b.n	8002ff8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6912      	ldr	r2, [r2, #16]
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4916      	ldr	r1, [pc, #88]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f9bc 	bl	8001380 <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800300a:	e009      	b.n	8003020 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800300c:	f7fe f9b8 	bl	8001380 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	73fb      	strb	r3, [r7, #15]
          break;
 800301e:	e005      	b.n	800302c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4904      	ldr	r1, [pc, #16]	; (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	4313      	orrs	r3, r2
 800303e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e095      	b.n	800318e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003072:	d009      	beq.n	8003088 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]
 800307a:	e005      	b.n	8003088 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fe78 	bl	8000d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c8:	d902      	bls.n	80030d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e002      	b.n	80030d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030de:	d007      	beq.n	80030f0 <HAL_SPI_Init+0xa0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	f003 0204 	and.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800316c:	ea42 0103 	orr.w	r1, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b088      	sub	sp, #32
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_SPI_Transmit+0x22>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e15f      	b.n	8003478 <HAL_SPI_Transmit+0x2e2>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c0:	f7fe f8de 	bl	8001380 <HAL_GetTick>
 80031c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031da:	e148      	b.n	800346e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0x52>
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d102      	bne.n	80031ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ec:	e13f      	b.n	800346e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2203      	movs	r2, #3
 80031f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	88fa      	ldrh	r2, [r7, #6]
 8003206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d10f      	bne.n	800325a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d007      	beq.n	8003278 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003280:	d94f      	bls.n	8003322 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0xfa>
 800328a:	8afb      	ldrh	r3, [r7, #22]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d142      	bne.n	8003316 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032b4:	e02f      	b.n	8003316 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d112      	bne.n	80032ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032e8:	e015      	b.n	8003316 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ea:	f7fe f849 	bl	8001380 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d803      	bhi.n	8003302 <HAL_SPI_Transmit+0x16c>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d102      	bne.n	8003308 <HAL_SPI_Transmit+0x172>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003314:	e0ab      	b.n	800346e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ca      	bne.n	80032b6 <HAL_SPI_Transmit+0x120>
 8003320:	e080      	b.n	8003424 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0x19a>
 800332a:	8afb      	ldrh	r3, [r7, #22]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d174      	bne.n	800341a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d912      	bls.n	8003360 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b02      	subs	r3, #2
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800335e:	e05c      	b.n	800341a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003386:	e048      	b.n	800341a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d12b      	bne.n	80033ee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d912      	bls.n	80033c6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b02      	subs	r3, #2
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033c4:	e029      	b.n	800341a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ec:	e015      	b.n	800341a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ee:	f7fd ffc7 	bl	8001380 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d803      	bhi.n	8003406 <HAL_SPI_Transmit+0x270>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d102      	bne.n	800340c <HAL_SPI_Transmit+0x276>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003418:	e029      	b.n	800346e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1b1      	bne.n	8003388 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fd71 	bl	8003f10 <SPI_EndRxTxTransaction>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e003      	b.n	800346e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003476:	7ffb      	ldrb	r3, [r7, #31]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a2:	e092      	b.n	80035ca <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d110      	bne.n	80034ce <HAL_SPI_Receive_IT+0x4e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b4:	d10b      	bne.n	80034ce <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2204      	movs	r2, #4
 80034ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f889 	bl	80035dc <HAL_SPI_TransmitReceive_IT>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e07e      	b.n	80035cc <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_SPI_Receive_IT+0x5a>
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034de:	e074      	b.n	80035ca <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Receive_IT+0x6e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e06e      	b.n	80035cc <HAL_SPI_Receive_IT+0x14c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2204      	movs	r2, #4
 80034fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	88fa      	ldrh	r2, [r7, #6]
 800350e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800353a:	d90b      	bls.n	8003554 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <HAL_SPI_Receive_IT+0x154>)
 8003550:	64da      	str	r2, [r3, #76]	; 0x4c
 8003552:	e00a      	b.n	800356a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003562:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_SPI_Receive_IT+0x158>)
 8003568:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003572:	d10f      	bne.n	8003594 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003582:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003592:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d007      	beq.n	80035b2 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80035c8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	08003bd9 	.word	0x08003bd9
 80035d8:	08003b89 	.word	0x08003b89

080035dc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035f4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035fc:	7dbb      	ldrb	r3, [r7, #22]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d00d      	beq.n	800361e <HAL_SPI_TransmitReceive_IT+0x42>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003608:	d106      	bne.n	8003618 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <HAL_SPI_TransmitReceive_IT+0x3c>
 8003612:	7dbb      	ldrb	r3, [r7, #22]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d002      	beq.n	800361e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800361c:	e07d      	b.n	800371a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_SPI_TransmitReceive_IT+0x54>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_TransmitReceive_IT+0x54>
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003634:	e071      	b.n	800371a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_SPI_TransmitReceive_IT+0x68>
 8003640:	2302      	movs	r3, #2
 8003642:	e06b      	b.n	800371c <HAL_SPI_TransmitReceive_IT+0x140>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b04      	cmp	r3, #4
 8003656:	d003      	beq.n	8003660 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2205      	movs	r2, #5
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	887a      	ldrh	r2, [r7, #2]
 8003682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003696:	d906      	bls.n	80036a6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a23      	ldr	r2, [pc, #140]	; (8003728 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800369c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <HAL_SPI_TransmitReceive_IT+0x150>)
 80036a2:	651a      	str	r2, [r3, #80]	; 0x50
 80036a4:	e005      	b.n	80036b2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a21      	ldr	r2, [pc, #132]	; (8003730 <HAL_SPI_TransmitReceive_IT+0x154>)
 80036aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <HAL_SPI_TransmitReceive_IT+0x158>)
 80036b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036ba:	d802      	bhi.n	80036c2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d908      	bls.n	80036d4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e007      	b.n	80036e4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d007      	beq.n	8003702 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003718:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	08003ac3 	.word	0x08003ac3
 800372c:	08003b29 	.word	0x08003b29
 8003730:	08003973 	.word	0x08003973
 8003734:	08003a31 	.word	0x08003a31

08003738 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
    return;
 8003776:	e0ce      	b.n	8003916 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_SPI_IRQHandler+0x5e>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
    return;
 8003794:	e0bf      	b.n	8003916 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_SPI_IRQHandler+0x7e>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d105      	bne.n	80037b6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80b0 	beq.w	8003916 <HAL_SPI_IRQHandler+0x1de>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80aa 	beq.w	8003916 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d023      	beq.n	8003814 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d011      	beq.n	80037fc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	e00b      	b.n	8003814 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
        return;
 8003812:	e080      	b.n	8003916 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d014      	beq.n	8003848 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003870:	2b00      	cmp	r3, #0
 8003872:	d04f      	beq.n	8003914 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003882:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_SPI_IRQHandler+0x168>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d034      	beq.n	800390a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0203 	bic.w	r2, r2, #3
 80038ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d011      	beq.n	80038dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_SPI_IRQHandler+0x1e4>)
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fe6d 	bl	80015a4 <HAL_DMA_Abort_IT>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d016      	beq.n	8003912 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <HAL_SPI_IRQHandler+0x1e4>)
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fd fe57 	bl	80015a4 <HAL_DMA_Abort_IT>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003908:	e003      	b.n	8003912 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f812 	bl	8003934 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003910:	e000      	b.n	8003914 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003912:	bf00      	nop
    return;
 8003914:	bf00      	nop
  }
}
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08003949 	.word	0x08003949

08003920 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff ffe5 	bl	8003934 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d923      	bls.n	80039ce <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	b292      	uxth	r2, r2
 8003992:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b02      	subs	r3, #2
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d11f      	bne.n	80039fc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	e016      	b.n	80039fc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f103 020c 	add.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10f      	bne.n	8003a28 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 faba 	bl	8003f9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d912      	bls.n	8003a68 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b02      	subs	r3, #2
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a66:	e012      	b.n	8003a8e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d110      	bne.n	8003aba <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fa71 	bl	8003f9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa3e 	bl	8003f9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b6c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa0e 	bl	8003f9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f103 020c 	add.w	r2, r3, #12
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa28 	bl	8004020 <SPI_CloseRx_ISR>
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	b292      	uxth	r2, r2
 8003bec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa02 	bl	8004020 <SPI_CloseRx_ISR>
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c34:	f7fd fba4 	bl	8001380 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	4413      	add	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c44:	f7fd fb9c 	bl	8001380 <HAL_GetTick>
 8003c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	015b      	lsls	r3, r3, #5
 8003c50:	0d1b      	lsrs	r3, r3, #20
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5a:	e054      	b.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d050      	beq.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c64:	f7fd fb8c 	bl	8001380 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d902      	bls.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d13d      	bne.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c92:	d111      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9c:	d004      	beq.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d107      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc0:	d10f      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e017      	b.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d19b      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000

08003d34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d46:	f7fd fb1b 	bl	8001380 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d56:	f7fd fb13 	bl	8001380 <HAL_GetTick>
 8003d5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d64:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00da      	lsls	r2, r3, #3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	0d1b      	lsrs	r3, r3, #20
 8003d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d7c:	e060      	b.n	8003e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d84:	d107      	bne.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d050      	beq.n	8003e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9e:	f7fd faef 	bl	8001380 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d902      	bls.n	8003db4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13d      	bne.n	8003e30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dcc:	d111      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd6:	d004      	beq.n	8003de2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d107      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfa:	d10f      	bne.n	8003e1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e010      	b.n	8003e52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d196      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000000 	.word	0x20000000

08003e60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e74:	d111      	bne.n	8003e9a <SPI_EndRxTransaction+0x3a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d004      	beq.n	8003e8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e88:	d107      	bne.n	8003e9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff febd 	bl	8003c24 <SPI_WaitFlagStateUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e023      	b.n	8003f08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec8:	d11d      	bne.n	8003f06 <SPI_EndRxTransaction+0xa6>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d004      	beq.n	8003ede <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d113      	bne.n	8003f06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff ff22 	bl	8003d34 <SPI_WaitFifoStateUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e000      	b.n	8003f08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7ff ff03 	bl	8003d34 <SPI_WaitFifoStateUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e027      	b.n	8003f94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff fe68 	bl	8003c24 <SPI_WaitFlagStateUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e014      	b.n	8003f94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fedc 	bl	8003d34 <SPI_WaitFifoStateUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e000      	b.n	8003f94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa4:	f7fd f9ec 	bl	8001380 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0220 	bic.w	r2, r2, #32
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	2164      	movs	r1, #100	; 0x64
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffa6 	bl	8003f10 <SPI_EndRxTxTransaction>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d115      	bne.n	800400a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d107      	bne.n	8003ffa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fe8a 	bl	8000d0c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003ff8:	e00e      	b.n	8004018 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fc8c 	bl	8003920 <HAL_SPI_TxRxCpltCallback>
}
 8004008:	e006      	b.n	8004018 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fc8e 	bl	8003934 <HAL_SPI_ErrorCallback>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004036:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004038:	f7fd f9a2 	bl	8001380 <HAL_GetTick>
 800403c:	4603      	mov	r3, r0
 800403e:	461a      	mov	r2, r3
 8004040:	2164      	movs	r1, #100	; 0x64
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ff0c 	bl	8003e60 <SPI_EndRxTransaction>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fe4e 	bl	8000d0c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004070:	e002      	b.n	8004078 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fc5e 	bl	8003934 <HAL_SPI_ErrorCallback>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e049      	b.n	8004126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc ff12 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f000 f9d0 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e04f      	b.n	80041e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01d      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x76>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d018      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x76>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x76>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x76>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_TIM_Base_Start_IT+0xd0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x76>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_TIM_Base_Start_IT+0xd4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x76>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_TIM_Base_Start_IT+0xd8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d115      	bne.n	80041d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d015      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d011      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d0:	e008      	b.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e000      	b.n	80041e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40014000 	.word	0x40014000
 800420c:	00010007 	.word	0x00010007

08004210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d020      	beq.n	8004274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01b      	beq.n	8004274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8e4 	bl	8004428 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8d6 	bl	8004414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8e7 	bl	800443c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0204 	mvn.w	r2, #4
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8be 	bl	8004428 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8b0 	bl	8004414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8c1 	bl	800443c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0208 	mvn.w	r2, #8
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f898 	bl	8004428 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f88a 	bl	8004414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f89b 	bl	800443c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0210 	mvn.w	r2, #16
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2208      	movs	r2, #8
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f872 	bl	8004428 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f864 	bl	8004414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f875 	bl	800443c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0201 	mvn.w	r2, #1
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fcb0 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00c      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f906 	bl	80045ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8fe 	bl	80045c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f834 	bl	8004450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0220 	mvn.w	r2, #32
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8c6 	bl	8004598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a40      	ldr	r2, [pc, #256]	; (8004578 <TIM_Base_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d013      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004482:	d00f      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3d      	ldr	r2, [pc, #244]	; (800457c <TIM_Base_SetConfig+0x118>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <TIM_Base_SetConfig+0x11c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <TIM_Base_SetConfig+0x120>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3a      	ldr	r2, [pc, #232]	; (8004588 <TIM_Base_SetConfig+0x124>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d108      	bne.n	80044b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <TIM_Base_SetConfig+0x114>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d01b      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2c      	ldr	r2, [pc, #176]	; (800457c <TIM_Base_SetConfig+0x118>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <TIM_Base_SetConfig+0x11c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <TIM_Base_SetConfig+0x120>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <TIM_Base_SetConfig+0x124>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a28      	ldr	r2, [pc, #160]	; (800458c <TIM_Base_SetConfig+0x128>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <TIM_Base_SetConfig+0x12c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <TIM_Base_SetConfig+0x130>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <TIM_Base_SetConfig+0x114>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <TIM_Base_SetConfig+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a11      	ldr	r2, [pc, #68]	; (800458c <TIM_Base_SetConfig+0x128>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a10      	ldr	r2, [pc, #64]	; (8004590 <TIM_Base_SetConfig+0x12c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0f      	ldr	r2, [pc, #60]	; (8004594 <TIM_Base_SetConfig+0x130>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d103      	bne.n	8004564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	615a      	str	r2, [r3, #20]
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800

08004598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e040      	b.n	8004668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fc90 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fc34 	bl	8004e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f979 	bl	8004918 <UART_SetConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01b      	b.n	8004668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800463e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800464e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fcb3 	bl	8004fcc <UART_CheckIdleState>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004684:	2b20      	cmp	r3, #32
 8004686:	d178      	bne.n	800477a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Transmit+0x24>
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e071      	b.n	800477c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2221      	movs	r2, #33	; 0x21
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046a6:	f7fc fe6b 	bl	8001380 <HAL_GetTick>
 80046aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d108      	bne.n	80046d8 <HAL_UART_Transmit+0x68>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e003      	b.n	80046e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046e0:	e030      	b.n	8004744 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fd15 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e03c      	b.n	800477c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	881a      	ldrh	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004714:	b292      	uxth	r2, r2
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3302      	adds	r3, #2
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	e008      	b.n	8004732 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b292      	uxth	r2, r2
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	3301      	adds	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1c8      	bne.n	80046e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fcde 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e005      	b.n	800477c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e000      	b.n	800477c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479a:	2b20      	cmp	r3, #32
 800479c:	f040 80b6 	bne.w	800490c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_UART_Receive+0x28>
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0ae      	b.n	800490e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fc fddb 	bl	8001380 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d10e      	bne.n	8004804 <HAL_UART_Receive+0x80>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_UART_Receive+0x76>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f8:	e02d      	b.n	8004856 <HAL_UART_Receive+0xd2>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	; 0xff
 80047fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004802:	e028      	b.n	8004856 <HAL_UART_Receive+0xd2>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_UART_Receive+0xa4>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_UART_Receive+0x9a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481c:	e01b      	b.n	8004856 <HAL_UART_Receive+0xd2>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	227f      	movs	r2, #127	; 0x7f
 8004822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004826:	e016      	b.n	8004856 <HAL_UART_Receive+0xd2>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004830:	d10d      	bne.n	800484e <HAL_UART_Receive+0xca>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Receive+0xc0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	227f      	movs	r2, #127	; 0x7f
 800483e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004842:	e008      	b.n	8004856 <HAL_UART_Receive+0xd2>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	223f      	movs	r2, #63	; 0x3f
 8004848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800484c:	e003      	b.n	8004856 <HAL_UART_Receive+0xd2>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800485c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d108      	bne.n	800487a <HAL_UART_Receive+0xf6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e003      	b.n	8004882 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004882:	e037      	b.n	80048f4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	2120      	movs	r1, #32
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fc44 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e033      	b.n	800490e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	8a7b      	ldrh	r3, [r7, #18]
 80048b6:	4013      	ands	r3, r2
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	3302      	adds	r3, #2
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	e00d      	b.n	80048e2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	8a7b      	ldrh	r3, [r7, #18]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	4013      	ands	r3, r2
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1c1      	bne.n	8004884 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800491c:	b08a      	sub	sp, #40	; 0x28
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	431a      	orrs	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4313      	orrs	r3, r2
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4ba4      	ldr	r3, [pc, #656]	; (8004bd8 <UART_SetConfig+0x2c0>)
 8004948:	4013      	ands	r3, r2
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004950:	430b      	orrs	r3, r1
 8004952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a99      	ldr	r2, [pc, #612]	; (8004bdc <UART_SetConfig+0x2c4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	4313      	orrs	r3, r2
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a90      	ldr	r2, [pc, #576]	; (8004be0 <UART_SetConfig+0x2c8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d126      	bne.n	80049f0 <UART_SetConfig+0xd8>
 80049a2:	4b90      	ldr	r3, [pc, #576]	; (8004be4 <UART_SetConfig+0x2cc>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d81b      	bhi.n	80049e8 <UART_SetConfig+0xd0>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0xa0>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049d9 	.word	0x080049d9
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e1 	.word	0x080049e1
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e116      	b.n	8004bfe <UART_SetConfig+0x2e6>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e112      	b.n	8004bfe <UART_SetConfig+0x2e6>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049de:	e10e      	b.n	8004bfe <UART_SetConfig+0x2e6>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e6:	e10a      	b.n	8004bfe <UART_SetConfig+0x2e6>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ee:	e106      	b.n	8004bfe <UART_SetConfig+0x2e6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7c      	ldr	r2, [pc, #496]	; (8004be8 <UART_SetConfig+0x2d0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d138      	bne.n	8004a6c <UART_SetConfig+0x154>
 80049fa:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <UART_SetConfig+0x2cc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d82d      	bhi.n	8004a64 <UART_SetConfig+0x14c>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <UART_SetConfig+0xf8>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a45 	.word	0x08004a45
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004a65 	.word	0x08004a65
 8004a1c:	08004a65 	.word	0x08004a65
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a65 	.word	0x08004a65
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a4d 	.word	0x08004a4d
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a5d 	.word	0x08004a5d
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4a:	e0d8      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a52:	e0d4      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e0d0      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e0cc      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e0c8      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5e      	ldr	r2, [pc, #376]	; (8004bec <UART_SetConfig+0x2d4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d125      	bne.n	8004ac2 <UART_SetConfig+0x1aa>
 8004a76:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <UART_SetConfig+0x2cc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d016      	beq.n	8004ab2 <UART_SetConfig+0x19a>
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d818      	bhi.n	8004aba <UART_SetConfig+0x1a2>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d00a      	beq.n	8004aa2 <UART_SetConfig+0x18a>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d814      	bhi.n	8004aba <UART_SetConfig+0x1a2>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <UART_SetConfig+0x182>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d008      	beq.n	8004aaa <UART_SetConfig+0x192>
 8004a98:	e00f      	b.n	8004aba <UART_SetConfig+0x1a2>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa0:	e0ad      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa8:	e0a9      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab0:	e0a5      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab8:	e0a1      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004aba:	2310      	movs	r3, #16
 8004abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac0:	e09d      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <UART_SetConfig+0x2d8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d125      	bne.n	8004b18 <UART_SetConfig+0x200>
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <UART_SetConfig+0x2cc>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d016      	beq.n	8004b08 <UART_SetConfig+0x1f0>
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d818      	bhi.n	8004b10 <UART_SetConfig+0x1f8>
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d00a      	beq.n	8004af8 <UART_SetConfig+0x1e0>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d814      	bhi.n	8004b10 <UART_SetConfig+0x1f8>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x1d8>
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d008      	beq.n	8004b00 <UART_SetConfig+0x1e8>
 8004aee:	e00f      	b.n	8004b10 <UART_SetConfig+0x1f8>
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e082      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e07e      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e07a      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e076      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e072      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <UART_SetConfig+0x2dc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d12a      	bne.n	8004b78 <UART_SetConfig+0x260>
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <UART_SetConfig+0x2cc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d01a      	beq.n	8004b68 <UART_SetConfig+0x250>
 8004b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b36:	d81b      	bhi.n	8004b70 <UART_SetConfig+0x258>
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d00c      	beq.n	8004b58 <UART_SetConfig+0x240>
 8004b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b42:	d815      	bhi.n	8004b70 <UART_SetConfig+0x258>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <UART_SetConfig+0x238>
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d008      	beq.n	8004b60 <UART_SetConfig+0x248>
 8004b4e:	e00f      	b.n	8004b70 <UART_SetConfig+0x258>
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e052      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e04e      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b60:	2304      	movs	r3, #4
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e04a      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e046      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b70:	2310      	movs	r3, #16
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e042      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <UART_SetConfig+0x2c4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d13a      	bne.n	8004bf8 <UART_SetConfig+0x2e0>
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <UART_SetConfig+0x2cc>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b90:	d01a      	beq.n	8004bc8 <UART_SetConfig+0x2b0>
 8004b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0x2b8>
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9c:	d00c      	beq.n	8004bb8 <UART_SetConfig+0x2a0>
 8004b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba2:	d815      	bhi.n	8004bd0 <UART_SetConfig+0x2b8>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <UART_SetConfig+0x298>
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bac:	d008      	beq.n	8004bc0 <UART_SetConfig+0x2a8>
 8004bae:	e00f      	b.n	8004bd0 <UART_SetConfig+0x2b8>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e022      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e01e      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc6:	e01a      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	e016      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e012      	b.n	8004bfe <UART_SetConfig+0x2e6>
 8004bd8:	efff69f3 	.word	0xefff69f3
 8004bdc:	40008000 	.word	0x40008000
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40004400 	.word	0x40004400
 8004bec:	40004800 	.word	0x40004800
 8004bf0:	40004c00 	.word	0x40004c00
 8004bf4:	40005000 	.word	0x40005000
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a9f      	ldr	r2, [pc, #636]	; (8004e80 <UART_SetConfig+0x568>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d17a      	bne.n	8004cfe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d824      	bhi.n	8004c5a <UART_SetConfig+0x342>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x300>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c5b 	.word	0x08004c5b
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c4b 	.word	0x08004c4b
 8004c2c:	08004c5b 	.word	0x08004c5b
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c5b 	.word	0x08004c5b
 8004c38:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fd fc8e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004c40:	61f8      	str	r0, [r7, #28]
        break;
 8004c42:	e010      	b.n	8004c66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b8f      	ldr	r3, [pc, #572]	; (8004e84 <UART_SetConfig+0x56c>)
 8004c46:	61fb      	str	r3, [r7, #28]
        break;
 8004c48:	e00d      	b.n	8004c66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fd fbef 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004c4e:	61f8      	str	r0, [r7, #28]
        break;
 8004c50:	e009      	b.n	8004c66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c56:	61fb      	str	r3, [r7, #28]
        break;
 8004c58:	e005      	b.n	8004c66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80fb 	beq.w	8004e64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d305      	bcc.n	8004c8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d903      	bls.n	8004c92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c90:	e0e8      	b.n	8004e64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2200      	movs	r2, #0
 8004c96:	461c      	mov	r4, r3
 8004c98:	4615      	mov	r5, r2
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	022b      	lsls	r3, r5, #8
 8004ca4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ca8:	0222      	lsls	r2, r4, #8
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	6849      	ldr	r1, [r1, #4]
 8004cae:	0849      	lsrs	r1, r1, #1
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	4688      	mov	r8, r1
 8004cb4:	4681      	mov	r9, r0
 8004cb6:	eb12 0a08 	adds.w	sl, r2, r8
 8004cba:	eb43 0b09 	adc.w	fp, r3, r9
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ccc:	4650      	mov	r0, sl
 8004cce:	4659      	mov	r1, fp
 8004cd0:	f7fb face 	bl	8000270 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4613      	mov	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce2:	d308      	bcc.n	8004cf6 <UART_SetConfig+0x3de>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cea:	d204      	bcs.n	8004cf6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	e0b6      	b.n	8004e64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cfc:	e0b2      	b.n	8004e64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d06:	d15e      	bne.n	8004dc6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d828      	bhi.n	8004d62 <UART_SetConfig+0x44a>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x400>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	08004d63 	.word	0x08004d63
 8004d28:	08004d53 	.word	0x08004d53
 8004d2c:	08004d63 	.word	0x08004d63
 8004d30:	08004d63 	.word	0x08004d63
 8004d34:	08004d63 	.word	0x08004d63
 8004d38:	08004d5b 	.word	0x08004d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d3c:	f7fd fc0e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004d40:	61f8      	str	r0, [r7, #28]
        break;
 8004d42:	e014      	b.n	8004d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d44:	f7fd fc20 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004d48:	61f8      	str	r0, [r7, #28]
        break;
 8004d4a:	e010      	b.n	8004d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d4c:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <UART_SetConfig+0x56c>)
 8004d4e:	61fb      	str	r3, [r7, #28]
        break;
 8004d50:	e00d      	b.n	8004d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d52:	f7fd fb6b 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004d56:	61f8      	str	r0, [r7, #28]
        break;
 8004d58:	e009      	b.n	8004d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5e:	61fb      	str	r3, [r7, #28]
        break;
 8004d60:	e005      	b.n	8004d6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d077      	beq.n	8004e64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	005a      	lsls	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d916      	bls.n	8004dbe <UART_SetConfig+0x4a6>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d212      	bcs.n	8004dbe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f023 030f 	bic.w	r3, r3, #15
 8004da0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	8afb      	ldrh	r3, [r7, #22]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	8afa      	ldrh	r2, [r7, #22]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e052      	b.n	8004e64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dc4:	e04e      	b.n	8004e64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d827      	bhi.n	8004e1e <UART_SetConfig+0x506>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0x4bc>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004e01 	.word	0x08004e01
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	08004e1f 	.word	0x08004e1f
 8004de4:	08004e0f 	.word	0x08004e0f
 8004de8:	08004e1f 	.word	0x08004e1f
 8004dec:	08004e1f 	.word	0x08004e1f
 8004df0:	08004e1f 	.word	0x08004e1f
 8004df4:	08004e17 	.word	0x08004e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df8:	f7fd fbb0 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004dfc:	61f8      	str	r0, [r7, #28]
        break;
 8004dfe:	e014      	b.n	8004e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e00:	f7fd fbc2 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004e04:	61f8      	str	r0, [r7, #28]
        break;
 8004e06:	e010      	b.n	8004e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <UART_SetConfig+0x56c>)
 8004e0a:	61fb      	str	r3, [r7, #28]
        break;
 8004e0c:	e00d      	b.n	8004e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0e:	f7fd fb0d 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004e12:	61f8      	str	r0, [r7, #28]
        break;
 8004e14:	e009      	b.n	8004e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1a:	61fb      	str	r3, [r7, #28]
        break;
 8004e1c:	e005      	b.n	8004e2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e28:	bf00      	nop
    }

    if (pclk != 0U)
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d019      	beq.n	8004e64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	085a      	lsrs	r2, r3, #1
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d909      	bls.n	8004e5e <UART_SetConfig+0x546>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d205      	bcs.n	8004e5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e002      	b.n	8004e64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3728      	adds	r7, #40	; 0x28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7e:	bf00      	nop
 8004e80:	40008000 	.word	0x40008000
 8004e84:	00f42400 	.word	0x00f42400

08004e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f86:	d10a      	bne.n	8004f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b098      	sub	sp, #96	; 0x60
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fdc:	f7fc f9d0 	bl	8001380 <HAL_GetTick>
 8004fe0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d12e      	bne.n	800504e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f88c 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d021      	beq.n	800504e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501e:	653b      	str	r3, [r7, #80]	; 0x50
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
 800502a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800502e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e062      	b.n	8005114 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d149      	bne.n	80050f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f856 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d03c      	beq.n	80050f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	623b      	str	r3, [r7, #32]
   return(result);
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	633b      	str	r3, [r7, #48]	; 0x30
 8005096:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800509a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e6      	bne.n	8005076 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3308      	adds	r3, #8
 80050ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c8:	61fa      	str	r2, [r7, #28]
 80050ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	617b      	str	r3, [r7, #20]
   return(result);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e011      	b.n	8005114 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3758      	adds	r7, #88	; 0x58
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512c:	e049      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d045      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fc f923 	bl	8001380 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <UART_WaitOnFlagUntilTimeout+0x30>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e048      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d031      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d110      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2208      	movs	r2, #8
 8005172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f838 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2208      	movs	r2, #8
 800517e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e029      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519c:	d111      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f81e 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00f      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d0a6      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b095      	sub	sp, #84	; 0x54
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
 8005212:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005244:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	2b01      	cmp	r3, #1
 800525e:	d118      	bne.n	8005292 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	60bb      	str	r3, [r7, #8]
   return(result);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	647b      	str	r3, [r7, #68]	; 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	613b      	str	r3, [r7, #16]
   return(result);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052a6:	bf00      	nop
 80052a8:	3754      	adds	r7, #84	; 0x54
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <std>:
 80052b4:	2300      	movs	r3, #0
 80052b6:	b510      	push	{r4, lr}
 80052b8:	4604      	mov	r4, r0
 80052ba:	e9c0 3300 	strd	r3, r3, [r0]
 80052be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052c2:	6083      	str	r3, [r0, #8]
 80052c4:	8181      	strh	r1, [r0, #12]
 80052c6:	6643      	str	r3, [r0, #100]	; 0x64
 80052c8:	81c2      	strh	r2, [r0, #14]
 80052ca:	6183      	str	r3, [r0, #24]
 80052cc:	4619      	mov	r1, r3
 80052ce:	2208      	movs	r2, #8
 80052d0:	305c      	adds	r0, #92	; 0x5c
 80052d2:	f000 f8f4 	bl	80054be <memset>
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <std+0x38>)
 80052d8:	6263      	str	r3, [r4, #36]	; 0x24
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <std+0x3c>)
 80052dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <std+0x40>)
 80052e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <std+0x44>)
 80052e4:	6224      	str	r4, [r4, #32]
 80052e6:	6323      	str	r3, [r4, #48]	; 0x30
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	08005439 	.word	0x08005439
 80052f0:	0800545b 	.word	0x0800545b
 80052f4:	08005493 	.word	0x08005493
 80052f8:	080054b7 	.word	0x080054b7

080052fc <stdio_exit_handler>:
 80052fc:	4a02      	ldr	r2, [pc, #8]	; (8005308 <stdio_exit_handler+0xc>)
 80052fe:	4903      	ldr	r1, [pc, #12]	; (800530c <stdio_exit_handler+0x10>)
 8005300:	4803      	ldr	r0, [pc, #12]	; (8005310 <stdio_exit_handler+0x14>)
 8005302:	f000 b869 	b.w	80053d8 <_fwalk_sglue>
 8005306:	bf00      	nop
 8005308:	2000000c 	.word	0x2000000c
 800530c:	08005e59 	.word	0x08005e59
 8005310:	20000018 	.word	0x20000018

08005314 <cleanup_stdio>:
 8005314:	6841      	ldr	r1, [r0, #4]
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <cleanup_stdio+0x34>)
 8005318:	4299      	cmp	r1, r3
 800531a:	b510      	push	{r4, lr}
 800531c:	4604      	mov	r4, r0
 800531e:	d001      	beq.n	8005324 <cleanup_stdio+0x10>
 8005320:	f000 fd9a 	bl	8005e58 <_fflush_r>
 8005324:	68a1      	ldr	r1, [r4, #8]
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <cleanup_stdio+0x38>)
 8005328:	4299      	cmp	r1, r3
 800532a:	d002      	beq.n	8005332 <cleanup_stdio+0x1e>
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fd93 	bl	8005e58 <_fflush_r>
 8005332:	68e1      	ldr	r1, [r4, #12]
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <cleanup_stdio+0x3c>)
 8005336:	4299      	cmp	r1, r3
 8005338:	d004      	beq.n	8005344 <cleanup_stdio+0x30>
 800533a:	4620      	mov	r0, r4
 800533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005340:	f000 bd8a 	b.w	8005e58 <_fflush_r>
 8005344:	bd10      	pop	{r4, pc}
 8005346:	bf00      	nop
 8005348:	200002b0 	.word	0x200002b0
 800534c:	20000318 	.word	0x20000318
 8005350:	20000380 	.word	0x20000380

08005354 <global_stdio_init.part.0>:
 8005354:	b510      	push	{r4, lr}
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <global_stdio_init.part.0+0x30>)
 8005358:	4c0b      	ldr	r4, [pc, #44]	; (8005388 <global_stdio_init.part.0+0x34>)
 800535a:	4a0c      	ldr	r2, [pc, #48]	; (800538c <global_stdio_init.part.0+0x38>)
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	4620      	mov	r0, r4
 8005360:	2200      	movs	r2, #0
 8005362:	2104      	movs	r1, #4
 8005364:	f7ff ffa6 	bl	80052b4 <std>
 8005368:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800536c:	2201      	movs	r2, #1
 800536e:	2109      	movs	r1, #9
 8005370:	f7ff ffa0 	bl	80052b4 <std>
 8005374:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005378:	2202      	movs	r2, #2
 800537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537e:	2112      	movs	r1, #18
 8005380:	f7ff bf98 	b.w	80052b4 <std>
 8005384:	200003e8 	.word	0x200003e8
 8005388:	200002b0 	.word	0x200002b0
 800538c:	080052fd 	.word	0x080052fd

08005390 <__sfp_lock_acquire>:
 8005390:	4801      	ldr	r0, [pc, #4]	; (8005398 <__sfp_lock_acquire+0x8>)
 8005392:	f000 b90d 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 8005396:	bf00      	nop
 8005398:	200003f1 	.word	0x200003f1

0800539c <__sfp_lock_release>:
 800539c:	4801      	ldr	r0, [pc, #4]	; (80053a4 <__sfp_lock_release+0x8>)
 800539e:	f000 b908 	b.w	80055b2 <__retarget_lock_release_recursive>
 80053a2:	bf00      	nop
 80053a4:	200003f1 	.word	0x200003f1

080053a8 <__sinit>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	f7ff fff0 	bl	8005390 <__sfp_lock_acquire>
 80053b0:	6a23      	ldr	r3, [r4, #32]
 80053b2:	b11b      	cbz	r3, 80053bc <__sinit+0x14>
 80053b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b8:	f7ff bff0 	b.w	800539c <__sfp_lock_release>
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <__sinit+0x28>)
 80053be:	6223      	str	r3, [r4, #32]
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__sinit+0x2c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f5      	bne.n	80053b4 <__sinit+0xc>
 80053c8:	f7ff ffc4 	bl	8005354 <global_stdio_init.part.0>
 80053cc:	e7f2      	b.n	80053b4 <__sinit+0xc>
 80053ce:	bf00      	nop
 80053d0:	08005315 	.word	0x08005315
 80053d4:	200003e8 	.word	0x200003e8

080053d8 <_fwalk_sglue>:
 80053d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053dc:	4607      	mov	r7, r0
 80053de:	4688      	mov	r8, r1
 80053e0:	4614      	mov	r4, r2
 80053e2:	2600      	movs	r6, #0
 80053e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053e8:	f1b9 0901 	subs.w	r9, r9, #1
 80053ec:	d505      	bpl.n	80053fa <_fwalk_sglue+0x22>
 80053ee:	6824      	ldr	r4, [r4, #0]
 80053f0:	2c00      	cmp	r4, #0
 80053f2:	d1f7      	bne.n	80053e4 <_fwalk_sglue+0xc>
 80053f4:	4630      	mov	r0, r6
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	89ab      	ldrh	r3, [r5, #12]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d907      	bls.n	8005410 <_fwalk_sglue+0x38>
 8005400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005404:	3301      	adds	r3, #1
 8005406:	d003      	beq.n	8005410 <_fwalk_sglue+0x38>
 8005408:	4629      	mov	r1, r5
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	4306      	orrs	r6, r0
 8005410:	3568      	adds	r5, #104	; 0x68
 8005412:	e7e9      	b.n	80053e8 <_fwalk_sglue+0x10>

08005414 <iprintf>:
 8005414:	b40f      	push	{r0, r1, r2, r3}
 8005416:	b507      	push	{r0, r1, r2, lr}
 8005418:	4906      	ldr	r1, [pc, #24]	; (8005434 <iprintf+0x20>)
 800541a:	ab04      	add	r3, sp, #16
 800541c:	6808      	ldr	r0, [r1, #0]
 800541e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005422:	6881      	ldr	r1, [r0, #8]
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	f000 f9e7 	bl	80057f8 <_vfiprintf_r>
 800542a:	b003      	add	sp, #12
 800542c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr
 8005434:	20000064 	.word	0x20000064

08005438 <__sread>:
 8005438:	b510      	push	{r4, lr}
 800543a:	460c      	mov	r4, r1
 800543c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005440:	f000 f868 	bl	8005514 <_read_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	bfab      	itete	ge
 8005448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800544a:	89a3      	ldrhlt	r3, [r4, #12]
 800544c:	181b      	addge	r3, r3, r0
 800544e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005452:	bfac      	ite	ge
 8005454:	6563      	strge	r3, [r4, #84]	; 0x54
 8005456:	81a3      	strhlt	r3, [r4, #12]
 8005458:	bd10      	pop	{r4, pc}

0800545a <__swrite>:
 800545a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	461f      	mov	r7, r3
 8005460:	898b      	ldrh	r3, [r1, #12]
 8005462:	05db      	lsls	r3, r3, #23
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	4616      	mov	r6, r2
 800546a:	d505      	bpl.n	8005478 <__swrite+0x1e>
 800546c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005470:	2302      	movs	r3, #2
 8005472:	2200      	movs	r2, #0
 8005474:	f000 f83c 	bl	80054f0 <_lseek_r>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	4632      	mov	r2, r6
 8005486:	463b      	mov	r3, r7
 8005488:	4628      	mov	r0, r5
 800548a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	f000 b853 	b.w	8005538 <_write_r>

08005492 <__sseek>:
 8005492:	b510      	push	{r4, lr}
 8005494:	460c      	mov	r4, r1
 8005496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549a:	f000 f829 	bl	80054f0 <_lseek_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	bf15      	itete	ne
 80054a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80054a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ae:	81a3      	strheq	r3, [r4, #12]
 80054b0:	bf18      	it	ne
 80054b2:	81a3      	strhne	r3, [r4, #12]
 80054b4:	bd10      	pop	{r4, pc}

080054b6 <__sclose>:
 80054b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ba:	f000 b809 	b.w	80054d0 <_close_r>

080054be <memset>:
 80054be:	4402      	add	r2, r0
 80054c0:	4603      	mov	r3, r0
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d100      	bne.n	80054c8 <memset+0xa>
 80054c6:	4770      	bx	lr
 80054c8:	f803 1b01 	strb.w	r1, [r3], #1
 80054cc:	e7f9      	b.n	80054c2 <memset+0x4>
	...

080054d0 <_close_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d06      	ldr	r5, [pc, #24]	; (80054ec <_close_r+0x1c>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	f7fb fe75 	bl	80011ca <_close>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_close_r+0x1a>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_close_r+0x1a>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	200003ec 	.word	0x200003ec

080054f0 <_lseek_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d07      	ldr	r5, [pc, #28]	; (8005510 <_lseek_r+0x20>)
 80054f4:	4604      	mov	r4, r0
 80054f6:	4608      	mov	r0, r1
 80054f8:	4611      	mov	r1, r2
 80054fa:	2200      	movs	r2, #0
 80054fc:	602a      	str	r2, [r5, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f7fb fe8a 	bl	8001218 <_lseek>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_lseek_r+0x1e>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_lseek_r+0x1e>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	200003ec 	.word	0x200003ec

08005514 <_read_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d07      	ldr	r5, [pc, #28]	; (8005534 <_read_r+0x20>)
 8005518:	4604      	mov	r4, r0
 800551a:	4608      	mov	r0, r1
 800551c:	4611      	mov	r1, r2
 800551e:	2200      	movs	r2, #0
 8005520:	602a      	str	r2, [r5, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	f7fb fe18 	bl	8001158 <_read>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_read_r+0x1e>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_read_r+0x1e>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200003ec 	.word	0x200003ec

08005538 <_write_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d07      	ldr	r5, [pc, #28]	; (8005558 <_write_r+0x20>)
 800553c:	4604      	mov	r4, r0
 800553e:	4608      	mov	r0, r1
 8005540:	4611      	mov	r1, r2
 8005542:	2200      	movs	r2, #0
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fb fe23 	bl	8001192 <_write>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_write_r+0x1e>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_write_r+0x1e>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	200003ec 	.word	0x200003ec

0800555c <__errno>:
 800555c:	4b01      	ldr	r3, [pc, #4]	; (8005564 <__errno+0x8>)
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000064 	.word	0x20000064

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4d0d      	ldr	r5, [pc, #52]	; (80055a0 <__libc_init_array+0x38>)
 800556c:	4c0d      	ldr	r4, [pc, #52]	; (80055a4 <__libc_init_array+0x3c>)
 800556e:	1b64      	subs	r4, r4, r5
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	2600      	movs	r6, #0
 8005574:	42a6      	cmp	r6, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	4d0b      	ldr	r5, [pc, #44]	; (80055a8 <__libc_init_array+0x40>)
 800557a:	4c0c      	ldr	r4, [pc, #48]	; (80055ac <__libc_init_array+0x44>)
 800557c:	f000 fdbe 	bl	80060fc <_init>
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	2600      	movs	r6, #0
 8005586:	42a6      	cmp	r6, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005590:	4798      	blx	r3
 8005592:	3601      	adds	r6, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	f855 3b04 	ldr.w	r3, [r5], #4
 800559a:	4798      	blx	r3
 800559c:	3601      	adds	r6, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	08006200 	.word	0x08006200
 80055a4:	08006200 	.word	0x08006200
 80055a8:	08006200 	.word	0x08006200
 80055ac:	08006204 	.word	0x08006204

080055b0 <__retarget_lock_acquire_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <__retarget_lock_release_recursive>:
 80055b2:	4770      	bx	lr

080055b4 <_free_r>:
 80055b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d044      	beq.n	8005644 <_free_r+0x90>
 80055ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055be:	9001      	str	r0, [sp, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f1a1 0404 	sub.w	r4, r1, #4
 80055c6:	bfb8      	it	lt
 80055c8:	18e4      	addlt	r4, r4, r3
 80055ca:	f000 f8df 	bl	800578c <__malloc_lock>
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <_free_r+0x94>)
 80055d0:	9801      	ldr	r0, [sp, #4]
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	b933      	cbnz	r3, 80055e4 <_free_r+0x30>
 80055d6:	6063      	str	r3, [r4, #4]
 80055d8:	6014      	str	r4, [r2, #0]
 80055da:	b003      	add	sp, #12
 80055dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e0:	f000 b8da 	b.w	8005798 <__malloc_unlock>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d908      	bls.n	80055fa <_free_r+0x46>
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	1961      	adds	r1, r4, r5
 80055ec:	428b      	cmp	r3, r1
 80055ee:	bf01      	itttt	eq
 80055f0:	6819      	ldreq	r1, [r3, #0]
 80055f2:	685b      	ldreq	r3, [r3, #4]
 80055f4:	1949      	addeq	r1, r1, r5
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	e7ed      	b.n	80055d6 <_free_r+0x22>
 80055fa:	461a      	mov	r2, r3
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b10b      	cbz	r3, 8005604 <_free_r+0x50>
 8005600:	42a3      	cmp	r3, r4
 8005602:	d9fa      	bls.n	80055fa <_free_r+0x46>
 8005604:	6811      	ldr	r1, [r2, #0]
 8005606:	1855      	adds	r5, r2, r1
 8005608:	42a5      	cmp	r5, r4
 800560a:	d10b      	bne.n	8005624 <_free_r+0x70>
 800560c:	6824      	ldr	r4, [r4, #0]
 800560e:	4421      	add	r1, r4
 8005610:	1854      	adds	r4, r2, r1
 8005612:	42a3      	cmp	r3, r4
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	d1e0      	bne.n	80055da <_free_r+0x26>
 8005618:	681c      	ldr	r4, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	6053      	str	r3, [r2, #4]
 800561e:	440c      	add	r4, r1
 8005620:	6014      	str	r4, [r2, #0]
 8005622:	e7da      	b.n	80055da <_free_r+0x26>
 8005624:	d902      	bls.n	800562c <_free_r+0x78>
 8005626:	230c      	movs	r3, #12
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	e7d6      	b.n	80055da <_free_r+0x26>
 800562c:	6825      	ldr	r5, [r4, #0]
 800562e:	1961      	adds	r1, r4, r5
 8005630:	428b      	cmp	r3, r1
 8005632:	bf04      	itt	eq
 8005634:	6819      	ldreq	r1, [r3, #0]
 8005636:	685b      	ldreq	r3, [r3, #4]
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	bf04      	itt	eq
 800563c:	1949      	addeq	r1, r1, r5
 800563e:	6021      	streq	r1, [r4, #0]
 8005640:	6054      	str	r4, [r2, #4]
 8005642:	e7ca      	b.n	80055da <_free_r+0x26>
 8005644:	b003      	add	sp, #12
 8005646:	bd30      	pop	{r4, r5, pc}
 8005648:	200003f4 	.word	0x200003f4

0800564c <sbrk_aligned>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4e0e      	ldr	r6, [pc, #56]	; (8005688 <sbrk_aligned+0x3c>)
 8005650:	460c      	mov	r4, r1
 8005652:	6831      	ldr	r1, [r6, #0]
 8005654:	4605      	mov	r5, r0
 8005656:	b911      	cbnz	r1, 800565e <sbrk_aligned+0x12>
 8005658:	f000 fcbc 	bl	8005fd4 <_sbrk_r>
 800565c:	6030      	str	r0, [r6, #0]
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	f000 fcb7 	bl	8005fd4 <_sbrk_r>
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d00a      	beq.n	8005680 <sbrk_aligned+0x34>
 800566a:	1cc4      	adds	r4, r0, #3
 800566c:	f024 0403 	bic.w	r4, r4, #3
 8005670:	42a0      	cmp	r0, r4
 8005672:	d007      	beq.n	8005684 <sbrk_aligned+0x38>
 8005674:	1a21      	subs	r1, r4, r0
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fcac 	bl	8005fd4 <_sbrk_r>
 800567c:	3001      	adds	r0, #1
 800567e:	d101      	bne.n	8005684 <sbrk_aligned+0x38>
 8005680:	f04f 34ff 	mov.w	r4, #4294967295
 8005684:	4620      	mov	r0, r4
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	200003f8 	.word	0x200003f8

0800568c <_malloc_r>:
 800568c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005690:	1ccd      	adds	r5, r1, #3
 8005692:	f025 0503 	bic.w	r5, r5, #3
 8005696:	3508      	adds	r5, #8
 8005698:	2d0c      	cmp	r5, #12
 800569a:	bf38      	it	cc
 800569c:	250c      	movcc	r5, #12
 800569e:	2d00      	cmp	r5, #0
 80056a0:	4607      	mov	r7, r0
 80056a2:	db01      	blt.n	80056a8 <_malloc_r+0x1c>
 80056a4:	42a9      	cmp	r1, r5
 80056a6:	d905      	bls.n	80056b4 <_malloc_r+0x28>
 80056a8:	230c      	movs	r3, #12
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	2600      	movs	r6, #0
 80056ae:	4630      	mov	r0, r6
 80056b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005788 <_malloc_r+0xfc>
 80056b8:	f000 f868 	bl	800578c <__malloc_lock>
 80056bc:	f8d8 3000 	ldr.w	r3, [r8]
 80056c0:	461c      	mov	r4, r3
 80056c2:	bb5c      	cbnz	r4, 800571c <_malloc_r+0x90>
 80056c4:	4629      	mov	r1, r5
 80056c6:	4638      	mov	r0, r7
 80056c8:	f7ff ffc0 	bl	800564c <sbrk_aligned>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	4604      	mov	r4, r0
 80056d0:	d155      	bne.n	800577e <_malloc_r+0xf2>
 80056d2:	f8d8 4000 	ldr.w	r4, [r8]
 80056d6:	4626      	mov	r6, r4
 80056d8:	2e00      	cmp	r6, #0
 80056da:	d145      	bne.n	8005768 <_malloc_r+0xdc>
 80056dc:	2c00      	cmp	r4, #0
 80056de:	d048      	beq.n	8005772 <_malloc_r+0xe6>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	4631      	mov	r1, r6
 80056e4:	4638      	mov	r0, r7
 80056e6:	eb04 0903 	add.w	r9, r4, r3
 80056ea:	f000 fc73 	bl	8005fd4 <_sbrk_r>
 80056ee:	4581      	cmp	r9, r0
 80056f0:	d13f      	bne.n	8005772 <_malloc_r+0xe6>
 80056f2:	6821      	ldr	r1, [r4, #0]
 80056f4:	1a6d      	subs	r5, r5, r1
 80056f6:	4629      	mov	r1, r5
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ffa7 	bl	800564c <sbrk_aligned>
 80056fe:	3001      	adds	r0, #1
 8005700:	d037      	beq.n	8005772 <_malloc_r+0xe6>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	442b      	add	r3, r5
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d038      	beq.n	8005782 <_malloc_r+0xf6>
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	42a2      	cmp	r2, r4
 8005714:	d12b      	bne.n	800576e <_malloc_r+0xe2>
 8005716:	2200      	movs	r2, #0
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	e00f      	b.n	800573c <_malloc_r+0xb0>
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	1b52      	subs	r2, r2, r5
 8005720:	d41f      	bmi.n	8005762 <_malloc_r+0xd6>
 8005722:	2a0b      	cmp	r2, #11
 8005724:	d917      	bls.n	8005756 <_malloc_r+0xca>
 8005726:	1961      	adds	r1, r4, r5
 8005728:	42a3      	cmp	r3, r4
 800572a:	6025      	str	r5, [r4, #0]
 800572c:	bf18      	it	ne
 800572e:	6059      	strne	r1, [r3, #4]
 8005730:	6863      	ldr	r3, [r4, #4]
 8005732:	bf08      	it	eq
 8005734:	f8c8 1000 	streq.w	r1, [r8]
 8005738:	5162      	str	r2, [r4, r5]
 800573a:	604b      	str	r3, [r1, #4]
 800573c:	4638      	mov	r0, r7
 800573e:	f104 060b 	add.w	r6, r4, #11
 8005742:	f000 f829 	bl	8005798 <__malloc_unlock>
 8005746:	f026 0607 	bic.w	r6, r6, #7
 800574a:	1d23      	adds	r3, r4, #4
 800574c:	1af2      	subs	r2, r6, r3
 800574e:	d0ae      	beq.n	80056ae <_malloc_r+0x22>
 8005750:	1b9b      	subs	r3, r3, r6
 8005752:	50a3      	str	r3, [r4, r2]
 8005754:	e7ab      	b.n	80056ae <_malloc_r+0x22>
 8005756:	42a3      	cmp	r3, r4
 8005758:	6862      	ldr	r2, [r4, #4]
 800575a:	d1dd      	bne.n	8005718 <_malloc_r+0x8c>
 800575c:	f8c8 2000 	str.w	r2, [r8]
 8005760:	e7ec      	b.n	800573c <_malloc_r+0xb0>
 8005762:	4623      	mov	r3, r4
 8005764:	6864      	ldr	r4, [r4, #4]
 8005766:	e7ac      	b.n	80056c2 <_malloc_r+0x36>
 8005768:	4634      	mov	r4, r6
 800576a:	6876      	ldr	r6, [r6, #4]
 800576c:	e7b4      	b.n	80056d8 <_malloc_r+0x4c>
 800576e:	4613      	mov	r3, r2
 8005770:	e7cc      	b.n	800570c <_malloc_r+0x80>
 8005772:	230c      	movs	r3, #12
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4638      	mov	r0, r7
 8005778:	f000 f80e 	bl	8005798 <__malloc_unlock>
 800577c:	e797      	b.n	80056ae <_malloc_r+0x22>
 800577e:	6025      	str	r5, [r4, #0]
 8005780:	e7dc      	b.n	800573c <_malloc_r+0xb0>
 8005782:	605b      	str	r3, [r3, #4]
 8005784:	deff      	udf	#255	; 0xff
 8005786:	bf00      	nop
 8005788:	200003f4 	.word	0x200003f4

0800578c <__malloc_lock>:
 800578c:	4801      	ldr	r0, [pc, #4]	; (8005794 <__malloc_lock+0x8>)
 800578e:	f7ff bf0f 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	200003f0 	.word	0x200003f0

08005798 <__malloc_unlock>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__malloc_unlock+0x8>)
 800579a:	f7ff bf0a 	b.w	80055b2 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	200003f0 	.word	0x200003f0

080057a4 <__sfputc_r>:
 80057a4:	6893      	ldr	r3, [r2, #8]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	b410      	push	{r4}
 80057ac:	6093      	str	r3, [r2, #8]
 80057ae:	da08      	bge.n	80057c2 <__sfputc_r+0x1e>
 80057b0:	6994      	ldr	r4, [r2, #24]
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	db01      	blt.n	80057ba <__sfputc_r+0x16>
 80057b6:	290a      	cmp	r1, #10
 80057b8:	d103      	bne.n	80057c2 <__sfputc_r+0x1e>
 80057ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057be:	f000 bb73 	b.w	8005ea8 <__swbuf_r>
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	1c58      	adds	r0, r3, #1
 80057c6:	6010      	str	r0, [r2, #0]
 80057c8:	7019      	strb	r1, [r3, #0]
 80057ca:	4608      	mov	r0, r1
 80057cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <__sfputs_r>:
 80057d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	4614      	mov	r4, r2
 80057da:	18d5      	adds	r5, r2, r3
 80057dc:	42ac      	cmp	r4, r5
 80057de:	d101      	bne.n	80057e4 <__sfputs_r+0x12>
 80057e0:	2000      	movs	r0, #0
 80057e2:	e007      	b.n	80057f4 <__sfputs_r+0x22>
 80057e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e8:	463a      	mov	r2, r7
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff ffda 	bl	80057a4 <__sfputc_r>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d1f3      	bne.n	80057dc <__sfputs_r+0xa>
 80057f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057f8 <_vfiprintf_r>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	460d      	mov	r5, r1
 80057fe:	b09d      	sub	sp, #116	; 0x74
 8005800:	4614      	mov	r4, r2
 8005802:	4698      	mov	r8, r3
 8005804:	4606      	mov	r6, r0
 8005806:	b118      	cbz	r0, 8005810 <_vfiprintf_r+0x18>
 8005808:	6a03      	ldr	r3, [r0, #32]
 800580a:	b90b      	cbnz	r3, 8005810 <_vfiprintf_r+0x18>
 800580c:	f7ff fdcc 	bl	80053a8 <__sinit>
 8005810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	d405      	bmi.n	8005822 <_vfiprintf_r+0x2a>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d402      	bmi.n	8005822 <_vfiprintf_r+0x2a>
 800581c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800581e:	f7ff fec7 	bl	80055b0 <__retarget_lock_acquire_recursive>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	d501      	bpl.n	800582c <_vfiprintf_r+0x34>
 8005828:	692b      	ldr	r3, [r5, #16]
 800582a:	b99b      	cbnz	r3, 8005854 <_vfiprintf_r+0x5c>
 800582c:	4629      	mov	r1, r5
 800582e:	4630      	mov	r0, r6
 8005830:	f000 fb78 	bl	8005f24 <__swsetup_r>
 8005834:	b170      	cbz	r0, 8005854 <_vfiprintf_r+0x5c>
 8005836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005838:	07dc      	lsls	r4, r3, #31
 800583a:	d504      	bpl.n	8005846 <_vfiprintf_r+0x4e>
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	b01d      	add	sp, #116	; 0x74
 8005842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	0598      	lsls	r0, r3, #22
 800584a:	d4f7      	bmi.n	800583c <_vfiprintf_r+0x44>
 800584c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800584e:	f7ff feb0 	bl	80055b2 <__retarget_lock_release_recursive>
 8005852:	e7f3      	b.n	800583c <_vfiprintf_r+0x44>
 8005854:	2300      	movs	r3, #0
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
 8005858:	2320      	movs	r3, #32
 800585a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800585e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005862:	2330      	movs	r3, #48	; 0x30
 8005864:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a18 <_vfiprintf_r+0x220>
 8005868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800586c:	f04f 0901 	mov.w	r9, #1
 8005870:	4623      	mov	r3, r4
 8005872:	469a      	mov	sl, r3
 8005874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005878:	b10a      	cbz	r2, 800587e <_vfiprintf_r+0x86>
 800587a:	2a25      	cmp	r2, #37	; 0x25
 800587c:	d1f9      	bne.n	8005872 <_vfiprintf_r+0x7a>
 800587e:	ebba 0b04 	subs.w	fp, sl, r4
 8005882:	d00b      	beq.n	800589c <_vfiprintf_r+0xa4>
 8005884:	465b      	mov	r3, fp
 8005886:	4622      	mov	r2, r4
 8005888:	4629      	mov	r1, r5
 800588a:	4630      	mov	r0, r6
 800588c:	f7ff ffa1 	bl	80057d2 <__sfputs_r>
 8005890:	3001      	adds	r0, #1
 8005892:	f000 80a9 	beq.w	80059e8 <_vfiprintf_r+0x1f0>
 8005896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005898:	445a      	add	r2, fp
 800589a:	9209      	str	r2, [sp, #36]	; 0x24
 800589c:	f89a 3000 	ldrb.w	r3, [sl]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a1 	beq.w	80059e8 <_vfiprintf_r+0x1f0>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058b0:	f10a 0a01 	add.w	sl, sl, #1
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	9307      	str	r3, [sp, #28]
 80058b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058bc:	931a      	str	r3, [sp, #104]	; 0x68
 80058be:	4654      	mov	r4, sl
 80058c0:	2205      	movs	r2, #5
 80058c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c6:	4854      	ldr	r0, [pc, #336]	; (8005a18 <_vfiprintf_r+0x220>)
 80058c8:	f7fa fc82 	bl	80001d0 <memchr>
 80058cc:	9a04      	ldr	r2, [sp, #16]
 80058ce:	b9d8      	cbnz	r0, 8005908 <_vfiprintf_r+0x110>
 80058d0:	06d1      	lsls	r1, r2, #27
 80058d2:	bf44      	itt	mi
 80058d4:	2320      	movmi	r3, #32
 80058d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058da:	0713      	lsls	r3, r2, #28
 80058dc:	bf44      	itt	mi
 80058de:	232b      	movmi	r3, #43	; 0x2b
 80058e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e4:	f89a 3000 	ldrb.w	r3, [sl]
 80058e8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ea:	d015      	beq.n	8005918 <_vfiprintf_r+0x120>
 80058ec:	9a07      	ldr	r2, [sp, #28]
 80058ee:	4654      	mov	r4, sl
 80058f0:	2000      	movs	r0, #0
 80058f2:	f04f 0c0a 	mov.w	ip, #10
 80058f6:	4621      	mov	r1, r4
 80058f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058fc:	3b30      	subs	r3, #48	; 0x30
 80058fe:	2b09      	cmp	r3, #9
 8005900:	d94d      	bls.n	800599e <_vfiprintf_r+0x1a6>
 8005902:	b1b0      	cbz	r0, 8005932 <_vfiprintf_r+0x13a>
 8005904:	9207      	str	r2, [sp, #28]
 8005906:	e014      	b.n	8005932 <_vfiprintf_r+0x13a>
 8005908:	eba0 0308 	sub.w	r3, r0, r8
 800590c:	fa09 f303 	lsl.w	r3, r9, r3
 8005910:	4313      	orrs	r3, r2
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	46a2      	mov	sl, r4
 8005916:	e7d2      	b.n	80058be <_vfiprintf_r+0xc6>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	1d19      	adds	r1, r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	9103      	str	r1, [sp, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	bfbb      	ittet	lt
 8005924:	425b      	neglt	r3, r3
 8005926:	f042 0202 	orrlt.w	r2, r2, #2
 800592a:	9307      	strge	r3, [sp, #28]
 800592c:	9307      	strlt	r3, [sp, #28]
 800592e:	bfb8      	it	lt
 8005930:	9204      	strlt	r2, [sp, #16]
 8005932:	7823      	ldrb	r3, [r4, #0]
 8005934:	2b2e      	cmp	r3, #46	; 0x2e
 8005936:	d10c      	bne.n	8005952 <_vfiprintf_r+0x15a>
 8005938:	7863      	ldrb	r3, [r4, #1]
 800593a:	2b2a      	cmp	r3, #42	; 0x2a
 800593c:	d134      	bne.n	80059a8 <_vfiprintf_r+0x1b0>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	1d1a      	adds	r2, r3, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	9203      	str	r2, [sp, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfb8      	it	lt
 800594a:	f04f 33ff 	movlt.w	r3, #4294967295
 800594e:	3402      	adds	r4, #2
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a28 <_vfiprintf_r+0x230>
 8005956:	7821      	ldrb	r1, [r4, #0]
 8005958:	2203      	movs	r2, #3
 800595a:	4650      	mov	r0, sl
 800595c:	f7fa fc38 	bl	80001d0 <memchr>
 8005960:	b138      	cbz	r0, 8005972 <_vfiprintf_r+0x17a>
 8005962:	9b04      	ldr	r3, [sp, #16]
 8005964:	eba0 000a 	sub.w	r0, r0, sl
 8005968:	2240      	movs	r2, #64	; 0x40
 800596a:	4082      	lsls	r2, r0
 800596c:	4313      	orrs	r3, r2
 800596e:	3401      	adds	r4, #1
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005976:	4829      	ldr	r0, [pc, #164]	; (8005a1c <_vfiprintf_r+0x224>)
 8005978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800597c:	2206      	movs	r2, #6
 800597e:	f7fa fc27 	bl	80001d0 <memchr>
 8005982:	2800      	cmp	r0, #0
 8005984:	d03f      	beq.n	8005a06 <_vfiprintf_r+0x20e>
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <_vfiprintf_r+0x228>)
 8005988:	bb1b      	cbnz	r3, 80059d2 <_vfiprintf_r+0x1da>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	3307      	adds	r3, #7
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	3308      	adds	r3, #8
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005998:	443b      	add	r3, r7
 800599a:	9309      	str	r3, [sp, #36]	; 0x24
 800599c:	e768      	b.n	8005870 <_vfiprintf_r+0x78>
 800599e:	fb0c 3202 	mla	r2, ip, r2, r3
 80059a2:	460c      	mov	r4, r1
 80059a4:	2001      	movs	r0, #1
 80059a6:	e7a6      	b.n	80058f6 <_vfiprintf_r+0xfe>
 80059a8:	2300      	movs	r3, #0
 80059aa:	3401      	adds	r4, #1
 80059ac:	9305      	str	r3, [sp, #20]
 80059ae:	4619      	mov	r1, r3
 80059b0:	f04f 0c0a 	mov.w	ip, #10
 80059b4:	4620      	mov	r0, r4
 80059b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ba:	3a30      	subs	r2, #48	; 0x30
 80059bc:	2a09      	cmp	r2, #9
 80059be:	d903      	bls.n	80059c8 <_vfiprintf_r+0x1d0>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0c6      	beq.n	8005952 <_vfiprintf_r+0x15a>
 80059c4:	9105      	str	r1, [sp, #20]
 80059c6:	e7c4      	b.n	8005952 <_vfiprintf_r+0x15a>
 80059c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059cc:	4604      	mov	r4, r0
 80059ce:	2301      	movs	r3, #1
 80059d0:	e7f0      	b.n	80059b4 <_vfiprintf_r+0x1bc>
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	462a      	mov	r2, r5
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <_vfiprintf_r+0x22c>)
 80059da:	a904      	add	r1, sp, #16
 80059dc:	4630      	mov	r0, r6
 80059de:	f3af 8000 	nop.w
 80059e2:	4607      	mov	r7, r0
 80059e4:	1c78      	adds	r0, r7, #1
 80059e6:	d1d6      	bne.n	8005996 <_vfiprintf_r+0x19e>
 80059e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ea:	07d9      	lsls	r1, r3, #31
 80059ec:	d405      	bmi.n	80059fa <_vfiprintf_r+0x202>
 80059ee:	89ab      	ldrh	r3, [r5, #12]
 80059f0:	059a      	lsls	r2, r3, #22
 80059f2:	d402      	bmi.n	80059fa <_vfiprintf_r+0x202>
 80059f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059f6:	f7ff fddc 	bl	80055b2 <__retarget_lock_release_recursive>
 80059fa:	89ab      	ldrh	r3, [r5, #12]
 80059fc:	065b      	lsls	r3, r3, #25
 80059fe:	f53f af1d 	bmi.w	800583c <_vfiprintf_r+0x44>
 8005a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a04:	e71c      	b.n	8005840 <_vfiprintf_r+0x48>
 8005a06:	ab03      	add	r3, sp, #12
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <_vfiprintf_r+0x22c>)
 8005a0e:	a904      	add	r1, sp, #16
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 f879 	bl	8005b08 <_printf_i>
 8005a16:	e7e4      	b.n	80059e2 <_vfiprintf_r+0x1ea>
 8005a18:	080061c4 	.word	0x080061c4
 8005a1c:	080061ce 	.word	0x080061ce
 8005a20:	00000000 	.word	0x00000000
 8005a24:	080057d3 	.word	0x080057d3
 8005a28:	080061ca 	.word	0x080061ca

08005a2c <_printf_common>:
 8005a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a30:	4616      	mov	r6, r2
 8005a32:	4699      	mov	r9, r3
 8005a34:	688a      	ldr	r2, [r1, #8]
 8005a36:	690b      	ldr	r3, [r1, #16]
 8005a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	bfb8      	it	lt
 8005a40:	4613      	movlt	r3, r2
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a48:	4607      	mov	r7, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	b10a      	cbz	r2, 8005a52 <_printf_common+0x26>
 8005a4e:	3301      	adds	r3, #1
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	0699      	lsls	r1, r3, #26
 8005a56:	bf42      	ittt	mi
 8005a58:	6833      	ldrmi	r3, [r6, #0]
 8005a5a:	3302      	addmi	r3, #2
 8005a5c:	6033      	strmi	r3, [r6, #0]
 8005a5e:	6825      	ldr	r5, [r4, #0]
 8005a60:	f015 0506 	ands.w	r5, r5, #6
 8005a64:	d106      	bne.n	8005a74 <_printf_common+0x48>
 8005a66:	f104 0a19 	add.w	sl, r4, #25
 8005a6a:	68e3      	ldr	r3, [r4, #12]
 8005a6c:	6832      	ldr	r2, [r6, #0]
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	dc26      	bgt.n	8005ac2 <_printf_common+0x96>
 8005a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a78:	1e13      	subs	r3, r2, #0
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	bf18      	it	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	0692      	lsls	r2, r2, #26
 8005a82:	d42b      	bmi.n	8005adc <_printf_common+0xb0>
 8005a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d01e      	beq.n	8005ad0 <_printf_common+0xa4>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	6922      	ldr	r2, [r4, #16]
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	bf02      	ittt	eq
 8005a9e:	68e5      	ldreq	r5, [r4, #12]
 8005aa0:	6833      	ldreq	r3, [r6, #0]
 8005aa2:	1aed      	subeq	r5, r5, r3
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	bf0c      	ite	eq
 8005aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aac:	2500      	movne	r5, #0
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	bfc4      	itt	gt
 8005ab2:	1a9b      	subgt	r3, r3, r2
 8005ab4:	18ed      	addgt	r5, r5, r3
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	341a      	adds	r4, #26
 8005aba:	42b5      	cmp	r5, r6
 8005abc:	d11a      	bne.n	8005af4 <_printf_common+0xc8>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e008      	b.n	8005ad4 <_printf_common+0xa8>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4638      	mov	r0, r7
 8005aca:	47c0      	blx	r8
 8005acc:	3001      	adds	r0, #1
 8005ace:	d103      	bne.n	8005ad8 <_printf_common+0xac>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad8:	3501      	adds	r5, #1
 8005ada:	e7c6      	b.n	8005a6a <_printf_common+0x3e>
 8005adc:	18e1      	adds	r1, r4, r3
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	2030      	movs	r0, #48	; 0x30
 8005ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ae6:	4422      	add	r2, r4
 8005ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005af0:	3302      	adds	r3, #2
 8005af2:	e7c7      	b.n	8005a84 <_printf_common+0x58>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4622      	mov	r2, r4
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d0e6      	beq.n	8005ad0 <_printf_common+0xa4>
 8005b02:	3601      	adds	r6, #1
 8005b04:	e7d9      	b.n	8005aba <_printf_common+0x8e>
	...

08005b08 <_printf_i>:
 8005b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	7e0f      	ldrb	r7, [r1, #24]
 8005b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b10:	2f78      	cmp	r7, #120	; 0x78
 8005b12:	4691      	mov	r9, r2
 8005b14:	4680      	mov	r8, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	469a      	mov	sl, r3
 8005b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b1e:	d807      	bhi.n	8005b30 <_printf_i+0x28>
 8005b20:	2f62      	cmp	r7, #98	; 0x62
 8005b22:	d80a      	bhi.n	8005b3a <_printf_i+0x32>
 8005b24:	2f00      	cmp	r7, #0
 8005b26:	f000 80d4 	beq.w	8005cd2 <_printf_i+0x1ca>
 8005b2a:	2f58      	cmp	r7, #88	; 0x58
 8005b2c:	f000 80c0 	beq.w	8005cb0 <_printf_i+0x1a8>
 8005b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b38:	e03a      	b.n	8005bb0 <_printf_i+0xa8>
 8005b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b3e:	2b15      	cmp	r3, #21
 8005b40:	d8f6      	bhi.n	8005b30 <_printf_i+0x28>
 8005b42:	a101      	add	r1, pc, #4	; (adr r1, 8005b48 <_printf_i+0x40>)
 8005b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005bb5 	.word	0x08005bb5
 8005b50:	08005b31 	.word	0x08005b31
 8005b54:	08005b31 	.word	0x08005b31
 8005b58:	08005b31 	.word	0x08005b31
 8005b5c:	08005b31 	.word	0x08005b31
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005b31 	.word	0x08005b31
 8005b68:	08005b31 	.word	0x08005b31
 8005b6c:	08005b31 	.word	0x08005b31
 8005b70:	08005b31 	.word	0x08005b31
 8005b74:	08005cb9 	.word	0x08005cb9
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005c73 	.word	0x08005c73
 8005b80:	08005b31 	.word	0x08005b31
 8005b84:	08005b31 	.word	0x08005b31
 8005b88:	08005cdb 	.word	0x08005cdb
 8005b8c:	08005b31 	.word	0x08005b31
 8005b90:	08005be1 	.word	0x08005be1
 8005b94:	08005b31 	.word	0x08005b31
 8005b98:	08005b31 	.word	0x08005b31
 8005b9c:	08005c7b 	.word	0x08005c7b
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	602a      	str	r2, [r5, #0]
 8005ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e09f      	b.n	8005cf4 <_printf_i+0x1ec>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	682b      	ldr	r3, [r5, #0]
 8005bb8:	0607      	lsls	r7, r0, #24
 8005bba:	f103 0104 	add.w	r1, r3, #4
 8005bbe:	6029      	str	r1, [r5, #0]
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_i+0xbe>
 8005bc2:	681e      	ldr	r6, [r3, #0]
 8005bc4:	e003      	b.n	8005bce <_printf_i+0xc6>
 8005bc6:	0646      	lsls	r6, r0, #25
 8005bc8:	d5fb      	bpl.n	8005bc2 <_printf_i+0xba>
 8005bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bce:	2e00      	cmp	r6, #0
 8005bd0:	da03      	bge.n	8005bda <_printf_i+0xd2>
 8005bd2:	232d      	movs	r3, #45	; 0x2d
 8005bd4:	4276      	negs	r6, r6
 8005bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bda:	485a      	ldr	r0, [pc, #360]	; (8005d44 <_printf_i+0x23c>)
 8005bdc:	230a      	movs	r3, #10
 8005bde:	e012      	b.n	8005c06 <_printf_i+0xfe>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	1d19      	adds	r1, r3, #4
 8005be6:	6029      	str	r1, [r5, #0]
 8005be8:	0605      	lsls	r5, r0, #24
 8005bea:	d501      	bpl.n	8005bf0 <_printf_i+0xe8>
 8005bec:	681e      	ldr	r6, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <_printf_i+0xee>
 8005bf0:	0641      	lsls	r1, r0, #25
 8005bf2:	d5fb      	bpl.n	8005bec <_printf_i+0xe4>
 8005bf4:	881e      	ldrh	r6, [r3, #0]
 8005bf6:	4853      	ldr	r0, [pc, #332]	; (8005d44 <_printf_i+0x23c>)
 8005bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2308      	moveq	r3, #8
 8005bfe:	230a      	movne	r3, #10
 8005c00:	2100      	movs	r1, #0
 8005c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c06:	6865      	ldr	r5, [r4, #4]
 8005c08:	60a5      	str	r5, [r4, #8]
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	bfa2      	ittt	ge
 8005c0e:	6821      	ldrge	r1, [r4, #0]
 8005c10:	f021 0104 	bicge.w	r1, r1, #4
 8005c14:	6021      	strge	r1, [r4, #0]
 8005c16:	b90e      	cbnz	r6, 8005c1c <_printf_i+0x114>
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	d04b      	beq.n	8005cb4 <_printf_i+0x1ac>
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c22:	fb03 6711 	mls	r7, r3, r1, r6
 8005c26:	5dc7      	ldrb	r7, [r0, r7]
 8005c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c2c:	4637      	mov	r7, r6
 8005c2e:	42bb      	cmp	r3, r7
 8005c30:	460e      	mov	r6, r1
 8005c32:	d9f4      	bls.n	8005c1e <_printf_i+0x116>
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d10b      	bne.n	8005c50 <_printf_i+0x148>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	07de      	lsls	r6, r3, #31
 8005c3c:	d508      	bpl.n	8005c50 <_printf_i+0x148>
 8005c3e:	6923      	ldr	r3, [r4, #16]
 8005c40:	6861      	ldr	r1, [r4, #4]
 8005c42:	4299      	cmp	r1, r3
 8005c44:	bfde      	ittt	le
 8005c46:	2330      	movle	r3, #48	; 0x30
 8005c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c50:	1b52      	subs	r2, r2, r5
 8005c52:	6122      	str	r2, [r4, #16]
 8005c54:	f8cd a000 	str.w	sl, [sp]
 8005c58:	464b      	mov	r3, r9
 8005c5a:	aa03      	add	r2, sp, #12
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7ff fee4 	bl	8005a2c <_printf_common>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d14a      	bne.n	8005cfe <_printf_i+0x1f6>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	b004      	add	sp, #16
 8005c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f043 0320 	orr.w	r3, r3, #32
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	4833      	ldr	r0, [pc, #204]	; (8005d48 <_printf_i+0x240>)
 8005c7c:	2778      	movs	r7, #120	; 0x78
 8005c7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	6829      	ldr	r1, [r5, #0]
 8005c86:	061f      	lsls	r7, r3, #24
 8005c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c8c:	d402      	bmi.n	8005c94 <_printf_i+0x18c>
 8005c8e:	065f      	lsls	r7, r3, #25
 8005c90:	bf48      	it	mi
 8005c92:	b2b6      	uxthmi	r6, r6
 8005c94:	07df      	lsls	r7, r3, #31
 8005c96:	bf48      	it	mi
 8005c98:	f043 0320 	orrmi.w	r3, r3, #32
 8005c9c:	6029      	str	r1, [r5, #0]
 8005c9e:	bf48      	it	mi
 8005ca0:	6023      	strmi	r3, [r4, #0]
 8005ca2:	b91e      	cbnz	r6, 8005cac <_printf_i+0x1a4>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2310      	movs	r3, #16
 8005cae:	e7a7      	b.n	8005c00 <_printf_i+0xf8>
 8005cb0:	4824      	ldr	r0, [pc, #144]	; (8005d44 <_printf_i+0x23c>)
 8005cb2:	e7e4      	b.n	8005c7e <_printf_i+0x176>
 8005cb4:	4615      	mov	r5, r2
 8005cb6:	e7bd      	b.n	8005c34 <_printf_i+0x12c>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	6826      	ldr	r6, [r4, #0]
 8005cbc:	6961      	ldr	r1, [r4, #20]
 8005cbe:	1d18      	adds	r0, r3, #4
 8005cc0:	6028      	str	r0, [r5, #0]
 8005cc2:	0635      	lsls	r5, r6, #24
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	d501      	bpl.n	8005ccc <_printf_i+0x1c4>
 8005cc8:	6019      	str	r1, [r3, #0]
 8005cca:	e002      	b.n	8005cd2 <_printf_i+0x1ca>
 8005ccc:	0670      	lsls	r0, r6, #25
 8005cce:	d5fb      	bpl.n	8005cc8 <_printf_i+0x1c0>
 8005cd0:	8019      	strh	r1, [r3, #0]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6123      	str	r3, [r4, #16]
 8005cd6:	4615      	mov	r5, r2
 8005cd8:	e7bc      	b.n	8005c54 <_printf_i+0x14c>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	681d      	ldr	r5, [r3, #0]
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7fa fa72 	bl	80001d0 <memchr>
 8005cec:	b108      	cbz	r0, 8005cf2 <_printf_i+0x1ea>
 8005cee:	1b40      	subs	r0, r0, r5
 8005cf0:	6060      	str	r0, [r4, #4]
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfc:	e7aa      	b.n	8005c54 <_printf_i+0x14c>
 8005cfe:	6923      	ldr	r3, [r4, #16]
 8005d00:	462a      	mov	r2, r5
 8005d02:	4649      	mov	r1, r9
 8005d04:	4640      	mov	r0, r8
 8005d06:	47d0      	blx	sl
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d0ad      	beq.n	8005c68 <_printf_i+0x160>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	d413      	bmi.n	8005d3a <_printf_i+0x232>
 8005d12:	68e0      	ldr	r0, [r4, #12]
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	4298      	cmp	r0, r3
 8005d18:	bfb8      	it	lt
 8005d1a:	4618      	movlt	r0, r3
 8005d1c:	e7a6      	b.n	8005c6c <_printf_i+0x164>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4632      	mov	r2, r6
 8005d22:	4649      	mov	r1, r9
 8005d24:	4640      	mov	r0, r8
 8005d26:	47d0      	blx	sl
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d09d      	beq.n	8005c68 <_printf_i+0x160>
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	9903      	ldr	r1, [sp, #12]
 8005d32:	1a5b      	subs	r3, r3, r1
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	dcf2      	bgt.n	8005d1e <_printf_i+0x216>
 8005d38:	e7eb      	b.n	8005d12 <_printf_i+0x20a>
 8005d3a:	2500      	movs	r5, #0
 8005d3c:	f104 0619 	add.w	r6, r4, #25
 8005d40:	e7f5      	b.n	8005d2e <_printf_i+0x226>
 8005d42:	bf00      	nop
 8005d44:	080061d5 	.word	0x080061d5
 8005d48:	080061e6 	.word	0x080061e6

08005d4c <__sflush_r>:
 8005d4c:	898a      	ldrh	r2, [r1, #12]
 8005d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	4605      	mov	r5, r0
 8005d54:	0710      	lsls	r0, r2, #28
 8005d56:	460c      	mov	r4, r1
 8005d58:	d458      	bmi.n	8005e0c <__sflush_r+0xc0>
 8005d5a:	684b      	ldr	r3, [r1, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	dc05      	bgt.n	8005d6c <__sflush_r+0x20>
 8005d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dc02      	bgt.n	8005d6c <__sflush_r+0x20>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	d0f9      	beq.n	8005d66 <__sflush_r+0x1a>
 8005d72:	2300      	movs	r3, #0
 8005d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d78:	682f      	ldr	r7, [r5, #0]
 8005d7a:	6a21      	ldr	r1, [r4, #32]
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	d032      	beq.n	8005de6 <__sflush_r+0x9a>
 8005d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	075a      	lsls	r2, r3, #29
 8005d86:	d505      	bpl.n	8005d94 <__sflush_r+0x48>
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	1ac0      	subs	r0, r0, r3
 8005d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d8e:	b10b      	cbz	r3, 8005d94 <__sflush_r+0x48>
 8005d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d92:	1ac0      	subs	r0, r0, r3
 8005d94:	2300      	movs	r3, #0
 8005d96:	4602      	mov	r2, r0
 8005d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d9a:	6a21      	ldr	r1, [r4, #32]
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	47b0      	blx	r6
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	d106      	bne.n	8005db4 <__sflush_r+0x68>
 8005da6:	6829      	ldr	r1, [r5, #0]
 8005da8:	291d      	cmp	r1, #29
 8005daa:	d82b      	bhi.n	8005e04 <__sflush_r+0xb8>
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <__sflush_r+0x108>)
 8005dae:	410a      	asrs	r2, r1
 8005db0:	07d6      	lsls	r6, r2, #31
 8005db2:	d427      	bmi.n	8005e04 <__sflush_r+0xb8>
 8005db4:	2200      	movs	r2, #0
 8005db6:	6062      	str	r2, [r4, #4]
 8005db8:	04d9      	lsls	r1, r3, #19
 8005dba:	6922      	ldr	r2, [r4, #16]
 8005dbc:	6022      	str	r2, [r4, #0]
 8005dbe:	d504      	bpl.n	8005dca <__sflush_r+0x7e>
 8005dc0:	1c42      	adds	r2, r0, #1
 8005dc2:	d101      	bne.n	8005dc8 <__sflush_r+0x7c>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b903      	cbnz	r3, 8005dca <__sflush_r+0x7e>
 8005dc8:	6560      	str	r0, [r4, #84]	; 0x54
 8005dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dcc:	602f      	str	r7, [r5, #0]
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d0c9      	beq.n	8005d66 <__sflush_r+0x1a>
 8005dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d002      	beq.n	8005de0 <__sflush_r+0x94>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7ff fbea 	bl	80055b4 <_free_r>
 8005de0:	2000      	movs	r0, #0
 8005de2:	6360      	str	r0, [r4, #52]	; 0x34
 8005de4:	e7c0      	b.n	8005d68 <__sflush_r+0x1c>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b0      	blx	r6
 8005dec:	1c41      	adds	r1, r0, #1
 8005dee:	d1c8      	bne.n	8005d82 <__sflush_r+0x36>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0c5      	beq.n	8005d82 <__sflush_r+0x36>
 8005df6:	2b1d      	cmp	r3, #29
 8005df8:	d001      	beq.n	8005dfe <__sflush_r+0xb2>
 8005dfa:	2b16      	cmp	r3, #22
 8005dfc:	d101      	bne.n	8005e02 <__sflush_r+0xb6>
 8005dfe:	602f      	str	r7, [r5, #0]
 8005e00:	e7b1      	b.n	8005d66 <__sflush_r+0x1a>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	e7ad      	b.n	8005d68 <__sflush_r+0x1c>
 8005e0c:	690f      	ldr	r7, [r1, #16]
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	d0a9      	beq.n	8005d66 <__sflush_r+0x1a>
 8005e12:	0793      	lsls	r3, r2, #30
 8005e14:	680e      	ldr	r6, [r1, #0]
 8005e16:	bf08      	it	eq
 8005e18:	694b      	ldreq	r3, [r1, #20]
 8005e1a:	600f      	str	r7, [r1, #0]
 8005e1c:	bf18      	it	ne
 8005e1e:	2300      	movne	r3, #0
 8005e20:	eba6 0807 	sub.w	r8, r6, r7
 8005e24:	608b      	str	r3, [r1, #8]
 8005e26:	f1b8 0f00 	cmp.w	r8, #0
 8005e2a:	dd9c      	ble.n	8005d66 <__sflush_r+0x1a>
 8005e2c:	6a21      	ldr	r1, [r4, #32]
 8005e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e30:	4643      	mov	r3, r8
 8005e32:	463a      	mov	r2, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b0      	blx	r6
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	dc06      	bgt.n	8005e4a <__sflush_r+0xfe>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	e78e      	b.n	8005d68 <__sflush_r+0x1c>
 8005e4a:	4407      	add	r7, r0
 8005e4c:	eba8 0800 	sub.w	r8, r8, r0
 8005e50:	e7e9      	b.n	8005e26 <__sflush_r+0xda>
 8005e52:	bf00      	nop
 8005e54:	dfbffffe 	.word	0xdfbffffe

08005e58 <_fflush_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	690b      	ldr	r3, [r1, #16]
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	b913      	cbnz	r3, 8005e68 <_fflush_r+0x10>
 8005e62:	2500      	movs	r5, #0
 8005e64:	4628      	mov	r0, r5
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	b118      	cbz	r0, 8005e72 <_fflush_r+0x1a>
 8005e6a:	6a03      	ldr	r3, [r0, #32]
 8005e6c:	b90b      	cbnz	r3, 8005e72 <_fflush_r+0x1a>
 8005e6e:	f7ff fa9b 	bl	80053a8 <__sinit>
 8005e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f3      	beq.n	8005e62 <_fflush_r+0xa>
 8005e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e7c:	07d0      	lsls	r0, r2, #31
 8005e7e:	d404      	bmi.n	8005e8a <_fflush_r+0x32>
 8005e80:	0599      	lsls	r1, r3, #22
 8005e82:	d402      	bmi.n	8005e8a <_fflush_r+0x32>
 8005e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e86:	f7ff fb93 	bl	80055b0 <__retarget_lock_acquire_recursive>
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	f7ff ff5d 	bl	8005d4c <__sflush_r>
 8005e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e94:	07da      	lsls	r2, r3, #31
 8005e96:	4605      	mov	r5, r0
 8005e98:	d4e4      	bmi.n	8005e64 <_fflush_r+0xc>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	059b      	lsls	r3, r3, #22
 8005e9e:	d4e1      	bmi.n	8005e64 <_fflush_r+0xc>
 8005ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea2:	f7ff fb86 	bl	80055b2 <__retarget_lock_release_recursive>
 8005ea6:	e7dd      	b.n	8005e64 <_fflush_r+0xc>

08005ea8 <__swbuf_r>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	460e      	mov	r6, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b118      	cbz	r0, 8005eba <__swbuf_r+0x12>
 8005eb2:	6a03      	ldr	r3, [r0, #32]
 8005eb4:	b90b      	cbnz	r3, 8005eba <__swbuf_r+0x12>
 8005eb6:	f7ff fa77 	bl	80053a8 <__sinit>
 8005eba:	69a3      	ldr	r3, [r4, #24]
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	071a      	lsls	r2, r3, #28
 8005ec2:	d525      	bpl.n	8005f10 <__swbuf_r+0x68>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b31b      	cbz	r3, 8005f10 <__swbuf_r+0x68>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	6922      	ldr	r2, [r4, #16]
 8005ecc:	1a98      	subs	r0, r3, r2
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	b2f6      	uxtb	r6, r6
 8005ed2:	4283      	cmp	r3, r0
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	dc04      	bgt.n	8005ee2 <__swbuf_r+0x3a>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7ff ffbc 	bl	8005e58 <_fflush_r>
 8005ee0:	b9e0      	cbnz	r0, 8005f1c <__swbuf_r+0x74>
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	701e      	strb	r6, [r3, #0]
 8005ef0:	6962      	ldr	r2, [r4, #20]
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d004      	beq.n	8005f02 <__swbuf_r+0x5a>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	07db      	lsls	r3, r3, #31
 8005efc:	d506      	bpl.n	8005f0c <__swbuf_r+0x64>
 8005efe:	2e0a      	cmp	r6, #10
 8005f00:	d104      	bne.n	8005f0c <__swbuf_r+0x64>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	f7ff ffa7 	bl	8005e58 <_fflush_r>
 8005f0a:	b938      	cbnz	r0, 8005f1c <__swbuf_r+0x74>
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f10:	4621      	mov	r1, r4
 8005f12:	4628      	mov	r0, r5
 8005f14:	f000 f806 	bl	8005f24 <__swsetup_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d0d5      	beq.n	8005ec8 <__swbuf_r+0x20>
 8005f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f20:	e7f4      	b.n	8005f0c <__swbuf_r+0x64>
	...

08005f24 <__swsetup_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <__swsetup_r+0xac>)
 8005f28:	4605      	mov	r5, r0
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	b118      	cbz	r0, 8005f38 <__swsetup_r+0x14>
 8005f30:	6a03      	ldr	r3, [r0, #32]
 8005f32:	b90b      	cbnz	r3, 8005f38 <__swsetup_r+0x14>
 8005f34:	f7ff fa38 	bl	80053a8 <__sinit>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f3e:	0718      	lsls	r0, r3, #28
 8005f40:	d422      	bmi.n	8005f88 <__swsetup_r+0x64>
 8005f42:	06d9      	lsls	r1, r3, #27
 8005f44:	d407      	bmi.n	8005f56 <__swsetup_r+0x32>
 8005f46:	2309      	movs	r3, #9
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e034      	b.n	8005fc0 <__swsetup_r+0x9c>
 8005f56:	0758      	lsls	r0, r3, #29
 8005f58:	d512      	bpl.n	8005f80 <__swsetup_r+0x5c>
 8005f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f5c:	b141      	cbz	r1, 8005f70 <__swsetup_r+0x4c>
 8005f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f62:	4299      	cmp	r1, r3
 8005f64:	d002      	beq.n	8005f6c <__swsetup_r+0x48>
 8005f66:	4628      	mov	r0, r5
 8005f68:	f7ff fb24 	bl	80055b4 <_free_r>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6363      	str	r3, [r4, #52]	; 0x34
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6063      	str	r3, [r4, #4]
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f043 0308 	orr.w	r3, r3, #8
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	b94b      	cbnz	r3, 8005fa0 <__swsetup_r+0x7c>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f96:	d003      	beq.n	8005fa0 <__swsetup_r+0x7c>
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 f850 	bl	8006040 <__smakebuf_r>
 8005fa0:	89a0      	ldrh	r0, [r4, #12]
 8005fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fa6:	f010 0301 	ands.w	r3, r0, #1
 8005faa:	d00a      	beq.n	8005fc2 <__swsetup_r+0x9e>
 8005fac:	2300      	movs	r3, #0
 8005fae:	60a3      	str	r3, [r4, #8]
 8005fb0:	6963      	ldr	r3, [r4, #20]
 8005fb2:	425b      	negs	r3, r3
 8005fb4:	61a3      	str	r3, [r4, #24]
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	b943      	cbnz	r3, 8005fcc <__swsetup_r+0xa8>
 8005fba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fbe:	d1c4      	bne.n	8005f4a <__swsetup_r+0x26>
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	0781      	lsls	r1, r0, #30
 8005fc4:	bf58      	it	pl
 8005fc6:	6963      	ldrpl	r3, [r4, #20]
 8005fc8:	60a3      	str	r3, [r4, #8]
 8005fca:	e7f4      	b.n	8005fb6 <__swsetup_r+0x92>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e7f7      	b.n	8005fc0 <__swsetup_r+0x9c>
 8005fd0:	20000064 	.word	0x20000064

08005fd4 <_sbrk_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d06      	ldr	r5, [pc, #24]	; (8005ff0 <_sbrk_r+0x1c>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	f7fb f928 	bl	8001234 <_sbrk>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_sbrk_r+0x1a>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_sbrk_r+0x1a>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	200003ec 	.word	0x200003ec

08005ff4 <__swhatbuf_r>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	b096      	sub	sp, #88	; 0x58
 8006000:	4615      	mov	r5, r2
 8006002:	461e      	mov	r6, r3
 8006004:	da0d      	bge.n	8006022 <__swhatbuf_r+0x2e>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f013 0f80 	tst.w	r3, #128	; 0x80
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	bf0c      	ite	eq
 8006012:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006016:	2340      	movne	r3, #64	; 0x40
 8006018:	2000      	movs	r0, #0
 800601a:	6031      	str	r1, [r6, #0]
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	b016      	add	sp, #88	; 0x58
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	466a      	mov	r2, sp
 8006024:	f000 f848 	bl	80060b8 <_fstat_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	dbec      	blt.n	8006006 <__swhatbuf_r+0x12>
 800602c:	9901      	ldr	r1, [sp, #4]
 800602e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006032:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006036:	4259      	negs	r1, r3
 8006038:	4159      	adcs	r1, r3
 800603a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800603e:	e7eb      	b.n	8006018 <__swhatbuf_r+0x24>

08006040 <__smakebuf_r>:
 8006040:	898b      	ldrh	r3, [r1, #12]
 8006042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006044:	079d      	lsls	r5, r3, #30
 8006046:	4606      	mov	r6, r0
 8006048:	460c      	mov	r4, r1
 800604a:	d507      	bpl.n	800605c <__smakebuf_r+0x1c>
 800604c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	2301      	movs	r3, #1
 8006056:	6163      	str	r3, [r4, #20]
 8006058:	b002      	add	sp, #8
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	ab01      	add	r3, sp, #4
 800605e:	466a      	mov	r2, sp
 8006060:	f7ff ffc8 	bl	8005ff4 <__swhatbuf_r>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	4605      	mov	r5, r0
 8006068:	4630      	mov	r0, r6
 800606a:	f7ff fb0f 	bl	800568c <_malloc_r>
 800606e:	b948      	cbnz	r0, 8006084 <__smakebuf_r+0x44>
 8006070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006074:	059a      	lsls	r2, r3, #22
 8006076:	d4ef      	bmi.n	8006058 <__smakebuf_r+0x18>
 8006078:	f023 0303 	bic.w	r3, r3, #3
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	81a3      	strh	r3, [r4, #12]
 8006082:	e7e3      	b.n	800604c <__smakebuf_r+0xc>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	6020      	str	r0, [r4, #0]
 8006088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	9b00      	ldr	r3, [sp, #0]
 8006090:	6163      	str	r3, [r4, #20]
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	6120      	str	r0, [r4, #16]
 8006096:	b15b      	cbz	r3, 80060b0 <__smakebuf_r+0x70>
 8006098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f81d 	bl	80060dc <_isatty_r>
 80060a2:	b128      	cbz	r0, 80060b0 <__smakebuf_r+0x70>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	431d      	orrs	r5, r3
 80060b4:	81a5      	strh	r5, [r4, #12]
 80060b6:	e7cf      	b.n	8006058 <__smakebuf_r+0x18>

080060b8 <_fstat_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d07      	ldr	r5, [pc, #28]	; (80060d8 <_fstat_r+0x20>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	4611      	mov	r1, r2
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	f7fb f88c 	bl	80011e2 <_fstat>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d102      	bne.n	80060d4 <_fstat_r+0x1c>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	b103      	cbz	r3, 80060d4 <_fstat_r+0x1c>
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	bd38      	pop	{r3, r4, r5, pc}
 80060d6:	bf00      	nop
 80060d8:	200003ec 	.word	0x200003ec

080060dc <_isatty_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4d06      	ldr	r5, [pc, #24]	; (80060f8 <_isatty_r+0x1c>)
 80060e0:	2300      	movs	r3, #0
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	f7fb f88b 	bl	8001202 <_isatty>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_isatty_r+0x1a>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_isatty_r+0x1a>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	200003ec 	.word	0x200003ec

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
